/* Generated code for Python source for module 'tweepy.api'
 * created by Nuitka version 0.5.28.2
 *
 * This code is in part copyright 2017 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The _module_tweepy$api is a Python object pointer of module type. */

/* Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_tweepy$api;
PyDictObject *moduledict_tweepy$api;

/* The module constants used, if any. */
static PyObject *const_list_8848fc29ad2337b8fbbe41e548230315_list;
extern PyObject *const_str_plain_compression;
extern PyObject *const_str_plain_headers;
static PyObject *const_list_4ffdfb7f6ed06e41d0c95665fbb8d79c_list;
static PyObject *const_list_str_plain_id_str_plain_cursor_str_plain_stringify_ids_list;
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain___name__;
extern PyObject *const_str_plain_from;
static PyObject *const_list_str_plain_device_list;
static PyObject *const_list_str_plain_slug_list;
static PyObject *const_str_digest_d890a4105d3fed770f9977b8a97975d9;
extern PyObject *const_str_plain_locale;
extern PyObject *const_dict_empty;
static PyObject *const_str_digest_3c83afcc81322c46ff39d5c97b1e8ffa;
static PyObject *const_str_digest_58a451be096e59ac1d5cb6c2503f32d6;
static PyObject *const_str_digest_7e81bd2cc3dfbb88aa51a3e3dd08aa40;
static PyObject *const_str_plain_report_spam;
extern PyObject *const_str_plain_POST;
static PyObject *const_str_plain_hide_media;
extern PyObject *const_str_plain_required;
static PyObject *const_str_digest_ac57a821e7902d5db676dc5d1402fc9d;
extern PyObject *const_str_plain_encode;
static PyObject *const_str_digest_5b9f75cb04ed3ca5c06b6e427ab1e3bf;
static PyObject *const_str_digest_314b2037f0172ee47db83851acad0a71;
static PyObject *const_str_plain_show_list_subscriber;
extern PyObject *const_int_pos_800;
extern PyObject *const_str_plain_media;
static PyObject *const_str_plain_send_direct_message;
static PyObject *const_str_digest_f6e3f54103d14d447757123fc9e1f5df;
static PyObject *const_str_digest_90c33e1e7620f71afbdafe4c6e96b721;
static PyObject *const_str_digest_6822502d2bb78ed129a9669cccf02540;
static PyObject *const_str_digest_ef5e9a328337a93a03ee8167ff8bd42c;
extern PyObject *const_str_plain_since_id;
static PyObject *const_str_plain_display_coordinates;
extern PyObject *const_str_plain_mode;
static PyObject *const_str_digest_88bde37fb2dccbb16c767d94d0909116;
extern PyObject *const_str_plain_os;
static PyObject *const_str_digest_993d569ecc312035f9a70dad8655dcaa;
static PyObject *const_str_digest_010d1cf9526798a6ed37cb0888b74a79;
static PyObject *const_str_digest_8f23e8f6c745b7f0856f77415858d0cd;
static PyObject *const_str_plain_get_user;
static PyObject *const_str_digest_1adf8b93300bc464ffb01bce2ea138cc;
extern PyObject *const_str_plain_retry_errors;
static PyObject *const_str_digest_6d2d6f0d1e83b0156232bc0179b43943;
extern PyObject *const_tuple_none_none_none_tuple;
extern PyObject *const_str_plain_false;
static PyObject *const_str_digest_618a7ffcb2f21635e473281c4491182b;
static PyObject *const_str_digest_f11a975b85dd2140f7467c867a10608a;
static PyObject *const_str_digest_5890cfaec008d2ceeff0b5d3ac040176;
extern PyObject *const_str_plain_me;
static PyObject *const_list_4532f42c3637660542f2c1690e08c401_list;
extern PyObject *const_str_plain_timeout;
static PyObject *const_str_plain_saved_searches;
static PyObject *const_str_digest_9afabad83130b9166303486347b65f20;
static PyObject *const_list_a1a9f2f5d0c41ef453455361f69a4bee_list;
static PyObject *const_str_plain_trends_available;
extern PyObject *const_str_plain_use_cache;
static PyObject *const_str_digest_5d7ae3fa69d744cee0e10ee29f7a8b12;
static PyObject *const_str_digest_69ded2fb3d38062d248cc7b18d3e0dfd;
static PyObject *const_str_digest_940c59cbf0cf98f3b23e9fdbb8bef726;
extern PyObject *const_str_plain_upload_api;
extern PyObject *const_str_plain_post_data;
extern PyObject *const_str_plain_place;
static PyObject *const_str_digest_f42d4f0cb1864f075fb9e4facaba82c1;
static PyObject *const_str_digest_de8a49f9d0aaa0c92bf7532265f3c634;
extern PyObject *const_str_plain_ModelParser;
static PyObject *const_str_digest_c8f3a67339eebb2eb755bd394034951d;
static PyObject *const_str_digest_f216853b1486a5e2a12c853e438c42e9;
static PyObject *const_str_digest_6dd07332cf76e0d6e289d20b910e503a;
static PyObject *const_str_plain_target_id;
extern PyObject *const_tuple_int_0_int_pos_2_tuple;
static PyObject *const_list_4f401a447d32604f8e859b68c64f2b68_list;
static PyObject *const_str_digest_93055e87ecf6ea7a7e144217536e9ada;
static PyObject *const_str_digest_62658d987da2bb3fc3af438e9a683af5;
extern PyObject *const_str_plain_path;
static PyObject *const_str_plain_show_friendship;
extern PyObject *const_str_plain_six;
static PyObject *const_str_digest_e793a5e7d8221c4160e8bdae1c765e52;
static PyObject *const_str_digest_adebd5f65a028981f8da63150ee1aa02;
extern PyObject *const_str_digest_2375a74133faa9eebe03907638f044f5;
static PyObject *const_str_digest_0afff95a565072dacd82ab1d7ad997d1;
static PyObject *const_str_digest_fb0627b65aa4e127c274b96bca3f852b;
extern PyObject *const_str_plain_Parser;
static PyObject *const_str_digest_c3f9e5e7653522b8aaa931fd1de47344;
static PyObject *const_list_c9f02c3376521f0c5c89f45b748b40b4_list;
static PyObject *const_str_plain__remove_list_members;
static PyObject *const_str_plain_mentions_timeline;
extern PyObject *const_int_pos_401;
static PyObject *const_str_digest_e4e2d408ab774c70222da3d384b38e70;
static PyObject *const_str_digest_5f62b8f8eb5b756b9c9b3266bd12324c;
static PyObject *const_str_digest_51356df55ffc9106e99ddd54fd3883d2;
static PyObject *const_str_digest_f63ba4ec9e6291c73d971dd0bed23a4f;
static PyObject *const_list_ee9d2aecc5e5f789a0f3e231695baf60_list;
static PyObject *const_str_digest_e8de18a2c60b692789169d0ae81d17ed;
extern PyObject *const_str_plain_destroy_status;
static PyObject *const_str_digest_e24c29d146882f162e3c5517875d43fc;
extern PyObject *const_str_plain___loader__;
static PyObject *const_str_digest_679314a5b52d2d4f6c06e7d9974468be;
extern PyObject *const_str_plain_name;
static PyObject *const_str_digest_752d511796b225c99ae604232ccad303;
static PyObject *const_str_digest_76d28dde72939cf9701efb06feae402b;
static PyObject *const_str_digest_1769d5d3970875d9351040fd0d1717c7;
static PyObject *const_str_digest_6d3b1189959672cf026553404a64f01a;
static PyObject *const_str_digest_4f022903b2372914fc4dddf5ccb3c018;
static PyObject *const_str_digest_048277f7b199789742091b45301038b4;
static PyObject *const_str_digest_eb89ecef1ba53549c1579b18265b3c47;
static PyObject *const_str_digest_ec185a7b7b812ad0e9ad581b07748f4d;
extern PyObject *const_str_plain_proxy;
extern PyObject *const_str_digest_3c9527fc53ea2272c2080ca035d6631c;
static PyObject *const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple;
static PyObject *const_str_digest_0a6c3d56c41671a9f36b2def2d826064;
static PyObject *const_str_digest_11e54fbb87091e89143b4323f6712ef8;
static PyObject *const_str_plain_sleep_time_enabled;
static PyObject *const_str_digest_eefe8ec72dc1a37e7325cc8109f0417c;
static PyObject *const_str_digest_fa841d19ecb669e6d9bf4f0e93bd89c3;
static PyObject *const_str_digest_bf1d9bf19d9789f47c21804da3de9103;
static PyObject *const_str_digest_1b3832fbfe9667539901f18ab67148eb;
extern PyObject *const_str_plain_ids;
extern PyObject *const_tuple_int_0_tuple;
extern PyObject *const_str_digest_6d6a615162e89eb148ba9bf8dbfc06d3;
static PyObject *const_str_plain_parser_type;
static PyObject *const_str_plain_friendships_outgoing;
static PyObject *const_str_digest_627fd97fa680e03f6d71777f60d9650d;
extern PyObject *const_str_plain_since;
extern PyObject *const_str_plain_slug;
extern PyObject *const_str_plain_map;
static PyObject *const_str_plain_resources;
static PyObject *const_str_digest_97c00c9e1f11f77b4fb3e9b1da4dc679;
extern PyObject *const_str_digest_c075052d723d6707083e869a0e3659bb;
static PyObject *const_str_digest_b05664714ef0894e0ecf4d15ddd9b73f;
static PyObject *const_str_digest_41b8e4be2ca8dfc34d03e9417c0454cd;
static PyObject *const_str_digest_0ffd4a62a876b9c87d10a1285066ea97;
extern PyObject *const_str_plain_pop;
extern PyObject *const_int_0;
static PyObject *const_str_digest_a5ded017a4feffba94af991ba2081c4b;
static PyObject *const_str_digest_57f30390d1d25fb7071d2399b5164490;
static PyObject *const_list_f1ef68426670996528bdbae542cd9d93_list;
static PyObject *const_str_plain_retweeters;
extern PyObject *const_str_plain_response;
extern PyObject *const_str_plain_followers;
extern PyObject *const_str_plain_friendship;
static PyObject *const_str_plain_get_list;
static PyObject *const_tuple_31d6960f5d61b0aaeb35f1386bf84e23_tuple;
extern PyObject *const_str_plain_location;
static PyObject *const_str_digest_fd84b510bbae67ca87724f2fcd7ec268;
static PyObject *const_int_pos_3072;
extern PyObject *const_str_plain_get_username;
static PyObject *const_str_digest_70cf2b1adfa2d515ce9b8dafe4c64adf;
static PyObject *const_str_digest_d96020b03f4161fd4f202922123c709b;
static PyObject *const_str_digest_b6e4754fd0cbabab1c207ac40c2843f7;
static PyObject *const_str_digest_f94b53fcb401235f7ace70e5b13054dc;
static PyObject *const_str_digest_876e75199bc5892619186204715a8e20;
static PyObject *const_str_digest_806c7420fd0e313d1ccd18fe57392a0d;
extern PyObject *const_str_plain___cached__;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_str_plain_rate_limit_status;
static PyObject *const_str_digest_61274f59211cf6fa7804d5e68a2e4f96;
static PyObject *const_str_digest_dd2d86ce4450b61edec967574b1822c9;
static PyObject *const_str_digest_09063442f5d7a61eda180413305d13a2;
static PyObject *const_str_digest_49a107c934b1e01fce7abf772b8589fb;
static PyObject *const_str_plain_configuration;
static PyObject *const_str_digest_b84327bf93452c9d13d6434d17939b92;
static PyObject *const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple;
extern PyObject *const_str_plain_update_list;
static PyObject *const_str_digest_12113c76ab4765bf100194e9994b2512;
static PyObject *const_str_digest_7560d02bf5d90db74ca7f0c4d527a1ca;
static PyObject *const_str_digest_69bfcde34d4fb308921326ac50614cfe;
static PyObject *const_str_digest_d440efcf9ba32d6dd20ba6ea4dbf7f57;
static PyObject *const_str_digest_cc7cea676c32de07a5f53327a5a8ca99;
static PyObject *const_list_f5255a11d171c4989cf9f14990c23154_list;
static PyObject *const_str_digest_3d7d78975cbc97deb5aee4bbf06211bd;
extern PyObject *const_str_plain_getsize;
extern PyObject *const_str_plain___prepare__;
extern PyObject *const_str_plain_url;
static PyObject *const_str_plain_geo_search;
extern PyObject *const_str_plain_destroy_list;
static PyObject *const_list_4efdb2a1b3943b68db2f85e4d8bf5c7e_list;
static PyObject *const_str_plain_stringify_ids;
static PyObject *const_str_digest_3e80c5f8e73ca34db6df5f1a23806bae;
static PyObject *const_tuple_14eb4b02b805bf451178e08eb9276158_tuple;
static PyObject *const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple;
static PyObject *const_str_digest_4693b8aa0fb9b1af207c1b5dd336d17e;
extern PyObject *const_str_plain_kwargs;
static PyObject *const_str_plain_trim_user;
static PyObject *const_str_digest_89a46b5b954d4eba33b465f9747b1236;
extern PyObject *const_str_plain_lists_subscriptions;
extern PyObject *const_str_plain_retry_count;
extern PyObject *const_str_plain_in_reply_to_status_id;
static PyObject *const_str_plain_BOUNDARY;
static PyObject *const_str_digest_8b8edd03bd68d44df06e8680bbaa789f;
extern PyObject *const_str_plain_format;
static PyObject *const_str_digest_2a6300ad0f8eaa16a28378c40783766e;
static PyObject *const_str_digest_4282f31a16ee073ae61050450a3d6e84;
static PyObject *const_str_plain_max_results;
static PyObject *const_str_digest_dc4f12d70665d18fac49e3f3cf269d66;
static PyObject *const_str_digest_99f5b82720d7bb02d0d08cc54ca4f235;
static PyObject *const_str_digest_9b87ba90932f25b73a849a8a46596748;
static PyObject *const_str_digest_fce7ae9dd7c578af453274d619682b8a;
static PyObject *const_str_plain_file_type;
static PyObject *const_str_digest_2a8b91c605f76de4e74f76fa376c4e0e;
static PyObject *const_list_str_plain_id_list;
static PyObject *const_str_digest_a4970f68db19567c321774b7e4800ae9;
static PyObject *const_str_digest_e3687a37b686bac6a320437979b9bbdb;
static PyObject *const_str_digest_9aee88b4dd118d648a16a63aa71b8b4a;
static PyObject *const_str_digest_6820f38b9cf4f6f75cc3c87e6e91f83d;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain_retweet;
static PyObject *const_str_plain_trends_place;
static PyObject *const_str_plain_create_list;
static PyObject *const_str_digest_28f8101301a52289374e84dfddbc77c7;
static PyObject *const_str_digest_178b9015b8b333fe13bcaeb3c0163b14;
static PyObject *const_str_digest_61a5babeef606f6faa0f7b3dc0cd5558;
extern PyObject *const_str_plain_destroy_saved_search;
static PyObject *const_str_plain_retweets_of_me;
extern PyObject *const_str_plain_seek;
static PyObject *const_str_plain_list_id;
extern PyObject *const_str_plain_image;
static PyObject *const_str_plain_time_zone;
static PyObject *const_str_digest_5f2c6d8a28ef29a6af1af13f844c89ff;
extern PyObject *const_str_plain_TweepError;
extern PyObject *const_str_plain_allowed_param;
extern PyObject *const_str_plain_category;
static PyObject *const_str_plain_profile_link_color;
static PyObject *const_list_d09a283f1db5a3b49eee78501b208dc2_list;
static PyObject *const_str_digest_b0efb64b0358cb0119f72d953ff03f37;
static PyObject *const_str_digest_95f3e76ebd9ac52609ab7456ea730325;
static PyObject *const_str_digest_4ac31e6c9eb193f63b1820b788144c9e;
extern PyObject *const_str_plain_bind_api;
static PyObject *const_str_plain_update_profile_background_image;
extern PyObject *const_str_plain_read;
static PyObject *const_list_d067e0399662921590a235ca4f8a110c_list;
static PyObject *const_str_digest_da006593f0dd68ed058b4d90bf10d19d;
extern PyObject *const_str_plain_cache;
static PyObject *const_str_digest_1a2aee67d826c7f4aeaaf9878557cd76;
static PyObject *const_str_digest_62baebbc7c7dda5720aa4ae63e7e7223;
static PyObject *const_str_digest_e66eee9a1d5e3481bb822c6b5ab3ca24;
extern PyObject *const_str_plain_until;
static PyObject *const_str_digest_8d3dfb74b523bb60460f2e4d68728f6c;
static PyObject *const_str_digest_38c68a808cc6d2076078b11180ca699c;
static PyObject *const_str_plain_sent_direct_messages;
static PyObject *const_str_digest_622a4b6cfe6b5758397e4f2b9d5b4ffa;
extern PyObject *const_str_plain_close;
static PyObject *const_str_plain_set_settings;
extern PyObject *const_str_plain_page;
static PyObject *const_str_digest_75443704c119c988300dd0b1474ba05b;
static PyObject *const_str_plain_search_users;
extern PyObject *const_str_plain_create_favorite;
extern PyObject *const_str_plain___qualname__;
static PyObject *const_list_953985fbe3b42e6dd3b0fd228fd13663_list;
static PyObject *const_str_plain_actual;
extern PyObject *const_str_plain_wait_on_rate_limit;
extern PyObject *const_str_digest_58ab37ac2c9f453dd3b8cd2f61be2841;
static PyObject *const_str_plain__pack_image;
static PyObject *const_str_plain_get_direct_message;
extern PyObject *const_str_plain_long;
static PyObject *const_str_digest_09306c17e3aba90fd078f5b1d7d00ced;
static PyObject *const_str_plain_offset_left;
static PyObject *const_str_plain_target_screen_name;
static PyObject *const_str_digest_f4e5d5ed84ab6513f0d24acff4d86a02;
static PyObject *const_str_plain_get_settings;
static PyObject *const_str_digest_9f5a3c926723ef90ae0fb2c680781661;
extern PyObject *const_str_plain_e;
static PyObject *const_str_digest_8cef34bdcaae6ce12293342dc0396ca1;
static PyObject *const_str_digest_e8503bbb3a47258099b6fda53eaf8cdb;
static PyObject *const_list_51ca9f06c42bffed4c486b4a568f9a5a_list;
static PyObject *const_str_plain_suggested_users;
extern PyObject *const_str_plain_blocks;
static PyObject *const_str_plain_granularity;
extern PyObject *const_str_plain_lists_memberships;
extern PyObject *const_str_plain_destroy_friendship;
static PyObject *const_str_digest_e2b8a1b14aae09068e870c9f25377930;
static PyObject *const_str_plain_related_results;
static PyObject *const_str_digest_e65e32e1ad5c89a52e13399091279061;
static PyObject *const_list_str_plain_id_str_plain_count_list;
static PyObject *const_list_07b71efc5fed6e0a103510e3cd63c4b6_list;
static PyObject *const_str_digest_38b026e8371d9d15960c8cfa907bf570;
static PyObject *const_str_digest_2799ae5a37e5176e4c8ea86ea9b7d7b7;
static PyObject *const_str_plain_screen_names;
extern PyObject *const_str_plain_search_results;
extern PyObject *const_str_plain_error;
extern PyObject *const_int_pos_60;
static PyObject *const_str_plain_media_ids;
extern PyObject *const_str_plain_saved_search;
static PyObject *const_str_digest_6225f9cb75d4bac9a74f5302c2a9f5bb;
static PyObject *const_list_str_plain_slug_str_plain_lang_list;
static PyObject *const_str_plain_result_type;
static PyObject *const_str_digest_1531cf2fd92dcbe136b6a129607467b6;
static PyObject *const_str_digest_d496f0569f91c4bcf1eca7ff6015a153;
static PyObject *const_str_digest_f748c991231b225b914a226867fd6566;
extern PyObject *const_str_plain_ip;
static PyObject *const_str_digest_bc5f79134ba4cfb79d1b4fcf5bd87e3c;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_lang;
static PyObject *const_str_digest_23c932ce2ac0ec47fbfdaf86834d80dc;
static PyObject *const_str_digest_48775b7cf7a6c2dce1aac8aff7fac7c2;
static PyObject *const_str_digest_e31af3168fd647c07ddafd143e1fba26;
static PyObject *const_list_4669f2659a80dca6b20776d4ec5002eb_list;
static PyObject *const_str_digest_12dda58c2026f49339f0b3c04a296696;
static PyObject *const_str_plain_update_with_media;
extern PyObject *const_str_plain_retry_delay;
static PyObject *const_tuple_str_digest_fd84b510bbae67ca87724f2fcd7ec268_tuple;
static PyObject *const_str_digest_2fc806586bf24e0d8686fe872113f7fb;
static PyObject *const_str_digest_320e6028e3b2febfc1c8b575919cf6b2;
extern PyObject *const_str_plain_API;
static PyObject *const_str_digest_445b8e5a611c4c0acbaa152db22975b7;
extern PyObject *const_str_plain_text;
extern PyObject *const_str_plain_tile;
extern PyObject *const_str_plain_relationship;
extern PyObject *const_str_digest_4fe4e33419813bebd8b0147aaca0d197;
static PyObject *const_tuple_str_plain_self_str_plain_kargs_str_plain_e_tuple;
static PyObject *const_str_digest_28988e33ed956abd088af722965b5d5c;
static PyObject *const_str_digest_612580cd99bdcefd40ed2c7188948383;
static PyObject *const_list_str_plain_resources_list;
static PyObject *const_str_plain_get_oembed;
static PyObject *const_str_digest_a5548bd73b87e0bf1e4224d51f1eea39;
static PyObject *const_list_str_plain_name_str_plain_mode_str_plain_description_list;
static PyObject *const_str_digest_cf4521ce8156b19febb1fb5c3b43f84a;
static PyObject *const_str_digest_54cd893de85c8288a516e5399c2f8115;
static PyObject *const_str_plain_add_list_members;
static PyObject *const_str_digest_b723fb08dbad63650f46365a24739dde;
static PyObject *const_str_digest_592540e97118d888b37a5ba8e2e119aa;
static PyObject *const_str_digest_afe426a59704faec283b2695bed0e507;
static PyObject *const_str_digest_dca79e5707bd37e5dedf4665b0ef79ed;
static PyObject *const_str_plain_update_profile;
extern PyObject *const_str_digest_8f8266b0511b01bec41e7a400426b34f;
static PyObject *const_list_3fb2effcea21da8b12b461e5f29d68b3_list;
static PyObject *const_str_digest_483bc9ff574d808ea4774e642ac34ecb;
static PyObject *const_str_plain_blocks_ids;
static PyObject *const_str_digest_999b5d4076cb6644e3349e385587cb08;
extern PyObject *const_str_plain_print_function;
extern PyObject *const_str_plain_create_friendship;
extern PyObject *const_str_plain_add_list_member;
extern PyObject *const_str_plain_to;
static PyObject *const_str_digest_b86cd2eb879404fb8e2b90690dc10fc6;
static PyObject *const_str_plain_source_id;
static PyObject *const_str_digest_4de63f19b057aa18bbf6574ef53a17d0;
static PyObject *const_str_digest_571fa9d0a9ad88b0bcf07466f09eb8be;
static PyObject *const_str_plain_profile_sidebar_border_color;
extern PyObject *const_str_plain_unsubscribe_list;
static PyObject *const_str_plain_profile_background_color;
static PyObject *const_str_digest_02aa2813e454885f054fe05b31ab66e3;
static PyObject *const_str_digest_fdf6e5c8ff1db6b3450e3727889ef07a;
static PyObject *const_str_plain_create_saved_search;
static PyObject *const_str_digest_a8cbcbd2c1b0b111596e1669bbbec1da;
static PyObject *const_str_plain_lookup_users;
static PyObject *const_str_digest_c7af8385e92a1323e0ffad9de299f5bf;
static PyObject *const_str_digest_bc5f31a881f710ef35718e7505d1bf88;
static PyObject *const_str_digest_3414e7d5cbaef30fe06aa06fa3bbbca7;
extern PyObject *const_str_plain_payload_type;
static PyObject *const_list_str_plain_query_list;
static PyObject *const_str_plain_use;
static PyObject *const_str_plain_end_sleep_time;
extern PyObject *const_str_plain_followers_ids;
static PyObject *const_str_digest_784909317ebc86aa7dd11bf7d4ce954d;
extern PyObject *const_str_plain___init__;
static PyObject *const_str_plain_statuses_lookup;
static PyObject *const_str_digest_0ad5de10c31e802b5b04470a968c2bff;
extern PyObject *const_str_plain_user_id;
static PyObject *const_str_digest_651dc98e39db510657fcedc61993cbfc;
extern PyObject *const_str_plain_list_members;
extern PyObject *const_str_plain_relation;
static PyObject *const_str_digest_b5ca8a904acfa86d9d73c1dca8abcdc2;
static PyObject *const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple;
static PyObject *const_str_digest_b2a80a1ed29265bff3e799c44b7d75bc;
static PyObject *const_str_digest_0d96c93a739ba53a3cd2619c20ab65ab;
extern PyObject *const_str_plain_method;
static PyObject *const_str_digest_a1b7d3c3b6f89abee45323018ba91ce3;
static PyObject *const_str_digest_363e257218555c565e331ef66987a281;
static PyObject *const_str_plain_possibly_sensitive;
static PyObject *const_str_digest_808b83565f2e4813a2cadf5717fe46af;
static PyObject *const_str_digest_fd7b1af5cd0729e87a697ede147e56cb;
static PyObject *const_str_digest_e81a95708f0e46e85cd3245b3c1b32f1;
static PyObject *const_str_digest_49cb60c70b3feb7372bd29aa9f5d9075;
static PyObject *const_str_digest_f13378e582ec7033dcc7a257dc43ae3a;
static PyObject *const_str_digest_9583c79f21ae46e1ccbd495d8146a4d6;
extern PyObject *const_str_plain_id_;
static PyObject *const_str_digest_f71ac90978bc7a9458de53dc8df1a84d;
static PyObject *const_str_digest_3fa4e8e3a69a712952ec4a32468e278a;
static PyObject *const_str_plain_place_id;
extern PyObject *const_str_empty;
static PyObject *const_str_digest_c84c0c72d2158a4f641721eefcafefe0;
extern PyObject *const_str_plain_destroy_direct_message;
static PyObject *const_str_digest_19da2bb2d55919865c65aefab08c1911;
extern PyObject *const_tuple_none_none_tuple;
extern PyObject *const_str_plain_payload_list;
extern PyObject *const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple;
extern PyObject *const_str_plain_file_;
static PyObject *const_str_plain_filter_to_owned_lists;
static PyObject *const_list_str_plain_cursor_list;
static PyObject *const_str_digest_578ebd36b303424b31a1aa4842e2d81a;
static PyObject *const_list_1fb635ed5781d1b923088128ff486524_list;
static PyObject *const_str_digest_54d295a4ba6af8d7531bb84e41a3201d;
static PyObject *const_str_plain_device;
extern PyObject *const_str_plain_mimetypes;
static PyObject *const_str_digest_fb77c2a336f766dce4d63fd0ff1ea3be;
static PyObject *const_list_44bcfbd3893f66f93d81715a8fc425bb_list;
static PyObject *const_str_plain_trends_closest;
extern PyObject *const_str_digest_eefde7c00c3216345f2e7c1eca9ec9bc;
static PyObject *const_str_digest_00ebee2684e92197fe6506cd0fee80ba;
static PyObject *const_list_129d794a3e6ce3d6bfa7f5152c90e27a_list;
static PyObject *const_list_str_plain_id_str_plain_full_text_list;
static PyObject *const_list_34e364a3c724a794662a6a4c273727c0_list;
extern PyObject *const_str_plain_user_timeline;
extern PyObject *const_str_plain_screen_name;
extern PyObject *const_str_plain_json;
static PyObject *const_str_digest_86c174cd2c8905fe8fe567931ce895d5;
static PyObject *const_str_digest_2be67310e57881d3290689415d0cd134;
static PyObject *const_str_plain_update_profile_colors;
extern PyObject *const_str_plain_search_root;
static PyObject *const_str_digest_59c55d9b0c1b7bee220e28823cfa460e;
static PyObject *const_str_digest_7af9f3b9356e0771cc6cb512dc53d8a8;
static PyObject *const_tuple_856e5d1dec30b9e06b303f13a9426f50_tuple;
extern PyObject *const_str_plain_verify_credentials;
static PyObject *const_str_digest_cf045d270385324eb990016ca320ca75;
extern PyObject *const_str_plain_remove_list_member;
static PyObject *const_str_plain_geo_id;
extern PyObject *const_str_plain_id;
static PyObject *const_str_plain_trend_location_woeid;
static PyObject *const_str_digest_f14466e48af902de6d5c4c2ec0f4179b;
static PyObject *const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple;
static PyObject *const_str_plain_destroy_favorite;
extern PyObject *const_str_plain_q;
static PyObject *const_list_aaf1294209ffc6dabf0b34770156cdd4_list;
static PyObject *const_str_plain_auth_handler;
extern PyObject *const_str_plain_body;
static PyObject *const_str_digest_b03ad0e2f7dde35bb7cf93f8806e0759;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_digest_df0a26594b16b57d38805017a6a21bbc;
static PyObject *const_str_plain_owner_id;
static PyObject *const_str_digest_0662c6adbae466087c75ecfcae9879f1;
extern PyObject *const_str_plain_update_status;
static PyObject *const_str_digest_aabb67db175cdb2b55a8dbf74a7c234f;
static PyObject *const_tuple_str_plain_file_none_tuple;
static PyObject *const_str_plain_supported_languages;
static PyObject *const_list_str_plain_lang_list;
extern PyObject *const_str_plain___package__;
static PyObject *const_str_plain_reverse_geocode;
static PyObject *const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list;
static PyObject *const_str_digest_567891b485c561eb56647b9b4f01e199;
extern PyObject *const_str_plain_https;
static PyObject *const_list_42eb6014e92476fb97e4b186a1baeb1b_list;
static PyObject *const_tuple_7b7516185037535e752269bc889765ef_tuple;
static PyObject *const_str_plain_align;
extern PyObject *const_str_plain_list_subscribers;
static PyObject *const_list_str_plain_q_str_plain_count_str_plain_page_list;
static PyObject *const_list_aa8f73213b7294650093b5bad94c8ad0_list;
extern PyObject *const_tuple_str_plain_self_tuple;
static PyObject *const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple;
static PyObject *const_str_plain_full_text;
static PyObject *const_str_digest_ebc9e95f94a8d9179da0765285d67638;
static PyObject *const_str_digest_8303e4c179f5e998cba680585aa8c2cd;
static PyObject *const_str_digest_2d558f05a8b1558cd3af7d4147c2fff0;
static PyObject *const_tuple_d697bb94c12916b1698f9c2bcdae4a37_tuple;
extern PyObject *const_str_plain_height;
static PyObject *const_str_digest_06999451735b900f32e4cce52a4ace99;
extern PyObject *const_tuple_empty;
static PyObject *const_str_digest_5447453aa9288d90a451b43ec284a820;
extern PyObject *const_str_plain_append;
static PyObject *const_str_plain_maxwidth;
static PyObject *const_str_plain_show_list_member;
extern PyObject *const_str_plain_search_host;
static PyObject *const_str_plain_update_profile_image;
static PyObject *const_list_str_plain_include_entities_str_plain_skip_status_list;
static PyObject *const_str_digest_804c54db15a9f3830303a1e2cfdea314;
extern PyObject *const_str_plain_tell;
static PyObject *const_str_digest_281199dc3e47b43394a8ba5373d1dc53;
extern PyObject *const_str_plain_api_root;
static PyObject *const_str_digest_89ace06535690dd3a8ba341162ba6c67;
extern PyObject *const_str_plain_parser;
extern PyObject *const_str_plain_lists_all;
extern PyObject *const_str_plain_ModuleSpec;
extern PyObject *const_str_plain_list_timeline;
static PyObject *const_str_plain_strerror;
static PyObject *const_str_digest_9540625229012577e2839f9582e3534d;
static PyObject *const_str_digest_bfc29badd539a95d68d8979f16c26243;
static PyObject *const_tuple_str_plain_self_str_plain_user_ids_str_plain_screen_names_tuple;
extern PyObject *const_str_plain_list;
extern PyObject *const_tuple_none_none_none_none_none_none_tuple;
static PyObject *const_str_digest_8cc3d659f7f338fbd6987eb97378a583;
static PyObject *const_str_plain__statuses_lookup;
static PyObject *const_str_digest_09229e3d4e2a51bab3c7c3bb7663d7d0;
extern PyObject *const_str_plain_upload_host;
static PyObject *const_str_digest_5d2cbae8207d78ffd1858eaafeff42f3;
static PyObject *const_str_digest_8eae722029f6152a0a23f8b89d8e61c2;
static PyObject *const_list_str_plain_screen_name_str_plain_user_id_str_plain_cursor_list;
static PyObject *const_str_plain_remove_list_members;
static PyObject *const_str_plain_allow_contributor_request;
extern PyObject *const_str_plain_max_id;
static PyObject *const_str_plain_lookup_friendships;
static PyObject *const_str_plain_destroy_block;
static PyObject *const_str_plain_map_;
static PyObject *const_str_digest_b7ffcc238d601b950ccc3fe5b78aa342;
static PyObject *const_str_plain_start_sleep_time;
static PyObject *const_str_digest_c4e98db83eccbb000476507c6dc8518e;
static PyObject *const_str_digest_15d1d91df570e1ce05e82d1e33268bce;
static PyObject *const_str_plain_skip_status;
static PyObject *const_str_digest_ece36eca1642434f021d31a629a01139;
extern PyObject *const_str_plain_guess_type;
extern PyObject *const_str_plain_list_to_csv;
static PyObject *const_str_plain_suggested_categories;
extern PyObject *const_str_plain_retweets;
static PyObject *const_str_digest_3c677b0cd2774d8add18b7be8c610dd5;
static PyObject *const_str_digest_ca2a72194b9d440300170a0ba4e15698;
extern PyObject *const_str_plain_direct_message;
static PyObject *const_str_digest_5287048a93782de72410fb0927594c1b;
extern PyObject *const_str_plain_kargs;
static PyObject *const_str_digest_978374bd9bde6f81405ac169bfeefabb;
static PyObject *const_str_plain_banner;
static PyObject *const_str_digest_7be423d4555a3c344f1aa8085a43d752;
static PyObject *const_bytes_digest_74924bf337e444549ac1b0136fdfb8af;
static PyObject *const_list_f56ed37d3e4edab2fc426a9c23df450c_list;
static PyObject *const_list_78d9ab4f323992062dce0e89a18449e8_list;
static PyObject *const_str_digest_8f3d33d979cf92eb49f299dc76b76849;
static PyObject *const_str_digest_d3a2361ae202e23040117511b6ec4379;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain_true;
static PyObject *const_str_digest_300d305004facd64d9b77fb88f3d2ae3;
extern PyObject *const_str_plain_source;
extern PyObject *const_str_plain_api;
extern PyObject *const_str_digest_1e1a2c42d99e89facc973e40bd4ff042;
extern PyObject *const_str_digest_42e125dde2b0dfbc83d32ab394284b81;
static PyObject *const_str_digest_db4c941cc346078335e58955ee2cbe12;
extern PyObject *const_str_plain_user;
extern PyObject *const_str_plain_text_type;
static PyObject *const_list_840693dbcc7964c425178c3b96ce7306_list;
static PyObject *const_str_digest_1727320ce5a4f4ddddbff2515eaa9687;
extern PyObject *const_str_plain_update;
static PyObject *const_list_str_plain_id_str_plain_exclude_list;
static PyObject *const_str_digest_07eb9f07c84c74670a513477aa4b0f23;
static PyObject *const_list_0bfb6f3bc98d1b4a9256592b354ceb73_list;
static PyObject *const_str_digest_0c4773362cee604a540f9beaabb9825a;
static PyObject *const_str_digest_5fbdc342c8714e56e1c0a82e23cfd382;
static PyObject *const_str_plain_profile_text_color;
static PyObject *const_tuple_str_plain_bind_api_tuple;
static PyObject *const_str_digest_88fd5de8fa8c6a74bb7e177787112132;
static PyObject *const_str_digest_6443a4a50635bcbcf7c37a18afb48d25;
static PyObject *const_str_digest_24a9c55fa89564df44331619ae461145;
static PyObject *const_str_digest_7f8e5cdb6b1d80abf810021a12ed733a;
static PyObject *const_str_digest_985492fc3d37925093d88c0648ed6275;
static PyObject *const_str_plain_media_upload;
static PyObject *const_list_b91cc45353a8cec6ac4b925279535b3b_list;
static PyObject *const_str_plain__lookup_users;
static PyObject *const_str_digest_e6d9590fc783070c72dab35bf14eaeab;
static PyObject *const_str_plain_favorites;
static PyObject *const_str_plain_create_block;
static PyObject *const_str_digest_3c02ff2e7dfa9926f8cf7fc098b0c0f2;
static PyObject *const_str_plain_update_profile_banner;
static PyObject *const_str_digest_310923d8fb049d106a50f5b3d36fca66;
extern PyObject *const_str_plain_cursor;
static PyObject *const_str_plain_source_screen_name;
static PyObject *const_str_digest_69e08e6fc6de624c38c56d4f6953d6ac;
extern PyObject *const_int_pos_700;
static PyObject *const_tuple_str_plain_ModelParser_str_plain_Parser_tuple;
static PyObject *const_str_plain_include_rts;
static PyObject *const_str_digest_6b553b725b783bbd61a89d2d6054ece7;
static PyObject *const_str_digest_bf90fe8565be9b1ec6b6d85eaf3804e0;
extern PyObject *const_tuple_bytes_empty_tuple;
static PyObject *const_str_plain_profile_sidebar_fill_color;
static PyObject *const_str_digest_db8481b718e6868b6f8b952fadfbd81a;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_tuple_str_plain_media_ids_none_tuple;
static PyObject *const_list_fb690ea06d7213e79b965d7e6852986a_list;
static PyObject *const_list_9eda2c832631455d3a56a5a445b7219b_list;
static PyObject *const_str_digest_ee72c00a5db8b37e1bc3725f827ef505;
extern PyObject *const_str_plain_args;
static PyObject *const_list_d14a2b096f864b5944e20d0c97497208_list;
static PyObject *const_str_digest_a61fd80e4b365a71ba9c935f93dda4f0;
static PyObject *const_str_plain_omit_script;
static PyObject *const_str_plain_get_status;
static PyObject *const_str_digest_131e077fd57b232594de41e92b0ceefa;
static PyObject *const_str_digest_62fe6022e4127973bec55672d44251bb;
static PyObject *const_str_digest_78d37c1f54ef33d3da7025bc6b2c802b;
static PyObject *const_str_digest_6ae054d8437a6b6755d526fc27607304;
static PyObject *const_str_digest_759ecd650556e808605cc94cab3ed303;
static PyObject *const_list_str_plain_screen_name_str_plain_user_id_list;
extern PyObject *const_str_plain_friends;
static PyObject *const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list;
static PyObject *const_str_digest_e562a6d022aa3b5ce59db75be9d796b0;
static PyObject *const_str_digest_28e37a0e30ec7b76e2f64f41a47c896e;
static PyObject *const_str_plain_lat;
static PyObject *const_str_digest_d00966236b01636a98b6693baf2363d3;
extern PyObject *const_int_pos_1024;
extern PyObject *const_str_plain_tweepy;
extern PyObject *const_str_digest_62fc664646c5b4f462aaa7001dcc03a6;
extern PyObject *const_str_plain_join;
extern PyObject *const_str_plain_fp;
extern PyObject *const_str_plain_description;
static PyObject *const_tuple_str_plain_image_none_tuple;
extern PyObject *const_str_plain_follow;
static PyObject *const_str_plain_direct_messages;
static PyObject *const_list_ed37b586f3db572b56b4aeb74f84fa9e_list;
static PyObject *const_str_digest_4e8f99d484fb560e8ee48515ab64a483;
static PyObject *const_str_digest_ec9fe9d7e6e00a2b2a452d19b3d04cae;
static PyObject *const_str_plain_user_ids;
static PyObject *const_str_digest_3fdde71a332dc56f764914a9c12487ee;
static PyObject *const_list_4b45229f5bc30e6129da8bf9aa36c3ce_list;
extern PyObject *const_str_plain_status;
extern PyObject *const_str_plain_host;
static PyObject *const_str_digest_17da35c39503143982d9656de8125682;
static PyObject *const_str_digest_2913d5d352c29486a324a4ce71584f9e;
static PyObject *const_list_str_plain_lat_str_plain_long_list;
static PyObject *const_list_str_plain_since_id_str_plain_max_id_str_plain_count_list;
static PyObject *const_str_digest_d43de8fe953db47b800441dfbd89204f;
static PyObject *const_str_plain_max_size;
extern PyObject *const_str_digest_e58eec2a5ea585c2c4db40f39721d451;
static PyObject *const_str_plain_geo_similar_places;
extern PyObject *const_str_plain_query;
static PyObject *const_str_digest_bee07e6c80d6a3868c8f365a4bfd4ccf;
extern PyObject *const_str_plain_related;
static PyObject *const_str_digest_2d285a07f0074c4ef0b4379ee5b833ca;
static PyObject *const_str_digest_dbf7bdf5c35a0528fed59ebbd4d3b64a;
extern PyObject *const_str_plain_require_auth;
extern PyObject *const_str_plain_rb;
static PyObject *const_str_plain_friends_ids;
static PyObject *const_list_23e9c1d06e23e57b6d2e1748373f4627_list;
static PyObject *const_str_digest_945fea799c35e94540f8a9c04ba3f295;
static PyObject *const_str_digest_ccd98383543c4ae9b5077b1e6b4c4f4b;
static PyObject *const_str_digest_3299a12f6f0d7eff846afc0d562df5c5;
static PyObject *const_str_digest_27c77b999a06daa68c1dd046832297fc;
static PyObject *const_str_digest_b8fee6cc25e1073dbe97d6f1a83fab53;
static PyObject *const_str_plain_suggested_users_tweets;
extern PyObject *const_str_plain_subscribe_list;
static PyObject *const_str_digest_8be43d54e61f3b6b01a346c1ba5054fc;
static PyObject *const_tuple_str_plain_list_to_csv_tuple;
static PyObject *const_list_str_plain_user_id_str_plain_screen_name_list;
static PyObject *const_str_digest_565b527d5304682422919b8a1fd5349e;
static PyObject *const_str_plain_friendships_incoming;
static PyObject *const_str_plain_include_email;
static PyObject *const_str_digest_5cf980af74af6ab728c2d69eb9327e9f;
static PyObject *const_str_digest_71230f121584b224b45d8a3c12288bb3;
static PyObject *const_str_plain_offset_right;
static PyObject *const_str_digest_64c81487a3ad4bd585303d823dd3f863;
static PyObject *const_str_digest_0ad382a0d56f19aa6d2764f59c2989b7;
extern PyObject *const_str_plain_exclude;
static PyObject *const_list_08ef7d211f3dc1af49eb8c8da29d3172_list;
extern PyObject *const_bytes_digest_f3560215c5dd58a9e4508a4fe4886968;
extern PyObject *const_str_plain_count;
static PyObject *const_str_digest_df790ea9e071dfbd320d15db065af57b;
static PyObject *const_str_digest_e98063d55979bf6aa56048c9e3e3f070;
static PyObject *const_str_plain_include_user_entities;
static PyObject *const_str_digest_7a750f74331b2530dee49577b9d23ee6;
extern PyObject *const_str_plain_search;
static PyObject *const_str_digest_6c16d68b6e33255dc9d1b6cd7fc16ff0;
static PyObject *const_str_digest_ae4591cdba4f38c808424db8a698b051;
static PyObject *const_str_plain__add_list_members;
static PyObject *const_str_digest_2f82eefabf468db807328e640eb73f53;
static PyObject *const_str_digest_7e73a73d4e07f04e5b4f57f09717a3a6;
extern PyObject *const_str_plain_form_field;
static PyObject *const_str_digest_23e5cd4e2147e680a9c725f535c4b960;
extern PyObject *const_bytes_empty;
static PyObject *const_str_plain_get_saved_search;
static PyObject *const_str_digest_42118a50e3ae74965934eda9649e9334;
static PyObject *const_str_digest_5ebfad0f66a82c549d44343df2b0fe91;
static PyObject *const_str_digest_a11ae09cc6fff4c91a41f1df0c6de382;
static PyObject *const_str_digest_fc9041366e6b71029e3ea1b77c6fa884;
extern PyObject *const_tuple_type_object_tuple;
static PyObject *const_str_plain_owner_screen_name;
extern PyObject *const_str_plain_contained_within;
extern PyObject *const_str_plain_filename;
static PyObject *const_str_plain_geocode;
static PyObject *const_str_digest_fc7f46642770fe286a572bede93cf772;
static PyObject *const_str_digest_05fbce3583e5a579bf8f75663ce4fd97;
static PyObject *const_str_plain__lookup_friendships;
extern PyObject *const_tuple_str_plain_TweepError_tuple;
static PyObject *const_str_digest_bb48cd7f766174b99fdc720d0c014766;
extern PyObject *const_str_plain_width;
static PyObject *const_str_digest_212b1fd51e9d2a886c8b632b1e01e542;
extern PyObject *const_str_plain_auth;
static PyObject *const_str_plain_include_entities;
static PyObject *const_str_digest_882700d8bd4cef6393e4be98256ab389;
static PyObject *const_str_plain_accuracy;
static PyObject *const_str_digest_0f78a3decac53157d4a8cbc0e851278e;
static PyObject *const_str_plain_home_timeline;
extern PyObject *const_str_plain_self;
static PyObject *const_str_plain_set_delivery_device;
extern PyObject *const_str_plain_upload_root;
static PyObject *const_str_digest_30b75129bfc54d96ded03f1b3331096b;
static PyObject *const_str_digest_d0a158b8ea9e2a619ed75e58447a5dba;
extern PyObject *const_bytes_digest_e22048e4de62b4d2ac355aed7a0f9014;
extern PyObject *const_int_pos_2;
static PyObject *const_str_digest_2267a5e5e0ef8ae2ab19d7d4fa3ae731;
static PyObject *const_str_digest_ee671456ad77bf6d9095a4663f796692;
static PyObject *const_str_digest_b1a370465cde0421dd8ca6827beab883;
static PyObject *const_str_digest_9f14ec61bbfd9cea0782795292617d2e;
static PyObject *const_str_digest_ed376d057536894260bd5c3dd47dde41;
extern PyObject *const_str_plain_wait_on_rate_limit_notify;
static PyObject *const_list_e3ed10a2b1264427e2d1008a5f569202_list;
extern PyObject *const_str_plain_file;
static PyObject *const_str_digest_ee06584f038c3087f8c19cde029e4e76;
static PyObject *const_str_digest_92969f760667e1f493ad965ff49eee46;
static PyObject *const_str_digest_362664de9805359dfc2f9a0e2246546b;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_list_8848fc29ad2337b8fbbe41e548230315_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_8848fc29ad2337b8fbbe41e548230315_list, 0, const_str_plain_tile ); Py_INCREF( const_str_plain_tile );
    const_str_plain_include_entities = UNSTREAM_STRING( &constant_bin[ 1883560 ], 16, 1 );
    PyList_SET_ITEM( const_list_8848fc29ad2337b8fbbe41e548230315_list, 1, const_str_plain_include_entities ); Py_INCREF( const_str_plain_include_entities );
    const_str_plain_skip_status = UNSTREAM_STRING( &constant_bin[ 1883576 ], 11, 1 );
    PyList_SET_ITEM( const_list_8848fc29ad2337b8fbbe41e548230315_list, 2, const_str_plain_skip_status ); Py_INCREF( const_str_plain_skip_status );
    const_str_plain_use = UNSTREAM_STRING( &constant_bin[ 2726 ], 3, 1 );
    PyList_SET_ITEM( const_list_8848fc29ad2337b8fbbe41e548230315_list, 3, const_str_plain_use ); Py_INCREF( const_str_plain_use );
    const_list_4ffdfb7f6ed06e41d0c95665fbb8d79c_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_4ffdfb7f6ed06e41d0c95665fbb8d79c_list, 0, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyList_SET_ITEM( const_list_4ffdfb7f6ed06e41d0c95665fbb8d79c_list, 1, const_str_plain_url ); Py_INCREF( const_str_plain_url );
    PyList_SET_ITEM( const_list_4ffdfb7f6ed06e41d0c95665fbb8d79c_list, 2, const_str_plain_location ); Py_INCREF( const_str_plain_location );
    PyList_SET_ITEM( const_list_4ffdfb7f6ed06e41d0c95665fbb8d79c_list, 3, const_str_plain_description ); Py_INCREF( const_str_plain_description );
    const_list_str_plain_id_str_plain_cursor_str_plain_stringify_ids_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_cursor_str_plain_stringify_ids_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_cursor_str_plain_stringify_ids_list, 1, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    const_str_plain_stringify_ids = UNSTREAM_STRING( &constant_bin[ 1883587 ], 13, 1 );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_cursor_str_plain_stringify_ids_list, 2, const_str_plain_stringify_ids ); Py_INCREF( const_str_plain_stringify_ids );
    const_list_str_plain_device_list = PyList_New( 1 );
    const_str_plain_device = UNSTREAM_STRING( &constant_bin[ 1079804 ], 6, 1 );
    PyList_SET_ITEM( const_list_str_plain_device_list, 0, const_str_plain_device ); Py_INCREF( const_str_plain_device );
    const_list_str_plain_slug_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_plain_slug_list, 0, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    const_str_digest_d890a4105d3fed770f9977b8a97975d9 = UNSTREAM_STRING( &constant_bin[ 1883600 ], 20, 0 );
    const_str_digest_3c83afcc81322c46ff39d5c97b1e8ffa = UNSTREAM_STRING( &constant_bin[ 1883620 ], 17, 0 );
    const_str_digest_58a451be096e59ac1d5cb6c2503f32d6 = UNSTREAM_STRING( &constant_bin[ 1883637 ], 135, 0 );
    const_str_digest_7e81bd2cc3dfbb88aa51a3e3dd08aa40 = UNSTREAM_STRING( &constant_bin[ 1883772 ], 20, 0 );
    const_str_plain_report_spam = UNSTREAM_STRING( &constant_bin[ 1883792 ], 11, 1 );
    const_str_plain_hide_media = UNSTREAM_STRING( &constant_bin[ 1883803 ], 10, 1 );
    const_str_digest_ac57a821e7902d5db676dc5d1402fc9d = UNSTREAM_STRING( &constant_bin[ 1883813 ], 180, 0 );
    const_str_digest_5b9f75cb04ed3ca5c06b6e427ab1e3bf = UNSTREAM_STRING( &constant_bin[ 1883993 ], 25, 0 );
    const_str_digest_314b2037f0172ee47db83851acad0a71 = UNSTREAM_STRING( &constant_bin[ 1884018 ], 58, 0 );
    const_str_plain_show_list_subscriber = UNSTREAM_STRING( &constant_bin[ 1884076 ], 20, 1 );
    const_str_plain_send_direct_message = UNSTREAM_STRING( &constant_bin[ 1884096 ], 19, 1 );
    const_str_digest_f6e3f54103d14d447757123fc9e1f5df = UNSTREAM_STRING( &constant_bin[ 1884115 ], 122, 0 );
    const_str_digest_90c33e1e7620f71afbdafe4c6e96b721 = UNSTREAM_STRING( &constant_bin[ 1884237 ], 17, 0 );
    const_str_digest_6822502d2bb78ed129a9669cccf02540 = UNSTREAM_STRING( &constant_bin[ 1884254 ], 36, 0 );
    const_str_digest_ef5e9a328337a93a03ee8167ff8bd42c = UNSTREAM_STRING( &constant_bin[ 1884290 ], 171, 0 );
    const_str_plain_display_coordinates = UNSTREAM_STRING( &constant_bin[ 1884461 ], 19, 1 );
    const_str_digest_88bde37fb2dccbb16c767d94d0909116 = UNSTREAM_STRING( &constant_bin[ 1884480 ], 17, 0 );
    const_str_digest_993d569ecc312035f9a70dad8655dcaa = UNSTREAM_STRING( &constant_bin[ 1884497 ], 22, 0 );
    const_str_digest_010d1cf9526798a6ed37cb0888b74a79 = UNSTREAM_STRING( &constant_bin[ 1884519 ], 133, 0 );
    const_str_digest_8f23e8f6c745b7f0856f77415858d0cd = UNSTREAM_STRING( &constant_bin[ 1884652 ], 20, 0 );
    const_str_plain_get_user = UNSTREAM_STRING( &constant_bin[ 1884672 ], 8, 1 );
    const_str_digest_1adf8b93300bc464ffb01bce2ea138cc = UNSTREAM_STRING( &constant_bin[ 1871027 ], 21, 0 );
    const_str_digest_6d2d6f0d1e83b0156232bc0179b43943 = UNSTREAM_STRING( &constant_bin[ 1884680 ], 31, 0 );
    const_str_digest_618a7ffcb2f21635e473281c4491182b = UNSTREAM_STRING( &constant_bin[ 1884711 ], 10, 0 );
    const_str_digest_f11a975b85dd2140f7467c867a10608a = UNSTREAM_STRING( &constant_bin[ 1884721 ], 148, 0 );
    const_str_digest_5890cfaec008d2ceeff0b5d3ac040176 = UNSTREAM_STRING( &constant_bin[ 1884869 ], 18, 0 );
    const_list_4532f42c3637660542f2c1690e08c401_list = PyList_New( 5 );
    const_str_plain_owner_screen_name = UNSTREAM_STRING( &constant_bin[ 1883913 ], 17, 1 );
    PyList_SET_ITEM( const_list_4532f42c3637660542f2c1690e08c401_list, 0, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_4532f42c3637660542f2c1690e08c401_list, 1, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    const_str_plain_list_id = UNSTREAM_STRING( &constant_bin[ 1883967 ], 7, 1 );
    PyList_SET_ITEM( const_list_4532f42c3637660542f2c1690e08c401_list, 2, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    const_str_plain_owner_id = UNSTREAM_STRING( &constant_bin[ 1883942 ], 8, 1 );
    PyList_SET_ITEM( const_list_4532f42c3637660542f2c1690e08c401_list, 3, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_4532f42c3637660542f2c1690e08c401_list, 4, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    const_str_plain_saved_searches = UNSTREAM_STRING( &constant_bin[ 1884172 ], 14, 1 );
    const_str_digest_9afabad83130b9166303486347b65f20 = UNSTREAM_STRING( &constant_bin[ 1884887 ], 127, 0 );
    const_list_a1a9f2f5d0c41ef453455361f69a4bee_list = PyList_New( 7 );
    PyList_SET_ITEM( const_list_a1a9f2f5d0c41ef453455361f69a4bee_list, 0, const_str_plain_status ); Py_INCREF( const_str_plain_status );
    PyList_SET_ITEM( const_list_a1a9f2f5d0c41ef453455361f69a4bee_list, 1, const_str_plain_in_reply_to_status_id ); Py_INCREF( const_str_plain_in_reply_to_status_id );
    const_str_plain_lat = UNSTREAM_STRING( &constant_bin[ 7422 ], 3, 1 );
    PyList_SET_ITEM( const_list_a1a9f2f5d0c41ef453455361f69a4bee_list, 2, const_str_plain_lat ); Py_INCREF( const_str_plain_lat );
    PyList_SET_ITEM( const_list_a1a9f2f5d0c41ef453455361f69a4bee_list, 3, const_str_plain_long ); Py_INCREF( const_str_plain_long );
    PyList_SET_ITEM( const_list_a1a9f2f5d0c41ef453455361f69a4bee_list, 4, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    const_str_plain_place_id = UNSTREAM_STRING( &constant_bin[ 1885014 ], 8, 1 );
    PyList_SET_ITEM( const_list_a1a9f2f5d0c41ef453455361f69a4bee_list, 5, const_str_plain_place_id ); Py_INCREF( const_str_plain_place_id );
    PyList_SET_ITEM( const_list_a1a9f2f5d0c41ef453455361f69a4bee_list, 6, const_str_plain_display_coordinates ); Py_INCREF( const_str_plain_display_coordinates );
    const_str_plain_trends_available = UNSTREAM_STRING( &constant_bin[ 1885022 ], 16, 1 );
    const_str_digest_5d7ae3fa69d744cee0e10ee29f7a8b12 = UNSTREAM_STRING( &constant_bin[ 1885038 ], 18, 0 );
    const_str_digest_69ded2fb3d38062d248cc7b18d3e0dfd = UNSTREAM_STRING( &constant_bin[ 1885056 ], 25, 0 );
    const_str_digest_940c59cbf0cf98f3b23e9fdbb8bef726 = UNSTREAM_STRING( &constant_bin[ 1885081 ], 23, 0 );
    const_str_digest_f42d4f0cb1864f075fb9e4facaba82c1 = UNSTREAM_STRING( &constant_bin[ 1885104 ], 36, 0 );
    const_str_digest_de8a49f9d0aaa0c92bf7532265f3c634 = UNSTREAM_STRING( &constant_bin[ 1885140 ], 113, 0 );
    const_str_digest_c8f3a67339eebb2eb755bd394034951d = UNSTREAM_STRING( &constant_bin[ 1885253 ], 187, 0 );
    const_str_digest_f216853b1486a5e2a12c853e438c42e9 = UNSTREAM_STRING( &constant_bin[ 1885440 ], 157, 0 );
    const_str_digest_6dd07332cf76e0d6e289d20b910e503a = UNSTREAM_STRING( &constant_bin[ 1885597 ], 26, 0 );
    const_str_plain_target_id = UNSTREAM_STRING( &constant_bin[ 1885623 ], 9, 1 );
    const_list_4f401a447d32604f8e859b68c64f2b68_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_4f401a447d32604f8e859b68c64f2b68_list, 0, const_str_plain_since_id ); Py_INCREF( const_str_plain_since_id );
    PyList_SET_ITEM( const_list_4f401a447d32604f8e859b68c64f2b68_list, 1, const_str_plain_max_id ); Py_INCREF( const_str_plain_max_id );
    PyList_SET_ITEM( const_list_4f401a447d32604f8e859b68c64f2b68_list, 2, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_str_plain_full_text = UNSTREAM_STRING( &constant_bin[ 1885632 ], 9, 1 );
    PyList_SET_ITEM( const_list_4f401a447d32604f8e859b68c64f2b68_list, 3, const_str_plain_full_text ); Py_INCREF( const_str_plain_full_text );
    const_str_digest_93055e87ecf6ea7a7e144217536e9ada = UNSTREAM_STRING( &constant_bin[ 1885641 ], 14, 0 );
    const_str_digest_62658d987da2bb3fc3af438e9a683af5 = UNSTREAM_STRING( &constant_bin[ 1885655 ], 112, 0 );
    const_str_plain_show_friendship = UNSTREAM_STRING( &constant_bin[ 1885767 ], 15, 1 );
    const_str_digest_e793a5e7d8221c4160e8bdae1c765e52 = UNSTREAM_STRING( &constant_bin[ 1885782 ], 142, 0 );
    const_str_digest_adebd5f65a028981f8da63150ee1aa02 = UNSTREAM_STRING( &constant_bin[ 1885924 ], 58, 0 );
    const_str_digest_0afff95a565072dacd82ab1d7ad997d1 = UNSTREAM_STRING( &constant_bin[ 1885982 ], 27, 0 );
    const_str_digest_fb0627b65aa4e127c274b96bca3f852b = UNSTREAM_STRING( &constant_bin[ 1886009 ], 16, 0 );
    const_str_digest_c3f9e5e7653522b8aaa931fd1de47344 = UNSTREAM_STRING( &constant_bin[ 1886025 ], 21, 0 );
    const_list_c9f02c3376521f0c5c89f45b748b40b4_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_c9f02c3376521f0c5c89f45b748b40b4_list, 0, const_str_digest_2375a74133faa9eebe03907638f044f5 ); Py_INCREF( const_str_digest_2375a74133faa9eebe03907638f044f5 );
    PyList_SET_ITEM( const_list_c9f02c3376521f0c5c89f45b748b40b4_list, 1, const_str_digest_e58eec2a5ea585c2c4db40f39721d451 ); Py_INCREF( const_str_digest_e58eec2a5ea585c2c4db40f39721d451 );
    PyList_SET_ITEM( const_list_c9f02c3376521f0c5c89f45b748b40b4_list, 2, const_str_digest_62fc664646c5b4f462aaa7001dcc03a6 ); Py_INCREF( const_str_digest_62fc664646c5b4f462aaa7001dcc03a6 );
    const_str_plain__remove_list_members = UNSTREAM_STRING( &constant_bin[ 1886046 ], 20, 1 );
    const_str_plain_mentions_timeline = UNSTREAM_STRING( &constant_bin[ 1884786 ], 17, 1 );
    const_str_digest_e4e2d408ab774c70222da3d384b38e70 = UNSTREAM_STRING( &constant_bin[ 1886066 ], 16, 0 );
    const_str_digest_5f62b8f8eb5b756b9c9b3266bd12324c = UNSTREAM_STRING( &constant_bin[ 1886082 ], 21, 0 );
    const_str_digest_51356df55ffc9106e99ddd54fd3883d2 = UNSTREAM_STRING( &constant_bin[ 1886103 ], 13, 0 );
    const_str_digest_f63ba4ec9e6291c73d971dd0bed23a4f = UNSTREAM_STRING( &constant_bin[ 1886116 ], 34, 0 );
    const_list_ee9d2aecc5e5f789a0f3e231695baf60_list = PyList_New( 8 );
    PyList_SET_ITEM( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list, 1, const_str_plain_url ); Py_INCREF( const_str_plain_url );
    const_str_plain_maxwidth = UNSTREAM_STRING( &constant_bin[ 1886150 ], 8, 1 );
    PyList_SET_ITEM( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list, 2, const_str_plain_maxwidth ); Py_INCREF( const_str_plain_maxwidth );
    PyList_SET_ITEM( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list, 3, const_str_plain_hide_media ); Py_INCREF( const_str_plain_hide_media );
    const_str_plain_omit_script = UNSTREAM_STRING( &constant_bin[ 1886158 ], 11, 1 );
    PyList_SET_ITEM( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list, 4, const_str_plain_omit_script ); Py_INCREF( const_str_plain_omit_script );
    const_str_plain_align = UNSTREAM_STRING( &constant_bin[ 13632 ], 5, 1 );
    PyList_SET_ITEM( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list, 5, const_str_plain_align ); Py_INCREF( const_str_plain_align );
    PyList_SET_ITEM( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list, 6, const_str_plain_related ); Py_INCREF( const_str_plain_related );
    PyList_SET_ITEM( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list, 7, const_str_plain_lang ); Py_INCREF( const_str_plain_lang );
    const_str_digest_e8de18a2c60b692789169d0ae81d17ed = UNSTREAM_STRING( &constant_bin[ 1886169 ], 25, 0 );
    const_str_digest_e24c29d146882f162e3c5517875d43fc = UNSTREAM_STRING( &constant_bin[ 1886194 ], 225, 0 );
    const_str_digest_679314a5b52d2d4f6c06e7d9974468be = UNSTREAM_STRING( &constant_bin[ 1886419 ], 19, 0 );
    const_str_digest_752d511796b225c99ae604232ccad303 = UNSTREAM_STRING( &constant_bin[ 1886438 ], 121, 0 );
    const_str_digest_76d28dde72939cf9701efb06feae402b = UNSTREAM_STRING( &constant_bin[ 1886559 ], 16, 0 );
    const_str_digest_1769d5d3970875d9351040fd0d1717c7 = UNSTREAM_STRING( &constant_bin[ 1886575 ], 54, 0 );
    const_str_digest_6d3b1189959672cf026553404a64f01a = UNSTREAM_STRING( &constant_bin[ 1886629 ], 27, 0 );
    const_str_digest_4f022903b2372914fc4dddf5ccb3c018 = UNSTREAM_STRING( &constant_bin[ 1886656 ], 24, 0 );
    const_str_digest_048277f7b199789742091b45301038b4 = UNSTREAM_STRING( &constant_bin[ 1886680 ], 28, 0 );
    const_str_digest_eb89ecef1ba53549c1579b18265b3c47 = UNSTREAM_STRING( &constant_bin[ 1886708 ], 31, 0 );
    const_str_digest_ec185a7b7b812ad0e9ad581b07748f4d = UNSTREAM_STRING( &constant_bin[ 1886739 ], 11, 0 );
    const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 1, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyTuple_SET_ITEM( const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 2, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyTuple_SET_ITEM( const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 3, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyTuple_SET_ITEM( const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 4, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    PyTuple_SET_ITEM( const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 5, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyTuple_SET_ITEM( const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 6, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    const_str_digest_0a6c3d56c41671a9f36b2def2d826064 = UNSTREAM_STRING( &constant_bin[ 1886750 ], 130, 0 );
    const_str_digest_11e54fbb87091e89143b4323f6712ef8 = UNSTREAM_STRING( &constant_bin[ 1886880 ], 153, 0 );
    const_str_plain_sleep_time_enabled = UNSTREAM_STRING( &constant_bin[ 1887033 ], 18, 1 );
    const_str_digest_eefe8ec72dc1a37e7325cc8109f0417c = UNSTREAM_STRING( &constant_bin[ 1887051 ], 67, 0 );
    const_str_digest_fa841d19ecb669e6d9bf4f0e93bd89c3 = UNSTREAM_STRING( &constant_bin[ 1887118 ], 148, 0 );
    const_str_digest_bf1d9bf19d9789f47c21804da3de9103 = UNSTREAM_STRING( &constant_bin[ 1886025 ], 6, 0 );
    const_str_digest_1b3832fbfe9667539901f18ab67148eb = UNSTREAM_STRING( &constant_bin[ 1887266 ], 21, 0 );
    const_str_plain_parser_type = UNSTREAM_STRING( &constant_bin[ 1887287 ], 11, 1 );
    const_str_plain_friendships_outgoing = UNSTREAM_STRING( &constant_bin[ 1887298 ], 20, 1 );
    const_str_digest_627fd97fa680e03f6d71777f60d9650d = UNSTREAM_STRING( &constant_bin[ 1887318 ], 157, 0 );
    const_str_plain_resources = UNSTREAM_STRING( &constant_bin[ 1434163 ], 9, 1 );
    const_str_digest_97c00c9e1f11f77b4fb3e9b1da4dc679 = UNSTREAM_STRING( &constant_bin[ 1887475 ], 21, 0 );
    const_str_digest_b05664714ef0894e0ecf4d15ddd9b73f = UNSTREAM_STRING( &constant_bin[ 1887496 ], 16, 0 );
    const_str_digest_41b8e4be2ca8dfc34d03e9417c0454cd = UNSTREAM_STRING( &constant_bin[ 1887512 ], 25, 0 );
    const_str_digest_0ffd4a62a876b9c87d10a1285066ea97 = UNSTREAM_STRING( &constant_bin[ 1887537 ], 1392, 0 );
    const_str_digest_a5ded017a4feffba94af991ba2081c4b = UNSTREAM_STRING( &constant_bin[ 1888929 ], 84, 0 );
    const_str_digest_57f30390d1d25fb7071d2399b5164490 = UNSTREAM_STRING( &constant_bin[ 1889013 ], 19, 0 );
    const_list_f1ef68426670996528bdbae542cd9d93_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_f1ef68426670996528bdbae542cd9d93_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_f1ef68426670996528bdbae542cd9d93_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_f1ef68426670996528bdbae542cd9d93_list, 2, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_f1ef68426670996528bdbae542cd9d93_list, 3, const_str_plain_follow ); Py_INCREF( const_str_plain_follow );
    const_str_plain_retweeters = UNSTREAM_STRING( &constant_bin[ 1889032 ], 10, 1 );
    const_str_plain_get_list = UNSTREAM_STRING( &constant_bin[ 1889042 ], 8, 1 );
    const_tuple_31d6960f5d61b0aaeb35f1386bf84e23_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_31d6960f5d61b0aaeb35f1386bf84e23_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_31d6960f5d61b0aaeb35f1386bf84e23_tuple, 1, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_31d6960f5d61b0aaeb35f1386bf84e23_tuple, 2, const_str_plain_file_ ); Py_INCREF( const_str_plain_file_ );
    PyTuple_SET_ITEM( const_tuple_31d6960f5d61b0aaeb35f1386bf84e23_tuple, 3, const_str_plain_headers ); Py_INCREF( const_str_plain_headers );
    PyTuple_SET_ITEM( const_tuple_31d6960f5d61b0aaeb35f1386bf84e23_tuple, 4, const_str_plain_post_data ); Py_INCREF( const_str_plain_post_data );
    const_str_digest_fd84b510bbae67ca87724f2fcd7ec268 = UNSTREAM_STRING( &constant_bin[ 1889050 ], 29, 0 );
    const_int_pos_3072 = PyLong_FromUnsignedLong( 3072ul );
    const_str_digest_70cf2b1adfa2d515ce9b8dafe4c64adf = UNSTREAM_STRING( &constant_bin[ 1889079 ], 17, 0 );
    const_str_digest_d96020b03f4161fd4f202922123c709b = UNSTREAM_STRING( &constant_bin[ 1889096 ], 15, 0 );
    const_str_digest_b6e4754fd0cbabab1c207ac40c2843f7 = UNSTREAM_STRING( &constant_bin[ 1612553 ], 4, 0 );
    const_str_digest_f94b53fcb401235f7ace70e5b13054dc = UNSTREAM_STRING( &constant_bin[ 1889111 ], 19, 0 );
    const_str_digest_876e75199bc5892619186204715a8e20 = UNSTREAM_STRING( &constant_bin[ 1889130 ], 16, 0 );
    const_str_digest_806c7420fd0e313d1ccd18fe57392a0d = UNSTREAM_STRING( &constant_bin[ 1889146 ], 137, 0 );
    const_str_plain_rate_limit_status = UNSTREAM_STRING( &constant_bin[ 1884587 ], 17, 1 );
    const_str_digest_61274f59211cf6fa7804d5e68a2e4f96 = UNSTREAM_STRING( &constant_bin[ 1889283 ], 28, 0 );
    const_str_digest_dd2d86ce4450b61edec967574b1822c9 = UNSTREAM_STRING( &constant_bin[ 1889311 ], 144, 0 );
    const_str_digest_09063442f5d7a61eda180413305d13a2 = UNSTREAM_STRING( &constant_bin[ 1889455 ], 120, 0 );
    const_str_digest_49a107c934b1e01fce7abf772b8589fb = UNSTREAM_STRING( &constant_bin[ 1889575 ], 20, 0 );
    const_str_plain_configuration = UNSTREAM_STRING( &constant_bin[ 58314 ], 13, 1 );
    const_str_digest_b84327bf93452c9d13d6434d17939b92 = UNSTREAM_STRING( &constant_bin[ 1889595 ], 45, 0 );
    const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 0, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    const_str_plain_max_size = UNSTREAM_STRING( &constant_bin[ 1889640 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 1, const_str_plain_max_size ); Py_INCREF( const_str_plain_max_size );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 2, const_str_plain_form_field ); Py_INCREF( const_str_plain_form_field );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 3, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 4, const_str_plain_e ); Py_INCREF( const_str_plain_e );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 5, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_str_plain_file_type = UNSTREAM_STRING( &constant_bin[ 1889648 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 6, const_str_plain_file_type ); Py_INCREF( const_str_plain_file_type );
    const_str_plain_BOUNDARY = UNSTREAM_STRING( &constant_bin[ 1889657 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 7, const_str_plain_BOUNDARY ); Py_INCREF( const_str_plain_BOUNDARY );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 8, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    PyTuple_SET_ITEM( const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 9, const_str_plain_headers ); Py_INCREF( const_str_plain_headers );
    const_str_digest_12113c76ab4765bf100194e9994b2512 = UNSTREAM_STRING( &constant_bin[ 1889665 ], 26, 0 );
    const_str_digest_7560d02bf5d90db74ca7f0c4d527a1ca = UNSTREAM_STRING( &constant_bin[ 1889691 ], 201, 0 );
    const_str_digest_69bfcde34d4fb308921326ac50614cfe = UNSTREAM_STRING( &constant_bin[ 1889892 ], 18, 0 );
    const_str_digest_d440efcf9ba32d6dd20ba6ea4dbf7f57 = UNSTREAM_STRING( &constant_bin[ 1889910 ], 32, 0 );
    const_str_digest_cc7cea676c32de07a5f53327a5a8ca99 = UNSTREAM_STRING( &constant_bin[ 1889942 ], 10, 0 );
    const_list_f5255a11d171c4989cf9f14990c23154_list = PyList_New( 6 );
    PyList_SET_ITEM( const_list_f5255a11d171c4989cf9f14990c23154_list, 0, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_f5255a11d171c4989cf9f14990c23154_list, 1, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_f5255a11d171c4989cf9f14990c23154_list, 2, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_f5255a11d171c4989cf9f14990c23154_list, 3, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_f5255a11d171c4989cf9f14990c23154_list, 4, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    PyList_SET_ITEM( const_list_f5255a11d171c4989cf9f14990c23154_list, 5, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    const_str_digest_3d7d78975cbc97deb5aee4bbf06211bd = UNSTREAM_STRING( &constant_bin[ 1889952 ], 28, 0 );
    const_str_plain_geo_search = UNSTREAM_STRING( &constant_bin[ 1889980 ], 10, 1 );
    const_list_4efdb2a1b3943b68db2f85e4d8bf5c7e_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_4efdb2a1b3943b68db2f85e4d8bf5c7e_list, 0, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_4efdb2a1b3943b68db2f85e4d8bf5c7e_list, 1, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_4efdb2a1b3943b68db2f85e4d8bf5c7e_list, 2, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_4efdb2a1b3943b68db2f85e4d8bf5c7e_list, 3, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    const_str_digest_3e80c5f8e73ca34db6df5f1a23806bae = UNSTREAM_STRING( &constant_bin[ 1889990 ], 14, 0 );
    const_tuple_14eb4b02b805bf451178e08eb9276158_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_14eb4b02b805bf451178e08eb9276158_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_user_ids = UNSTREAM_STRING( &constant_bin[ 1890004 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_14eb4b02b805bf451178e08eb9276158_tuple, 1, const_str_plain_user_ids ); Py_INCREF( const_str_plain_user_ids );
    const_str_plain_screen_names = UNSTREAM_STRING( &constant_bin[ 1890012 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_14eb4b02b805bf451178e08eb9276158_tuple, 2, const_str_plain_screen_names ); Py_INCREF( const_str_plain_screen_names );
    PyTuple_SET_ITEM( const_tuple_14eb4b02b805bf451178e08eb9276158_tuple, 3, const_str_plain_include_entities ); Py_INCREF( const_str_plain_include_entities );
    PyTuple_SET_ITEM( const_tuple_14eb4b02b805bf451178e08eb9276158_tuple, 4, const_str_plain_post_data ); Py_INCREF( const_str_plain_post_data );
    const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple, 1, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple, 2, const_str_plain_kargs ); Py_INCREF( const_str_plain_kargs );
    PyTuple_SET_ITEM( const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple, 3, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple, 4, const_str_plain_headers ); Py_INCREF( const_str_plain_headers );
    PyTuple_SET_ITEM( const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple, 5, const_str_plain_post_data ); Py_INCREF( const_str_plain_post_data );
    const_str_digest_4693b8aa0fb9b1af207c1b5dd336d17e = UNSTREAM_STRING( &constant_bin[ 1890024 ], 125, 0 );
    const_str_plain_trim_user = UNSTREAM_STRING( &constant_bin[ 1890149 ], 9, 1 );
    const_str_digest_89a46b5b954d4eba33b465f9747b1236 = UNSTREAM_STRING( &constant_bin[ 1890158 ], 20, 0 );
    const_str_digest_8b8edd03bd68d44df06e8680bbaa789f = UNSTREAM_STRING( &constant_bin[ 1890178 ], 135, 0 );
    const_str_digest_2a6300ad0f8eaa16a28378c40783766e = UNSTREAM_STRING( &constant_bin[ 1890313 ], 17, 0 );
    const_str_digest_4282f31a16ee073ae61050450a3d6e84 = UNSTREAM_STRING( &constant_bin[ 1890330 ], 22, 0 );
    const_str_plain_max_results = UNSTREAM_STRING( &constant_bin[ 1890352 ], 11, 1 );
    const_str_digest_dc4f12d70665d18fac49e3f3cf269d66 = UNSTREAM_STRING( &constant_bin[ 1890363 ], 28, 0 );
    const_str_digest_99f5b82720d7bb02d0d08cc54ca4f235 = UNSTREAM_STRING( &constant_bin[ 1890391 ], 29, 0 );
    const_str_digest_9b87ba90932f25b73a849a8a46596748 = UNSTREAM_STRING( &constant_bin[ 1890420 ], 23, 0 );
    const_str_digest_fce7ae9dd7c578af453274d619682b8a = UNSTREAM_STRING( &constant_bin[ 1890443 ], 19, 0 );
    const_str_digest_2a8b91c605f76de4e74f76fa376c4e0e = UNSTREAM_STRING( &constant_bin[ 1890462 ], 15, 0 );
    const_list_str_plain_id_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_plain_id_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    const_str_digest_a4970f68db19567c321774b7e4800ae9 = UNSTREAM_STRING( &constant_bin[ 1890477 ], 133, 0 );
    const_str_digest_e3687a37b686bac6a320437979b9bbdb = UNSTREAM_STRING( &constant_bin[ 1890610 ], 22, 0 );
    const_str_digest_9aee88b4dd118d648a16a63aa71b8b4a = UNSTREAM_STRING( &constant_bin[ 1890632 ], 115, 0 );
    const_str_digest_6820f38b9cf4f6f75cc3c87e6e91f83d = UNSTREAM_STRING( &constant_bin[ 1890747 ], 19, 0 );
    const_str_plain_trends_place = UNSTREAM_STRING( &constant_bin[ 1890766 ], 12, 1 );
    const_str_plain_create_list = UNSTREAM_STRING( &constant_bin[ 1889100 ], 11, 1 );
    const_str_digest_28f8101301a52289374e84dfddbc77c7 = UNSTREAM_STRING( &constant_bin[ 1890778 ], 152, 0 );
    const_str_digest_178b9015b8b333fe13bcaeb3c0163b14 = UNSTREAM_STRING( &constant_bin[ 1890930 ], 176, 0 );
    const_str_digest_61a5babeef606f6faa0f7b3dc0cd5558 = UNSTREAM_STRING( &constant_bin[ 1883471 ], 11, 0 );
    const_str_plain_retweets_of_me = UNSTREAM_STRING( &constant_bin[ 1890401 ], 14, 1 );
    const_str_plain_time_zone = UNSTREAM_STRING( &constant_bin[ 1891106 ], 9, 1 );
    const_str_digest_5f2c6d8a28ef29a6af1af13f844c89ff = UNSTREAM_STRING( &constant_bin[ 1891115 ], 25, 0 );
    const_str_plain_profile_link_color = UNSTREAM_STRING( &constant_bin[ 1891140 ], 18, 1 );
    const_list_d09a283f1db5a3b49eee78501b208dc2_list = PyList_New( 6 );
    PyList_SET_ITEM( const_list_d09a283f1db5a3b49eee78501b208dc2_list, 0, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_d09a283f1db5a3b49eee78501b208dc2_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_d09a283f1db5a3b49eee78501b208dc2_list, 2, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_d09a283f1db5a3b49eee78501b208dc2_list, 3, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_d09a283f1db5a3b49eee78501b208dc2_list, 4, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_d09a283f1db5a3b49eee78501b208dc2_list, 5, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    const_str_digest_b0efb64b0358cb0119f72d953ff03f37 = UNSTREAM_STRING( &constant_bin[ 1891158 ], 122, 0 );
    const_str_digest_95f3e76ebd9ac52609ab7456ea730325 = UNSTREAM_STRING( &constant_bin[ 1891280 ], 204, 0 );
    const_str_digest_4ac31e6c9eb193f63b1820b788144c9e = UNSTREAM_STRING( &constant_bin[ 1891484 ], 115, 0 );
    const_str_plain_update_profile_background_image = UNSTREAM_STRING( &constant_bin[ 1889604 ], 31, 1 );
    const_list_d067e0399662921590a235ca4f8a110c_list = PyList_New( 14 );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 0, const_str_plain_q ); Py_INCREF( const_str_plain_q );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 1, const_str_plain_lang ); Py_INCREF( const_str_plain_lang );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 2, const_str_plain_locale ); Py_INCREF( const_str_plain_locale );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 3, const_str_plain_since_id ); Py_INCREF( const_str_plain_since_id );
    const_str_plain_geocode = UNSTREAM_STRING( &constant_bin[ 1886182 ], 7, 1 );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 4, const_str_plain_geocode ); Py_INCREF( const_str_plain_geocode );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 5, const_str_plain_max_id ); Py_INCREF( const_str_plain_max_id );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 6, const_str_plain_since ); Py_INCREF( const_str_plain_since );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 7, const_str_plain_until ); Py_INCREF( const_str_plain_until );
    const_str_plain_result_type = UNSTREAM_STRING( &constant_bin[ 1891599 ], 11, 1 );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 8, const_str_plain_result_type ); Py_INCREF( const_str_plain_result_type );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 9, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 10, const_str_plain_include_entities ); Py_INCREF( const_str_plain_include_entities );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 11, const_str_plain_from ); Py_INCREF( const_str_plain_from );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 12, const_str_plain_to ); Py_INCREF( const_str_plain_to );
    PyList_SET_ITEM( const_list_d067e0399662921590a235ca4f8a110c_list, 13, const_str_plain_source ); Py_INCREF( const_str_plain_source );
    const_str_digest_da006593f0dd68ed058b4d90bf10d19d = UNSTREAM_STRING( &constant_bin[ 1891610 ], 24, 0 );
    const_str_digest_1a2aee67d826c7f4aeaaf9878557cd76 = UNSTREAM_STRING( &constant_bin[ 1891634 ], 30, 0 );
    const_str_digest_62baebbc7c7dda5720aa4ae63e7e7223 = UNSTREAM_STRING( &constant_bin[ 1891664 ], 30, 0 );
    const_str_digest_e66eee9a1d5e3481bb822c6b5ab3ca24 = UNSTREAM_STRING( &constant_bin[ 1891694 ], 24, 0 );
    const_str_digest_8d3dfb74b523bb60460f2e4d68728f6c = UNSTREAM_STRING( &constant_bin[ 1891718 ], 13, 0 );
    const_str_digest_38c68a808cc6d2076078b11180ca699c = UNSTREAM_STRING( &constant_bin[ 1887739 ], 18, 0 );
    const_str_plain_sent_direct_messages = UNSTREAM_STRING( &constant_bin[ 1891731 ], 20, 1 );
    const_str_digest_622a4b6cfe6b5758397e4f2b9d5b4ffa = UNSTREAM_STRING( &constant_bin[ 1891751 ], 17, 0 );
    const_str_plain_set_settings = UNSTREAM_STRING( &constant_bin[ 1886013 ], 12, 1 );
    const_str_digest_75443704c119c988300dd0b1474ba05b = UNSTREAM_STRING( &constant_bin[ 1891768 ], 29, 0 );
    const_str_plain_search_users = UNSTREAM_STRING( &constant_bin[ 1889134 ], 12, 1 );
    const_list_953985fbe3b42e6dd3b0fd228fd13663_list = PyList_New( 6 );
    PyList_SET_ITEM( const_list_953985fbe3b42e6dd3b0fd228fd13663_list, 0, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_953985fbe3b42e6dd3b0fd228fd13663_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_953985fbe3b42e6dd3b0fd228fd13663_list, 2, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_953985fbe3b42e6dd3b0fd228fd13663_list, 3, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    PyList_SET_ITEM( const_list_953985fbe3b42e6dd3b0fd228fd13663_list, 4, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_953985fbe3b42e6dd3b0fd228fd13663_list, 5, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    const_str_plain_actual = UNSTREAM_STRING( &constant_bin[ 3945 ], 6, 1 );
    const_str_plain__pack_image = UNSTREAM_STRING( &constant_bin[ 1891797 ], 11, 1 );
    const_str_plain_get_direct_message = UNSTREAM_STRING( &constant_bin[ 1884501 ], 18, 1 );
    const_str_digest_09306c17e3aba90fd078f5b1d7d00ced = UNSTREAM_STRING( &constant_bin[ 1891808 ], 16, 0 );
    const_str_plain_offset_left = UNSTREAM_STRING( &constant_bin[ 1884424 ], 11, 1 );
    const_str_plain_target_screen_name = UNSTREAM_STRING( &constant_bin[ 1891824 ], 18, 1 );
    const_str_digest_f4e5d5ed84ab6513f0d24acff4d86a02 = UNSTREAM_STRING( &constant_bin[ 1891842 ], 20, 0 );
    const_str_plain_get_settings = UNSTREAM_STRING( &constant_bin[ 1891862 ], 12, 1 );
    const_str_digest_9f5a3c926723ef90ae0fb2c680781661 = UNSTREAM_STRING( &constant_bin[ 1891874 ], 71, 0 );
    const_str_digest_8cef34bdcaae6ce12293342dc0396ca1 = UNSTREAM_STRING( &constant_bin[ 1891945 ], 16, 0 );
    const_str_digest_e8503bbb3a47258099b6fda53eaf8cdb = UNSTREAM_STRING( &constant_bin[ 1891961 ], 24, 0 );
    const_list_51ca9f06c42bffed4c486b4a568f9a5a_list = PyList_New( 7 );
    PyList_SET_ITEM( const_list_51ca9f06c42bffed4c486b4a568f9a5a_list, 0, const_str_plain_status ); Py_INCREF( const_str_plain_status );
    const_str_plain_possibly_sensitive = UNSTREAM_STRING( &constant_bin[ 1886316 ], 18, 1 );
    PyList_SET_ITEM( const_list_51ca9f06c42bffed4c486b4a568f9a5a_list, 1, const_str_plain_possibly_sensitive ); Py_INCREF( const_str_plain_possibly_sensitive );
    PyList_SET_ITEM( const_list_51ca9f06c42bffed4c486b4a568f9a5a_list, 2, const_str_plain_in_reply_to_status_id ); Py_INCREF( const_str_plain_in_reply_to_status_id );
    PyList_SET_ITEM( const_list_51ca9f06c42bffed4c486b4a568f9a5a_list, 3, const_str_plain_lat ); Py_INCREF( const_str_plain_lat );
    PyList_SET_ITEM( const_list_51ca9f06c42bffed4c486b4a568f9a5a_list, 4, const_str_plain_long ); Py_INCREF( const_str_plain_long );
    PyList_SET_ITEM( const_list_51ca9f06c42bffed4c486b4a568f9a5a_list, 5, const_str_plain_place_id ); Py_INCREF( const_str_plain_place_id );
    PyList_SET_ITEM( const_list_51ca9f06c42bffed4c486b4a568f9a5a_list, 6, const_str_plain_display_coordinates ); Py_INCREF( const_str_plain_display_coordinates );
    const_str_plain_suggested_users = UNSTREAM_STRING( &constant_bin[ 1891985 ], 15, 1 );
    const_str_plain_granularity = UNSTREAM_STRING( &constant_bin[ 1891403 ], 11, 1 );
    const_str_digest_e2b8a1b14aae09068e870c9f25377930 = UNSTREAM_STRING( &constant_bin[ 1892000 ], 17, 0 );
    const_str_plain_related_results = UNSTREAM_STRING( &constant_bin[ 1890751 ], 15, 1 );
    const_str_digest_e65e32e1ad5c89a52e13399091279061 = UNSTREAM_STRING( &constant_bin[ 1892017 ], 82, 0 );
    const_list_str_plain_id_str_plain_count_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_count_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_count_list, 1, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_list_07b71efc5fed6e0a103510e3cd63c4b6_list = PyList_New( 8 );
    PyList_SET_ITEM( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list, 0, const_str_plain_lat ); Py_INCREF( const_str_plain_lat );
    PyList_SET_ITEM( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list, 1, const_str_plain_long ); Py_INCREF( const_str_plain_long );
    PyList_SET_ITEM( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list, 2, const_str_plain_query ); Py_INCREF( const_str_plain_query );
    PyList_SET_ITEM( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list, 3, const_str_plain_ip ); Py_INCREF( const_str_plain_ip );
    PyList_SET_ITEM( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list, 4, const_str_plain_granularity ); Py_INCREF( const_str_plain_granularity );
    const_str_plain_accuracy = UNSTREAM_STRING( &constant_bin[ 845767 ], 8, 1 );
    PyList_SET_ITEM( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list, 5, const_str_plain_accuracy ); Py_INCREF( const_str_plain_accuracy );
    PyList_SET_ITEM( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list, 6, const_str_plain_max_results ); Py_INCREF( const_str_plain_max_results );
    PyList_SET_ITEM( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list, 7, const_str_plain_contained_within ); Py_INCREF( const_str_plain_contained_within );
    const_str_digest_38b026e8371d9d15960c8cfa907bf570 = UNSTREAM_STRING( &constant_bin[ 1892099 ], 18, 0 );
    const_str_digest_2799ae5a37e5176e4c8ea86ea9b7d7b7 = UNSTREAM_STRING( &constant_bin[ 1892117 ], 21, 0 );
    const_str_plain_media_ids = UNSTREAM_STRING( &constant_bin[ 1892138 ], 9, 1 );
    const_str_digest_6225f9cb75d4bac9a74f5302c2a9f5bb = UNSTREAM_STRING( &constant_bin[ 1892147 ], 18, 0 );
    const_list_str_plain_slug_str_plain_lang_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_slug_str_plain_lang_list, 0, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_str_plain_slug_str_plain_lang_list, 1, const_str_plain_lang ); Py_INCREF( const_str_plain_lang );
    const_str_digest_1531cf2fd92dcbe136b6a129607467b6 = UNSTREAM_STRING( &constant_bin[ 1892165 ], 215, 0 );
    const_str_digest_d496f0569f91c4bcf1eca7ff6015a153 = UNSTREAM_STRING( &constant_bin[ 1892380 ], 28, 0 );
    const_str_digest_f748c991231b225b914a226867fd6566 = UNSTREAM_STRING( &constant_bin[ 1892408 ], 33, 0 );
    const_str_digest_bc5f79134ba4cfb79d1b4fcf5bd87e3c = UNSTREAM_STRING( &constant_bin[ 1892441 ], 172, 0 );
    const_str_digest_23c932ce2ac0ec47fbfdaf86834d80dc = UNSTREAM_STRING( &constant_bin[ 1892613 ], 116, 0 );
    const_str_digest_48775b7cf7a6c2dce1aac8aff7fac7c2 = UNSTREAM_STRING( &constant_bin[ 1892729 ], 14, 0 );
    const_str_digest_e31af3168fd647c07ddafd143e1fba26 = UNSTREAM_STRING( &constant_bin[ 1892743 ], 19, 0 );
    const_list_4669f2659a80dca6b20776d4ec5002eb_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_4669f2659a80dca6b20776d4ec5002eb_list, 0, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_4669f2659a80dca6b20776d4ec5002eb_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    const_str_plain_filter_to_owned_lists = UNSTREAM_STRING( &constant_bin[ 1892762 ], 21, 1 );
    PyList_SET_ITEM( const_list_4669f2659a80dca6b20776d4ec5002eb_list, 2, const_str_plain_filter_to_owned_lists ); Py_INCREF( const_str_plain_filter_to_owned_lists );
    PyList_SET_ITEM( const_list_4669f2659a80dca6b20776d4ec5002eb_list, 3, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    const_str_digest_12dda58c2026f49339f0b3c04a296696 = UNSTREAM_STRING( &constant_bin[ 1892783 ], 23, 0 );
    const_str_plain_update_with_media = UNSTREAM_STRING( &constant_bin[ 1886260 ], 17, 1 );
    const_tuple_str_digest_fd84b510bbae67ca87724f2fcd7ec268_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_fd84b510bbae67ca87724f2fcd7ec268_tuple, 0, const_str_digest_fd84b510bbae67ca87724f2fcd7ec268 ); Py_INCREF( const_str_digest_fd84b510bbae67ca87724f2fcd7ec268 );
    const_str_digest_2fc806586bf24e0d8686fe872113f7fb = UNSTREAM_STRING( &constant_bin[ 1892806 ], 22, 0 );
    const_str_digest_320e6028e3b2febfc1c8b575919cf6b2 = UNSTREAM_STRING( &constant_bin[ 1892828 ], 27, 0 );
    const_str_digest_445b8e5a611c4c0acbaa152db22975b7 = UNSTREAM_STRING( &constant_bin[ 1892855 ], 156, 0 );
    const_tuple_str_plain_self_str_plain_kargs_str_plain_e_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_kargs_str_plain_e_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_kargs_str_plain_e_tuple, 1, const_str_plain_kargs ); Py_INCREF( const_str_plain_kargs );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_kargs_str_plain_e_tuple, 2, const_str_plain_e ); Py_INCREF( const_str_plain_e );
    const_str_digest_28988e33ed956abd088af722965b5d5c = UNSTREAM_STRING( &constant_bin[ 1883772 ], 19, 0 );
    const_str_digest_612580cd99bdcefd40ed2c7188948383 = UNSTREAM_STRING( &constant_bin[ 1893011 ], 16, 0 );
    const_list_str_plain_resources_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_plain_resources_list, 0, const_str_plain_resources ); Py_INCREF( const_str_plain_resources );
    const_str_plain_get_oembed = UNSTREAM_STRING( &constant_bin[ 1889994 ], 10, 1 );
    const_str_digest_a5548bd73b87e0bf1e4224d51f1eea39 = UNSTREAM_STRING( &constant_bin[ 1893027 ], 32, 0 );
    const_list_str_plain_name_str_plain_mode_str_plain_description_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_name_str_plain_mode_str_plain_description_list, 0, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyList_SET_ITEM( const_list_str_plain_name_str_plain_mode_str_plain_description_list, 1, const_str_plain_mode ); Py_INCREF( const_str_plain_mode );
    PyList_SET_ITEM( const_list_str_plain_name_str_plain_mode_str_plain_description_list, 2, const_str_plain_description ); Py_INCREF( const_str_plain_description );
    const_str_digest_cf4521ce8156b19febb1fb5c3b43f84a = UNSTREAM_STRING( &constant_bin[ 1893059 ], 16, 0 );
    const_str_digest_54cd893de85c8288a516e5399c2f8115 = UNSTREAM_STRING( &constant_bin[ 1893075 ], 20, 0 );
    const_str_plain_add_list_members = UNSTREAM_STRING( &constant_bin[ 1883776 ], 16, 1 );
    const_str_digest_b723fb08dbad63650f46365a24739dde = UNSTREAM_STRING( &constant_bin[ 1893095 ], 73, 0 );
    const_str_digest_592540e97118d888b37a5ba8e2e119aa = UNSTREAM_STRING( &constant_bin[ 1893168 ], 274, 0 );
    const_str_digest_afe426a59704faec283b2695bed0e507 = UNSTREAM_STRING( &constant_bin[ 1893442 ], 26, 0 );
    const_str_digest_dca79e5707bd37e5dedf4665b0ef79ed = UNSTREAM_STRING( &constant_bin[ 1887822 ], 18, 0 );
    const_str_plain_update_profile = UNSTREAM_STRING( &constant_bin[ 1884355 ], 14, 1 );
    const_list_3fb2effcea21da8b12b461e5f29d68b3_list = PyList_New( 7 );
    PyList_SET_ITEM( const_list_3fb2effcea21da8b12b461e5f29d68b3_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_3fb2effcea21da8b12b461e5f29d68b3_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_3fb2effcea21da8b12b461e5f29d68b3_list, 2, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_3fb2effcea21da8b12b461e5f29d68b3_list, 3, const_str_plain_since_id ); Py_INCREF( const_str_plain_since_id );
    PyList_SET_ITEM( const_list_3fb2effcea21da8b12b461e5f29d68b3_list, 4, const_str_plain_max_id ); Py_INCREF( const_str_plain_max_id );
    PyList_SET_ITEM( const_list_3fb2effcea21da8b12b461e5f29d68b3_list, 5, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_str_plain_include_rts = UNSTREAM_STRING( &constant_bin[ 1893468 ], 11, 1 );
    PyList_SET_ITEM( const_list_3fb2effcea21da8b12b461e5f29d68b3_list, 6, const_str_plain_include_rts ); Py_INCREF( const_str_plain_include_rts );
    const_str_digest_483bc9ff574d808ea4774e642ac34ecb = UNSTREAM_STRING( &constant_bin[ 1885056 ], 18, 0 );
    const_str_plain_blocks_ids = UNSTREAM_STRING( &constant_bin[ 1893479 ], 10, 1 );
    const_str_digest_999b5d4076cb6644e3349e385587cb08 = UNSTREAM_STRING( &constant_bin[ 1893489 ], 143, 0 );
    const_str_digest_b86cd2eb879404fb8e2b90690dc10fc6 = UNSTREAM_STRING( &constant_bin[ 1893632 ], 31, 0 );
    const_str_plain_source_id = UNSTREAM_STRING( &constant_bin[ 1885883 ], 9, 1 );
    const_str_digest_4de63f19b057aa18bbf6574ef53a17d0 = UNSTREAM_STRING( &constant_bin[ 1893663 ], 35, 0 );
    const_str_digest_571fa9d0a9ad88b0bcf07466f09eb8be = UNSTREAM_STRING( &constant_bin[ 1893698 ], 16, 0 );
    const_str_plain_profile_sidebar_border_color = UNSTREAM_STRING( &constant_bin[ 1893714 ], 28, 1 );
    const_str_plain_profile_background_color = UNSTREAM_STRING( &constant_bin[ 1893742 ], 24, 1 );
    const_str_digest_02aa2813e454885f054fe05b31ab66e3 = UNSTREAM_STRING( &constant_bin[ 1893766 ], 24, 0 );
    const_str_digest_fdf6e5c8ff1db6b3450e3727889ef07a = UNSTREAM_STRING( &constant_bin[ 1893790 ], 38, 0 );
    const_str_plain_create_saved_search = UNSTREAM_STRING( &constant_bin[ 1893828 ], 19, 1 );
    const_str_digest_a8cbcbd2c1b0b111596e1669bbbec1da = UNSTREAM_STRING( &constant_bin[ 1893847 ], 12, 0 );
    const_str_plain_lookup_users = UNSTREAM_STRING( &constant_bin[ 1887500 ], 12, 1 );
    const_str_digest_c7af8385e92a1323e0ffad9de299f5bf = UNSTREAM_STRING( &constant_bin[ 1893859 ], 213, 0 );
    const_str_digest_bc5f31a881f710ef35718e7505d1bf88 = UNSTREAM_STRING( &constant_bin[ 1894072 ], 7, 0 );
    const_str_digest_3414e7d5cbaef30fe06aa06fa3bbbca7 = UNSTREAM_STRING( &constant_bin[ 1894079 ], 31, 0 );
    const_list_str_plain_query_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_plain_query_list, 0, const_str_plain_query ); Py_INCREF( const_str_plain_query );
    const_str_plain_end_sleep_time = UNSTREAM_STRING( &constant_bin[ 1894110 ], 14, 1 );
    const_str_digest_784909317ebc86aa7dd11bf7d4ce954d = UNSTREAM_STRING( &constant_bin[ 1894124 ], 26, 0 );
    const_str_plain_statuses_lookup = UNSTREAM_STRING( &constant_bin[ 1889115 ], 15, 1 );
    const_str_digest_0ad5de10c31e802b5b04470a968c2bff = UNSTREAM_STRING( &constant_bin[ 1894150 ], 22, 0 );
    const_str_digest_651dc98e39db510657fcedc61993cbfc = UNSTREAM_STRING( &constant_bin[ 1894172 ], 24, 0 );
    const_str_digest_b5ca8a904acfa86d9d73c1dca8abcdc2 = UNSTREAM_STRING( &constant_bin[ 1894196 ], 22, 0 );
    const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple = PyTuple_New( 19 );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_auth_handler = UNSTREAM_STRING( &constant_bin[ 1887579 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 1, const_str_plain_auth_handler ); Py_INCREF( const_str_plain_auth_handler );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 2, const_str_plain_host ); Py_INCREF( const_str_plain_host );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 3, const_str_plain_search_host ); Py_INCREF( const_str_plain_search_host );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 4, const_str_plain_upload_host ); Py_INCREF( const_str_plain_upload_host );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 5, const_str_plain_cache ); Py_INCREF( const_str_plain_cache );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 6, const_str_plain_api_root ); Py_INCREF( const_str_plain_api_root );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 7, const_str_plain_search_root ); Py_INCREF( const_str_plain_search_root );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 8, const_str_plain_upload_root ); Py_INCREF( const_str_plain_upload_root );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 9, const_str_plain_retry_count ); Py_INCREF( const_str_plain_retry_count );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 10, const_str_plain_retry_delay ); Py_INCREF( const_str_plain_retry_delay );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 11, const_str_plain_retry_errors ); Py_INCREF( const_str_plain_retry_errors );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 12, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 13, const_str_plain_parser ); Py_INCREF( const_str_plain_parser );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 14, const_str_plain_compression ); Py_INCREF( const_str_plain_compression );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 15, const_str_plain_wait_on_rate_limit ); Py_INCREF( const_str_plain_wait_on_rate_limit );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 16, const_str_plain_wait_on_rate_limit_notify ); Py_INCREF( const_str_plain_wait_on_rate_limit_notify );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 17, const_str_plain_proxy ); Py_INCREF( const_str_plain_proxy );
    PyTuple_SET_ITEM( const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 18, const_str_plain_parser_type ); Py_INCREF( const_str_plain_parser_type );
    const_str_digest_b2a80a1ed29265bff3e799c44b7d75bc = UNSTREAM_STRING( &constant_bin[ 1894218 ], 20, 0 );
    const_str_digest_0d96c93a739ba53a3cd2619c20ab65ab = UNSTREAM_STRING( &constant_bin[ 1894238 ], 19, 0 );
    const_str_digest_a1b7d3c3b6f89abee45323018ba91ce3 = UNSTREAM_STRING( &constant_bin[ 1894257 ], 16, 0 );
    const_str_digest_363e257218555c565e331ef66987a281 = UNSTREAM_STRING( &constant_bin[ 1894273 ], 24, 0 );
    const_str_digest_808b83565f2e4813a2cadf5717fe46af = UNSTREAM_STRING( &constant_bin[ 1894297 ], 15, 0 );
    const_str_digest_fd7b1af5cd0729e87a697ede147e56cb = UNSTREAM_STRING( &constant_bin[ 1894312 ], 30, 0 );
    const_str_digest_e81a95708f0e46e85cd3245b3c1b32f1 = UNSTREAM_STRING( &constant_bin[ 1894342 ], 40, 0 );
    const_str_digest_49cb60c70b3feb7372bd29aa9f5d9075 = UNSTREAM_STRING( &constant_bin[ 1894382 ], 32, 0 );
    const_str_digest_f13378e582ec7033dcc7a257dc43ae3a = UNSTREAM_STRING( &constant_bin[ 1894414 ], 163, 0 );
    const_str_digest_9583c79f21ae46e1ccbd495d8146a4d6 = UNSTREAM_STRING( &constant_bin[ 1894577 ], 132, 0 );
    const_str_digest_f71ac90978bc7a9458de53dc8df1a84d = UNSTREAM_STRING( &constant_bin[ 1894709 ], 135, 0 );
    const_str_digest_3fa4e8e3a69a712952ec4a32468e278a = UNSTREAM_STRING( &constant_bin[ 1894844 ], 20, 0 );
    const_str_digest_c84c0c72d2158a4f641721eefcafefe0 = UNSTREAM_STRING( &constant_bin[ 1894864 ], 116, 0 );
    const_str_digest_19da2bb2d55919865c65aefab08c1911 = UNSTREAM_STRING( &constant_bin[ 1894980 ], 23, 0 );
    const_list_str_plain_cursor_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_plain_cursor_list, 0, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    const_str_digest_578ebd36b303424b31a1aa4842e2d81a = UNSTREAM_STRING( &constant_bin[ 1895003 ], 132, 0 );
    const_list_1fb635ed5781d1b923088128ff486524_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_1fb635ed5781d1b923088128ff486524_list, 0, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_1fb635ed5781d1b923088128ff486524_list, 1, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_1fb635ed5781d1b923088128ff486524_list, 2, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_1fb635ed5781d1b923088128ff486524_list, 3, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    const_str_digest_54d295a4ba6af8d7531bb84e41a3201d = UNSTREAM_STRING( &constant_bin[ 1895135 ], 129, 0 );
    const_str_digest_fb77c2a336f766dce4d63fd0ff1ea3be = UNSTREAM_STRING( &constant_bin[ 1895264 ], 23, 0 );
    const_list_44bcfbd3893f66f93d81715a8fc425bb_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_44bcfbd3893f66f93d81715a8fc425bb_list, 0, const_str_plain_user ); Py_INCREF( const_str_plain_user );
    PyList_SET_ITEM( const_list_44bcfbd3893f66f93d81715a8fc425bb_list, 1, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_44bcfbd3893f66f93d81715a8fc425bb_list, 2, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_44bcfbd3893f66f93d81715a8fc425bb_list, 3, const_str_plain_text ); Py_INCREF( const_str_plain_text );
    const_str_plain_trends_closest = UNSTREAM_STRING( &constant_bin[ 1889896 ], 14, 1 );
    const_str_digest_00ebee2684e92197fe6506cd0fee80ba = UNSTREAM_STRING( &constant_bin[ 1895287 ], 26, 0 );
    const_list_129d794a3e6ce3d6bfa7f5152c90e27a_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_129d794a3e6ce3d6bfa7f5152c90e27a_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_129d794a3e6ce3d6bfa7f5152c90e27a_list, 1, const_str_plain_include_entities ); Py_INCREF( const_str_plain_include_entities );
    PyList_SET_ITEM( const_list_129d794a3e6ce3d6bfa7f5152c90e27a_list, 2, const_str_plain_trim_user ); Py_INCREF( const_str_plain_trim_user );
    PyList_SET_ITEM( const_list_129d794a3e6ce3d6bfa7f5152c90e27a_list, 3, const_str_plain_map ); Py_INCREF( const_str_plain_map );
    const_list_str_plain_id_str_plain_full_text_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_full_text_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_full_text_list, 1, const_str_plain_full_text ); Py_INCREF( const_str_plain_full_text );
    const_list_34e364a3c724a794662a6a4c273727c0_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_34e364a3c724a794662a6a4c273727c0_list, 0, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_34e364a3c724a794662a6a4c273727c0_list, 1, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_34e364a3c724a794662a6a4c273727c0_list, 2, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_34e364a3c724a794662a6a4c273727c0_list, 3, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    PyList_SET_ITEM( const_list_34e364a3c724a794662a6a4c273727c0_list, 4, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    const_str_digest_86c174cd2c8905fe8fe567931ce895d5 = UNSTREAM_STRING( &constant_bin[ 1895313 ], 146, 0 );
    const_str_digest_2be67310e57881d3290689415d0cd134 = UNSTREAM_STRING( &constant_bin[ 1895459 ], 24, 0 );
    const_str_plain_update_profile_colors = UNSTREAM_STRING( &constant_bin[ 1885060 ], 21, 1 );
    const_str_digest_59c55d9b0c1b7bee220e28823cfa460e = UNSTREAM_STRING( &constant_bin[ 1895483 ], 17, 0 );
    const_str_digest_7af9f3b9356e0771cc6cb512dc53d8a8 = UNSTREAM_STRING( &constant_bin[ 1895500 ], 18, 0 );
    const_tuple_856e5d1dec30b9e06b303f13a9426f50_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_856e5d1dec30b9e06b303f13a9426f50_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_856e5d1dec30b9e06b303f13a9426f50_tuple, 1, const_str_plain_id_ ); Py_INCREF( const_str_plain_id_ );
    PyTuple_SET_ITEM( const_tuple_856e5d1dec30b9e06b303f13a9426f50_tuple, 2, const_str_plain_include_entities ); Py_INCREF( const_str_plain_include_entities );
    PyTuple_SET_ITEM( const_tuple_856e5d1dec30b9e06b303f13a9426f50_tuple, 3, const_str_plain_trim_user ); Py_INCREF( const_str_plain_trim_user );
    const_str_plain_map_ = UNSTREAM_STRING( &constant_bin[ 19026 ], 4, 1 );
    PyTuple_SET_ITEM( const_tuple_856e5d1dec30b9e06b303f13a9426f50_tuple, 4, const_str_plain_map_ ); Py_INCREF( const_str_plain_map_ );
    const_str_digest_cf045d270385324eb990016ca320ca75 = UNSTREAM_STRING( &constant_bin[ 1895518 ], 27, 0 );
    const_str_plain_geo_id = UNSTREAM_STRING( &constant_bin[ 1889946 ], 6, 1 );
    const_str_plain_trend_location_woeid = UNSTREAM_STRING( &constant_bin[ 1895545 ], 20, 1 );
    const_str_digest_f14466e48af902de6d5c4c2ec0f4179b = UNSTREAM_STRING( &constant_bin[ 1895565 ], 19, 0 );
    const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple = PyTuple_New( 17 );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 0, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 1, const_str_digest_1e1a2c42d99e89facc973e40bd4ff042 ); Py_INCREF( const_str_digest_1e1a2c42d99e89facc973e40bd4ff042 );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 2, const_str_digest_38c68a808cc6d2076078b11180ca699c ); Py_INCREF( const_str_digest_38c68a808cc6d2076078b11180ca699c );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 3, const_str_digest_dca79e5707bd37e5dedf4665b0ef79ed ); Py_INCREF( const_str_digest_dca79e5707bd37e5dedf4665b0ef79ed );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 4, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 5, const_str_digest_b6e4754fd0cbabab1c207ac40c2843f7 ); Py_INCREF( const_str_digest_b6e4754fd0cbabab1c207ac40c2843f7 );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 6, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 7, const_str_digest_b6e4754fd0cbabab1c207ac40c2843f7 ); Py_INCREF( const_str_digest_b6e4754fd0cbabab1c207ac40c2843f7 );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 8, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 9, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 10, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 11, const_int_pos_60 ); Py_INCREF( const_int_pos_60 );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 12, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 13, Py_False ); Py_INCREF( Py_False );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 14, Py_False ); Py_INCREF( Py_False );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 15, Py_False ); Py_INCREF( Py_False );
    PyTuple_SET_ITEM( const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple, 16, const_str_empty ); Py_INCREF( const_str_empty );
    const_str_plain_destroy_favorite = UNSTREAM_STRING( &constant_bin[ 1895584 ], 16, 1 );
    const_list_aaf1294209ffc6dabf0b34770156cdd4_list = PyList_New( 6 );
    PyList_SET_ITEM( const_list_aaf1294209ffc6dabf0b34770156cdd4_list, 0, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    PyList_SET_ITEM( const_list_aaf1294209ffc6dabf0b34770156cdd4_list, 1, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_aaf1294209ffc6dabf0b34770156cdd4_list, 2, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_aaf1294209ffc6dabf0b34770156cdd4_list, 3, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_aaf1294209ffc6dabf0b34770156cdd4_list, 4, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_aaf1294209ffc6dabf0b34770156cdd4_list, 5, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    const_str_digest_b03ad0e2f7dde35bb7cf93f8806e0759 = UNSTREAM_STRING( &constant_bin[ 1895600 ], 18, 0 );
    const_str_digest_df0a26594b16b57d38805017a6a21bbc = UNSTREAM_STRING( &constant_bin[ 1895618 ], 24, 0 );
    const_str_digest_0662c6adbae466087c75ecfcae9879f1 = UNSTREAM_STRING( &constant_bin[ 1895642 ], 106, 0 );
    const_str_digest_aabb67db175cdb2b55a8dbf74a7c234f = UNSTREAM_STRING( &constant_bin[ 1895748 ], 202, 0 );
    const_tuple_str_plain_file_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_none_tuple, 0, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_str_plain_file_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_plain_supported_languages = UNSTREAM_STRING( &constant_bin[ 1895268 ], 19, 1 );
    const_list_str_plain_lang_list = PyList_New( 1 );
    PyList_SET_ITEM( const_list_str_plain_lang_list, 0, const_str_plain_lang ); Py_INCREF( const_str_plain_lang );
    const_str_plain_reverse_geocode = UNSTREAM_STRING( &constant_bin[ 1886174 ], 15, 1 );
    const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list = PyList_New( 6 );
    PyList_SET_ITEM( const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list, 0, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list, 2, const_str_plain_max_id ); Py_INCREF( const_str_plain_max_id );
    PyList_SET_ITEM( const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list, 3, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyList_SET_ITEM( const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list, 4, const_str_plain_since_id ); Py_INCREF( const_str_plain_since_id );
    PyList_SET_ITEM( const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list, 5, const_str_plain_max_id ); Py_INCREF( const_str_plain_max_id );
    const_str_digest_567891b485c561eb56647b9b4f01e199 = UNSTREAM_STRING( &constant_bin[ 1895950 ], 138, 0 );
    const_list_42eb6014e92476fb97e4b186a1baeb1b_list = PyList_New( 7 );
    PyList_SET_ITEM( const_list_42eb6014e92476fb97e4b186a1baeb1b_list, 0, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    PyList_SET_ITEM( const_list_42eb6014e92476fb97e4b186a1baeb1b_list, 1, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_42eb6014e92476fb97e4b186a1baeb1b_list, 2, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyList_SET_ITEM( const_list_42eb6014e92476fb97e4b186a1baeb1b_list, 3, const_str_plain_mode ); Py_INCREF( const_str_plain_mode );
    PyList_SET_ITEM( const_list_42eb6014e92476fb97e4b186a1baeb1b_list, 4, const_str_plain_description ); Py_INCREF( const_str_plain_description );
    PyList_SET_ITEM( const_list_42eb6014e92476fb97e4b186a1baeb1b_list, 5, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_42eb6014e92476fb97e4b186a1baeb1b_list, 6, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    const_tuple_7b7516185037535e752269bc889765ef_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_7b7516185037535e752269bc889765ef_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_7b7516185037535e752269bc889765ef_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_7b7516185037535e752269bc889765ef_tuple, 2, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_7b7516185037535e752269bc889765ef_tuple, 3, const_str_plain_post_data ); Py_INCREF( const_str_plain_post_data );
    PyTuple_SET_ITEM( const_tuple_7b7516185037535e752269bc889765ef_tuple, 4, const_str_plain_media_ids ); Py_INCREF( const_str_plain_media_ids );
    const_list_str_plain_q_str_plain_count_str_plain_page_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_q_str_plain_count_str_plain_page_list, 0, const_str_plain_q ); Py_INCREF( const_str_plain_q );
    PyList_SET_ITEM( const_list_str_plain_q_str_plain_count_str_plain_page_list, 1, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyList_SET_ITEM( const_list_str_plain_q_str_plain_count_str_plain_page_list, 2, const_str_plain_page ); Py_INCREF( const_str_plain_page );
    const_list_aa8f73213b7294650093b5bad94c8ad0_list = PyList_New( 7 );
    PyList_SET_ITEM( const_list_aa8f73213b7294650093b5bad94c8ad0_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_aa8f73213b7294650093b5bad94c8ad0_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_aa8f73213b7294650093b5bad94c8ad0_list, 2, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_aa8f73213b7294650093b5bad94c8ad0_list, 3, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    PyList_SET_ITEM( const_list_aa8f73213b7294650093b5bad94c8ad0_list, 4, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyList_SET_ITEM( const_list_aa8f73213b7294650093b5bad94c8ad0_list, 5, const_str_plain_skip_status ); Py_INCREF( const_str_plain_skip_status );
    const_str_plain_include_user_entities = UNSTREAM_STRING( &constant_bin[ 1896088 ], 21, 1 );
    PyList_SET_ITEM( const_list_aa8f73213b7294650093b5bad94c8ad0_list, 6, const_str_plain_include_user_entities ); Py_INCREF( const_str_plain_include_user_entities );
    const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 1, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 2, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 3, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 4, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 5, const_str_plain_headers ); Py_INCREF( const_str_plain_headers );
    PyTuple_SET_ITEM( const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 6, const_str_plain_post_data ); Py_INCREF( const_str_plain_post_data );
    const_str_digest_ebc9e95f94a8d9179da0765285d67638 = UNSTREAM_STRING( &constant_bin[ 1896109 ], 21, 0 );
    const_str_digest_8303e4c179f5e998cba680585aa8c2cd = UNSTREAM_STRING( &constant_bin[ 1896130 ], 127, 0 );
    const_str_digest_2d558f05a8b1558cd3af7d4147c2fff0 = UNSTREAM_STRING( &constant_bin[ 1896257 ], 19, 0 );
    const_tuple_d697bb94c12916b1698f9c2bcdae4a37_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1896276 ], 1598 );
    const_str_digest_06999451735b900f32e4cce52a4ace99 = UNSTREAM_STRING( &constant_bin[ 1897874 ], 266, 0 );
    const_str_digest_5447453aa9288d90a451b43ec284a820 = UNSTREAM_STRING( &constant_bin[ 1898140 ], 64, 0 );
    const_str_plain_show_list_member = UNSTREAM_STRING( &constant_bin[ 1890162 ], 16, 1 );
    const_str_plain_update_profile_image = UNSTREAM_STRING( &constant_bin[ 1886125 ], 20, 1 );
    const_list_str_plain_include_entities_str_plain_skip_status_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_include_entities_str_plain_skip_status_list, 0, const_str_plain_include_entities ); Py_INCREF( const_str_plain_include_entities );
    PyList_SET_ITEM( const_list_str_plain_include_entities_str_plain_skip_status_list, 1, const_str_plain_skip_status ); Py_INCREF( const_str_plain_skip_status );
    const_str_digest_804c54db15a9f3830303a1e2cfdea314 = UNSTREAM_STRING( &constant_bin[ 1898204 ], 24, 0 );
    const_str_digest_281199dc3e47b43394a8ba5373d1dc53 = UNSTREAM_STRING( &constant_bin[ 1898228 ], 17, 0 );
    const_str_digest_89ace06535690dd3a8ba341162ba6c67 = UNSTREAM_STRING( &constant_bin[ 1898245 ], 152, 0 );
    const_str_plain_strerror = UNSTREAM_STRING( &constant_bin[ 1898397 ], 8, 1 );
    const_str_digest_9540625229012577e2839f9582e3534d = UNSTREAM_STRING( &constant_bin[ 1898405 ], 18, 0 );
    const_str_digest_bfc29badd539a95d68d8979f16c26243 = UNSTREAM_STRING( &constant_bin[ 1898423 ], 132, 0 );
    const_tuple_str_plain_self_str_plain_user_ids_str_plain_screen_names_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_user_ids_str_plain_screen_names_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_user_ids_str_plain_screen_names_tuple, 1, const_str_plain_user_ids ); Py_INCREF( const_str_plain_user_ids );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_user_ids_str_plain_screen_names_tuple, 2, const_str_plain_screen_names ); Py_INCREF( const_str_plain_screen_names );
    const_str_digest_8cc3d659f7f338fbd6987eb97378a583 = UNSTREAM_STRING( &constant_bin[ 1898555 ], 23, 0 );
    const_str_plain__statuses_lookup = UNSTREAM_STRING( &constant_bin[ 1894222 ], 16, 1 );
    const_str_digest_09229e3d4e2a51bab3c7c3bb7663d7d0 = UNSTREAM_STRING( &constant_bin[ 1898578 ], 281, 0 );
    const_str_digest_5d2cbae8207d78ffd1858eaafeff42f3 = UNSTREAM_STRING( &constant_bin[ 1898859 ], 35, 0 );
    const_str_digest_8eae722029f6152a0a23f8b89d8e61c2 = UNSTREAM_STRING( &constant_bin[ 1898894 ], 25, 0 );
    const_list_str_plain_screen_name_str_plain_user_id_str_plain_cursor_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_screen_name_str_plain_user_id_str_plain_cursor_list, 0, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_str_plain_screen_name_str_plain_user_id_str_plain_cursor_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_str_plain_screen_name_str_plain_user_id_str_plain_cursor_list, 2, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    const_str_plain_remove_list_members = UNSTREAM_STRING( &constant_bin[ 1886047 ], 19, 1 );
    const_str_plain_allow_contributor_request = UNSTREAM_STRING( &constant_bin[ 1898097 ], 25, 1 );
    const_str_plain_lookup_friendships = UNSTREAM_STRING( &constant_bin[ 1894985 ], 18, 1 );
    const_str_plain_destroy_block = UNSTREAM_STRING( &constant_bin[ 1892004 ], 13, 1 );
    const_str_digest_b7ffcc238d601b950ccc3fe5b78aa342 = UNSTREAM_STRING( &constant_bin[ 1898919 ], 167, 0 );
    const_str_plain_start_sleep_time = UNSTREAM_STRING( &constant_bin[ 1897998 ], 16, 1 );
    const_str_digest_c4e98db83eccbb000476507c6dc8518e = UNSTREAM_STRING( &constant_bin[ 1899086 ], 20, 0 );
    const_str_digest_15d1d91df570e1ce05e82d1e33268bce = UNSTREAM_STRING( &constant_bin[ 1899106 ], 23, 0 );
    const_str_digest_ece36eca1642434f021d31a629a01139 = UNSTREAM_STRING( &constant_bin[ 1899129 ], 188, 0 );
    const_str_plain_suggested_categories = UNSTREAM_STRING( &constant_bin[ 1896646 ], 20, 1 );
    const_str_digest_3c677b0cd2774d8add18b7be8c610dd5 = UNSTREAM_STRING( &constant_bin[ 1899317 ], 17, 0 );
    const_str_digest_ca2a72194b9d440300170a0ba4e15698 = UNSTREAM_STRING( &constant_bin[ 1899334 ], 21, 0 );
    const_str_digest_5287048a93782de72410fb0927594c1b = UNSTREAM_STRING( &constant_bin[ 1899355 ], 21, 0 );
    const_str_digest_978374bd9bde6f81405ac169bfeefabb = UNSTREAM_STRING( &constant_bin[ 1899376 ], 64, 0 );
    const_str_plain_banner = UNSTREAM_STRING( &constant_bin[ 1884370 ], 6, 1 );
    const_str_digest_7be423d4555a3c344f1aa8085a43d752 = UNSTREAM_STRING( &constant_bin[ 1899440 ], 18, 0 );
    const_bytes_digest_74924bf337e444549ac1b0136fdfb8af = UNSTREAM_BYTES( &constant_bin[ 1884284 ], 6 );
    const_list_f56ed37d3e4edab2fc426a9c23df450c_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_f56ed37d3e4edab2fc426a9c23df450c_list, 0, const_str_plain_include_entities ); Py_INCREF( const_str_plain_include_entities );
    PyList_SET_ITEM( const_list_f56ed37d3e4edab2fc426a9c23df450c_list, 1, const_str_plain_skip_status ); Py_INCREF( const_str_plain_skip_status );
    const_str_plain_include_email = UNSTREAM_STRING( &constant_bin[ 1899458 ], 13, 1 );
    PyList_SET_ITEM( const_list_f56ed37d3e4edab2fc426a9c23df450c_list, 2, const_str_plain_include_email ); Py_INCREF( const_str_plain_include_email );
    const_list_78d9ab4f323992062dce0e89a18449e8_list = PyList_New( 8 );
    PyList_SET_ITEM( const_list_78d9ab4f323992062dce0e89a18449e8_list, 0, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_78d9ab4f323992062dce0e89a18449e8_list, 1, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    PyList_SET_ITEM( const_list_78d9ab4f323992062dce0e89a18449e8_list, 2, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_78d9ab4f323992062dce0e89a18449e8_list, 3, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    PyList_SET_ITEM( const_list_78d9ab4f323992062dce0e89a18449e8_list, 4, const_str_plain_since_id ); Py_INCREF( const_str_plain_since_id );
    PyList_SET_ITEM( const_list_78d9ab4f323992062dce0e89a18449e8_list, 5, const_str_plain_max_id ); Py_INCREF( const_str_plain_max_id );
    PyList_SET_ITEM( const_list_78d9ab4f323992062dce0e89a18449e8_list, 6, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyList_SET_ITEM( const_list_78d9ab4f323992062dce0e89a18449e8_list, 7, const_str_plain_include_rts ); Py_INCREF( const_str_plain_include_rts );
    const_str_digest_8f3d33d979cf92eb49f299dc76b76849 = UNSTREAM_STRING( &constant_bin[ 1899471 ], 120, 0 );
    const_str_digest_d3a2361ae202e23040117511b6ec4379 = UNSTREAM_STRING( &constant_bin[ 1899591 ], 10, 0 );
    const_str_digest_300d305004facd64d9b77fb88f3d2ae3 = UNSTREAM_STRING( &constant_bin[ 1899601 ], 18, 0 );
    const_str_digest_db4c941cc346078335e58955ee2cbe12 = UNSTREAM_STRING( &constant_bin[ 1899619 ], 29, 0 );
    const_list_840693dbcc7964c425178c3b96ce7306_list = PyList_New( 7 );
    PyList_SET_ITEM( const_list_840693dbcc7964c425178c3b96ce7306_list, 0, const_str_plain_sleep_time_enabled ); Py_INCREF( const_str_plain_sleep_time_enabled );
    PyList_SET_ITEM( const_list_840693dbcc7964c425178c3b96ce7306_list, 1, const_str_plain_start_sleep_time ); Py_INCREF( const_str_plain_start_sleep_time );
    PyList_SET_ITEM( const_list_840693dbcc7964c425178c3b96ce7306_list, 2, const_str_plain_end_sleep_time ); Py_INCREF( const_str_plain_end_sleep_time );
    PyList_SET_ITEM( const_list_840693dbcc7964c425178c3b96ce7306_list, 3, const_str_plain_time_zone ); Py_INCREF( const_str_plain_time_zone );
    PyList_SET_ITEM( const_list_840693dbcc7964c425178c3b96ce7306_list, 4, const_str_plain_trend_location_woeid ); Py_INCREF( const_str_plain_trend_location_woeid );
    PyList_SET_ITEM( const_list_840693dbcc7964c425178c3b96ce7306_list, 5, const_str_plain_allow_contributor_request ); Py_INCREF( const_str_plain_allow_contributor_request );
    PyList_SET_ITEM( const_list_840693dbcc7964c425178c3b96ce7306_list, 6, const_str_plain_lang ); Py_INCREF( const_str_plain_lang );
    const_str_digest_1727320ce5a4f4ddddbff2515eaa9687 = UNSTREAM_STRING( &constant_bin[ 1899648 ], 121, 0 );
    const_list_str_plain_id_str_plain_exclude_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_exclude_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_exclude_list, 1, const_str_plain_exclude ); Py_INCREF( const_str_plain_exclude );
    const_str_digest_07eb9f07c84c74670a513477aa4b0f23 = UNSTREAM_STRING( &constant_bin[ 1899769 ], 169, 0 );
    const_list_0bfb6f3bc98d1b4a9256592b354ceb73_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_0bfb6f3bc98d1b4a9256592b354ceb73_list, 0, const_str_plain_profile_background_color ); Py_INCREF( const_str_plain_profile_background_color );
    const_str_plain_profile_text_color = UNSTREAM_STRING( &constant_bin[ 1898719 ], 18, 1 );
    PyList_SET_ITEM( const_list_0bfb6f3bc98d1b4a9256592b354ceb73_list, 1, const_str_plain_profile_text_color ); Py_INCREF( const_str_plain_profile_text_color );
    PyList_SET_ITEM( const_list_0bfb6f3bc98d1b4a9256592b354ceb73_list, 2, const_str_plain_profile_link_color ); Py_INCREF( const_str_plain_profile_link_color );
    const_str_plain_profile_sidebar_fill_color = UNSTREAM_STRING( &constant_bin[ 1898776 ], 26, 1 );
    PyList_SET_ITEM( const_list_0bfb6f3bc98d1b4a9256592b354ceb73_list, 3, const_str_plain_profile_sidebar_fill_color ); Py_INCREF( const_str_plain_profile_sidebar_fill_color );
    PyList_SET_ITEM( const_list_0bfb6f3bc98d1b4a9256592b354ceb73_list, 4, const_str_plain_profile_sidebar_border_color ); Py_INCREF( const_str_plain_profile_sidebar_border_color );
    const_str_digest_0c4773362cee604a540f9beaabb9825a = UNSTREAM_STRING( &constant_bin[ 1899938 ], 150, 0 );
    const_str_digest_5fbdc342c8714e56e1c0a82e23cfd382 = UNSTREAM_STRING( &constant_bin[ 1900088 ], 35, 0 );
    const_tuple_str_plain_bind_api_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_bind_api_tuple, 0, const_str_plain_bind_api ); Py_INCREF( const_str_plain_bind_api );
    const_str_digest_88fd5de8fa8c6a74bb7e177787112132 = UNSTREAM_STRING( &constant_bin[ 1900123 ], 17, 0 );
    const_str_digest_6443a4a50635bcbcf7c37a18afb48d25 = UNSTREAM_STRING( &constant_bin[ 1900140 ], 17, 0 );
    const_str_digest_24a9c55fa89564df44331619ae461145 = UNSTREAM_STRING( &constant_bin[ 1890462 ], 11, 0 );
    const_str_digest_7f8e5cdb6b1d80abf810021a12ed733a = UNSTREAM_STRING( &constant_bin[ 1891751 ], 13, 0 );
    const_str_digest_985492fc3d37925093d88c0648ed6275 = UNSTREAM_STRING( &constant_bin[ 1900157 ], 206, 0 );
    const_str_plain_media_upload = UNSTREAM_STRING( &constant_bin[ 1891949 ], 12, 1 );
    const_list_b91cc45353a8cec6ac4b925279535b3b_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_b91cc45353a8cec6ac4b925279535b3b_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_b91cc45353a8cec6ac4b925279535b3b_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_b91cc45353a8cec6ac4b925279535b3b_list, 2, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_b91cc45353a8cec6ac4b925279535b3b_list, 3, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    const_str_plain__lookup_users = UNSTREAM_STRING( &constant_bin[ 1895487 ], 13, 1 );
    const_str_digest_e6d9590fc783070c72dab35bf14eaeab = UNSTREAM_STRING( &constant_bin[ 1900363 ], 35, 0 );
    const_str_plain_favorites = UNSTREAM_STRING( &constant_bin[ 1885082 ], 9, 1 );
    const_str_plain_create_block = UNSTREAM_STRING( &constant_bin[ 1893015 ], 12, 1 );
    const_str_digest_3c02ff2e7dfa9926f8cf7fc098b0c0f2 = UNSTREAM_STRING( &constant_bin[ 1900398 ], 153, 0 );
    const_str_plain_update_profile_banner = UNSTREAM_STRING( &constant_bin[ 1884355 ], 21, 1 );
    const_str_digest_310923d8fb049d106a50f5b3d36fca66 = UNSTREAM_STRING( &constant_bin[ 1900551 ], 19, 0 );
    const_str_plain_source_screen_name = UNSTREAM_STRING( &constant_bin[ 1885896 ], 18, 1 );
    const_str_digest_69e08e6fc6de624c38c56d4f6953d6ac = UNSTREAM_STRING( &constant_bin[ 1900570 ], 15, 0 );
    const_tuple_str_plain_ModelParser_str_plain_Parser_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ModelParser_str_plain_Parser_tuple, 0, const_str_plain_ModelParser ); Py_INCREF( const_str_plain_ModelParser );
    PyTuple_SET_ITEM( const_tuple_str_plain_ModelParser_str_plain_Parser_tuple, 1, const_str_plain_Parser ); Py_INCREF( const_str_plain_Parser );
    const_str_digest_6b553b725b783bbd61a89d2d6054ece7 = UNSTREAM_STRING( &constant_bin[ 1900585 ], 146, 0 );
    const_str_digest_bf90fe8565be9b1ec6b6d85eaf3804e0 = UNSTREAM_STRING( &constant_bin[ 1900731 ], 16, 0 );
    const_str_digest_db8481b718e6868b6f8b952fadfbd81a = UNSTREAM_STRING( &constant_bin[ 1900747 ], 81, 0 );
    const_tuple_str_plain_media_ids_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_media_ids_none_tuple, 0, const_str_plain_media_ids ); Py_INCREF( const_str_plain_media_ids );
    PyTuple_SET_ITEM( const_tuple_str_plain_media_ids_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_list_fb690ea06d7213e79b965d7e6852986a_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_fb690ea06d7213e79b965d7e6852986a_list, 0, const_str_plain_width ); Py_INCREF( const_str_plain_width );
    PyList_SET_ITEM( const_list_fb690ea06d7213e79b965d7e6852986a_list, 1, const_str_plain_height ); Py_INCREF( const_str_plain_height );
    PyList_SET_ITEM( const_list_fb690ea06d7213e79b965d7e6852986a_list, 2, const_str_plain_offset_left ); Py_INCREF( const_str_plain_offset_left );
    const_str_plain_offset_right = UNSTREAM_STRING( &constant_bin[ 1884439 ], 12, 1 );
    PyList_SET_ITEM( const_list_fb690ea06d7213e79b965d7e6852986a_list, 3, const_str_plain_offset_right ); Py_INCREF( const_str_plain_offset_right );
    const_list_9eda2c832631455d3a56a5a445b7219b_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_9eda2c832631455d3a56a5a445b7219b_list, 0, const_str_plain_lat ); Py_INCREF( const_str_plain_lat );
    PyList_SET_ITEM( const_list_9eda2c832631455d3a56a5a445b7219b_list, 1, const_str_plain_long ); Py_INCREF( const_str_plain_long );
    PyList_SET_ITEM( const_list_9eda2c832631455d3a56a5a445b7219b_list, 2, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyList_SET_ITEM( const_list_9eda2c832631455d3a56a5a445b7219b_list, 3, const_str_plain_contained_within ); Py_INCREF( const_str_plain_contained_within );
    const_str_digest_ee72c00a5db8b37e1bc3725f827ef505 = UNSTREAM_STRING( &constant_bin[ 1900828 ], 23, 0 );
    const_list_d14a2b096f864b5944e20d0c97497208_list = PyList_New( 6 );
    PyList_SET_ITEM( const_list_d14a2b096f864b5944e20d0c97497208_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_d14a2b096f864b5944e20d0c97497208_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_d14a2b096f864b5944e20d0c97497208_list, 2, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_d14a2b096f864b5944e20d0c97497208_list, 3, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    PyList_SET_ITEM( const_list_d14a2b096f864b5944e20d0c97497208_list, 4, const_str_plain_skip_status ); Py_INCREF( const_str_plain_skip_status );
    PyList_SET_ITEM( const_list_d14a2b096f864b5944e20d0c97497208_list, 5, const_str_plain_include_user_entities ); Py_INCREF( const_str_plain_include_user_entities );
    const_str_digest_a61fd80e4b365a71ba9c935f93dda4f0 = UNSTREAM_STRING( &constant_bin[ 1900851 ], 197, 0 );
    const_str_plain_get_status = UNSTREAM_STRING( &constant_bin[ 1885645 ], 10, 1 );
    const_str_digest_131e077fd57b232594de41e92b0ceefa = UNSTREAM_STRING( &constant_bin[ 1901048 ], 20, 0 );
    const_str_digest_62fe6022e4127973bec55672d44251bb = UNSTREAM_STRING( &constant_bin[ 1901068 ], 121, 0 );
    const_str_digest_78d37c1f54ef33d3da7025bc6b2c802b = UNSTREAM_STRING( &constant_bin[ 1901189 ], 201, 0 );
    const_str_digest_6ae054d8437a6b6755d526fc27607304 = UNSTREAM_STRING( &constant_bin[ 1901390 ], 16, 0 );
    const_str_digest_759ecd650556e808605cc94cab3ed303 = UNSTREAM_STRING( &constant_bin[ 1901406 ], 61, 0 );
    const_list_str_plain_screen_name_str_plain_user_id_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_screen_name_str_plain_user_id_list, 0, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_str_plain_screen_name_str_plain_user_id_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list, 2, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    const_str_digest_e562a6d022aa3b5ce59db75be9d796b0 = UNSTREAM_STRING( &constant_bin[ 1895287 ], 19, 0 );
    const_str_digest_28e37a0e30ec7b76e2f64f41a47c896e = UNSTREAM_STRING( &constant_bin[ 1901467 ], 22, 0 );
    const_str_digest_d00966236b01636a98b6693baf2363d3 = UNSTREAM_STRING( &constant_bin[ 1901489 ], 14, 0 );
    const_tuple_str_plain_image_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_image_none_tuple, 0, const_str_plain_image ); Py_INCREF( const_str_plain_image );
    PyTuple_SET_ITEM( const_tuple_str_plain_image_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_plain_direct_messages = UNSTREAM_STRING( &constant_bin[ 1883994 ], 15, 1 );
    const_list_ed37b586f3db572b56b4aeb74f84fa9e_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_ed37b586f3db572b56b4aeb74f84fa9e_list, 0, const_str_plain_lat ); Py_INCREF( const_str_plain_lat );
    PyList_SET_ITEM( const_list_ed37b586f3db572b56b4aeb74f84fa9e_list, 1, const_str_plain_long ); Py_INCREF( const_str_plain_long );
    PyList_SET_ITEM( const_list_ed37b586f3db572b56b4aeb74f84fa9e_list, 2, const_str_plain_accuracy ); Py_INCREF( const_str_plain_accuracy );
    PyList_SET_ITEM( const_list_ed37b586f3db572b56b4aeb74f84fa9e_list, 3, const_str_plain_granularity ); Py_INCREF( const_str_plain_granularity );
    PyList_SET_ITEM( const_list_ed37b586f3db572b56b4aeb74f84fa9e_list, 4, const_str_plain_max_results ); Py_INCREF( const_str_plain_max_results );
    const_str_digest_4e8f99d484fb560e8ee48515ab64a483 = UNSTREAM_STRING( &constant_bin[ 1901503 ], 23, 0 );
    const_str_digest_ec9fe9d7e6e00a2b2a452d19b3d04cae = UNSTREAM_STRING( &constant_bin[ 1901526 ], 16, 0 );
    const_str_digest_3fdde71a332dc56f764914a9c12487ee = UNSTREAM_STRING( &constant_bin[ 1901542 ], 22, 0 );
    const_list_4b45229f5bc30e6129da8bf9aa36c3ce_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_4b45229f5bc30e6129da8bf9aa36c3ce_list, 0, const_str_plain_source_id ); Py_INCREF( const_str_plain_source_id );
    PyList_SET_ITEM( const_list_4b45229f5bc30e6129da8bf9aa36c3ce_list, 1, const_str_plain_source_screen_name ); Py_INCREF( const_str_plain_source_screen_name );
    PyList_SET_ITEM( const_list_4b45229f5bc30e6129da8bf9aa36c3ce_list, 2, const_str_plain_target_id ); Py_INCREF( const_str_plain_target_id );
    PyList_SET_ITEM( const_list_4b45229f5bc30e6129da8bf9aa36c3ce_list, 3, const_str_plain_target_screen_name ); Py_INCREF( const_str_plain_target_screen_name );
    const_str_digest_17da35c39503143982d9656de8125682 = UNSTREAM_STRING( &constant_bin[ 1901564 ], 18, 0 );
    const_str_digest_2913d5d352c29486a324a4ce71584f9e = UNSTREAM_STRING( &constant_bin[ 1901582 ], 15, 0 );
    const_list_str_plain_lat_str_plain_long_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_lat_str_plain_long_list, 0, const_str_plain_lat ); Py_INCREF( const_str_plain_lat );
    PyList_SET_ITEM( const_list_str_plain_lat_str_plain_long_list, 1, const_str_plain_long ); Py_INCREF( const_str_plain_long );
    const_list_str_plain_since_id_str_plain_max_id_str_plain_count_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_str_plain_since_id_str_plain_max_id_str_plain_count_list, 0, const_str_plain_since_id ); Py_INCREF( const_str_plain_since_id );
    PyList_SET_ITEM( const_list_str_plain_since_id_str_plain_max_id_str_plain_count_list, 1, const_str_plain_max_id ); Py_INCREF( const_str_plain_max_id );
    PyList_SET_ITEM( const_list_str_plain_since_id_str_plain_max_id_str_plain_count_list, 2, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_str_digest_d43de8fe953db47b800441dfbd89204f = UNSTREAM_STRING( &constant_bin[ 1901597 ], 22, 0 );
    const_str_plain_geo_similar_places = UNSTREAM_STRING( &constant_bin[ 1894154 ], 18, 1 );
    const_str_digest_bee07e6c80d6a3868c8f365a4bfd4ccf = UNSTREAM_STRING( &constant_bin[ 1901619 ], 19, 0 );
    const_str_digest_2d285a07f0074c4ef0b4379ee5b833ca = UNSTREAM_STRING( &constant_bin[ 1901638 ], 12, 0 );
    const_str_digest_dbf7bdf5c35a0528fed59ebbd4d3b64a = UNSTREAM_STRING( &constant_bin[ 1901650 ], 19, 0 );
    const_str_plain_friends_ids = UNSTREAM_STRING( &constant_bin[ 1890466 ], 11, 1 );
    const_list_23e9c1d06e23e57b6d2e1748373f4627_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_23e9c1d06e23e57b6d2e1748373f4627_list, 0, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyList_SET_ITEM( const_list_23e9c1d06e23e57b6d2e1748373f4627_list, 1, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_23e9c1d06e23e57b6d2e1748373f4627_list, 2, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    PyList_SET_ITEM( const_list_23e9c1d06e23e57b6d2e1748373f4627_list, 3, const_str_plain_cursor ); Py_INCREF( const_str_plain_cursor );
    PyList_SET_ITEM( const_list_23e9c1d06e23e57b6d2e1748373f4627_list, 4, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_str_digest_945fea799c35e94540f8a9c04ba3f295 = UNSTREAM_STRING( &constant_bin[ 1901669 ], 24, 0 );
    const_str_digest_ccd98383543c4ae9b5077b1e6b4c4f4b = UNSTREAM_STRING( &constant_bin[ 1901693 ], 12, 0 );
    const_str_digest_3299a12f6f0d7eff846afc0d562df5c5 = UNSTREAM_STRING( &constant_bin[ 1901705 ], 145, 0 );
    const_str_digest_27c77b999a06daa68c1dd046832297fc = UNSTREAM_STRING( &constant_bin[ 1901850 ], 23, 0 );
    const_str_digest_b8fee6cc25e1073dbe97d6f1a83fab53 = UNSTREAM_STRING( &constant_bin[ 1901873 ], 185, 0 );
    const_str_plain_suggested_users_tweets = UNSTREAM_STRING( &constant_bin[ 1895291 ], 22, 1 );
    const_str_digest_8be43d54e61f3b6b01a346c1ba5054fc = UNSTREAM_STRING( &constant_bin[ 1902058 ], 196, 0 );
    const_tuple_str_plain_list_to_csv_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_list_to_csv_tuple, 0, const_str_plain_list_to_csv ); Py_INCREF( const_str_plain_list_to_csv );
    const_list_str_plain_user_id_str_plain_screen_name_list = PyList_New( 2 );
    PyList_SET_ITEM( const_list_str_plain_user_id_str_plain_screen_name_list, 0, const_str_plain_user_id ); Py_INCREF( const_str_plain_user_id );
    PyList_SET_ITEM( const_list_str_plain_user_id_str_plain_screen_name_list, 1, const_str_plain_screen_name ); Py_INCREF( const_str_plain_screen_name );
    const_str_digest_565b527d5304682422919b8a1fd5349e = UNSTREAM_STRING( &constant_bin[ 1902254 ], 13, 0 );
    const_str_plain_friendships_incoming = UNSTREAM_STRING( &constant_bin[ 1891965 ], 20, 1 );
    const_str_digest_5cf980af74af6ab728c2d69eb9327e9f = UNSTREAM_STRING( &constant_bin[ 1902267 ], 20, 0 );
    const_str_digest_71230f121584b224b45d8a3c12288bb3 = UNSTREAM_STRING( &constant_bin[ 1902287 ], 26, 0 );
    const_str_digest_64c81487a3ad4bd585303d823dd3f863 = UNSTREAM_STRING( &constant_bin[ 1902313 ], 25, 0 );
    const_str_digest_0ad382a0d56f19aa6d2764f59c2989b7 = UNSTREAM_STRING( &constant_bin[ 1902338 ], 24, 0 );
    const_list_08ef7d211f3dc1af49eb8c8da29d3172_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_08ef7d211f3dc1af49eb8c8da29d3172_list, 0, const_str_plain_owner_screen_name ); Py_INCREF( const_str_plain_owner_screen_name );
    PyList_SET_ITEM( const_list_08ef7d211f3dc1af49eb8c8da29d3172_list, 1, const_str_plain_owner_id ); Py_INCREF( const_str_plain_owner_id );
    PyList_SET_ITEM( const_list_08ef7d211f3dc1af49eb8c8da29d3172_list, 2, const_str_plain_list_id ); Py_INCREF( const_str_plain_list_id );
    PyList_SET_ITEM( const_list_08ef7d211f3dc1af49eb8c8da29d3172_list, 3, const_str_plain_slug ); Py_INCREF( const_str_plain_slug );
    const_str_digest_df790ea9e071dfbd320d15db065af57b = UNSTREAM_STRING( &constant_bin[ 1902362 ], 152, 0 );
    const_str_digest_e98063d55979bf6aa56048c9e3e3f070 = UNSTREAM_STRING( &constant_bin[ 1902514 ], 20, 0 );
    const_str_digest_7a750f74331b2530dee49577b9d23ee6 = UNSTREAM_STRING( &constant_bin[ 1902534 ], 178, 0 );
    const_str_digest_6c16d68b6e33255dc9d1b6cd7fc16ff0 = UNSTREAM_STRING( &constant_bin[ 1902712 ], 25, 0 );
    const_str_digest_ae4591cdba4f38c808424db8a698b051 = UNSTREAM_STRING( &constant_bin[ 1902737 ], 21, 0 );
    const_str_plain__add_list_members = UNSTREAM_STRING( &constant_bin[ 1892121 ], 17, 1 );
    const_str_digest_2f82eefabf468db807328e640eb73f53 = UNSTREAM_STRING( &constant_bin[ 1902758 ], 23, 0 );
    const_str_digest_7e73a73d4e07f04e5b4f57f09717a3a6 = UNSTREAM_STRING( &constant_bin[ 1902781 ], 181, 0 );
    const_str_digest_23e5cd4e2147e680a9c725f535c4b960 = UNSTREAM_STRING( &constant_bin[ 1902962 ], 126, 0 );
    const_str_plain_get_saved_search = UNSTREAM_STRING( &constant_bin[ 1884656 ], 16, 1 );
    const_str_digest_42118a50e3ae74965934eda9649e9334 = UNSTREAM_STRING( &constant_bin[ 1903088 ], 19, 0 );
    const_str_digest_5ebfad0f66a82c549d44343df2b0fe91 = UNSTREAM_STRING( &constant_bin[ 1903107 ], 31, 0 );
    const_str_digest_a11ae09cc6fff4c91a41f1df0c6de382 = UNSTREAM_STRING( &constant_bin[ 1903138 ], 20, 0 );
    const_str_digest_fc9041366e6b71029e3ea1b77c6fa884 = UNSTREAM_STRING( &constant_bin[ 1903158 ], 28, 0 );
    const_str_digest_fc7f46642770fe286a572bede93cf772 = UNSTREAM_STRING( &constant_bin[ 1903186 ], 144, 0 );
    const_str_digest_05fbce3583e5a579bf8f75663ce4fd97 = UNSTREAM_STRING( &constant_bin[ 1903330 ], 22, 0 );
    const_str_plain__lookup_friendships = UNSTREAM_STRING( &constant_bin[ 1894984 ], 19, 1 );
    const_str_digest_bb48cd7f766174b99fdc720d0c014766 = UNSTREAM_STRING( &constant_bin[ 1903352 ], 205, 0 );
    const_str_digest_212b1fd51e9d2a886c8b632b1e01e542 = UNSTREAM_STRING( &constant_bin[ 1903557 ], 179, 0 );
    const_str_digest_882700d8bd4cef6393e4be98256ab389 = UNSTREAM_STRING( &constant_bin[ 1903736 ], 169, 0 );
    const_str_digest_0f78a3decac53157d4a8cbc0e851278e = UNSTREAM_STRING( &constant_bin[ 1903905 ], 30, 0 );
    const_str_plain_home_timeline = UNSTREAM_STRING( &constant_bin[ 1889293 ], 13, 1 );
    const_str_plain_set_delivery_device = UNSTREAM_STRING( &constant_bin[ 1897052 ], 19, 1 );
    const_str_digest_30b75129bfc54d96ded03f1b3331096b = UNSTREAM_STRING( &constant_bin[ 1903935 ], 23, 0 );
    const_str_digest_d0a158b8ea9e2a619ed75e58447a5dba = UNSTREAM_STRING( &constant_bin[ 1903958 ], 18, 0 );
    const_str_digest_2267a5e5e0ef8ae2ab19d7d4fa3ae731 = UNSTREAM_STRING( &constant_bin[ 1903976 ], 14, 0 );
    const_str_digest_ee671456ad77bf6d9095a4663f796692 = UNSTREAM_STRING( &constant_bin[ 1903990 ], 155, 0 );
    const_str_digest_b1a370465cde0421dd8ca6827beab883 = UNSTREAM_STRING( &constant_bin[ 1904145 ], 120, 0 );
    const_str_digest_9f14ec61bbfd9cea0782795292617d2e = UNSTREAM_STRING( &constant_bin[ 1901564 ], 12, 0 );
    const_str_digest_ed376d057536894260bd5c3dd47dde41 = UNSTREAM_STRING( &constant_bin[ 1904265 ], 75, 0 );
    const_list_e3ed10a2b1264427e2d1008a5f569202_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_e3ed10a2b1264427e2d1008a5f569202_list, 0, const_str_plain_since_id ); Py_INCREF( const_str_plain_since_id );
    PyList_SET_ITEM( const_list_e3ed10a2b1264427e2d1008a5f569202_list, 1, const_str_plain_max_id ); Py_INCREF( const_str_plain_max_id );
    PyList_SET_ITEM( const_list_e3ed10a2b1264427e2d1008a5f569202_list, 2, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyList_SET_ITEM( const_list_e3ed10a2b1264427e2d1008a5f569202_list, 3, const_str_plain_page ); Py_INCREF( const_str_plain_page );
    PyList_SET_ITEM( const_list_e3ed10a2b1264427e2d1008a5f569202_list, 4, const_str_plain_full_text ); Py_INCREF( const_str_plain_full_text );
    const_str_digest_ee06584f038c3087f8c19cde029e4e76 = UNSTREAM_STRING( &constant_bin[ 1904340 ], 120, 0 );
    const_str_digest_92969f760667e1f493ad965ff49eee46 = UNSTREAM_STRING( &constant_bin[ 1904460 ], 155, 0 );
    const_str_digest_362664de9805359dfc2f9a0e2246546b = UNSTREAM_STRING( &constant_bin[ 1904615 ], 24, 0 );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_tweepy$api( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_f082c71637b55fc69b5f26008da43125;
static PyCodeObject *codeobj_7dcd7b08d709bef50d9b0cd8ae5ecd8c;
static PyCodeObject *codeobj_c94d3f57ab427120a29e9f73b82b649c;
static PyCodeObject *codeobj_7f06e035b9ea779a89051e17a77a4911;
static PyCodeObject *codeobj_933e27bcff1a5abadfc3535e77bfce32;
static PyCodeObject *codeobj_5dc4c08475486b194a84a75907dabbd7;
static PyCodeObject *codeobj_f6aefdbb0490b86bd805a79d125e5dc4;
static PyCodeObject *codeobj_0952a2783bc1ed7a10bf97b38b69938e;
static PyCodeObject *codeobj_916c110678990919f1a74f25c7ae8de7;
static PyCodeObject *codeobj_365649f4302879e824be94a328a355f2;
static PyCodeObject *codeobj_8bb38085ca5fdd860404b08f85f9cf11;
static PyCodeObject *codeobj_68e8158894672acef4247c5a14b07981;
static PyCodeObject *codeobj_a2246dde6fbf6c5a04b7d0194da100b3;
static PyCodeObject *codeobj_e7c0f20dc88dde0319407ae5901e4a1a;
static PyCodeObject *codeobj_a04acbe39cf661016dc67d89b8a317e0;
static PyCodeObject *codeobj_792fe70121fef6e15c03b996718dd7b4;
static PyCodeObject *codeobj_d3154221f11db26685e34f0be0f0ec47;
static PyCodeObject *codeobj_7a2e83f094ec65bed2718315f4b16d00;
static PyCodeObject *codeobj_9b3e99a5de113c8c9505f89113b16cbf;
static PyCodeObject *codeobj_d5c8dd3aca257823f9b82da05954a122;
static PyCodeObject *codeobj_91b19364b154c1522c83bdbb85ad5723;
static PyCodeObject *codeobj_d3971143a1e796170d0331aeff6f3e43;
static PyCodeObject *codeobj_b4e9f3e8920c4b9d41f1a5272c7d6313;
static PyCodeObject *codeobj_26fe090a948bf12251eeaeae99a36b5d;
static PyCodeObject *codeobj_5687e0f8453ec900cf3fa8d0a04b914b;
static PyCodeObject *codeobj_36540fc3ef3f30d4336d31d9d0bc104f;
static PyCodeObject *codeobj_1f5aa56e029dbeb407a8a1644ef693cc;
static PyCodeObject *codeobj_04cd26c47f755cc8d082a966a550203f;
static PyCodeObject *codeobj_19d557c35860915b72a22e4a43efbfaa;
static PyCodeObject *codeobj_94e979f7ad8522f6307ffbb188083bee;
static PyCodeObject *codeobj_394baa27dfbb0110f9d9f8fe1a9f5226;
static PyCodeObject *codeobj_0f0e14368dfbef76e79bf4d638757d75;
static PyCodeObject *codeobj_f356acf7c3066621fadabe71aa1b4533;
static PyCodeObject *codeobj_bcc4dd6d7f2cdc1b2f3eb11d84cf4723;
static PyCodeObject *codeobj_6918bffb76b9076623af8f76ae6adbbc;
static PyCodeObject *codeobj_8e1a5caad32d13e1b8a8659f35d4e6ea;
static PyCodeObject *codeobj_ca6e557aae30210396eb33085a076422;
static PyCodeObject *codeobj_8e057ad2deee48e0ff7e0f35ddaf46b1;
static PyCodeObject *codeobj_d0d765880c07ffc8e058372487ffba37;
static PyCodeObject *codeobj_7e7ab4ceb944a35e9f5ba99235698fce;
static PyCodeObject *codeobj_9041fde6d27ad33602b87758a101a0f6;
static PyCodeObject *codeobj_8b4928340945a026c7936958fb9b9d19;
static PyCodeObject *codeobj_6d8ebd1d5bc4f6ea7f8fad4ba527731f;
static PyCodeObject *codeobj_1d4c111344c4facdd9f0aa8ddf6f4bc0;
static PyCodeObject *codeobj_0fc6113ae954ee498f5036f64b914de9;
static PyCodeObject *codeobj_075e8b41fd62462bd2f85823e73d1086;
static PyCodeObject *codeobj_d1073e1b567b288f07f07b4eef7e8812;
static PyCodeObject *codeobj_a100af1b2674a51af30997000b279aea;
static PyCodeObject *codeobj_a589fbc6c6c4d2e688ed98099928e1bd;
static PyCodeObject *codeobj_675c0e4b9845349f8b88bb49f567baeb;
static PyCodeObject *codeobj_60dd79ca1617f50c7abfee1eb3871d75;
static PyCodeObject *codeobj_6d841790ffa99d5aac0afc8adc221c75;
static PyCodeObject *codeobj_4c432615d74f3053d1abed2e0002aefb;
static PyCodeObject *codeobj_4eee1808bb91e31638aa70ddaa543d30;
static PyCodeObject *codeobj_2108e2d35b352d6aa55ae11749170505;
static PyCodeObject *codeobj_c028ba74c751e8a113eebfb453e2176d;
static PyCodeObject *codeobj_eb64591492f915cdf3dcd117e1157421;
static PyCodeObject *codeobj_de146b2dec0ae059e88038e4c8d147c9;
static PyCodeObject *codeobj_1a84c706e294e0a34f415ab7921815ba;
static PyCodeObject *codeobj_ba6c73b3d23ff0b6d21dc9d1b6046e4e;
static PyCodeObject *codeobj_83f0ab27baf2b4ee4bebb559b07323c8;
static PyCodeObject *codeobj_cf7ed6ecce751c9c1df8a21711cba345;
static PyCodeObject *codeobj_d4eb1be770bb09f5dc5127e08030139a;
static PyCodeObject *codeobj_eeeaa6b78a757404c7caeee36730c184;
static PyCodeObject *codeobj_44fe0ee47feccf7a64396792d6a02023;
static PyCodeObject *codeobj_53021cfe273709e400f55d9544d30d3b;
static PyCodeObject *codeobj_9bc5104466090973ca4d199a5b8dc403;
static PyCodeObject *codeobj_bacee294e619b6f131c31821ee37a73d;
static PyCodeObject *codeobj_65bc48de0216fc767a82f2690585ea67;
static PyCodeObject *codeobj_45325722189a1794518740bb94a35ecc;
static PyCodeObject *codeobj_f5b64100e4c6d38b868cc509d32a3b65;
static PyCodeObject *codeobj_1324f5d71873a0dd0efbfc793aa20f3e;
static PyCodeObject *codeobj_f51f7217cbd36622369e03ab5f1a146a;
static PyCodeObject *codeobj_8edf27b5c181c7bb006364033d1d8372;
static PyCodeObject *codeobj_3bdc56fc955f1a280b5e1584b388dcb6;
static PyCodeObject *codeobj_2c606181aa11a70ed866d487ecefc6ed;
static PyCodeObject *codeobj_65f5dfdfe64a5a2f3b29a5ae6904c613;
static PyCodeObject *codeobj_149bbff420a576ff844e539212858de3;
static PyCodeObject *codeobj_ab4e6e8ca538cc6f1925b3019d68cb90;
static PyCodeObject *codeobj_2d363280eb787780b4195632a708b95e;
static PyCodeObject *codeobj_93d23f99710bf35f8e2f4e7727040926;
static PyCodeObject *codeobj_47346e94767286e71abe9e755d2a5451;
static PyCodeObject *codeobj_4f55dd9346832b6207ff98409a129c44;
static PyCodeObject *codeobj_06cd88486aafc8cfbc3174b6d3eb6269;
static PyCodeObject *codeobj_9d25d8224d9e831eea4a1f2a1e67dc54;
static PyCodeObject *codeobj_cd4dcd0a2466e5af141034d2249eea54;
static PyCodeObject *codeobj_ff826b63f4298daaf03f35bdf1ccf758;
static PyCodeObject *codeobj_c9d4c5bff0d02269948281c317988961;
static PyCodeObject *codeobj_97458043ee4b9dada6fe414e54dae771;
static PyCodeObject *codeobj_f3bc45e07ee294df84f88e63960e44d9;
static PyCodeObject *codeobj_cb98bea3157d9ab578562dc94c3a5bc5;
static PyCodeObject *codeobj_7d61f43525aec937819eb91d303aa660;
static PyCodeObject *codeobj_b110dbd4dea70e3df5a3cb7c79f8276c;
static PyCodeObject *codeobj_5b1df0f5e4767236bf4c614e241672ab;
static PyCodeObject *codeobj_4a052c9b5d9202790e65ce7d23c3cc97;
static PyCodeObject *codeobj_dd75e9bde9e04364cb8e52ff7cc97169;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_8d3dfb74b523bb60460f2e4d68728f6c );
    codeobj_f082c71637b55fc69b5f26008da43125 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_bee07e6c80d6a3868c8f365a4bfd4ccf, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_7dcd7b08d709bef50d9b0cd8ae5ecd8c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_API, 18, const_tuple_d697bb94c12916b1698f9c2bcdae4a37_tuple, 0, 0, CO_NOFREE );
    codeobj_c94d3f57ab427120a29e9f73b82b649c = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 21, const_tuple_41651f1c254454b5b4d8ab36ac7d18f4_tuple, 18, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7f06e035b9ea779a89051e17a77a4911 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__add_list_members, 1043, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_933e27bcff1a5abadfc3535e77bfce32 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__lookup_friendships, 504, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5dc4c08475486b194a84a75907dabbd7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__lookup_users, 324, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f6aefdbb0490b86bd805a79d125e5dc4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__pack_image, 1297, const_tuple_74a55b64ae3d79fd7cbedd94b878ac23_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0952a2783bc1ed7a10bf97b38b69938e = MAKE_CODEOBJ( module_filename_obj, const_str_plain__remove_list_members, 1068, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_916c110678990919f1a74f25c7ae8de7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__statuses_lookup, 101, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_365649f4302879e824be94a328a355f2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_list_member, 1003, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8bb38085ca5fdd860404b08f85f9cf11 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_list_members, 1035, const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 7, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_68e8158894672acef4247c5a14b07981 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_blocks, 807, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a2246dde6fbf6c5a04b7d0194da100b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_blocks_ids, 820, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e7c0f20dc88dde0319407ae5901e4a1a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_configuration, 1285, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a04acbe39cf661016dc67d89b8a317e0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_block, 779, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_792fe70121fef6e15c03b996718dd7b4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_favorite, 751, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d3154221f11db26685e34f0be0f0ec47 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_friendship, 459, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7a2e83f094ec65bed2718315f4b16d00 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_list, 895, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9b3e99a5de113c8c9505f89113b16cbf = MAKE_CODEOBJ( module_filename_obj, const_str_plain_create_saved_search, 867, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d5c8dd3aca257823f9b82da05954a122 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_destroy_block, 793, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_91b19364b154c1522c83bdbb85ad5723 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_destroy_direct_message, 445, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d3971143a1e796170d0331aeff6f3e43 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_destroy_favorite, 765, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b4e9f3e8920c4b9d41f1a5272c7d6313 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_destroy_friendship, 473, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_26fe090a948bf12251eeaeae99a36b5d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_destroy_list, 909, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5687e0f8453ec900cf3fa8d0a04b914b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_destroy_saved_search, 881, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_36540fc3ef3f30d4336d31d9d0bc104f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_destroy_status, 234, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1f5aa56e029dbeb407a8a1644ef693cc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_direct_messages, 392, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_04cd26c47f755cc8d082a966a550203f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_favorites, 739, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_19d557c35860915b72a22e4a43efbfaa = MAKE_CODEOBJ( module_filename_obj, const_str_plain_followers, 577, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_94e979f7ad8522f6307ffbb188083bee = MAKE_CODEOBJ( module_filename_obj, const_str_plain_followers_ids, 565, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_394baa27dfbb0110f9d9f8fe1a9f5226 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_friends, 529, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0f0e14368dfbef76e79bf4d638757d75 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_friends_ids, 517, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f356acf7c3066621fadabe71aa1b4533 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_friendships_incoming, 541, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_friendships_outgoing, 553, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6918bffb76b9076623af8f76ae6adbbc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_geo_id, 1236, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8e1a5caad32d13e1b8a8659f35d4e6ea = MAKE_CODEOBJ( module_filename_obj, const_str_plain_geo_search, 1248, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ca6e557aae30210396eb33085a076422 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_geo_similar_places, 1263, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8e057ad2deee48e0ff7e0f35ddaf46b1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_direct_message, 405, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d0d765880c07ffc8e058372487ffba37 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_list, 991, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7e7ab4ceb944a35e9f5ba99235698fce = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_oembed, 299, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9041fde6d27ad33602b87758a101a0f6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_saved_search, 854, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8b4928340945a026c7936958fb9b9d19 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_settings, 590, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6d8ebd1d5bc4f6ea7f8fad4ba527731f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_status, 166, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1d4c111344c4facdd9f0aa8ddf6f4bc0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_user, 287, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0fc6113ae954ee498f5036f64b914de9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_home_timeline, 83, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_075e8b41fd62462bd2f85823e73d1086 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_list_members, 1085, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d1073e1b567b288f07f07b4eef7e8812 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_list_subscribers, 1145, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a100af1b2674a51af30997000b279aea = MAKE_CODEOBJ( module_filename_obj, const_str_plain_list_timeline, 976, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a589fbc6c6c4d2e688ed98099928e1bd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lists_all, 937, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_675c0e4b9845349f8b88bb49f567baeb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lists_memberships, 950, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_60dd79ca1617f50c7abfee1eb3871d75 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lists_subscriptions, 963, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6d841790ffa99d5aac0afc8adc221c75 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lookup_friendships, 500, const_tuple_str_plain_self_str_plain_user_ids_str_plain_screen_names_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4c432615d74f3053d1abed2e0002aefb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_lookup_users, 311, const_tuple_14eb4b02b805bf451178e08eb9276158_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4eee1808bb91e31638aa70ddaa543d30 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_me, 336, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2108e2d35b352d6aa55ae11749170505 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_media_upload, 196, const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_c028ba74c751e8a113eebfb453e2176d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_mentions_timeline, 127, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_eb64591492f915cdf3dcd117e1157421 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rate_limit_status, 637, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_de146b2dec0ae059e88038e4c8d147c9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_related_results, 140, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1a84c706e294e0a34f415ab7921815ba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_remove_list_member, 1019, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ba6c73b3d23ff0b6d21dc9d1b6046e4e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_remove_list_members, 1060, const_tuple_13cbef11be1f9131edbda49c5fc55957_tuple, 7, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_83f0ab27baf2b4ee4bebb559b07323c8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_report_spam, 830, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cf7ed6ecce751c9c1df8a21711cba345 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_retweet, 248, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d4eb1be770bb09f5dc5127e08030139a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_retweeters, 275, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_eeeaa6b78a757404c7caeee36730c184 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_retweets, 262, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_44fe0ee47feccf7a64396792d6a02023 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_retweets_of_me, 153, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_53021cfe273709e400f55d9544d30d3b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_reverse_geocode, 1223, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9bc5104466090973ca4d199a5b8dc403 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_saved_searches, 844, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bacee294e619b6f131c31821ee37a73d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_search, 1206, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_65bc48de0216fc767a82f2690585ea67 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_search_users, 340, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_45325722189a1794518740bb94a35ecc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_send_direct_message, 431, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f5b64100e4c6d38b868cc509d32a3b65 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_sent_direct_messages, 418, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1324f5d71873a0dd0efbfc793aa20f3e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_set_delivery_device, 650, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f51f7217cbd36622369e03ab5f1a146a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_set_settings, 601, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8edf27b5c181c7bb006364033d1d8372 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_show_friendship, 487, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3bdc56fc955f1a280b5e1584b388dcb6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_show_list_member, 1099, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2c606181aa11a70ed866d487ecefc6ed = MAKE_CODEOBJ( module_filename_obj, const_str_plain_show_list_subscriber, 1159, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_65f5dfdfe64a5a2f3b29a5ae6904c613 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_statuses_lookup, 96, const_tuple_856e5d1dec30b9e06b303f13a9426f50_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_149bbff420a576ff844e539212858de3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_subscribe_list, 1113, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ab4e6e8ca538cc6f1925b3019d68cb90 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_suggested_categories, 366, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2d363280eb787780b4195632a708b95e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_suggested_users, 353, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_93d23f99710bf35f8e2f4e7727040926 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_suggested_users_tweets, 379, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_47346e94767286e71abe9e755d2a5451 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_supported_languages, 1275, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4f55dd9346832b6207ff98409a129c44 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_trends_available, 1173, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_06cd88486aafc8cfbc3174b6d3eb6269 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_trends_closest, 1194, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9d25d8224d9e831eea4a1f2a1e67dc54 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_trends_place, 1182, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cd4dcd0a2466e5af141034d2249eea54 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_unsubscribe_list, 1129, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ff826b63f4298daaf03f35bdf1ccf758 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update_list, 923, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c9d4c5bff0d02269948281c317988961 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update_profile, 725, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_97458043ee4b9dada6fe414e54dae771 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update_profile_background_image, 696, const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_f3bc45e07ee294df84f88e63960e44d9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update_profile_banner, 711, const_tuple_afe0de4d05031face444bfb4ab8a92a5_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_cb98bea3157d9ab578562dc94c3a5bc5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update_profile_colors, 664, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7d61f43525aec937819eb91d303aa660 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update_profile_image, 682, const_tuple_31d6960f5d61b0aaeb35f1386bf84e23_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b110dbd4dea70e3df5a3cb7c79f8276c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update_status, 178, const_tuple_7b7516185037535e752269bc889765ef_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_5b1df0f5e4767236bf4c614e241672ab = MAKE_CODEOBJ( module_filename_obj, const_str_plain_update_with_media, 214, const_tuple_1b1242b4794da4e35019d31491c54ab3_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_4a052c9b5d9202790e65ce7d23c3cc97 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_user_timeline, 114, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_dd75e9bde9e04364cb8e52ff7cc97169 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_verify_credentials, 620, const_tuple_str_plain_self_str_plain_kargs_str_plain_e_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE );
}

// The module function declarations.
NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_3_complex_call_helper_keywords_star_list_star_dict( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_7_complex_call_helper_star_list_star_dict( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_8_complex_call_helper_star_dict( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_10_update_status(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_11_media_upload(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_12_update_with_media(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_13_destroy_status(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_14_retweet(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_15_retweets(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_16_retweeters(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_17_get_user(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_18_get_oembed(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_19_lookup_users( PyObject *defaults );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_1___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_20__lookup_users(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_21_me(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_22_search_users(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_23_suggested_users(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_24_suggested_categories(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_25_suggested_users_tweets(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_26_direct_messages(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_27_get_direct_message(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_28_sent_direct_messages(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_29_send_direct_message(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_2_home_timeline(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_30_destroy_direct_message(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_31_create_friendship(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_32_destroy_friendship(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_33_show_friendship(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_34_lookup_friendships( PyObject *defaults );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_35__lookup_friendships(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_36_friends_ids(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_37_friends(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_38_friendships_incoming(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_39_friendships_outgoing(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_3_statuses_lookup( PyObject *defaults );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_40_followers_ids(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_41_followers(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_42_get_settings(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_43_set_settings(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_44_verify_credentials(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_45_rate_limit_status(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_46_set_delivery_device(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_47_update_profile_colors(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_48_update_profile_image( PyObject *defaults );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_49_update_profile_background_image(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_4__statuses_lookup(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_50_update_profile_banner(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_51_update_profile(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_52_favorites(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_53_create_favorite(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_54_destroy_favorite(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_55_create_block(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_56_destroy_block(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_57_blocks(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_58_blocks_ids(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_59_report_spam(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_5_user_timeline(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_60_saved_searches(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_61_get_saved_search(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_62_create_saved_search(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_63_destroy_saved_search(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_64_create_list(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_65_destroy_list(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_66_update_list(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_67_lists_all(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_68_lists_memberships(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_69_lists_subscriptions(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_6_mentions_timeline(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_70_list_timeline(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_71_get_list(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_72_add_list_member(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_73_remove_list_member(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_74_add_list_members( PyObject *defaults );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_75__add_list_members(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_76_remove_list_members( PyObject *defaults );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_77__remove_list_members(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_78_list_members(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_79_show_list_member(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_7_related_results(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_80_subscribe_list(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_81_unsubscribe_list(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_82_list_subscribers(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_83_show_list_subscriber(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_84_trends_available(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_85_trends_place(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_86_trends_closest(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_87_search(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_88_reverse_geocode(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_89_geo_id(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_8_retweets_of_me(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_90_geo_search(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_91_geo_similar_places(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_92_supported_languages(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_93_configuration(  );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_94__pack_image( PyObject *defaults );


static PyObject *MAKE_FUNCTION_tweepy$api$$$function_9_get_status(  );


// The module function definitions.
static PyObject *impl_tweepy$api$$$function_1___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_auth_handler = python_pars[ 1 ];
    PyObject *par_host = python_pars[ 2 ];
    PyObject *par_search_host = python_pars[ 3 ];
    PyObject *par_upload_host = python_pars[ 4 ];
    PyObject *par_cache = python_pars[ 5 ];
    PyObject *par_api_root = python_pars[ 6 ];
    PyObject *par_search_root = python_pars[ 7 ];
    PyObject *par_upload_root = python_pars[ 8 ];
    PyObject *par_retry_count = python_pars[ 9 ];
    PyObject *par_retry_delay = python_pars[ 10 ];
    PyObject *par_retry_errors = python_pars[ 11 ];
    PyObject *par_timeout = python_pars[ 12 ];
    PyObject *par_parser = python_pars[ 13 ];
    PyObject *par_compression = python_pars[ 14 ];
    PyObject *par_wait_on_rate_limit = python_pars[ 15 ];
    PyObject *par_wait_on_rate_limit_notify = python_pars[ 16 ];
    PyObject *par_proxy = python_pars[ 17 ];
    PyObject *var_parser_type = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_name_5;
    PyObject *tmp_assattr_name_6;
    PyObject *tmp_assattr_name_7;
    PyObject *tmp_assattr_name_8;
    PyObject *tmp_assattr_name_9;
    PyObject *tmp_assattr_name_10;
    PyObject *tmp_assattr_name_11;
    PyObject *tmp_assattr_name_12;
    PyObject *tmp_assattr_name_13;
    PyObject *tmp_assattr_name_14;
    PyObject *tmp_assattr_name_15;
    PyObject *tmp_assattr_name_16;
    PyObject *tmp_assattr_name_17;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_assattr_target_5;
    PyObject *tmp_assattr_target_6;
    PyObject *tmp_assattr_target_7;
    PyObject *tmp_assattr_target_8;
    PyObject *tmp_assattr_target_9;
    PyObject *tmp_assattr_target_10;
    PyObject *tmp_assattr_target_11;
    PyObject *tmp_assattr_target_12;
    PyObject *tmp_assattr_target_13;
    PyObject *tmp_assattr_target_14;
    PyObject *tmp_assattr_target_15;
    PyObject *tmp_assattr_target_16;
    PyObject *tmp_assattr_target_17;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_make_exception_arg_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_type_arg_1;
    static struct Nuitka_FrameObject *cache_frame_c94d3f57ab427120a29e9f73b82b649c = NULL;

    struct Nuitka_FrameObject *frame_c94d3f57ab427120a29e9f73b82b649c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c94d3f57ab427120a29e9f73b82b649c, codeobj_c94d3f57ab427120a29e9f73b82b649c, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c94d3f57ab427120a29e9f73b82b649c = cache_frame_c94d3f57ab427120a29e9f73b82b649c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c94d3f57ab427120a29e9f73b82b649c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c94d3f57ab427120a29e9f73b82b649c ) == 2 ); // Frame stack

    // Framed code:
    tmp_assattr_name_1 = par_auth_handler;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_auth, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 50;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_2 = par_host;

    if ( tmp_assattr_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "host" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 51;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_2 = par_self;

    if ( tmp_assattr_target_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 51;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_host, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_3 = par_search_host;

    if ( tmp_assattr_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "search_host" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 52;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_3 = par_self;

    if ( tmp_assattr_target_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 52;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_search_host, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 52;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_4 = par_upload_host;

    if ( tmp_assattr_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "upload_host" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 53;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_4 = par_self;

    if ( tmp_assattr_target_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 53;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_upload_host, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 53;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_5 = par_api_root;

    if ( tmp_assattr_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "api_root" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 54;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_5 = par_self;

    if ( tmp_assattr_target_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 54;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_api_root, tmp_assattr_name_5 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 54;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_6 = par_search_root;

    if ( tmp_assattr_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "search_root" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 55;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_6 = par_self;

    if ( tmp_assattr_target_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 55;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_search_root, tmp_assattr_name_6 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_7 = par_upload_root;

    if ( tmp_assattr_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "upload_root" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 56;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_7 = par_self;

    if ( tmp_assattr_target_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 56;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_upload_root, tmp_assattr_name_7 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 56;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_8 = par_cache;

    if ( tmp_assattr_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "cache" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 57;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_8 = par_self;

    if ( tmp_assattr_target_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 57;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain_cache, tmp_assattr_name_8 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 57;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_9 = par_compression;

    if ( tmp_assattr_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "compression" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 58;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_9 = par_self;

    if ( tmp_assattr_target_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 58;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_9, const_str_plain_compression, tmp_assattr_name_9 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 58;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_10 = par_retry_count;

    if ( tmp_assattr_name_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "retry_count" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 59;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_10 = par_self;

    if ( tmp_assattr_target_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 59;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_10, const_str_plain_retry_count, tmp_assattr_name_10 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_11 = par_retry_delay;

    if ( tmp_assattr_name_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "retry_delay" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 60;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_11 = par_self;

    if ( tmp_assattr_target_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 60;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_11, const_str_plain_retry_delay, tmp_assattr_name_11 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 60;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_12 = par_retry_errors;

    if ( tmp_assattr_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "retry_errors" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 61;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_12 = par_self;

    if ( tmp_assattr_target_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 61;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_12, const_str_plain_retry_errors, tmp_assattr_name_12 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 61;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_13 = par_timeout;

    if ( tmp_assattr_name_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "timeout" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 62;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_13 = par_self;

    if ( tmp_assattr_target_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 62;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_13, const_str_plain_timeout, tmp_assattr_name_13 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 62;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_14 = par_wait_on_rate_limit;

    if ( tmp_assattr_name_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "wait_on_rate_limit" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 63;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_14 = par_self;

    if ( tmp_assattr_target_14 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 63;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_14, const_str_plain_wait_on_rate_limit, tmp_assattr_name_14 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 63;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_15 = par_wait_on_rate_limit_notify;

    if ( tmp_assattr_name_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "wait_on_rate_limit_notify" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 64;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_15 = par_self;

    if ( tmp_assattr_target_15 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 64;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_15, const_str_plain_wait_on_rate_limit_notify, tmp_assattr_name_15 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_value_1 = par_parser;

    if ( tmp_or_left_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "parser" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 65;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_ModelParser );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ModelParser );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ModelParser" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 65;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    frame_c94d3f57ab427120a29e9f73b82b649c->m_frame.f_lineno = 65;
    tmp_or_right_value_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_name_16 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    Py_INCREF( tmp_or_left_value_1 );
    tmp_assattr_name_16 = tmp_or_left_value_1;
    or_end_1:;
    tmp_assattr_target_16 = par_self;

    if ( tmp_assattr_target_16 == NULL )
    {
        Py_DECREF( tmp_assattr_name_16 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 65;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_16, const_str_plain_parser, tmp_assattr_name_16 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_16 );

        exception_lineno = 65;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_16 );
    tmp_assattr_name_17 = PyDict_New();
    tmp_assattr_target_17 = par_self;

    if ( tmp_assattr_target_17 == NULL )
    {
        Py_DECREF( tmp_assattr_name_17 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 66;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_17, const_str_plain_proxy, tmp_assattr_name_17 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_17 );

        exception_lineno = 66;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_17 );
    tmp_cond_value_1 = par_proxy;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "proxy" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 67;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 67;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_ass_subvalue_1 = par_proxy;

    if ( tmp_ass_subvalue_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "proxy" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 68;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = par_self;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 68;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_proxy );
    if ( tmp_ass_subscribed_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 68;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscript_1 = const_str_plain_https;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subscribed_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 68;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    tmp_assign_source_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_Parser );

    if (unlikely( tmp_assign_source_1 == NULL ))
    {
        tmp_assign_source_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Parser );
    }

    if ( tmp_assign_source_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Parser" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 73;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_parser_type == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_parser_type = tmp_assign_source_1;

    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 74;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_parser );
    if ( tmp_isinstance_inst_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_isinstance_cls_1 = var_parser_type;

    if ( tmp_isinstance_cls_1 == NULL )
    {
        Py_DECREF( tmp_isinstance_inst_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "parser_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 74;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    Py_DECREF( tmp_isinstance_inst_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 74;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_source_name_3 = const_str_digest_a5ded017a4feffba94af991ba2081c4b;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_format );
    assert( tmp_called_name_2 != NULL );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_1 = const_str_plain_required;
    tmp_source_name_4 = var_parser_type;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "parser_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 78;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___name__ );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 78;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_actual;
    tmp_source_name_5 = par_self;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 79;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_type_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_parser );
    if ( tmp_type_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 79;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_dict_value_2 = BUILTIN_TYPE1( tmp_type_arg_1 );
    Py_DECREF( tmp_type_arg_1 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 79;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_c94d3f57ab427120a29e9f73b82b649c->m_frame.f_lineno = 76;
    tmp_make_exception_arg_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_make_exception_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;
        type_description_1 = "ooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    frame_c94d3f57ab427120a29e9f73b82b649c->m_frame.f_lineno = 75;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_1 );
    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 75;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooooooooooooooooo";
    goto frame_exception_exit_1;
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c94d3f57ab427120a29e9f73b82b649c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c94d3f57ab427120a29e9f73b82b649c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c94d3f57ab427120a29e9f73b82b649c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c94d3f57ab427120a29e9f73b82b649c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c94d3f57ab427120a29e9f73b82b649c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c94d3f57ab427120a29e9f73b82b649c,
        type_description_1,
        par_self,
        par_auth_handler,
        par_host,
        par_search_host,
        par_upload_host,
        par_cache,
        par_api_root,
        par_search_root,
        par_upload_root,
        par_retry_count,
        par_retry_delay,
        par_retry_errors,
        par_timeout,
        par_parser,
        par_compression,
        par_wait_on_rate_limit,
        par_wait_on_rate_limit_notify,
        par_proxy,
        var_parser_type
    );


    // Release cached frame.
    if ( frame_c94d3f57ab427120a29e9f73b82b649c == cache_frame_c94d3f57ab427120a29e9f73b82b649c )
    {
        Py_DECREF( frame_c94d3f57ab427120a29e9f73b82b649c );
    }
    cache_frame_c94d3f57ab427120a29e9f73b82b649c = NULL;

    assertFrameObject( frame_c94d3f57ab427120a29e9f73b82b649c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_auth_handler );
    par_auth_handler = NULL;

    Py_XDECREF( par_host );
    par_host = NULL;

    Py_XDECREF( par_search_host );
    par_search_host = NULL;

    Py_XDECREF( par_upload_host );
    par_upload_host = NULL;

    Py_XDECREF( par_cache );
    par_cache = NULL;

    Py_XDECREF( par_api_root );
    par_api_root = NULL;

    Py_XDECREF( par_search_root );
    par_search_root = NULL;

    Py_XDECREF( par_upload_root );
    par_upload_root = NULL;

    Py_XDECREF( par_retry_count );
    par_retry_count = NULL;

    Py_XDECREF( par_retry_delay );
    par_retry_delay = NULL;

    Py_XDECREF( par_retry_errors );
    par_retry_errors = NULL;

    Py_XDECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( par_parser );
    par_parser = NULL;

    Py_XDECREF( par_compression );
    par_compression = NULL;

    Py_XDECREF( par_wait_on_rate_limit );
    par_wait_on_rate_limit = NULL;

    Py_XDECREF( par_wait_on_rate_limit_notify );
    par_wait_on_rate_limit_notify = NULL;

    Py_XDECREF( par_proxy );
    par_proxy = NULL;

    Py_XDECREF( var_parser_type );
    var_parser_type = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_auth_handler );
    par_auth_handler = NULL;

    Py_XDECREF( par_host );
    par_host = NULL;

    Py_XDECREF( par_search_host );
    par_search_host = NULL;

    Py_XDECREF( par_upload_host );
    par_upload_host = NULL;

    Py_XDECREF( par_cache );
    par_cache = NULL;

    Py_XDECREF( par_api_root );
    par_api_root = NULL;

    Py_XDECREF( par_search_root );
    par_search_root = NULL;

    Py_XDECREF( par_upload_root );
    par_upload_root = NULL;

    Py_XDECREF( par_retry_count );
    par_retry_count = NULL;

    Py_XDECREF( par_retry_delay );
    par_retry_delay = NULL;

    Py_XDECREF( par_retry_errors );
    par_retry_errors = NULL;

    Py_XDECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( par_parser );
    par_parser = NULL;

    Py_XDECREF( par_compression );
    par_compression = NULL;

    Py_XDECREF( par_wait_on_rate_limit );
    par_wait_on_rate_limit = NULL;

    Py_XDECREF( par_wait_on_rate_limit_notify );
    par_wait_on_rate_limit_notify = NULL;

    Py_XDECREF( par_proxy );
    par_proxy = NULL;

    Py_XDECREF( var_parser_type );
    var_parser_type = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_2_home_timeline( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_0fc6113ae954ee498f5036f64b914de9 = NULL;

    struct Nuitka_FrameObject *frame_0fc6113ae954ee498f5036f64b914de9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0fc6113ae954ee498f5036f64b914de9, codeobj_0fc6113ae954ee498f5036f64b914de9, module_tweepy$api, sizeof(void *) );
    frame_0fc6113ae954ee498f5036f64b914de9 = cache_frame_0fc6113ae954ee498f5036f64b914de9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0fc6113ae954ee498f5036f64b914de9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0fc6113ae954ee498f5036f64b914de9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 88;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_61274f59211cf6fa7804d5e68a2e4f96;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_since_id_str_plain_max_id_str_plain_count_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_0fc6113ae954ee498f5036f64b914de9->m_frame.f_lineno = 88;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 88;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0fc6113ae954ee498f5036f64b914de9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0fc6113ae954ee498f5036f64b914de9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0fc6113ae954ee498f5036f64b914de9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0fc6113ae954ee498f5036f64b914de9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0fc6113ae954ee498f5036f64b914de9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0fc6113ae954ee498f5036f64b914de9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0fc6113ae954ee498f5036f64b914de9,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0fc6113ae954ee498f5036f64b914de9 == cache_frame_0fc6113ae954ee498f5036f64b914de9 )
    {
        Py_DECREF( frame_0fc6113ae954ee498f5036f64b914de9 );
    }
    cache_frame_0fc6113ae954ee498f5036f64b914de9 = NULL;

    assertFrameObject( frame_0fc6113ae954ee498f5036f64b914de9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_2_home_timeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_2_home_timeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_3_statuses_lookup( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_id_ = python_pars[ 1 ];
    PyObject *par_include_entities = python_pars[ 2 ];
    PyObject *par_trim_user = python_pars[ 3 ];
    PyObject *par_map_ = python_pars[ 4 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_65f5dfdfe64a5a2f3b29a5ae6904c613 = NULL;

    struct Nuitka_FrameObject *frame_65f5dfdfe64a5a2f3b29a5ae6904c613;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_65f5dfdfe64a5a2f3b29a5ae6904c613, codeobj_65f5dfdfe64a5a2f3b29a5ae6904c613, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_65f5dfdfe64a5a2f3b29a5ae6904c613 = cache_frame_65f5dfdfe64a5a2f3b29a5ae6904c613;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_65f5dfdfe64a5a2f3b29a5ae6904c613 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_65f5dfdfe64a5a2f3b29a5ae6904c613 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__statuses_lookup );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 98;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 98;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_id_;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "id_" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 98;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_65f5dfdfe64a5a2f3b29a5ae6904c613->m_frame.f_lineno = 98;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 98;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_include_entities;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "include_entities" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 98;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_trim_user;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "trim_user" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 99;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = par_map_;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "map_" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 99;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_65f5dfdfe64a5a2f3b29a5ae6904c613->m_frame.f_lineno = 98;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 98;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_65f5dfdfe64a5a2f3b29a5ae6904c613 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_65f5dfdfe64a5a2f3b29a5ae6904c613 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_65f5dfdfe64a5a2f3b29a5ae6904c613 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_65f5dfdfe64a5a2f3b29a5ae6904c613, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_65f5dfdfe64a5a2f3b29a5ae6904c613->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_65f5dfdfe64a5a2f3b29a5ae6904c613, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_65f5dfdfe64a5a2f3b29a5ae6904c613,
        type_description_1,
        par_self,
        par_id_,
        par_include_entities,
        par_trim_user,
        par_map_
    );


    // Release cached frame.
    if ( frame_65f5dfdfe64a5a2f3b29a5ae6904c613 == cache_frame_65f5dfdfe64a5a2f3b29a5ae6904c613 )
    {
        Py_DECREF( frame_65f5dfdfe64a5a2f3b29a5ae6904c613 );
    }
    cache_frame_65f5dfdfe64a5a2f3b29a5ae6904c613 = NULL;

    assertFrameObject( frame_65f5dfdfe64a5a2f3b29a5ae6904c613 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_3_statuses_lookup );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_id_ );
    par_id_ = NULL;

    Py_XDECREF( par_include_entities );
    par_include_entities = NULL;

    Py_XDECREF( par_trim_user );
    par_trim_user = NULL;

    Py_XDECREF( par_map_ );
    par_map_ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_id_ );
    par_id_ = NULL;

    Py_XDECREF( par_include_entities );
    par_include_entities = NULL;

    Py_XDECREF( par_trim_user );
    par_trim_user = NULL;

    Py_XDECREF( par_map_ );
    par_map_ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_3_statuses_lookup );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_4__statuses_lookup( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_916c110678990919f1a74f25c7ae8de7 = NULL;

    struct Nuitka_FrameObject *frame_916c110678990919f1a74f25c7ae8de7;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_916c110678990919f1a74f25c7ae8de7, codeobj_916c110678990919f1a74f25c7ae8de7, module_tweepy$api, sizeof(void *) );
    frame_916c110678990919f1a74f25c7ae8de7 = cache_frame_916c110678990919f1a74f25c7ae8de7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_916c110678990919f1a74f25c7ae8de7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_916c110678990919f1a74f25c7ae8de7 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 106;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_ca2a72194b9d440300170a0ba4e15698;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_129d794a3e6ce3d6bfa7f5152c90e27a_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_916c110678990919f1a74f25c7ae8de7->m_frame.f_lineno = 106;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 106;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_916c110678990919f1a74f25c7ae8de7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_916c110678990919f1a74f25c7ae8de7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_916c110678990919f1a74f25c7ae8de7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_916c110678990919f1a74f25c7ae8de7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_916c110678990919f1a74f25c7ae8de7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_916c110678990919f1a74f25c7ae8de7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_916c110678990919f1a74f25c7ae8de7,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_916c110678990919f1a74f25c7ae8de7 == cache_frame_916c110678990919f1a74f25c7ae8de7 )
    {
        Py_DECREF( frame_916c110678990919f1a74f25c7ae8de7 );
    }
    cache_frame_916c110678990919f1a74f25c7ae8de7 = NULL;

    assertFrameObject( frame_916c110678990919f1a74f25c7ae8de7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_4__statuses_lookup );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_4__statuses_lookup );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_5_user_timeline( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_4a052c9b5d9202790e65ce7d23c3cc97 = NULL;

    struct Nuitka_FrameObject *frame_4a052c9b5d9202790e65ce7d23c3cc97;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4a052c9b5d9202790e65ce7d23c3cc97, codeobj_4a052c9b5d9202790e65ce7d23c3cc97, module_tweepy$api, sizeof(void *) );
    frame_4a052c9b5d9202790e65ce7d23c3cc97 = cache_frame_4a052c9b5d9202790e65ce7d23c3cc97;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4a052c9b5d9202790e65ce7d23c3cc97 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4a052c9b5d9202790e65ce7d23c3cc97 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 119;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_dc4f12d70665d18fac49e3f3cf269d66;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_3fb2effcea21da8b12b461e5f29d68b3_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_4a052c9b5d9202790e65ce7d23c3cc97->m_frame.f_lineno = 119;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 119;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a052c9b5d9202790e65ce7d23c3cc97 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a052c9b5d9202790e65ce7d23c3cc97 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a052c9b5d9202790e65ce7d23c3cc97 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4a052c9b5d9202790e65ce7d23c3cc97, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4a052c9b5d9202790e65ce7d23c3cc97->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4a052c9b5d9202790e65ce7d23c3cc97, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4a052c9b5d9202790e65ce7d23c3cc97,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_4a052c9b5d9202790e65ce7d23c3cc97 == cache_frame_4a052c9b5d9202790e65ce7d23c3cc97 )
    {
        Py_DECREF( frame_4a052c9b5d9202790e65ce7d23c3cc97 );
    }
    cache_frame_4a052c9b5d9202790e65ce7d23c3cc97 = NULL;

    assertFrameObject( frame_4a052c9b5d9202790e65ce7d23c3cc97 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_5_user_timeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_5_user_timeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_6_mentions_timeline( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_c028ba74c751e8a113eebfb453e2176d = NULL;

    struct Nuitka_FrameObject *frame_c028ba74c751e8a113eebfb453e2176d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c028ba74c751e8a113eebfb453e2176d, codeobj_c028ba74c751e8a113eebfb453e2176d, module_tweepy$api, sizeof(void *) );
    frame_c028ba74c751e8a113eebfb453e2176d = cache_frame_c028ba74c751e8a113eebfb453e2176d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c028ba74c751e8a113eebfb453e2176d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c028ba74c751e8a113eebfb453e2176d ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 132;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_49cb60c70b3feb7372bd29aa9f5d9075;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_since_id_str_plain_max_id_str_plain_count_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_c028ba74c751e8a113eebfb453e2176d->m_frame.f_lineno = 132;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c028ba74c751e8a113eebfb453e2176d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c028ba74c751e8a113eebfb453e2176d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c028ba74c751e8a113eebfb453e2176d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c028ba74c751e8a113eebfb453e2176d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c028ba74c751e8a113eebfb453e2176d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c028ba74c751e8a113eebfb453e2176d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c028ba74c751e8a113eebfb453e2176d,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_c028ba74c751e8a113eebfb453e2176d == cache_frame_c028ba74c751e8a113eebfb453e2176d )
    {
        Py_DECREF( frame_c028ba74c751e8a113eebfb453e2176d );
    }
    cache_frame_c028ba74c751e8a113eebfb453e2176d = NULL;

    assertFrameObject( frame_c028ba74c751e8a113eebfb453e2176d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_6_mentions_timeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_6_mentions_timeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_7_related_results( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_de146b2dec0ae059e88038e4c8d147c9 = NULL;

    struct Nuitka_FrameObject *frame_de146b2dec0ae059e88038e4c8d147c9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_de146b2dec0ae059e88038e4c8d147c9, codeobj_de146b2dec0ae059e88038e4c8d147c9, module_tweepy$api, sizeof(void *) );
    frame_de146b2dec0ae059e88038e4c8d147c9 = cache_frame_de146b2dec0ae059e88038e4c8d147c9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_de146b2dec0ae059e88038e4c8d147c9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_de146b2dec0ae059e88038e4c8d147c9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 145;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_b86cd2eb879404fb8e2b90690dc10fc6;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_relation;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_False;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_de146b2dec0ae059e88038e4c8d147c9->m_frame.f_lineno = 145;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 145;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_de146b2dec0ae059e88038e4c8d147c9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_de146b2dec0ae059e88038e4c8d147c9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_de146b2dec0ae059e88038e4c8d147c9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_de146b2dec0ae059e88038e4c8d147c9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_de146b2dec0ae059e88038e4c8d147c9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_de146b2dec0ae059e88038e4c8d147c9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_de146b2dec0ae059e88038e4c8d147c9,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_de146b2dec0ae059e88038e4c8d147c9 == cache_frame_de146b2dec0ae059e88038e4c8d147c9 )
    {
        Py_DECREF( frame_de146b2dec0ae059e88038e4c8d147c9 );
    }
    cache_frame_de146b2dec0ae059e88038e4c8d147c9 = NULL;

    assertFrameObject( frame_de146b2dec0ae059e88038e4c8d147c9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_7_related_results );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_7_related_results );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_8_retweets_of_me( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_44fe0ee47feccf7a64396792d6a02023 = NULL;

    struct Nuitka_FrameObject *frame_44fe0ee47feccf7a64396792d6a02023;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_44fe0ee47feccf7a64396792d6a02023, codeobj_44fe0ee47feccf7a64396792d6a02023, module_tweepy$api, sizeof(void *) );
    frame_44fe0ee47feccf7a64396792d6a02023 = cache_frame_44fe0ee47feccf7a64396792d6a02023;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_44fe0ee47feccf7a64396792d6a02023 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_44fe0ee47feccf7a64396792d6a02023 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 158;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_99f5b82720d7bb02d0d08cc54ca4f235;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_since_id_str_plain_max_id_str_plain_count_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_44fe0ee47feccf7a64396792d6a02023->m_frame.f_lineno = 158;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 158;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_44fe0ee47feccf7a64396792d6a02023 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_44fe0ee47feccf7a64396792d6a02023 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_44fe0ee47feccf7a64396792d6a02023 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_44fe0ee47feccf7a64396792d6a02023, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_44fe0ee47feccf7a64396792d6a02023->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_44fe0ee47feccf7a64396792d6a02023, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_44fe0ee47feccf7a64396792d6a02023,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_44fe0ee47feccf7a64396792d6a02023 == cache_frame_44fe0ee47feccf7a64396792d6a02023 )
    {
        Py_DECREF( frame_44fe0ee47feccf7a64396792d6a02023 );
    }
    cache_frame_44fe0ee47feccf7a64396792d6a02023 = NULL;

    assertFrameObject( frame_44fe0ee47feccf7a64396792d6a02023 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_8_retweets_of_me );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_8_retweets_of_me );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_9_get_status( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f = NULL;

    struct Nuitka_FrameObject *frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f, codeobj_6d8ebd1d5bc4f6ea7f8fad4ba527731f, module_tweepy$api, sizeof(void *) );
    frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f = cache_frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 171;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_310923d8fb049d106a50f5b3d36fca66;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f->m_frame.f_lineno = 171;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 171;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f == cache_frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f )
    {
        Py_DECREF( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f );
    }
    cache_frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f = NULL;

    assertFrameObject( frame_6d8ebd1d5bc4f6ea7f8fad4ba527731f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_9_get_status );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_9_get_status );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_10_update_status( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *var_post_data = NULL;
    PyObject *var_media_ids = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_dircall_arg4_1;
    bool tmp_isnot_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_b110dbd4dea70e3df5a3cb7c79f8276c = NULL;

    struct Nuitka_FrameObject *frame_b110dbd4dea70e3df5a3cb7c79f8276c;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyDict_New();
    assert( var_post_data == NULL );
    var_post_data = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b110dbd4dea70e3df5a3cb7c79f8276c, codeobj_b110dbd4dea70e3df5a3cb7c79f8276c, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b110dbd4dea70e3df5a3cb7c79f8276c = cache_frame_b110dbd4dea70e3df5a3cb7c79f8276c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b110dbd4dea70e3df5a3cb7c79f8276c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b110dbd4dea70e3df5a3cb7c79f8276c ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_b110dbd4dea70e3df5a3cb7c79f8276c->m_frame.f_lineno = 183;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain_media_ids_none_tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 183;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_media_ids == NULL );
    var_media_ids = tmp_assign_source_2;

    tmp_compare_left_1 = var_media_ids;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 185;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = var_media_ids;

    if ( tmp_args_element_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "media_ids" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 185;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_b110dbd4dea70e3df5a3cb7c79f8276c->m_frame.f_lineno = 185;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 185;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_1 = var_post_data;

    if ( tmp_ass_subscribed_1 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 185;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_1 = const_str_plain_media_ids;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 185;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 187;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 188;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_1adf8b93300bc464ffb01bce2ea138cc;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_a1a9f2f5d0c41ef453455361f69a4bee_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_b110dbd4dea70e3df5a3cb7c79f8276c->m_frame.f_lineno = 187;
    tmp_dircall_arg1_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 187;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 194;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg3_1 = _PyDict_NewPresized( 1 );
    tmp_dict_key_7 = const_str_plain_post_data;
    tmp_dict_value_7 = var_post_data;

    if ( tmp_dict_value_7 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        Py_DECREF( tmp_dircall_arg3_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 194;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_dircall_arg3_1, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    tmp_dircall_arg4_1 = par_kwargs;

    if ( tmp_dircall_arg4_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        Py_DECREF( tmp_dircall_arg3_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 194;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg4_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1, tmp_dircall_arg4_1};
        tmp_return_value = impl___internal__$$$function_3_complex_call_helper_keywords_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 187;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b110dbd4dea70e3df5a3cb7c79f8276c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b110dbd4dea70e3df5a3cb7c79f8276c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b110dbd4dea70e3df5a3cb7c79f8276c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b110dbd4dea70e3df5a3cb7c79f8276c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b110dbd4dea70e3df5a3cb7c79f8276c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b110dbd4dea70e3df5a3cb7c79f8276c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b110dbd4dea70e3df5a3cb7c79f8276c,
        type_description_1,
        par_self,
        par_args,
        par_kwargs,
        var_post_data,
        var_media_ids
    );


    // Release cached frame.
    if ( frame_b110dbd4dea70e3df5a3cb7c79f8276c == cache_frame_b110dbd4dea70e3df5a3cb7c79f8276c )
    {
        Py_DECREF( frame_b110dbd4dea70e3df5a3cb7c79f8276c );
    }
    cache_frame_b110dbd4dea70e3df5a3cb7c79f8276c = NULL;

    assertFrameObject( frame_b110dbd4dea70e3df5a3cb7c79f8276c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_10_update_status );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    Py_XDECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    Py_XDECREF( var_media_ids );
    var_media_ids = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    Py_XDECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    Py_XDECREF( var_media_ids );
    var_media_ids = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_10_update_status );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_11_media_upload( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_filename = python_pars[ 1 ];
    PyObject *par_args = python_pars[ 2 ];
    PyObject *par_kwargs = python_pars[ 3 ];
    PyObject *var_f = NULL;
    PyObject *var_headers = NULL;
    PyObject *var_post_data = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_2108e2d35b352d6aa55ae11749170505 = NULL;

    struct Nuitka_FrameObject *frame_2108e2d35b352d6aa55ae11749170505;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2108e2d35b352d6aa55ae11749170505, codeobj_2108e2d35b352d6aa55ae11749170505, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_2108e2d35b352d6aa55ae11749170505 = cache_frame_2108e2d35b352d6aa55ae11749170505;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2108e2d35b352d6aa55ae11749170505 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2108e2d35b352d6aa55ae11749170505 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_2108e2d35b352d6aa55ae11749170505->m_frame.f_lineno = 200;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain_file_none_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 200;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_f == NULL );
    var_f = tmp_assign_source_1;

    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_API );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_API );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "API" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 201;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__pack_image );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_filename;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 201;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_int_pos_3072;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_1 = const_str_plain_form_field;
    tmp_dict_value_1 = const_str_plain_media;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_f;
    tmp_dict_value_2 = var_f;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "f" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 201;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_2108e2d35b352d6aa55ae11749170505->m_frame.f_lineno = 201;
    tmp_iter_arg_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 201;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 201;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooo";
                exception_lineno = 201;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooooo";
        exception_lineno = 201;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_5 );
    assert( var_headers == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var_headers = tmp_assign_source_5;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_6 );
    assert( var_post_data == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_post_data = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_2 = par_kwargs;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 202;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_update );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 202;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_3 = const_str_plain_headers;
    tmp_dict_value_3 = var_headers;

    if ( tmp_dict_value_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "headers" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 202;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_post_data;
    tmp_dict_value_4 = var_post_data;

    if ( tmp_dict_value_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 202;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_2108e2d35b352d6aa55ae11749170505->m_frame.f_lineno = 202;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 202;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 204;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_2 = _PyDict_NewPresized( 7 );
    tmp_dict_key_5 = const_str_plain_api;
    tmp_dict_value_5 = par_self;

    if ( tmp_dict_value_5 == NULL )
    {
        Py_DECREF( tmp_kw_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 205;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_path;
    tmp_dict_value_6 = const_str_digest_300d305004facd64d9b77fb88f3d2ae3;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_7 = const_str_plain_method;
    tmp_dict_value_7 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_8 = const_str_plain_payload_type;
    tmp_dict_value_8 = const_str_plain_media;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_9 = const_str_plain_allowed_param;
    tmp_dict_value_9 = PyList_New( 0 );
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_9, tmp_dict_value_9 );
    Py_DECREF( tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_10 = const_str_plain_require_auth;
    tmp_dict_value_10 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_10, tmp_dict_value_10 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_11 = const_str_plain_upload_api;
    tmp_dict_value_11 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_11, tmp_dict_value_11 );
    assert( !(tmp_res != 0) );
    frame_2108e2d35b352d6aa55ae11749170505->m_frame.f_lineno = 204;
    tmp_dircall_arg1_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 204;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 212;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg3_1 = par_kwargs;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 212;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_7_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 204;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2108e2d35b352d6aa55ae11749170505 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2108e2d35b352d6aa55ae11749170505 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2108e2d35b352d6aa55ae11749170505 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2108e2d35b352d6aa55ae11749170505, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2108e2d35b352d6aa55ae11749170505->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2108e2d35b352d6aa55ae11749170505, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2108e2d35b352d6aa55ae11749170505,
        type_description_1,
        par_self,
        par_filename,
        par_args,
        par_kwargs,
        var_f,
        var_headers,
        var_post_data
    );


    // Release cached frame.
    if ( frame_2108e2d35b352d6aa55ae11749170505 == cache_frame_2108e2d35b352d6aa55ae11749170505 )
    {
        Py_DECREF( frame_2108e2d35b352d6aa55ae11749170505 );
    }
    cache_frame_2108e2d35b352d6aa55ae11749170505 = NULL;

    assertFrameObject( frame_2108e2d35b352d6aa55ae11749170505 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_11_media_upload );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    Py_XDECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    Py_XDECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_11_media_upload );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_12_update_with_media( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_filename = python_pars[ 1 ];
    PyObject *par_args = python_pars[ 2 ];
    PyObject *par_kwargs = python_pars[ 3 ];
    PyObject *var_f = NULL;
    PyObject *var_headers = NULL;
    PyObject *var_post_data = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_5b1df0f5e4767236bf4c614e241672ab = NULL;

    struct Nuitka_FrameObject *frame_5b1df0f5e4767236bf4c614e241672ab;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5b1df0f5e4767236bf4c614e241672ab, codeobj_5b1df0f5e4767236bf4c614e241672ab, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_5b1df0f5e4767236bf4c614e241672ab = cache_frame_5b1df0f5e4767236bf4c614e241672ab;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5b1df0f5e4767236bf4c614e241672ab );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5b1df0f5e4767236bf4c614e241672ab ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kwargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_5b1df0f5e4767236bf4c614e241672ab->m_frame.f_lineno = 218;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain_file_none_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 218;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_f == NULL );
    var_f = tmp_assign_source_1;

    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_API );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_API );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "API" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 219;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__pack_image );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 219;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_filename;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 219;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_int_pos_3072;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_1 = const_str_plain_form_field;
    tmp_dict_value_1 = const_str_digest_bc5f31a881f710ef35718e7505d1bf88;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_f;
    tmp_dict_value_2 = var_f;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "f" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 219;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_5b1df0f5e4767236bf4c614e241672ab->m_frame.f_lineno = 219;
    tmp_iter_arg_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 219;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 219;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 219;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooooo";
        exception_lineno = 219;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooo";
                exception_lineno = 219;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooooo";
        exception_lineno = 219;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_5 );
    assert( var_headers == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var_headers = tmp_assign_source_5;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_6 );
    assert( var_post_data == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_post_data = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_2 = par_kwargs;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 220;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_update );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 220;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_3 = const_str_plain_headers;
    tmp_dict_value_3 = var_headers;

    if ( tmp_dict_value_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "headers" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 220;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_post_data;
    tmp_dict_value_4 = var_post_data;

    if ( tmp_dict_value_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 220;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_5b1df0f5e4767236bf4c614e241672ab->m_frame.f_lineno = 220;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 220;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 222;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_2 = _PyDict_NewPresized( 6 );
    tmp_dict_key_5 = const_str_plain_api;
    tmp_dict_value_5 = par_self;

    if ( tmp_dict_value_5 == NULL )
    {
        Py_DECREF( tmp_kw_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 223;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_path;
    tmp_dict_value_6 = const_str_digest_d440efcf9ba32d6dd20ba6ea4dbf7f57;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_7 = const_str_plain_method;
    tmp_dict_value_7 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_8 = const_str_plain_payload_type;
    tmp_dict_value_8 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_9 = const_str_plain_allowed_param;
    tmp_dict_value_9 = LIST_COPY( const_list_51ca9f06c42bffed4c486b4a568f9a5a_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_9, tmp_dict_value_9 );
    Py_DECREF( tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_10 = const_str_plain_require_auth;
    tmp_dict_value_10 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_10, tmp_dict_value_10 );
    assert( !(tmp_res != 0) );
    frame_5b1df0f5e4767236bf4c614e241672ab->m_frame.f_lineno = 222;
    tmp_dircall_arg1_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 222;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_dircall_arg2_1 = par_args;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 232;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_dircall_arg3_1 = par_kwargs;

    if ( tmp_dircall_arg3_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 232;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_7_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 222;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b1df0f5e4767236bf4c614e241672ab );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b1df0f5e4767236bf4c614e241672ab );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b1df0f5e4767236bf4c614e241672ab );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5b1df0f5e4767236bf4c614e241672ab, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5b1df0f5e4767236bf4c614e241672ab->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5b1df0f5e4767236bf4c614e241672ab, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5b1df0f5e4767236bf4c614e241672ab,
        type_description_1,
        par_self,
        par_filename,
        par_args,
        par_kwargs,
        var_f,
        var_headers,
        var_post_data
    );


    // Release cached frame.
    if ( frame_5b1df0f5e4767236bf4c614e241672ab == cache_frame_5b1df0f5e4767236bf4c614e241672ab )
    {
        Py_DECREF( frame_5b1df0f5e4767236bf4c614e241672ab );
    }
    cache_frame_5b1df0f5e4767236bf4c614e241672ab = NULL;

    assertFrameObject( frame_5b1df0f5e4767236bf4c614e241672ab );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_12_update_with_media );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    Py_XDECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    Py_XDECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_12_update_with_media );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_13_destroy_status( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_36540fc3ef3f30d4336d31d9d0bc104f = NULL;

    struct Nuitka_FrameObject *frame_36540fc3ef3f30d4336d31d9d0bc104f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_36540fc3ef3f30d4336d31d9d0bc104f, codeobj_36540fc3ef3f30d4336d31d9d0bc104f, module_tweepy$api, sizeof(void *) );
    frame_36540fc3ef3f30d4336d31d9d0bc104f = cache_frame_36540fc3ef3f30d4336d31d9d0bc104f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_36540fc3ef3f30d4336d31d9d0bc104f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_36540fc3ef3f30d4336d31d9d0bc104f ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 239;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_6d3b1189959672cf026553404a64f01a;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_36540fc3ef3f30d4336d31d9d0bc104f->m_frame.f_lineno = 239;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 239;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_36540fc3ef3f30d4336d31d9d0bc104f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_36540fc3ef3f30d4336d31d9d0bc104f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_36540fc3ef3f30d4336d31d9d0bc104f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_36540fc3ef3f30d4336d31d9d0bc104f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_36540fc3ef3f30d4336d31d9d0bc104f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_36540fc3ef3f30d4336d31d9d0bc104f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_36540fc3ef3f30d4336d31d9d0bc104f,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_36540fc3ef3f30d4336d31d9d0bc104f == cache_frame_36540fc3ef3f30d4336d31d9d0bc104f )
    {
        Py_DECREF( frame_36540fc3ef3f30d4336d31d9d0bc104f );
    }
    cache_frame_36540fc3ef3f30d4336d31d9d0bc104f = NULL;

    assertFrameObject( frame_36540fc3ef3f30d4336d31d9d0bc104f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_13_destroy_status );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_13_destroy_status );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_14_retweet( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_cf7ed6ecce751c9c1df8a21711cba345 = NULL;

    struct Nuitka_FrameObject *frame_cf7ed6ecce751c9c1df8a21711cba345;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cf7ed6ecce751c9c1df8a21711cba345, codeobj_cf7ed6ecce751c9c1df8a21711cba345, module_tweepy$api, sizeof(void *) );
    frame_cf7ed6ecce751c9c1df8a21711cba345 = cache_frame_cf7ed6ecce751c9c1df8a21711cba345;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cf7ed6ecce751c9c1df8a21711cba345 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cf7ed6ecce751c9c1df8a21711cba345 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 253;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_cf045d270385324eb990016ca320ca75;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_cf7ed6ecce751c9c1df8a21711cba345->m_frame.f_lineno = 253;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 253;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cf7ed6ecce751c9c1df8a21711cba345 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_cf7ed6ecce751c9c1df8a21711cba345 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cf7ed6ecce751c9c1df8a21711cba345 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cf7ed6ecce751c9c1df8a21711cba345, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cf7ed6ecce751c9c1df8a21711cba345->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cf7ed6ecce751c9c1df8a21711cba345, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cf7ed6ecce751c9c1df8a21711cba345,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_cf7ed6ecce751c9c1df8a21711cba345 == cache_frame_cf7ed6ecce751c9c1df8a21711cba345 )
    {
        Py_DECREF( frame_cf7ed6ecce751c9c1df8a21711cba345 );
    }
    cache_frame_cf7ed6ecce751c9c1df8a21711cba345 = NULL;

    assertFrameObject( frame_cf7ed6ecce751c9c1df8a21711cba345 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_14_retweet );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_14_retweet );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_15_retweets( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_eeeaa6b78a757404c7caeee36730c184 = NULL;

    struct Nuitka_FrameObject *frame_eeeaa6b78a757404c7caeee36730c184;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_eeeaa6b78a757404c7caeee36730c184, codeobj_eeeaa6b78a757404c7caeee36730c184, module_tweepy$api, sizeof(void *) );
    frame_eeeaa6b78a757404c7caeee36730c184 = cache_frame_eeeaa6b78a757404c7caeee36730c184;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_eeeaa6b78a757404c7caeee36730c184 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_eeeaa6b78a757404c7caeee36730c184 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 267;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_3d7d78975cbc97deb5aee4bbf06211bd;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_str_plain_count_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_eeeaa6b78a757404c7caeee36730c184->m_frame.f_lineno = 267;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_eeeaa6b78a757404c7caeee36730c184 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_eeeaa6b78a757404c7caeee36730c184 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_eeeaa6b78a757404c7caeee36730c184 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_eeeaa6b78a757404c7caeee36730c184, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_eeeaa6b78a757404c7caeee36730c184->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_eeeaa6b78a757404c7caeee36730c184, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_eeeaa6b78a757404c7caeee36730c184,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_eeeaa6b78a757404c7caeee36730c184 == cache_frame_eeeaa6b78a757404c7caeee36730c184 )
    {
        Py_DECREF( frame_eeeaa6b78a757404c7caeee36730c184 );
    }
    cache_frame_eeeaa6b78a757404c7caeee36730c184 = NULL;

    assertFrameObject( frame_eeeaa6b78a757404c7caeee36730c184 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_15_retweets );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_15_retweets );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_16_retweeters( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d4eb1be770bb09f5dc5127e08030139a = NULL;

    struct Nuitka_FrameObject *frame_d4eb1be770bb09f5dc5127e08030139a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d4eb1be770bb09f5dc5127e08030139a, codeobj_d4eb1be770bb09f5dc5127e08030139a, module_tweepy$api, sizeof(void *) );
    frame_d4eb1be770bb09f5dc5127e08030139a = cache_frame_d4eb1be770bb09f5dc5127e08030139a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d4eb1be770bb09f5dc5127e08030139a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d4eb1be770bb09f5dc5127e08030139a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 280;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_db4c941cc346078335e58955ee2cbe12;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_ids;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_id_str_plain_cursor_str_plain_stringify_ids_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_d4eb1be770bb09f5dc5127e08030139a->m_frame.f_lineno = 280;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d4eb1be770bb09f5dc5127e08030139a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d4eb1be770bb09f5dc5127e08030139a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d4eb1be770bb09f5dc5127e08030139a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d4eb1be770bb09f5dc5127e08030139a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d4eb1be770bb09f5dc5127e08030139a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d4eb1be770bb09f5dc5127e08030139a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d4eb1be770bb09f5dc5127e08030139a,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_d4eb1be770bb09f5dc5127e08030139a == cache_frame_d4eb1be770bb09f5dc5127e08030139a )
    {
        Py_DECREF( frame_d4eb1be770bb09f5dc5127e08030139a );
    }
    cache_frame_d4eb1be770bb09f5dc5127e08030139a = NULL;

    assertFrameObject( frame_d4eb1be770bb09f5dc5127e08030139a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_16_retweeters );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_16_retweeters );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_17_get_user( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 = NULL;

    struct Nuitka_FrameObject *frame_1d4c111344c4facdd9f0aa8ddf6f4bc0;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1d4c111344c4facdd9f0aa8ddf6f4bc0, codeobj_1d4c111344c4facdd9f0aa8ddf6f4bc0, module_tweepy$api, sizeof(void *) );
    frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 = cache_frame_1d4c111344c4facdd9f0aa8ddf6f4bc0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 292;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_ec9fe9d7e6e00a2b2a452d19b3d04cae;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_1d4c111344c4facdd9f0aa8ddf6f4bc0->m_frame.f_lineno = 292;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1d4c111344c4facdd9f0aa8ddf6f4bc0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1d4c111344c4facdd9f0aa8ddf6f4bc0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1d4c111344c4facdd9f0aa8ddf6f4bc0,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 == cache_frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 )
    {
        Py_DECREF( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 );
    }
    cache_frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 = NULL;

    assertFrameObject( frame_1d4c111344c4facdd9f0aa8ddf6f4bc0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_17_get_user );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_17_get_user );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_18_get_oembed( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_7e7ab4ceb944a35e9f5ba99235698fce = NULL;

    struct Nuitka_FrameObject *frame_7e7ab4ceb944a35e9f5ba99235698fce;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7e7ab4ceb944a35e9f5ba99235698fce, codeobj_7e7ab4ceb944a35e9f5ba99235698fce, module_tweepy$api, sizeof(void *) );
    frame_7e7ab4ceb944a35e9f5ba99235698fce = cache_frame_7e7ab4ceb944a35e9f5ba99235698fce;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7e7ab4ceb944a35e9f5ba99235698fce );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7e7ab4ceb944a35e9f5ba99235698fce ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 304;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_5287048a93782de72410fb0927594c1b;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_ee9d2aecc5e5f789a0f3e231695baf60_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_7e7ab4ceb944a35e9f5ba99235698fce->m_frame.f_lineno = 304;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7e7ab4ceb944a35e9f5ba99235698fce );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7e7ab4ceb944a35e9f5ba99235698fce );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7e7ab4ceb944a35e9f5ba99235698fce );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7e7ab4ceb944a35e9f5ba99235698fce, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7e7ab4ceb944a35e9f5ba99235698fce->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7e7ab4ceb944a35e9f5ba99235698fce, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7e7ab4ceb944a35e9f5ba99235698fce,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_7e7ab4ceb944a35e9f5ba99235698fce == cache_frame_7e7ab4ceb944a35e9f5ba99235698fce )
    {
        Py_DECREF( frame_7e7ab4ceb944a35e9f5ba99235698fce );
    }
    cache_frame_7e7ab4ceb944a35e9f5ba99235698fce = NULL;

    assertFrameObject( frame_7e7ab4ceb944a35e9f5ba99235698fce );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_18_get_oembed );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_18_get_oembed );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_19_lookup_users( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_user_ids = python_pars[ 1 ];
    PyObject *par_screen_names = python_pars[ 2 ];
    PyObject *par_include_entities = python_pars[ 3 ];
    PyObject *var_post_data = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscribed_2;
    PyObject *tmp_ass_subscribed_3;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subscript_2;
    PyObject *tmp_ass_subscript_3;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_ass_subvalue_2;
    PyObject *tmp_ass_subvalue_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    bool tmp_isnot_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_4c432615d74f3053d1abed2e0002aefb = NULL;

    struct Nuitka_FrameObject *frame_4c432615d74f3053d1abed2e0002aefb;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = PyDict_New();
    assert( var_post_data == NULL );
    var_post_data = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4c432615d74f3053d1abed2e0002aefb, codeobj_4c432615d74f3053d1abed2e0002aefb, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4c432615d74f3053d1abed2e0002aefb = cache_frame_4c432615d74f3053d1abed2e0002aefb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4c432615d74f3053d1abed2e0002aefb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4c432615d74f3053d1abed2e0002aefb ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_include_entities;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_cond_value_1 = par_include_entities;

    if ( tmp_cond_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "include_entities" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 315;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_assign_source_2 = const_str_plain_true;
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_assign_source_2 = const_str_plain_false;
    condexpr_end_1:;
    {
        PyObject *old = par_include_entities;
        par_include_entities = tmp_assign_source_2;
        Py_INCREF( par_include_entities );
        Py_XDECREF( old );
    }

    tmp_ass_subvalue_1 = par_include_entities;

    CHECK_OBJECT( tmp_ass_subvalue_1 );
    tmp_ass_subscribed_1 = var_post_data;

    if ( tmp_ass_subscribed_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 316;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_1 = const_str_plain_include_entities;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 316;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    tmp_cond_value_2 = par_user_ids;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "user_ids" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 317;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 317;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 318;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_user_ids;

    if ( tmp_args_element_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "user_ids" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 318;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_4c432615d74f3053d1abed2e0002aefb->m_frame.f_lineno = 318;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_ass_subvalue_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_ass_subvalue_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 318;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_2 = var_post_data;

    if ( tmp_ass_subscribed_2 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 318;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_2 = const_str_plain_user_id;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
    Py_DECREF( tmp_ass_subvalue_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 318;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;
    tmp_cond_value_3 = par_screen_names;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "screen_names" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 319;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 319;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 320;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_screen_names;

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "screen_names" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 320;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_4c432615d74f3053d1abed2e0002aefb->m_frame.f_lineno = 320;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_ass_subvalue_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_ass_subvalue_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_ass_subscribed_3 = var_post_data;

    if ( tmp_ass_subscribed_3 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 320;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_ass_subscript_3 = const_str_plain_screen_name;
    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
    Py_DECREF( tmp_ass_subvalue_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    branch_no_3:;
    tmp_source_name_1 = par_self;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 322;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__lookup_users );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 322;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_key_1 = const_str_plain_post_data;
    tmp_dict_value_1 = var_post_data;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 322;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_4c432615d74f3053d1abed2e0002aefb->m_frame.f_lineno = 322;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 322;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4c432615d74f3053d1abed2e0002aefb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4c432615d74f3053d1abed2e0002aefb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4c432615d74f3053d1abed2e0002aefb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4c432615d74f3053d1abed2e0002aefb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4c432615d74f3053d1abed2e0002aefb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4c432615d74f3053d1abed2e0002aefb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4c432615d74f3053d1abed2e0002aefb,
        type_description_1,
        par_self,
        par_user_ids,
        par_screen_names,
        par_include_entities,
        var_post_data
    );


    // Release cached frame.
    if ( frame_4c432615d74f3053d1abed2e0002aefb == cache_frame_4c432615d74f3053d1abed2e0002aefb )
    {
        Py_DECREF( frame_4c432615d74f3053d1abed2e0002aefb );
    }
    cache_frame_4c432615d74f3053d1abed2e0002aefb = NULL;

    assertFrameObject( frame_4c432615d74f3053d1abed2e0002aefb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_19_lookup_users );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_user_ids );
    par_user_ids = NULL;

    Py_XDECREF( par_screen_names );
    par_screen_names = NULL;

    Py_XDECREF( par_include_entities );
    par_include_entities = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_user_ids );
    par_user_ids = NULL;

    Py_XDECREF( par_screen_names );
    par_screen_names = NULL;

    Py_XDECREF( par_include_entities );
    par_include_entities = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_19_lookup_users );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_20__lookup_users( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_5dc4c08475486b194a84a75907dabbd7 = NULL;

    struct Nuitka_FrameObject *frame_5dc4c08475486b194a84a75907dabbd7;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5dc4c08475486b194a84a75907dabbd7, codeobj_5dc4c08475486b194a84a75907dabbd7, module_tweepy$api, sizeof(void *) );
    frame_5dc4c08475486b194a84a75907dabbd7 = cache_frame_5dc4c08475486b194a84a75907dabbd7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5dc4c08475486b194a84a75907dabbd7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5dc4c08475486b194a84a75907dabbd7 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 329;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_d0a158b8ea9e2a619ed75e58447a5dba;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_method;
    tmp_dict_value_5 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_5dc4c08475486b194a84a75907dabbd7->m_frame.f_lineno = 329;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 329;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5dc4c08475486b194a84a75907dabbd7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5dc4c08475486b194a84a75907dabbd7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5dc4c08475486b194a84a75907dabbd7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5dc4c08475486b194a84a75907dabbd7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5dc4c08475486b194a84a75907dabbd7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5dc4c08475486b194a84a75907dabbd7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5dc4c08475486b194a84a75907dabbd7,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_5dc4c08475486b194a84a75907dabbd7 == cache_frame_5dc4c08475486b194a84a75907dabbd7 )
    {
        Py_DECREF( frame_5dc4c08475486b194a84a75907dabbd7 );
    }
    cache_frame_5dc4c08475486b194a84a75907dabbd7 = NULL;

    assertFrameObject( frame_5dc4c08475486b194a84a75907dabbd7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_20__lookup_users );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_20__lookup_users );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_21_me( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_4eee1808bb91e31638aa70ddaa543d30 = NULL;

    struct Nuitka_FrameObject *frame_4eee1808bb91e31638aa70ddaa543d30;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4eee1808bb91e31638aa70ddaa543d30, codeobj_4eee1808bb91e31638aa70ddaa543d30, module_tweepy$api, sizeof(void *) );
    frame_4eee1808bb91e31638aa70ddaa543d30 = cache_frame_4eee1808bb91e31638aa70ddaa543d30;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4eee1808bb91e31638aa70ddaa543d30 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4eee1808bb91e31638aa70ddaa543d30 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get_user );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 338;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_key_1 = const_str_plain_screen_name;
    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 338;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_auth );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 338;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_4eee1808bb91e31638aa70ddaa543d30->m_frame.f_lineno = 338;
    tmp_dict_value_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get_username );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );

        exception_lineno = 338;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_4eee1808bb91e31638aa70ddaa543d30->m_frame.f_lineno = 338;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 338;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4eee1808bb91e31638aa70ddaa543d30 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4eee1808bb91e31638aa70ddaa543d30 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4eee1808bb91e31638aa70ddaa543d30 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4eee1808bb91e31638aa70ddaa543d30, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4eee1808bb91e31638aa70ddaa543d30->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4eee1808bb91e31638aa70ddaa543d30, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4eee1808bb91e31638aa70ddaa543d30,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_4eee1808bb91e31638aa70ddaa543d30 == cache_frame_4eee1808bb91e31638aa70ddaa543d30 )
    {
        Py_DECREF( frame_4eee1808bb91e31638aa70ddaa543d30 );
    }
    cache_frame_4eee1808bb91e31638aa70ddaa543d30 = NULL;

    assertFrameObject( frame_4eee1808bb91e31638aa70ddaa543d30 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_21_me );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_21_me );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_22_search_users( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_65bc48de0216fc767a82f2690585ea67 = NULL;

    struct Nuitka_FrameObject *frame_65bc48de0216fc767a82f2690585ea67;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_65bc48de0216fc767a82f2690585ea67, codeobj_65bc48de0216fc767a82f2690585ea67, module_tweepy$api, sizeof(void *) );
    frame_65bc48de0216fc767a82f2690585ea67 = cache_frame_65bc48de0216fc767a82f2690585ea67;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_65bc48de0216fc767a82f2690585ea67 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_65bc48de0216fc767a82f2690585ea67 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 345;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_5890cfaec008d2ceeff0b5d3ac040176;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_require_auth;
    tmp_dict_value_5 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_allowed_param;
    tmp_dict_value_6 = LIST_COPY( const_list_str_plain_q_str_plain_count_str_plain_page_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_65bc48de0216fc767a82f2690585ea67->m_frame.f_lineno = 345;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 345;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_65bc48de0216fc767a82f2690585ea67 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_65bc48de0216fc767a82f2690585ea67 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_65bc48de0216fc767a82f2690585ea67 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_65bc48de0216fc767a82f2690585ea67, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_65bc48de0216fc767a82f2690585ea67->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_65bc48de0216fc767a82f2690585ea67, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_65bc48de0216fc767a82f2690585ea67,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_65bc48de0216fc767a82f2690585ea67 == cache_frame_65bc48de0216fc767a82f2690585ea67 )
    {
        Py_DECREF( frame_65bc48de0216fc767a82f2690585ea67 );
    }
    cache_frame_65bc48de0216fc767a82f2690585ea67 = NULL;

    assertFrameObject( frame_65bc48de0216fc767a82f2690585ea67 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_22_search_users );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_22_search_users );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_23_suggested_users( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_2d363280eb787780b4195632a708b95e = NULL;

    struct Nuitka_FrameObject *frame_2d363280eb787780b4195632a708b95e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2d363280eb787780b4195632a708b95e, codeobj_2d363280eb787780b4195632a708b95e, module_tweepy$api, sizeof(void *) );
    frame_2d363280eb787780b4195632a708b95e = cache_frame_2d363280eb787780b4195632a708b95e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2d363280eb787780b4195632a708b95e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2d363280eb787780b4195632a708b95e ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 358;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_1a2aee67d826c7f4aeaaf9878557cd76;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_require_auth;
    tmp_dict_value_5 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_allowed_param;
    tmp_dict_value_6 = LIST_COPY( const_list_str_plain_slug_str_plain_lang_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_2d363280eb787780b4195632a708b95e->m_frame.f_lineno = 358;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 358;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2d363280eb787780b4195632a708b95e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2d363280eb787780b4195632a708b95e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2d363280eb787780b4195632a708b95e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2d363280eb787780b4195632a708b95e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2d363280eb787780b4195632a708b95e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2d363280eb787780b4195632a708b95e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2d363280eb787780b4195632a708b95e,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_2d363280eb787780b4195632a708b95e == cache_frame_2d363280eb787780b4195632a708b95e )
    {
        Py_DECREF( frame_2d363280eb787780b4195632a708b95e );
    }
    cache_frame_2d363280eb787780b4195632a708b95e = NULL;

    assertFrameObject( frame_2d363280eb787780b4195632a708b95e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_23_suggested_users );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_23_suggested_users );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_24_suggested_categories( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_ab4e6e8ca538cc6f1925b3019d68cb90 = NULL;

    struct Nuitka_FrameObject *frame_ab4e6e8ca538cc6f1925b3019d68cb90;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ab4e6e8ca538cc6f1925b3019d68cb90, codeobj_ab4e6e8ca538cc6f1925b3019d68cb90, module_tweepy$api, sizeof(void *) );
    frame_ab4e6e8ca538cc6f1925b3019d68cb90 = cache_frame_ab4e6e8ca538cc6f1925b3019d68cb90;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ab4e6e8ca538cc6f1925b3019d68cb90 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ab4e6e8ca538cc6f1925b3019d68cb90 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 371;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_4e8f99d484fb560e8ee48515ab64a483;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_category;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_lang_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_ab4e6e8ca538cc6f1925b3019d68cb90->m_frame.f_lineno = 371;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ab4e6e8ca538cc6f1925b3019d68cb90 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ab4e6e8ca538cc6f1925b3019d68cb90 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ab4e6e8ca538cc6f1925b3019d68cb90 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ab4e6e8ca538cc6f1925b3019d68cb90, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ab4e6e8ca538cc6f1925b3019d68cb90->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ab4e6e8ca538cc6f1925b3019d68cb90, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ab4e6e8ca538cc6f1925b3019d68cb90,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_ab4e6e8ca538cc6f1925b3019d68cb90 == cache_frame_ab4e6e8ca538cc6f1925b3019d68cb90 )
    {
        Py_DECREF( frame_ab4e6e8ca538cc6f1925b3019d68cb90 );
    }
    cache_frame_ab4e6e8ca538cc6f1925b3019d68cb90 = NULL;

    assertFrameObject( frame_ab4e6e8ca538cc6f1925b3019d68cb90 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_24_suggested_categories );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_24_suggested_categories );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_25_suggested_users_tweets( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_93d23f99710bf35f8e2f4e7727040926 = NULL;

    struct Nuitka_FrameObject *frame_93d23f99710bf35f8e2f4e7727040926;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_93d23f99710bf35f8e2f4e7727040926, codeobj_93d23f99710bf35f8e2f4e7727040926, module_tweepy$api, sizeof(void *) );
    frame_93d23f99710bf35f8e2f4e7727040926 = cache_frame_93d23f99710bf35f8e2f4e7727040926;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_93d23f99710bf35f8e2f4e7727040926 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_93d23f99710bf35f8e2f4e7727040926 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 384;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_fdf6e5c8ff1db6b3450e3727889ef07a;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_slug_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_93d23f99710bf35f8e2f4e7727040926->m_frame.f_lineno = 384;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 384;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_93d23f99710bf35f8e2f4e7727040926 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_93d23f99710bf35f8e2f4e7727040926 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_93d23f99710bf35f8e2f4e7727040926 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_93d23f99710bf35f8e2f4e7727040926, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_93d23f99710bf35f8e2f4e7727040926->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_93d23f99710bf35f8e2f4e7727040926, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_93d23f99710bf35f8e2f4e7727040926,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_93d23f99710bf35f8e2f4e7727040926 == cache_frame_93d23f99710bf35f8e2f4e7727040926 )
    {
        Py_DECREF( frame_93d23f99710bf35f8e2f4e7727040926 );
    }
    cache_frame_93d23f99710bf35f8e2f4e7727040926 = NULL;

    assertFrameObject( frame_93d23f99710bf35f8e2f4e7727040926 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_25_suggested_users_tweets );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_25_suggested_users_tweets );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_26_direct_messages( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_1f5aa56e029dbeb407a8a1644ef693cc = NULL;

    struct Nuitka_FrameObject *frame_1f5aa56e029dbeb407a8a1644ef693cc;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1f5aa56e029dbeb407a8a1644ef693cc, codeobj_1f5aa56e029dbeb407a8a1644ef693cc, module_tweepy$api, sizeof(void *) );
    frame_1f5aa56e029dbeb407a8a1644ef693cc = cache_frame_1f5aa56e029dbeb407a8a1644ef693cc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1f5aa56e029dbeb407a8a1644ef693cc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1f5aa56e029dbeb407a8a1644ef693cc ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 397;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_5f62b8f8eb5b756b9c9b3266bd12324c;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_direct_message;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_4f401a447d32604f8e859b68c64f2b68_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_1f5aa56e029dbeb407a8a1644ef693cc->m_frame.f_lineno = 397;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 397;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f5aa56e029dbeb407a8a1644ef693cc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f5aa56e029dbeb407a8a1644ef693cc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f5aa56e029dbeb407a8a1644ef693cc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1f5aa56e029dbeb407a8a1644ef693cc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1f5aa56e029dbeb407a8a1644ef693cc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1f5aa56e029dbeb407a8a1644ef693cc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1f5aa56e029dbeb407a8a1644ef693cc,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_1f5aa56e029dbeb407a8a1644ef693cc == cache_frame_1f5aa56e029dbeb407a8a1644ef693cc )
    {
        Py_DECREF( frame_1f5aa56e029dbeb407a8a1644ef693cc );
    }
    cache_frame_1f5aa56e029dbeb407a8a1644ef693cc = NULL;

    assertFrameObject( frame_1f5aa56e029dbeb407a8a1644ef693cc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_26_direct_messages );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_26_direct_messages );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_27_get_direct_message( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8e057ad2deee48e0ff7e0f35ddaf46b1 = NULL;

    struct Nuitka_FrameObject *frame_8e057ad2deee48e0ff7e0f35ddaf46b1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8e057ad2deee48e0ff7e0f35ddaf46b1, codeobj_8e057ad2deee48e0ff7e0f35ddaf46b1, module_tweepy$api, sizeof(void *) );
    frame_8e057ad2deee48e0ff7e0f35ddaf46b1 = cache_frame_8e057ad2deee48e0ff7e0f35ddaf46b1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8e057ad2deee48e0ff7e0f35ddaf46b1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8e057ad2deee48e0ff7e0f35ddaf46b1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 410;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_5ebfad0f66a82c549d44343df2b0fe91;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_direct_message;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_id_str_plain_full_text_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_require_auth;
    tmp_dict_value_5 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_8e057ad2deee48e0ff7e0f35ddaf46b1->m_frame.f_lineno = 410;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 410;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8e057ad2deee48e0ff7e0f35ddaf46b1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8e057ad2deee48e0ff7e0f35ddaf46b1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8e057ad2deee48e0ff7e0f35ddaf46b1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8e057ad2deee48e0ff7e0f35ddaf46b1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8e057ad2deee48e0ff7e0f35ddaf46b1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8e057ad2deee48e0ff7e0f35ddaf46b1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8e057ad2deee48e0ff7e0f35ddaf46b1,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_8e057ad2deee48e0ff7e0f35ddaf46b1 == cache_frame_8e057ad2deee48e0ff7e0f35ddaf46b1 )
    {
        Py_DECREF( frame_8e057ad2deee48e0ff7e0f35ddaf46b1 );
    }
    cache_frame_8e057ad2deee48e0ff7e0f35ddaf46b1 = NULL;

    assertFrameObject( frame_8e057ad2deee48e0ff7e0f35ddaf46b1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_27_get_direct_message );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_27_get_direct_message );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_28_sent_direct_messages( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f5b64100e4c6d38b868cc509d32a3b65 = NULL;

    struct Nuitka_FrameObject *frame_f5b64100e4c6d38b868cc509d32a3b65;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f5b64100e4c6d38b868cc509d32a3b65, codeobj_f5b64100e4c6d38b868cc509d32a3b65, module_tweepy$api, sizeof(void *) );
    frame_f5b64100e4c6d38b868cc509d32a3b65 = cache_frame_f5b64100e4c6d38b868cc509d32a3b65;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f5b64100e4c6d38b868cc509d32a3b65 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f5b64100e4c6d38b868cc509d32a3b65 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 423;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_afe426a59704faec283b2695bed0e507;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_direct_message;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_e3ed10a2b1264427e2d1008a5f569202_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_f5b64100e4c6d38b868cc509d32a3b65->m_frame.f_lineno = 423;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 423;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5b64100e4c6d38b868cc509d32a3b65 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5b64100e4c6d38b868cc509d32a3b65 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5b64100e4c6d38b868cc509d32a3b65 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f5b64100e4c6d38b868cc509d32a3b65, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f5b64100e4c6d38b868cc509d32a3b65->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f5b64100e4c6d38b868cc509d32a3b65, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f5b64100e4c6d38b868cc509d32a3b65,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_f5b64100e4c6d38b868cc509d32a3b65 == cache_frame_f5b64100e4c6d38b868cc509d32a3b65 )
    {
        Py_DECREF( frame_f5b64100e4c6d38b868cc509d32a3b65 );
    }
    cache_frame_f5b64100e4c6d38b868cc509d32a3b65 = NULL;

    assertFrameObject( frame_f5b64100e4c6d38b868cc509d32a3b65 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_28_sent_direct_messages );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_28_sent_direct_messages );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_29_send_direct_message( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_45325722189a1794518740bb94a35ecc = NULL;

    struct Nuitka_FrameObject *frame_45325722189a1794518740bb94a35ecc;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_45325722189a1794518740bb94a35ecc, codeobj_45325722189a1794518740bb94a35ecc, module_tweepy$api, sizeof(void *) );
    frame_45325722189a1794518740bb94a35ecc = cache_frame_45325722189a1794518740bb94a35ecc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_45325722189a1794518740bb94a35ecc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_45325722189a1794518740bb94a35ecc ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 436;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_5b9f75cb04ed3ca5c06b6e427ab1e3bf;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_direct_message;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_44bcfbd3893f66f93d81715a8fc425bb_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_45325722189a1794518740bb94a35ecc->m_frame.f_lineno = 436;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 436;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_45325722189a1794518740bb94a35ecc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_45325722189a1794518740bb94a35ecc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_45325722189a1794518740bb94a35ecc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_45325722189a1794518740bb94a35ecc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_45325722189a1794518740bb94a35ecc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_45325722189a1794518740bb94a35ecc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_45325722189a1794518740bb94a35ecc,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_45325722189a1794518740bb94a35ecc == cache_frame_45325722189a1794518740bb94a35ecc )
    {
        Py_DECREF( frame_45325722189a1794518740bb94a35ecc );
    }
    cache_frame_45325722189a1794518740bb94a35ecc = NULL;

    assertFrameObject( frame_45325722189a1794518740bb94a35ecc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_29_send_direct_message );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_29_send_direct_message );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_30_destroy_direct_message( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_91b19364b154c1522c83bdbb85ad5723 = NULL;

    struct Nuitka_FrameObject *frame_91b19364b154c1522c83bdbb85ad5723;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_91b19364b154c1522c83bdbb85ad5723, codeobj_91b19364b154c1522c83bdbb85ad5723, module_tweepy$api, sizeof(void *) );
    frame_91b19364b154c1522c83bdbb85ad5723 = cache_frame_91b19364b154c1522c83bdbb85ad5723;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_91b19364b154c1522c83bdbb85ad5723 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_91b19364b154c1522c83bdbb85ad5723 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 450;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_75443704c119c988300dd0b1474ba05b;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_direct_message;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_91b19364b154c1522c83bdbb85ad5723->m_frame.f_lineno = 450;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_91b19364b154c1522c83bdbb85ad5723 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_91b19364b154c1522c83bdbb85ad5723 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_91b19364b154c1522c83bdbb85ad5723 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_91b19364b154c1522c83bdbb85ad5723, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_91b19364b154c1522c83bdbb85ad5723->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_91b19364b154c1522c83bdbb85ad5723, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_91b19364b154c1522c83bdbb85ad5723,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_91b19364b154c1522c83bdbb85ad5723 == cache_frame_91b19364b154c1522c83bdbb85ad5723 )
    {
        Py_DECREF( frame_91b19364b154c1522c83bdbb85ad5723 );
    }
    cache_frame_91b19364b154c1522c83bdbb85ad5723 = NULL;

    assertFrameObject( frame_91b19364b154c1522c83bdbb85ad5723 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_30_destroy_direct_message );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_30_destroy_direct_message );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_31_create_friendship( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d3154221f11db26685e34f0be0f0ec47 = NULL;

    struct Nuitka_FrameObject *frame_d3154221f11db26685e34f0be0f0ec47;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d3154221f11db26685e34f0be0f0ec47, codeobj_d3154221f11db26685e34f0be0f0ec47, module_tweepy$api, sizeof(void *) );
    frame_d3154221f11db26685e34f0be0f0ec47 = cache_frame_d3154221f11db26685e34f0be0f0ec47;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d3154221f11db26685e34f0be0f0ec47 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d3154221f11db26685e34f0be0f0ec47 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 464;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_4f022903b2372914fc4dddf5ccb3c018;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_f1ef68426670996528bdbae542cd9d93_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_d3154221f11db26685e34f0be0f0ec47->m_frame.f_lineno = 464;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 464;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d3154221f11db26685e34f0be0f0ec47 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d3154221f11db26685e34f0be0f0ec47 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d3154221f11db26685e34f0be0f0ec47 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d3154221f11db26685e34f0be0f0ec47, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d3154221f11db26685e34f0be0f0ec47->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d3154221f11db26685e34f0be0f0ec47, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d3154221f11db26685e34f0be0f0ec47,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_d3154221f11db26685e34f0be0f0ec47 == cache_frame_d3154221f11db26685e34f0be0f0ec47 )
    {
        Py_DECREF( frame_d3154221f11db26685e34f0be0f0ec47 );
    }
    cache_frame_d3154221f11db26685e34f0be0f0ec47 = NULL;

    assertFrameObject( frame_d3154221f11db26685e34f0be0f0ec47 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_31_create_friendship );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_31_create_friendship );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_32_destroy_friendship( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_b4e9f3e8920c4b9d41f1a5272c7d6313 = NULL;

    struct Nuitka_FrameObject *frame_b4e9f3e8920c4b9d41f1a5272c7d6313;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b4e9f3e8920c4b9d41f1a5272c7d6313, codeobj_b4e9f3e8920c4b9d41f1a5272c7d6313, module_tweepy$api, sizeof(void *) );
    frame_b4e9f3e8920c4b9d41f1a5272c7d6313 = cache_frame_b4e9f3e8920c4b9d41f1a5272c7d6313;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b4e9f3e8920c4b9d41f1a5272c7d6313 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b4e9f3e8920c4b9d41f1a5272c7d6313 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 478;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_41b8e4be2ca8dfc34d03e9417c0454cd;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_b4e9f3e8920c4b9d41f1a5272c7d6313->m_frame.f_lineno = 478;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 478;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4e9f3e8920c4b9d41f1a5272c7d6313 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4e9f3e8920c4b9d41f1a5272c7d6313 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4e9f3e8920c4b9d41f1a5272c7d6313 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b4e9f3e8920c4b9d41f1a5272c7d6313, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b4e9f3e8920c4b9d41f1a5272c7d6313->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b4e9f3e8920c4b9d41f1a5272c7d6313, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b4e9f3e8920c4b9d41f1a5272c7d6313,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_b4e9f3e8920c4b9d41f1a5272c7d6313 == cache_frame_b4e9f3e8920c4b9d41f1a5272c7d6313 )
    {
        Py_DECREF( frame_b4e9f3e8920c4b9d41f1a5272c7d6313 );
    }
    cache_frame_b4e9f3e8920c4b9d41f1a5272c7d6313 = NULL;

    assertFrameObject( frame_b4e9f3e8920c4b9d41f1a5272c7d6313 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_32_destroy_friendship );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_32_destroy_friendship );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_33_show_friendship( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8edf27b5c181c7bb006364033d1d8372 = NULL;

    struct Nuitka_FrameObject *frame_8edf27b5c181c7bb006364033d1d8372;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8edf27b5c181c7bb006364033d1d8372, codeobj_8edf27b5c181c7bb006364033d1d8372, module_tweepy$api, sizeof(void *) );
    frame_8edf27b5c181c7bb006364033d1d8372 = cache_frame_8edf27b5c181c7bb006364033d1d8372;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8edf27b5c181c7bb006364033d1d8372 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8edf27b5c181c7bb006364033d1d8372 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 492;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_2fc806586bf24e0d8686fe872113f7fb;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_friendship;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_4b45229f5bc30e6129da8bf9aa36c3ce_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_8edf27b5c181c7bb006364033d1d8372->m_frame.f_lineno = 492;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 492;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8edf27b5c181c7bb006364033d1d8372 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8edf27b5c181c7bb006364033d1d8372 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8edf27b5c181c7bb006364033d1d8372 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8edf27b5c181c7bb006364033d1d8372, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8edf27b5c181c7bb006364033d1d8372->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8edf27b5c181c7bb006364033d1d8372, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8edf27b5c181c7bb006364033d1d8372,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_8edf27b5c181c7bb006364033d1d8372 == cache_frame_8edf27b5c181c7bb006364033d1d8372 )
    {
        Py_DECREF( frame_8edf27b5c181c7bb006364033d1d8372 );
    }
    cache_frame_8edf27b5c181c7bb006364033d1d8372 = NULL;

    assertFrameObject( frame_8edf27b5c181c7bb006364033d1d8372 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_33_show_friendship );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_33_show_friendship );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_34_lookup_friendships( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_user_ids = python_pars[ 1 ];
    PyObject *par_screen_names = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_6d841790ffa99d5aac0afc8adc221c75 = NULL;

    struct Nuitka_FrameObject *frame_6d841790ffa99d5aac0afc8adc221c75;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6d841790ffa99d5aac0afc8adc221c75, codeobj_6d841790ffa99d5aac0afc8adc221c75, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6d841790ffa99d5aac0afc8adc221c75 = cache_frame_6d841790ffa99d5aac0afc8adc221c75;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6d841790ffa99d5aac0afc8adc221c75 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6d841790ffa99d5aac0afc8adc221c75 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__lookup_friendships );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 502;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 502;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_user_ids;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "user_ids" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 502;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_6d841790ffa99d5aac0afc8adc221c75->m_frame.f_lineno = 502;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 502;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 502;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_screen_names;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "screen_names" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 502;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_6d841790ffa99d5aac0afc8adc221c75->m_frame.f_lineno = 502;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 502;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_6d841790ffa99d5aac0afc8adc221c75->m_frame.f_lineno = 502;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 502;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d841790ffa99d5aac0afc8adc221c75 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d841790ffa99d5aac0afc8adc221c75 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6d841790ffa99d5aac0afc8adc221c75 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6d841790ffa99d5aac0afc8adc221c75, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6d841790ffa99d5aac0afc8adc221c75->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6d841790ffa99d5aac0afc8adc221c75, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6d841790ffa99d5aac0afc8adc221c75,
        type_description_1,
        par_self,
        par_user_ids,
        par_screen_names
    );


    // Release cached frame.
    if ( frame_6d841790ffa99d5aac0afc8adc221c75 == cache_frame_6d841790ffa99d5aac0afc8adc221c75 )
    {
        Py_DECREF( frame_6d841790ffa99d5aac0afc8adc221c75 );
    }
    cache_frame_6d841790ffa99d5aac0afc8adc221c75 = NULL;

    assertFrameObject( frame_6d841790ffa99d5aac0afc8adc221c75 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_34_lookup_friendships );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_user_ids );
    par_user_ids = NULL;

    Py_XDECREF( par_screen_names );
    par_screen_names = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_user_ids );
    par_user_ids = NULL;

    Py_XDECREF( par_screen_names );
    par_screen_names = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_34_lookup_friendships );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_35__lookup_friendships( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_933e27bcff1a5abadfc3535e77bfce32 = NULL;

    struct Nuitka_FrameObject *frame_933e27bcff1a5abadfc3535e77bfce32;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_933e27bcff1a5abadfc3535e77bfce32, codeobj_933e27bcff1a5abadfc3535e77bfce32, module_tweepy$api, sizeof(void *) );
    frame_933e27bcff1a5abadfc3535e77bfce32 = cache_frame_933e27bcff1a5abadfc3535e77bfce32;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_933e27bcff1a5abadfc3535e77bfce32 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_933e27bcff1a5abadfc3535e77bfce32 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 509;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_0ad382a0d56f19aa6d2764f59c2989b7;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_relationship;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_user_id_str_plain_screen_name_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_933e27bcff1a5abadfc3535e77bfce32->m_frame.f_lineno = 509;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 509;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_933e27bcff1a5abadfc3535e77bfce32 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_933e27bcff1a5abadfc3535e77bfce32 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_933e27bcff1a5abadfc3535e77bfce32 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_933e27bcff1a5abadfc3535e77bfce32, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_933e27bcff1a5abadfc3535e77bfce32->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_933e27bcff1a5abadfc3535e77bfce32, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_933e27bcff1a5abadfc3535e77bfce32,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_933e27bcff1a5abadfc3535e77bfce32 == cache_frame_933e27bcff1a5abadfc3535e77bfce32 )
    {
        Py_DECREF( frame_933e27bcff1a5abadfc3535e77bfce32 );
    }
    cache_frame_933e27bcff1a5abadfc3535e77bfce32 = NULL;

    assertFrameObject( frame_933e27bcff1a5abadfc3535e77bfce32 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_35__lookup_friendships );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_35__lookup_friendships );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_36_friends_ids( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_0f0e14368dfbef76e79bf4d638757d75 = NULL;

    struct Nuitka_FrameObject *frame_0f0e14368dfbef76e79bf4d638757d75;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0f0e14368dfbef76e79bf4d638757d75, codeobj_0f0e14368dfbef76e79bf4d638757d75, module_tweepy$api, sizeof(void *) );
    frame_0f0e14368dfbef76e79bf4d638757d75 = cache_frame_0f0e14368dfbef76e79bf4d638757d75;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0f0e14368dfbef76e79bf4d638757d75 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0f0e14368dfbef76e79bf4d638757d75 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 522;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_70cf2b1adfa2d515ce9b8dafe4c64adf;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_ids;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_b91cc45353a8cec6ac4b925279535b3b_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_0f0e14368dfbef76e79bf4d638757d75->m_frame.f_lineno = 522;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 522;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f0e14368dfbef76e79bf4d638757d75 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f0e14368dfbef76e79bf4d638757d75 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f0e14368dfbef76e79bf4d638757d75 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0f0e14368dfbef76e79bf4d638757d75, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0f0e14368dfbef76e79bf4d638757d75->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0f0e14368dfbef76e79bf4d638757d75, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0f0e14368dfbef76e79bf4d638757d75,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0f0e14368dfbef76e79bf4d638757d75 == cache_frame_0f0e14368dfbef76e79bf4d638757d75 )
    {
        Py_DECREF( frame_0f0e14368dfbef76e79bf4d638757d75 );
    }
    cache_frame_0f0e14368dfbef76e79bf4d638757d75 = NULL;

    assertFrameObject( frame_0f0e14368dfbef76e79bf4d638757d75 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_36_friends_ids );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_36_friends_ids );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_37_friends( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_394baa27dfbb0110f9d9f8fe1a9f5226 = NULL;

    struct Nuitka_FrameObject *frame_394baa27dfbb0110f9d9f8fe1a9f5226;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_394baa27dfbb0110f9d9f8fe1a9f5226, codeobj_394baa27dfbb0110f9d9f8fe1a9f5226, module_tweepy$api, sizeof(void *) );
    frame_394baa27dfbb0110f9d9f8fe1a9f5226 = cache_frame_394baa27dfbb0110f9d9f8fe1a9f5226;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_394baa27dfbb0110f9d9f8fe1a9f5226 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_394baa27dfbb0110f9d9f8fe1a9f5226 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 534;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_b03ad0e2f7dde35bb7cf93f8806e0759;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_d14a2b096f864b5944e20d0c97497208_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_394baa27dfbb0110f9d9f8fe1a9f5226->m_frame.f_lineno = 534;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 534;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_394baa27dfbb0110f9d9f8fe1a9f5226 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_394baa27dfbb0110f9d9f8fe1a9f5226 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_394baa27dfbb0110f9d9f8fe1a9f5226 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_394baa27dfbb0110f9d9f8fe1a9f5226, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_394baa27dfbb0110f9d9f8fe1a9f5226->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_394baa27dfbb0110f9d9f8fe1a9f5226, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_394baa27dfbb0110f9d9f8fe1a9f5226,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_394baa27dfbb0110f9d9f8fe1a9f5226 == cache_frame_394baa27dfbb0110f9d9f8fe1a9f5226 )
    {
        Py_DECREF( frame_394baa27dfbb0110f9d9f8fe1a9f5226 );
    }
    cache_frame_394baa27dfbb0110f9d9f8fe1a9f5226 = NULL;

    assertFrameObject( frame_394baa27dfbb0110f9d9f8fe1a9f5226 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_37_friends );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_37_friends );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_38_friendships_incoming( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f356acf7c3066621fadabe71aa1b4533 = NULL;

    struct Nuitka_FrameObject *frame_f356acf7c3066621fadabe71aa1b4533;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f356acf7c3066621fadabe71aa1b4533, codeobj_f356acf7c3066621fadabe71aa1b4533, module_tweepy$api, sizeof(void *) );
    frame_f356acf7c3066621fadabe71aa1b4533 = cache_frame_f356acf7c3066621fadabe71aa1b4533;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f356acf7c3066621fadabe71aa1b4533 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f356acf7c3066621fadabe71aa1b4533 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 546;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_784909317ebc86aa7dd11bf7d4ce954d;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_ids;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_cursor_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_f356acf7c3066621fadabe71aa1b4533->m_frame.f_lineno = 546;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f356acf7c3066621fadabe71aa1b4533 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f356acf7c3066621fadabe71aa1b4533 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f356acf7c3066621fadabe71aa1b4533 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f356acf7c3066621fadabe71aa1b4533, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f356acf7c3066621fadabe71aa1b4533->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f356acf7c3066621fadabe71aa1b4533, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f356acf7c3066621fadabe71aa1b4533,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_f356acf7c3066621fadabe71aa1b4533 == cache_frame_f356acf7c3066621fadabe71aa1b4533 )
    {
        Py_DECREF( frame_f356acf7c3066621fadabe71aa1b4533 );
    }
    cache_frame_f356acf7c3066621fadabe71aa1b4533 = NULL;

    assertFrameObject( frame_f356acf7c3066621fadabe71aa1b4533 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_38_friendships_incoming );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_38_friendships_incoming );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_39_friendships_outgoing( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 = NULL;

    struct Nuitka_FrameObject *frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723, codeobj_bcc4dd6d7f2cdc1b2f3eb11d84cf4723, module_tweepy$api, sizeof(void *) );
    frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 = cache_frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 558;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_6dd07332cf76e0d6e289d20b910e503a;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_ids;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_cursor_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723->m_frame.f_lineno = 558;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 558;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 == cache_frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 )
    {
        Py_DECREF( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 );
    }
    cache_frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 = NULL;

    assertFrameObject( frame_bcc4dd6d7f2cdc1b2f3eb11d84cf4723 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_39_friendships_outgoing );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_39_friendships_outgoing );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_40_followers_ids( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_94e979f7ad8522f6307ffbb188083bee = NULL;

    struct Nuitka_FrameObject *frame_94e979f7ad8522f6307ffbb188083bee;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_94e979f7ad8522f6307ffbb188083bee, codeobj_94e979f7ad8522f6307ffbb188083bee, module_tweepy$api, sizeof(void *) );
    frame_94e979f7ad8522f6307ffbb188083bee = cache_frame_94e979f7ad8522f6307ffbb188083bee;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_94e979f7ad8522f6307ffbb188083bee );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_94e979f7ad8522f6307ffbb188083bee ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 570;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_2d558f05a8b1558cd3af7d4147c2fff0;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_ids;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_23e9c1d06e23e57b6d2e1748373f4627_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_94e979f7ad8522f6307ffbb188083bee->m_frame.f_lineno = 570;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 570;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_94e979f7ad8522f6307ffbb188083bee );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_94e979f7ad8522f6307ffbb188083bee );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_94e979f7ad8522f6307ffbb188083bee );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_94e979f7ad8522f6307ffbb188083bee, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_94e979f7ad8522f6307ffbb188083bee->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_94e979f7ad8522f6307ffbb188083bee, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_94e979f7ad8522f6307ffbb188083bee,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_94e979f7ad8522f6307ffbb188083bee == cache_frame_94e979f7ad8522f6307ffbb188083bee )
    {
        Py_DECREF( frame_94e979f7ad8522f6307ffbb188083bee );
    }
    cache_frame_94e979f7ad8522f6307ffbb188083bee = NULL;

    assertFrameObject( frame_94e979f7ad8522f6307ffbb188083bee );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_40_followers_ids );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_40_followers_ids );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_41_followers( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_19d557c35860915b72a22e4a43efbfaa = NULL;

    struct Nuitka_FrameObject *frame_19d557c35860915b72a22e4a43efbfaa;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_19d557c35860915b72a22e4a43efbfaa, codeobj_19d557c35860915b72a22e4a43efbfaa, module_tweepy$api, sizeof(void *) );
    frame_19d557c35860915b72a22e4a43efbfaa = cache_frame_19d557c35860915b72a22e4a43efbfaa;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_19d557c35860915b72a22e4a43efbfaa );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_19d557c35860915b72a22e4a43efbfaa ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 582;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_c4e98db83eccbb000476507c6dc8518e;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_aa8f73213b7294650093b5bad94c8ad0_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_19d557c35860915b72a22e4a43efbfaa->m_frame.f_lineno = 582;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 582;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_19d557c35860915b72a22e4a43efbfaa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_19d557c35860915b72a22e4a43efbfaa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_19d557c35860915b72a22e4a43efbfaa );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_19d557c35860915b72a22e4a43efbfaa, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_19d557c35860915b72a22e4a43efbfaa->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_19d557c35860915b72a22e4a43efbfaa, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_19d557c35860915b72a22e4a43efbfaa,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_19d557c35860915b72a22e4a43efbfaa == cache_frame_19d557c35860915b72a22e4a43efbfaa )
    {
        Py_DECREF( frame_19d557c35860915b72a22e4a43efbfaa );
    }
    cache_frame_19d557c35860915b72a22e4a43efbfaa = NULL;

    assertFrameObject( frame_19d557c35860915b72a22e4a43efbfaa );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_41_followers );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_41_followers );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_42_get_settings( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8b4928340945a026c7936958fb9b9d19 = NULL;

    struct Nuitka_FrameObject *frame_8b4928340945a026c7936958fb9b9d19;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8b4928340945a026c7936958fb9b9d19, codeobj_8b4928340945a026c7936958fb9b9d19, module_tweepy$api, sizeof(void *) );
    frame_8b4928340945a026c7936958fb9b9d19 = cache_frame_8b4928340945a026c7936958fb9b9d19;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8b4928340945a026c7936958fb9b9d19 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8b4928340945a026c7936958fb9b9d19 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 594;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_4282f31a16ee073ae61050450a3d6e84;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_use_cache;
    tmp_dict_value_4 = Py_False;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_8b4928340945a026c7936958fb9b9d19->m_frame.f_lineno = 594;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 594;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8b4928340945a026c7936958fb9b9d19 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8b4928340945a026c7936958fb9b9d19 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8b4928340945a026c7936958fb9b9d19 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8b4928340945a026c7936958fb9b9d19, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8b4928340945a026c7936958fb9b9d19->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8b4928340945a026c7936958fb9b9d19, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8b4928340945a026c7936958fb9b9d19,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_8b4928340945a026c7936958fb9b9d19 == cache_frame_8b4928340945a026c7936958fb9b9d19 )
    {
        Py_DECREF( frame_8b4928340945a026c7936958fb9b9d19 );
    }
    cache_frame_8b4928340945a026c7936958fb9b9d19 = NULL;

    assertFrameObject( frame_8b4928340945a026c7936958fb9b9d19 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_42_get_settings );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_42_get_settings );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_43_set_settings( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f51f7217cbd36622369e03ab5f1a146a = NULL;

    struct Nuitka_FrameObject *frame_f51f7217cbd36622369e03ab5f1a146a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f51f7217cbd36622369e03ab5f1a146a, codeobj_f51f7217cbd36622369e03ab5f1a146a, module_tweepy$api, sizeof(void *) );
    frame_f51f7217cbd36622369e03ab5f1a146a = cache_frame_f51f7217cbd36622369e03ab5f1a146a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f51f7217cbd36622369e03ab5f1a146a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f51f7217cbd36622369e03ab5f1a146a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 608;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_4282f31a16ee073ae61050450a3d6e84;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_840693dbcc7964c425178c3b96ce7306_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_use_cache;
    tmp_dict_value_6 = Py_False;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_f51f7217cbd36622369e03ab5f1a146a->m_frame.f_lineno = 608;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 608;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f51f7217cbd36622369e03ab5f1a146a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f51f7217cbd36622369e03ab5f1a146a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f51f7217cbd36622369e03ab5f1a146a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f51f7217cbd36622369e03ab5f1a146a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f51f7217cbd36622369e03ab5f1a146a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f51f7217cbd36622369e03ab5f1a146a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f51f7217cbd36622369e03ab5f1a146a,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_f51f7217cbd36622369e03ab5f1a146a == cache_frame_f51f7217cbd36622369e03ab5f1a146a )
    {
        Py_DECREF( frame_f51f7217cbd36622369e03ab5f1a146a );
    }
    cache_frame_f51f7217cbd36622369e03ab5f1a146a = NULL;

    assertFrameObject( frame_f51f7217cbd36622369e03ab5f1a146a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_43_set_settings );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_43_set_settings );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_44_verify_credentials( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_kargs = python_pars[ 1 ];
    PyObject *var_e = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    static struct Nuitka_FrameObject *cache_frame_dd75e9bde9e04364cb8e52ff7cc97169 = NULL;

    struct Nuitka_FrameObject *frame_dd75e9bde9e04364cb8e52ff7cc97169;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dd75e9bde9e04364cb8e52ff7cc97169, codeobj_dd75e9bde9e04364cb8e52ff7cc97169, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_dd75e9bde9e04364cb8e52ff7cc97169 = cache_frame_dd75e9bde9e04364cb8e52ff7cc97169;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dd75e9bde9e04364cb8e52ff7cc97169 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dd75e9bde9e04364cb8e52ff7cc97169 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 625;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_a5548bd73b87e0bf1e4224d51f1eea39;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_require_auth;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_f56ed37d3e4edab2fc426a9c23df450c_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_dd75e9bde9e04364cb8e52ff7cc97169->m_frame.f_lineno = 625;
    tmp_dircall_arg1_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_dircall_arg1_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 625;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_dircall_arg2_1 = par_kargs;

    if ( tmp_dircall_arg2_1 == NULL )
    {
        Py_DECREF( tmp_dircall_arg1_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 631;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_dircall_arg2_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
        tmp_return_value = impl___internal__$$$function_8_complex_call_helper_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 625;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_44_verify_credentials );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_dd75e9bde9e04364cb8e52ff7cc97169, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_dd75e9bde9e04364cb8e52ff7cc97169, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_TweepError );

    if (unlikely( tmp_compare_right_1 == NULL ))
    {
        tmp_compare_right_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TweepError );
    }

    if ( tmp_compare_right_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TweepError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 632;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }

    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 632;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_assign_source_1 = PyThreadState_GET()->exc_value;
    assert( var_e == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_e = tmp_assign_source_1;

    // Tried code:
    tmp_source_name_1 = var_e;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_and_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_response );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 633;
        type_description_1 = "ooo";
        goto try_except_handler_4;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 633;
        type_description_1 = "ooo";
        goto try_except_handler_4;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_3 = var_e;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "e" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 633;
        type_description_1 = "ooo";
        goto try_except_handler_4;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_response );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 633;
        type_description_1 = "ooo";
        goto try_except_handler_4;
    }
    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_status );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 633;
        type_description_1 = "ooo";
        goto try_except_handler_4;
    }
    tmp_compexpr_right_1 = const_int_pos_401;
    tmp_and_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 633;
        type_description_1 = "ooo";
        goto try_except_handler_4;
    }
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 633;
        type_description_1 = "ooo";
        goto try_except_handler_4;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_4;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 635;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_dd75e9bde9e04364cb8e52ff7cc97169->m_frame) frame_dd75e9bde9e04364cb8e52ff7cc97169->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_4;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_44_verify_credentials );
    return NULL;
    // Return handler code:
    try_return_handler_4:;
    Py_XDECREF( var_e );
    var_e = NULL;

    goto try_return_handler_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_e );
    var_e = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 624;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_dd75e9bde9e04364cb8e52ff7cc97169->m_frame) frame_dd75e9bde9e04364cb8e52ff7cc97169->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_3;
    branch_end_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_44_verify_credentials );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_dd75e9bde9e04364cb8e52ff7cc97169 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_dd75e9bde9e04364cb8e52ff7cc97169 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_dd75e9bde9e04364cb8e52ff7cc97169 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dd75e9bde9e04364cb8e52ff7cc97169, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dd75e9bde9e04364cb8e52ff7cc97169->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dd75e9bde9e04364cb8e52ff7cc97169, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dd75e9bde9e04364cb8e52ff7cc97169,
        type_description_1,
        par_self,
        par_kargs,
        var_e
    );


    // Release cached frame.
    if ( frame_dd75e9bde9e04364cb8e52ff7cc97169 == cache_frame_dd75e9bde9e04364cb8e52ff7cc97169 )
    {
        Py_DECREF( frame_dd75e9bde9e04364cb8e52ff7cc97169 );
    }
    cache_frame_dd75e9bde9e04364cb8e52ff7cc97169 = NULL;

    assertFrameObject( frame_dd75e9bde9e04364cb8e52ff7cc97169 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_44_verify_credentials );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_kargs );
    par_kargs = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_kargs );
    par_kargs = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_44_verify_credentials );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_45_rate_limit_status( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_eb64591492f915cdf3dcd117e1157421 = NULL;

    struct Nuitka_FrameObject *frame_eb64591492f915cdf3dcd117e1157421;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_eb64591492f915cdf3dcd117e1157421, codeobj_eb64591492f915cdf3dcd117e1157421, module_tweepy$api, sizeof(void *) );
    frame_eb64591492f915cdf3dcd117e1157421 = cache_frame_eb64591492f915cdf3dcd117e1157421;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_eb64591492f915cdf3dcd117e1157421 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_eb64591492f915cdf3dcd117e1157421 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 642;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_5fbdc342c8714e56e1c0a82e23cfd382;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_resources_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_use_cache;
    tmp_dict_value_5 = Py_False;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_eb64591492f915cdf3dcd117e1157421->m_frame.f_lineno = 642;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 642;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_eb64591492f915cdf3dcd117e1157421 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_eb64591492f915cdf3dcd117e1157421 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_eb64591492f915cdf3dcd117e1157421 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_eb64591492f915cdf3dcd117e1157421, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_eb64591492f915cdf3dcd117e1157421->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_eb64591492f915cdf3dcd117e1157421, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_eb64591492f915cdf3dcd117e1157421,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_eb64591492f915cdf3dcd117e1157421 == cache_frame_eb64591492f915cdf3dcd117e1157421 )
    {
        Py_DECREF( frame_eb64591492f915cdf3dcd117e1157421 );
    }
    cache_frame_eb64591492f915cdf3dcd117e1157421 = NULL;

    assertFrameObject( frame_eb64591492f915cdf3dcd117e1157421 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_45_rate_limit_status );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_45_rate_limit_status );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_46_set_delivery_device( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_1324f5d71873a0dd0efbfc793aa20f3e = NULL;

    struct Nuitka_FrameObject *frame_1324f5d71873a0dd0efbfc793aa20f3e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1324f5d71873a0dd0efbfc793aa20f3e, codeobj_1324f5d71873a0dd0efbfc793aa20f3e, module_tweepy$api, sizeof(void *) );
    frame_1324f5d71873a0dd0efbfc793aa20f3e = cache_frame_1324f5d71873a0dd0efbfc793aa20f3e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1324f5d71873a0dd0efbfc793aa20f3e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1324f5d71873a0dd0efbfc793aa20f3e ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 655;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_f42d4f0cb1864f075fb9e4facaba82c1;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_device_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_payload_type;
    tmp_dict_value_5 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_1324f5d71873a0dd0efbfc793aa20f3e->m_frame.f_lineno = 655;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 655;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1324f5d71873a0dd0efbfc793aa20f3e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1324f5d71873a0dd0efbfc793aa20f3e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1324f5d71873a0dd0efbfc793aa20f3e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1324f5d71873a0dd0efbfc793aa20f3e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1324f5d71873a0dd0efbfc793aa20f3e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1324f5d71873a0dd0efbfc793aa20f3e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1324f5d71873a0dd0efbfc793aa20f3e,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_1324f5d71873a0dd0efbfc793aa20f3e == cache_frame_1324f5d71873a0dd0efbfc793aa20f3e )
    {
        Py_DECREF( frame_1324f5d71873a0dd0efbfc793aa20f3e );
    }
    cache_frame_1324f5d71873a0dd0efbfc793aa20f3e = NULL;

    assertFrameObject( frame_1324f5d71873a0dd0efbfc793aa20f3e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_46_set_delivery_device );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_46_set_delivery_device );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_47_update_profile_colors( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_cb98bea3157d9ab578562dc94c3a5bc5 = NULL;

    struct Nuitka_FrameObject *frame_cb98bea3157d9ab578562dc94c3a5bc5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cb98bea3157d9ab578562dc94c3a5bc5, codeobj_cb98bea3157d9ab578562dc94c3a5bc5, module_tweepy$api, sizeof(void *) );
    frame_cb98bea3157d9ab578562dc94c3a5bc5 = cache_frame_cb98bea3157d9ab578562dc94c3a5bc5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cb98bea3157d9ab578562dc94c3a5bc5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cb98bea3157d9ab578562dc94c3a5bc5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 671;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_e6d9590fc783070c72dab35bf14eaeab;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_0bfb6f3bc98d1b4a9256592b354ceb73_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_cb98bea3157d9ab578562dc94c3a5bc5->m_frame.f_lineno = 671;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 671;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cb98bea3157d9ab578562dc94c3a5bc5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_cb98bea3157d9ab578562dc94c3a5bc5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cb98bea3157d9ab578562dc94c3a5bc5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cb98bea3157d9ab578562dc94c3a5bc5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cb98bea3157d9ab578562dc94c3a5bc5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cb98bea3157d9ab578562dc94c3a5bc5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cb98bea3157d9ab578562dc94c3a5bc5,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_cb98bea3157d9ab578562dc94c3a5bc5 == cache_frame_cb98bea3157d9ab578562dc94c3a5bc5 )
    {
        Py_DECREF( frame_cb98bea3157d9ab578562dc94c3a5bc5 );
    }
    cache_frame_cb98bea3157d9ab578562dc94c3a5bc5 = NULL;

    assertFrameObject( frame_cb98bea3157d9ab578562dc94c3a5bc5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_47_update_profile_colors );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_47_update_profile_colors );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_48_update_profile_image( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_filename = python_pars[ 1 ];
    PyObject *par_file_ = python_pars[ 2 ];
    PyObject *var_headers = NULL;
    PyObject *var_post_data = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    static struct Nuitka_FrameObject *cache_frame_7d61f43525aec937819eb91d303aa660 = NULL;

    struct Nuitka_FrameObject *frame_7d61f43525aec937819eb91d303aa660;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7d61f43525aec937819eb91d303aa660, codeobj_7d61f43525aec937819eb91d303aa660, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7d61f43525aec937819eb91d303aa660 = cache_frame_7d61f43525aec937819eb91d303aa660;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7d61f43525aec937819eb91d303aa660 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7d61f43525aec937819eb91d303aa660 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_API );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_API );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "API" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 686;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__pack_image );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 686;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_filename;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 686;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_int_pos_700;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_key_1 = const_str_plain_f;
    tmp_dict_value_1 = par_file_;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "file_" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 686;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_7d61f43525aec937819eb91d303aa660->m_frame.f_lineno = 686;
    tmp_iter_arg_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 686;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 686;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 686;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 686;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooo";
                exception_lineno = 686;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooo";
        exception_lineno = 686;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_4 );
    assert( var_headers == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var_headers = tmp_assign_source_4;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_5 );
    assert( var_post_data == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var_post_data = tmp_assign_source_5;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 687;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_2 = _PyDict_NewPresized( 6 );
    tmp_dict_key_2 = const_str_plain_api;
    tmp_dict_value_2 = par_self;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_kw_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 688;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_path;
    tmp_dict_value_3 = const_str_digest_f63ba4ec9e6291c73d971dd0bed23a4f;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_method;
    tmp_dict_value_4 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_payload_type;
    tmp_dict_value_5 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_allowed_param;
    tmp_dict_value_6 = LIST_COPY( const_list_str_plain_include_entities_str_plain_skip_status_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_7 = const_str_plain_require_auth;
    tmp_dict_value_7 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    frame_7d61f43525aec937819eb91d303aa660->m_frame.f_lineno = 687;
    tmp_called_name_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 687;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_name_2 = PyTuple_New( 1 );
    tmp_tuple_element_2 = par_self;

    if ( tmp_tuple_element_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 694;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
    tmp_kw_name_3 = _PyDict_NewPresized( 2 );
    tmp_dict_key_8 = const_str_plain_post_data;
    tmp_dict_value_8 = var_post_data;

    if ( tmp_dict_value_8 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_kw_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 694;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_9 = const_str_plain_headers;
    tmp_dict_value_9 = var_headers;

    if ( tmp_dict_value_9 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_kw_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "headers" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 694;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_9, tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    frame_7d61f43525aec937819eb91d303aa660->m_frame.f_lineno = 687;
    tmp_return_value = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_name_2 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 687;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d61f43525aec937819eb91d303aa660 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d61f43525aec937819eb91d303aa660 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d61f43525aec937819eb91d303aa660 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7d61f43525aec937819eb91d303aa660, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7d61f43525aec937819eb91d303aa660->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7d61f43525aec937819eb91d303aa660, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7d61f43525aec937819eb91d303aa660,
        type_description_1,
        par_self,
        par_filename,
        par_file_,
        var_headers,
        var_post_data
    );


    // Release cached frame.
    if ( frame_7d61f43525aec937819eb91d303aa660 == cache_frame_7d61f43525aec937819eb91d303aa660 )
    {
        Py_DECREF( frame_7d61f43525aec937819eb91d303aa660 );
    }
    cache_frame_7d61f43525aec937819eb91d303aa660 = NULL;

    assertFrameObject( frame_7d61f43525aec937819eb91d303aa660 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_48_update_profile_image );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_file_ );
    par_file_ = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_file_ );
    par_file_ = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_48_update_profile_image );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_49_update_profile_background_image( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_filename = python_pars[ 1 ];
    PyObject *par_kargs = python_pars[ 2 ];
    PyObject *var_f = NULL;
    PyObject *var_headers = NULL;
    PyObject *var_post_data = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_97458043ee4b9dada6fe414e54dae771 = NULL;

    struct Nuitka_FrameObject *frame_97458043ee4b9dada6fe414e54dae771;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_97458043ee4b9dada6fe414e54dae771, codeobj_97458043ee4b9dada6fe414e54dae771, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_97458043ee4b9dada6fe414e54dae771 = cache_frame_97458043ee4b9dada6fe414e54dae771;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_97458043ee4b9dada6fe414e54dae771 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_97458043ee4b9dada6fe414e54dae771 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_97458043ee4b9dada6fe414e54dae771->m_frame.f_lineno = 700;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain_file_none_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 700;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_f == NULL );
    var_f = tmp_assign_source_1;

    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_API );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_API );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "API" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 701;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__pack_image );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 701;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_filename;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 701;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_int_pos_800;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 1 );
    tmp_dict_key_1 = const_str_plain_f;
    tmp_dict_value_1 = var_f;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "f" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 701;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    frame_97458043ee4b9dada6fe414e54dae771->m_frame.f_lineno = 701;
    tmp_iter_arg_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 701;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 701;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooo";
        exception_lineno = 701;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooo";
        exception_lineno = 701;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooo";
                exception_lineno = 701;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooo";
        exception_lineno = 701;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_5 );
    assert( var_headers == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var_headers = tmp_assign_source_5;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_6 );
    assert( var_post_data == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_post_data = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 702;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_2 = _PyDict_NewPresized( 6 );
    tmp_dict_key_2 = const_str_plain_api;
    tmp_dict_value_2 = par_self;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_kw_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 703;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_path;
    tmp_dict_value_3 = const_str_digest_b84327bf93452c9d13d6434d17939b92;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_method;
    tmp_dict_value_4 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_payload_type;
    tmp_dict_value_5 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_allowed_param;
    tmp_dict_value_6 = LIST_COPY( const_list_8848fc29ad2337b8fbbe41e548230315_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_7 = const_str_plain_require_auth;
    tmp_dict_value_7 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    frame_97458043ee4b9dada6fe414e54dae771->m_frame.f_lineno = 702;
    tmp_called_name_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 2 );
    tmp_dict_key_8 = const_str_plain_post_data;
    tmp_dict_value_8 = var_post_data;

    if ( tmp_dict_value_8 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 709;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_9 = const_str_plain_headers;
    tmp_dict_value_9 = var_headers;

    if ( tmp_dict_value_9 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "headers" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 709;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_9, tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    frame_97458043ee4b9dada6fe414e54dae771->m_frame.f_lineno = 702;
    tmp_unused = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_97458043ee4b9dada6fe414e54dae771 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_97458043ee4b9dada6fe414e54dae771 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_97458043ee4b9dada6fe414e54dae771, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_97458043ee4b9dada6fe414e54dae771->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_97458043ee4b9dada6fe414e54dae771, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_97458043ee4b9dada6fe414e54dae771,
        type_description_1,
        par_self,
        par_filename,
        par_kargs,
        var_f,
        var_headers,
        var_post_data
    );


    // Release cached frame.
    if ( frame_97458043ee4b9dada6fe414e54dae771 == cache_frame_97458043ee4b9dada6fe414e54dae771 )
    {
        Py_DECREF( frame_97458043ee4b9dada6fe414e54dae771 );
    }
    cache_frame_97458043ee4b9dada6fe414e54dae771 = NULL;

    assertFrameObject( frame_97458043ee4b9dada6fe414e54dae771 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_49_update_profile_background_image );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_kargs );
    par_kargs = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_kargs );
    par_kargs = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_49_update_profile_background_image );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_50_update_profile_banner( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_filename = python_pars[ 1 ];
    PyObject *par_kargs = python_pars[ 2 ];
    PyObject *var_f = NULL;
    PyObject *var_headers = NULL;
    PyObject *var_post_data = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_f3bc45e07ee294df84f88e63960e44d9 = NULL;

    struct Nuitka_FrameObject *frame_f3bc45e07ee294df84f88e63960e44d9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f3bc45e07ee294df84f88e63960e44d9, codeobj_f3bc45e07ee294df84f88e63960e44d9, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f3bc45e07ee294df84f88e63960e44d9 = cache_frame_f3bc45e07ee294df84f88e63960e44d9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f3bc45e07ee294df84f88e63960e44d9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f3bc45e07ee294df84f88e63960e44d9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_instance_1 = par_kargs;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_f3bc45e07ee294df84f88e63960e44d9->m_frame.f_lineno = 715;
    tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_pop, &PyTuple_GET_ITEM( const_tuple_str_plain_file_none_tuple, 0 ) );

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 715;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( var_f == NULL );
    var_f = tmp_assign_source_1;

    // Tried code:
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_API );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_API );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "API" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 716;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__pack_image );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 716;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = par_filename;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 716;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = const_int_pos_700;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_1 = const_str_plain_form_field;
    tmp_dict_value_1 = const_str_plain_banner;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_f;
    tmp_dict_value_2 = var_f;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "f" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 716;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_f3bc45e07ee294df84f88e63960e44d9->m_frame.f_lineno = 716;
    tmp_iter_arg_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 716;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 716;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooo";
        exception_lineno = 716;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooo";
        exception_lineno = 716;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooo";
                exception_lineno = 716;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooo";
        exception_lineno = 716;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_5 );
    assert( var_headers == NULL );
    Py_INCREF( tmp_assign_source_5 );
    var_headers = tmp_assign_source_5;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_6 );
    assert( var_post_data == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_post_data = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 717;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_2 = _PyDict_NewPresized( 5 );
    tmp_dict_key_3 = const_str_plain_api;
    tmp_dict_value_3 = par_self;

    if ( tmp_dict_value_3 == NULL )
    {
        Py_DECREF( tmp_kw_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 718;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_path;
    tmp_dict_value_4 = const_str_digest_5d2cbae8207d78ffd1858eaafeff42f3;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_method;
    tmp_dict_value_5 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_allowed_param;
    tmp_dict_value_6 = LIST_COPY( const_list_fb690ea06d7213e79b965d7e6852986a_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_7 = const_str_plain_require_auth;
    tmp_dict_value_7 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_7, tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    frame_f3bc45e07ee294df84f88e63960e44d9->m_frame.f_lineno = 717;
    tmp_called_name_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_2 );
    Py_DECREF( tmp_kw_name_2 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 717;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_kw_name_3 = _PyDict_NewPresized( 2 );
    tmp_dict_key_8 = const_str_plain_post_data;
    tmp_dict_value_8 = var_post_data;

    if ( tmp_dict_value_8 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "post_data" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 723;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_8, tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_9 = const_str_plain_headers;
    tmp_dict_value_9 = var_headers;

    if ( tmp_dict_value_9 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "headers" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 723;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_9, tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    frame_f3bc45e07ee294df84f88e63960e44d9->m_frame.f_lineno = 717;
    tmp_unused = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_kw_name_3 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 717;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f3bc45e07ee294df84f88e63960e44d9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f3bc45e07ee294df84f88e63960e44d9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f3bc45e07ee294df84f88e63960e44d9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f3bc45e07ee294df84f88e63960e44d9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f3bc45e07ee294df84f88e63960e44d9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f3bc45e07ee294df84f88e63960e44d9,
        type_description_1,
        par_self,
        par_filename,
        par_kargs,
        var_f,
        var_headers,
        var_post_data
    );


    // Release cached frame.
    if ( frame_f3bc45e07ee294df84f88e63960e44d9 == cache_frame_f3bc45e07ee294df84f88e63960e44d9 )
    {
        Py_DECREF( frame_f3bc45e07ee294df84f88e63960e44d9 );
    }
    cache_frame_f3bc45e07ee294df84f88e63960e44d9 = NULL;

    assertFrameObject( frame_f3bc45e07ee294df84f88e63960e44d9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_50_update_profile_banner );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_kargs );
    par_kargs = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_kargs );
    par_kargs = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    Py_XDECREF( var_post_data );
    var_post_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_50_update_profile_banner );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_51_update_profile( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_c9d4c5bff0d02269948281c317988961 = NULL;

    struct Nuitka_FrameObject *frame_c9d4c5bff0d02269948281c317988961;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c9d4c5bff0d02269948281c317988961, codeobj_c9d4c5bff0d02269948281c317988961, module_tweepy$api, sizeof(void *) );
    frame_c9d4c5bff0d02269948281c317988961 = cache_frame_c9d4c5bff0d02269948281c317988961;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c9d4c5bff0d02269948281c317988961 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c9d4c5bff0d02269948281c317988961 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 730;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_048277f7b199789742091b45301038b4;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_4ffdfb7f6ed06e41d0c95665fbb8d79c_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_c9d4c5bff0d02269948281c317988961->m_frame.f_lineno = 730;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c9d4c5bff0d02269948281c317988961 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c9d4c5bff0d02269948281c317988961 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c9d4c5bff0d02269948281c317988961 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c9d4c5bff0d02269948281c317988961, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c9d4c5bff0d02269948281c317988961->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c9d4c5bff0d02269948281c317988961, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c9d4c5bff0d02269948281c317988961,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_c9d4c5bff0d02269948281c317988961 == cache_frame_c9d4c5bff0d02269948281c317988961 )
    {
        Py_DECREF( frame_c9d4c5bff0d02269948281c317988961 );
    }
    cache_frame_c9d4c5bff0d02269948281c317988961 = NULL;

    assertFrameObject( frame_c9d4c5bff0d02269948281c317988961 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_51_update_profile );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_51_update_profile );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_52_favorites( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_04cd26c47f755cc8d082a966a550203f = NULL;

    struct Nuitka_FrameObject *frame_04cd26c47f755cc8d082a966a550203f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_04cd26c47f755cc8d082a966a550203f, codeobj_04cd26c47f755cc8d082a966a550203f, module_tweepy$api, sizeof(void *) );
    frame_04cd26c47f755cc8d082a966a550203f = cache_frame_04cd26c47f755cc8d082a966a550203f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_04cd26c47f755cc8d082a966a550203f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_04cd26c47f755cc8d082a966a550203f ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 744;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_54cd893de85c8288a516e5399c2f8115;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_f31c7bcdbcdb6ce33b0b5c6532853073_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_04cd26c47f755cc8d082a966a550203f->m_frame.f_lineno = 744;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 744;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_04cd26c47f755cc8d082a966a550203f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_04cd26c47f755cc8d082a966a550203f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_04cd26c47f755cc8d082a966a550203f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_04cd26c47f755cc8d082a966a550203f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_04cd26c47f755cc8d082a966a550203f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_04cd26c47f755cc8d082a966a550203f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_04cd26c47f755cc8d082a966a550203f,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_04cd26c47f755cc8d082a966a550203f == cache_frame_04cd26c47f755cc8d082a966a550203f )
    {
        Py_DECREF( frame_04cd26c47f755cc8d082a966a550203f );
    }
    cache_frame_04cd26c47f755cc8d082a966a550203f = NULL;

    assertFrameObject( frame_04cd26c47f755cc8d082a966a550203f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_52_favorites );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_52_favorites );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_53_create_favorite( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_792fe70121fef6e15c03b996718dd7b4 = NULL;

    struct Nuitka_FrameObject *frame_792fe70121fef6e15c03b996718dd7b4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_792fe70121fef6e15c03b996718dd7b4, codeobj_792fe70121fef6e15c03b996718dd7b4, module_tweepy$api, sizeof(void *) );
    frame_792fe70121fef6e15c03b996718dd7b4 = cache_frame_792fe70121fef6e15c03b996718dd7b4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_792fe70121fef6e15c03b996718dd7b4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_792fe70121fef6e15c03b996718dd7b4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 756;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_e3687a37b686bac6a320437979b9bbdb;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_792fe70121fef6e15c03b996718dd7b4->m_frame.f_lineno = 756;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 756;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_792fe70121fef6e15c03b996718dd7b4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_792fe70121fef6e15c03b996718dd7b4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_792fe70121fef6e15c03b996718dd7b4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_792fe70121fef6e15c03b996718dd7b4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_792fe70121fef6e15c03b996718dd7b4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_792fe70121fef6e15c03b996718dd7b4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_792fe70121fef6e15c03b996718dd7b4,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_792fe70121fef6e15c03b996718dd7b4 == cache_frame_792fe70121fef6e15c03b996718dd7b4 )
    {
        Py_DECREF( frame_792fe70121fef6e15c03b996718dd7b4 );
    }
    cache_frame_792fe70121fef6e15c03b996718dd7b4 = NULL;

    assertFrameObject( frame_792fe70121fef6e15c03b996718dd7b4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_53_create_favorite );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_53_create_favorite );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_54_destroy_favorite( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d3971143a1e796170d0331aeff6f3e43 = NULL;

    struct Nuitka_FrameObject *frame_d3971143a1e796170d0331aeff6f3e43;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d3971143a1e796170d0331aeff6f3e43, codeobj_d3971143a1e796170d0331aeff6f3e43, module_tweepy$api, sizeof(void *) );
    frame_d3971143a1e796170d0331aeff6f3e43 = cache_frame_d3971143a1e796170d0331aeff6f3e43;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d3971143a1e796170d0331aeff6f3e43 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d3971143a1e796170d0331aeff6f3e43 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 770;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_940c59cbf0cf98f3b23e9fdbb8bef726;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_d3971143a1e796170d0331aeff6f3e43->m_frame.f_lineno = 770;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 770;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d3971143a1e796170d0331aeff6f3e43 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d3971143a1e796170d0331aeff6f3e43 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d3971143a1e796170d0331aeff6f3e43 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d3971143a1e796170d0331aeff6f3e43, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d3971143a1e796170d0331aeff6f3e43->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d3971143a1e796170d0331aeff6f3e43, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d3971143a1e796170d0331aeff6f3e43,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_d3971143a1e796170d0331aeff6f3e43 == cache_frame_d3971143a1e796170d0331aeff6f3e43 )
    {
        Py_DECREF( frame_d3971143a1e796170d0331aeff6f3e43 );
    }
    cache_frame_d3971143a1e796170d0331aeff6f3e43 = NULL;

    assertFrameObject( frame_d3971143a1e796170d0331aeff6f3e43 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_54_destroy_favorite );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_54_destroy_favorite );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_55_create_block( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_a04acbe39cf661016dc67d89b8a317e0 = NULL;

    struct Nuitka_FrameObject *frame_a04acbe39cf661016dc67d89b8a317e0;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a04acbe39cf661016dc67d89b8a317e0, codeobj_a04acbe39cf661016dc67d89b8a317e0, module_tweepy$api, sizeof(void *) );
    frame_a04acbe39cf661016dc67d89b8a317e0 = cache_frame_a04acbe39cf661016dc67d89b8a317e0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a04acbe39cf661016dc67d89b8a317e0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a04acbe39cf661016dc67d89b8a317e0 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 784;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_0d96c93a739ba53a3cd2619c20ab65ab;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_a04acbe39cf661016dc67d89b8a317e0->m_frame.f_lineno = 784;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 784;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a04acbe39cf661016dc67d89b8a317e0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a04acbe39cf661016dc67d89b8a317e0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a04acbe39cf661016dc67d89b8a317e0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a04acbe39cf661016dc67d89b8a317e0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a04acbe39cf661016dc67d89b8a317e0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a04acbe39cf661016dc67d89b8a317e0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a04acbe39cf661016dc67d89b8a317e0,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_a04acbe39cf661016dc67d89b8a317e0 == cache_frame_a04acbe39cf661016dc67d89b8a317e0 )
    {
        Py_DECREF( frame_a04acbe39cf661016dc67d89b8a317e0 );
    }
    cache_frame_a04acbe39cf661016dc67d89b8a317e0 = NULL;

    assertFrameObject( frame_a04acbe39cf661016dc67d89b8a317e0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_55_create_block );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_55_create_block );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_56_destroy_block( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d5c8dd3aca257823f9b82da05954a122 = NULL;

    struct Nuitka_FrameObject *frame_d5c8dd3aca257823f9b82da05954a122;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d5c8dd3aca257823f9b82da05954a122, codeobj_d5c8dd3aca257823f9b82da05954a122, module_tweepy$api, sizeof(void *) );
    frame_d5c8dd3aca257823f9b82da05954a122 = cache_frame_d5c8dd3aca257823f9b82da05954a122;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d5c8dd3aca257823f9b82da05954a122 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d5c8dd3aca257823f9b82da05954a122 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 798;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_131e077fd57b232594de41e92b0ceefa;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_str_plain_user_id_str_plain_screen_name_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_d5c8dd3aca257823f9b82da05954a122->m_frame.f_lineno = 798;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 798;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5c8dd3aca257823f9b82da05954a122 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5c8dd3aca257823f9b82da05954a122 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5c8dd3aca257823f9b82da05954a122 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d5c8dd3aca257823f9b82da05954a122, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d5c8dd3aca257823f9b82da05954a122->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d5c8dd3aca257823f9b82da05954a122, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d5c8dd3aca257823f9b82da05954a122,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_d5c8dd3aca257823f9b82da05954a122 == cache_frame_d5c8dd3aca257823f9b82da05954a122 )
    {
        Py_DECREF( frame_d5c8dd3aca257823f9b82da05954a122 );
    }
    cache_frame_d5c8dd3aca257823f9b82da05954a122 = NULL;

    assertFrameObject( frame_d5c8dd3aca257823f9b82da05954a122 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_56_destroy_block );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_56_destroy_block );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_57_blocks( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_68e8158894672acef4247c5a14b07981 = NULL;

    struct Nuitka_FrameObject *frame_68e8158894672acef4247c5a14b07981;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_68e8158894672acef4247c5a14b07981, codeobj_68e8158894672acef4247c5a14b07981, module_tweepy$api, sizeof(void *) );
    frame_68e8158894672acef4247c5a14b07981 = cache_frame_68e8158894672acef4247c5a14b07981;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_68e8158894672acef4247c5a14b07981 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_68e8158894672acef4247c5a14b07981 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 812;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_2a6300ad0f8eaa16a28378c40783766e;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_cursor_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_68e8158894672acef4247c5a14b07981->m_frame.f_lineno = 812;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_68e8158894672acef4247c5a14b07981 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_68e8158894672acef4247c5a14b07981 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_68e8158894672acef4247c5a14b07981 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_68e8158894672acef4247c5a14b07981, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_68e8158894672acef4247c5a14b07981->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_68e8158894672acef4247c5a14b07981, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_68e8158894672acef4247c5a14b07981,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_68e8158894672acef4247c5a14b07981 == cache_frame_68e8158894672acef4247c5a14b07981 )
    {
        Py_DECREF( frame_68e8158894672acef4247c5a14b07981 );
    }
    cache_frame_68e8158894672acef4247c5a14b07981 = NULL;

    assertFrameObject( frame_68e8158894672acef4247c5a14b07981 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_57_blocks );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_57_blocks );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_58_blocks_ids( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_a2246dde6fbf6c5a04b7d0194da100b3 = NULL;

    struct Nuitka_FrameObject *frame_a2246dde6fbf6c5a04b7d0194da100b3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a2246dde6fbf6c5a04b7d0194da100b3, codeobj_a2246dde6fbf6c5a04b7d0194da100b3, module_tweepy$api, sizeof(void *) );
    frame_a2246dde6fbf6c5a04b7d0194da100b3 = cache_frame_a2246dde6fbf6c5a04b7d0194da100b3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a2246dde6fbf6c5a04b7d0194da100b3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a2246dde6fbf6c5a04b7d0194da100b3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 823;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_cf4521ce8156b19febb1fb5c3b43f84a;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_require_auth;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_a2246dde6fbf6c5a04b7d0194da100b3->m_frame.f_lineno = 823;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 823;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2246dde6fbf6c5a04b7d0194da100b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2246dde6fbf6c5a04b7d0194da100b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2246dde6fbf6c5a04b7d0194da100b3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a2246dde6fbf6c5a04b7d0194da100b3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a2246dde6fbf6c5a04b7d0194da100b3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a2246dde6fbf6c5a04b7d0194da100b3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a2246dde6fbf6c5a04b7d0194da100b3,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_a2246dde6fbf6c5a04b7d0194da100b3 == cache_frame_a2246dde6fbf6c5a04b7d0194da100b3 )
    {
        Py_DECREF( frame_a2246dde6fbf6c5a04b7d0194da100b3 );
    }
    cache_frame_a2246dde6fbf6c5a04b7d0194da100b3 = NULL;

    assertFrameObject( frame_a2246dde6fbf6c5a04b7d0194da100b3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_58_blocks_ids );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_58_blocks_ids );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_59_report_spam( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_83f0ab27baf2b4ee4bebb559b07323c8 = NULL;

    struct Nuitka_FrameObject *frame_83f0ab27baf2b4ee4bebb559b07323c8;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_83f0ab27baf2b4ee4bebb559b07323c8, codeobj_83f0ab27baf2b4ee4bebb559b07323c8, module_tweepy$api, sizeof(void *) );
    frame_83f0ab27baf2b4ee4bebb559b07323c8 = cache_frame_83f0ab27baf2b4ee4bebb559b07323c8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_83f0ab27baf2b4ee4bebb559b07323c8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_83f0ab27baf2b4ee4bebb559b07323c8 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 835;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_9b87ba90932f25b73a849a8a46596748;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_user_id_str_plain_screen_name_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_83f0ab27baf2b4ee4bebb559b07323c8->m_frame.f_lineno = 835;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 835;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_83f0ab27baf2b4ee4bebb559b07323c8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_83f0ab27baf2b4ee4bebb559b07323c8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_83f0ab27baf2b4ee4bebb559b07323c8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_83f0ab27baf2b4ee4bebb559b07323c8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_83f0ab27baf2b4ee4bebb559b07323c8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_83f0ab27baf2b4ee4bebb559b07323c8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_83f0ab27baf2b4ee4bebb559b07323c8,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_83f0ab27baf2b4ee4bebb559b07323c8 == cache_frame_83f0ab27baf2b4ee4bebb559b07323c8 )
    {
        Py_DECREF( frame_83f0ab27baf2b4ee4bebb559b07323c8 );
    }
    cache_frame_83f0ab27baf2b4ee4bebb559b07323c8 = NULL;

    assertFrameObject( frame_83f0ab27baf2b4ee4bebb559b07323c8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_59_report_spam );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_59_report_spam );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_60_saved_searches( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_9bc5104466090973ca4d199a5b8dc403 = NULL;

    struct Nuitka_FrameObject *frame_9bc5104466090973ca4d199a5b8dc403;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9bc5104466090973ca4d199a5b8dc403, codeobj_9bc5104466090973ca4d199a5b8dc403, module_tweepy$api, sizeof(void *) );
    frame_9bc5104466090973ca4d199a5b8dc403 = cache_frame_9bc5104466090973ca4d199a5b8dc403;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9bc5104466090973ca4d199a5b8dc403 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9bc5104466090973ca4d199a5b8dc403 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 847;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_5f2c6d8a28ef29a6af1af13f844c89ff;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_saved_search;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_require_auth;
    tmp_dict_value_5 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_9bc5104466090973ca4d199a5b8dc403->m_frame.f_lineno = 847;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9bc5104466090973ca4d199a5b8dc403 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9bc5104466090973ca4d199a5b8dc403 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9bc5104466090973ca4d199a5b8dc403 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9bc5104466090973ca4d199a5b8dc403, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9bc5104466090973ca4d199a5b8dc403->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9bc5104466090973ca4d199a5b8dc403, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9bc5104466090973ca4d199a5b8dc403,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_9bc5104466090973ca4d199a5b8dc403 == cache_frame_9bc5104466090973ca4d199a5b8dc403 )
    {
        Py_DECREF( frame_9bc5104466090973ca4d199a5b8dc403 );
    }
    cache_frame_9bc5104466090973ca4d199a5b8dc403 = NULL;

    assertFrameObject( frame_9bc5104466090973ca4d199a5b8dc403 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_60_saved_searches );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_60_saved_searches );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_61_get_saved_search( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_9041fde6d27ad33602b87758a101a0f6 = NULL;

    struct Nuitka_FrameObject *frame_9041fde6d27ad33602b87758a101a0f6;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9041fde6d27ad33602b87758a101a0f6, codeobj_9041fde6d27ad33602b87758a101a0f6, module_tweepy$api, sizeof(void *) );
    frame_9041fde6d27ad33602b87758a101a0f6 = cache_frame_9041fde6d27ad33602b87758a101a0f6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9041fde6d27ad33602b87758a101a0f6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9041fde6d27ad33602b87758a101a0f6 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 859;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_0f78a3decac53157d4a8cbc0e851278e;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_saved_search;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_require_auth;
    tmp_dict_value_5 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_9041fde6d27ad33602b87758a101a0f6->m_frame.f_lineno = 859;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 859;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9041fde6d27ad33602b87758a101a0f6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9041fde6d27ad33602b87758a101a0f6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9041fde6d27ad33602b87758a101a0f6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9041fde6d27ad33602b87758a101a0f6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9041fde6d27ad33602b87758a101a0f6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9041fde6d27ad33602b87758a101a0f6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9041fde6d27ad33602b87758a101a0f6,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_9041fde6d27ad33602b87758a101a0f6 == cache_frame_9041fde6d27ad33602b87758a101a0f6 )
    {
        Py_DECREF( frame_9041fde6d27ad33602b87758a101a0f6 );
    }
    cache_frame_9041fde6d27ad33602b87758a101a0f6 = NULL;

    assertFrameObject( frame_9041fde6d27ad33602b87758a101a0f6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_61_get_saved_search );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_61_get_saved_search );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_62_create_saved_search( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_9b3e99a5de113c8c9505f89113b16cbf = NULL;

    struct Nuitka_FrameObject *frame_9b3e99a5de113c8c9505f89113b16cbf;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9b3e99a5de113c8c9505f89113b16cbf, codeobj_9b3e99a5de113c8c9505f89113b16cbf, module_tweepy$api, sizeof(void *) );
    frame_9b3e99a5de113c8c9505f89113b16cbf = cache_frame_9b3e99a5de113c8c9505f89113b16cbf;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9b3e99a5de113c8c9505f89113b16cbf );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9b3e99a5de113c8c9505f89113b16cbf ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 872;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_0afff95a565072dacd82ab1d7ad997d1;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_saved_search;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_query_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_9b3e99a5de113c8c9505f89113b16cbf->m_frame.f_lineno = 872;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 872;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9b3e99a5de113c8c9505f89113b16cbf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9b3e99a5de113c8c9505f89113b16cbf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9b3e99a5de113c8c9505f89113b16cbf );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9b3e99a5de113c8c9505f89113b16cbf, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9b3e99a5de113c8c9505f89113b16cbf->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9b3e99a5de113c8c9505f89113b16cbf, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9b3e99a5de113c8c9505f89113b16cbf,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_9b3e99a5de113c8c9505f89113b16cbf == cache_frame_9b3e99a5de113c8c9505f89113b16cbf )
    {
        Py_DECREF( frame_9b3e99a5de113c8c9505f89113b16cbf );
    }
    cache_frame_9b3e99a5de113c8c9505f89113b16cbf = NULL;

    assertFrameObject( frame_9b3e99a5de113c8c9505f89113b16cbf );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_62_create_saved_search );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_62_create_saved_search );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_63_destroy_saved_search( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_5687e0f8453ec900cf3fa8d0a04b914b = NULL;

    struct Nuitka_FrameObject *frame_5687e0f8453ec900cf3fa8d0a04b914b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5687e0f8453ec900cf3fa8d0a04b914b, codeobj_5687e0f8453ec900cf3fa8d0a04b914b, module_tweepy$api, sizeof(void *) );
    frame_5687e0f8453ec900cf3fa8d0a04b914b = cache_frame_5687e0f8453ec900cf3fa8d0a04b914b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5687e0f8453ec900cf3fa8d0a04b914b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5687e0f8453ec900cf3fa8d0a04b914b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 886;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_f748c991231b225b914a226867fd6566;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_saved_search;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_5687e0f8453ec900cf3fa8d0a04b914b->m_frame.f_lineno = 886;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 886;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5687e0f8453ec900cf3fa8d0a04b914b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5687e0f8453ec900cf3fa8d0a04b914b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5687e0f8453ec900cf3fa8d0a04b914b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5687e0f8453ec900cf3fa8d0a04b914b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5687e0f8453ec900cf3fa8d0a04b914b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5687e0f8453ec900cf3fa8d0a04b914b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5687e0f8453ec900cf3fa8d0a04b914b,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_5687e0f8453ec900cf3fa8d0a04b914b == cache_frame_5687e0f8453ec900cf3fa8d0a04b914b )
    {
        Py_DECREF( frame_5687e0f8453ec900cf3fa8d0a04b914b );
    }
    cache_frame_5687e0f8453ec900cf3fa8d0a04b914b = NULL;

    assertFrameObject( frame_5687e0f8453ec900cf3fa8d0a04b914b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_63_destroy_saved_search );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_63_destroy_saved_search );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_64_create_list( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_7a2e83f094ec65bed2718315f4b16d00 = NULL;

    struct Nuitka_FrameObject *frame_7a2e83f094ec65bed2718315f4b16d00;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7a2e83f094ec65bed2718315f4b16d00, codeobj_7a2e83f094ec65bed2718315f4b16d00, module_tweepy$api, sizeof(void *) );
    frame_7a2e83f094ec65bed2718315f4b16d00 = cache_frame_7a2e83f094ec65bed2718315f4b16d00;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7a2e83f094ec65bed2718315f4b16d00 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7a2e83f094ec65bed2718315f4b16d00 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 900;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_7af9f3b9356e0771cc6cb512dc53d8a8;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_name_str_plain_mode_str_plain_description_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_7a2e83f094ec65bed2718315f4b16d00->m_frame.f_lineno = 900;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 900;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7a2e83f094ec65bed2718315f4b16d00 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7a2e83f094ec65bed2718315f4b16d00 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7a2e83f094ec65bed2718315f4b16d00 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7a2e83f094ec65bed2718315f4b16d00, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7a2e83f094ec65bed2718315f4b16d00->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7a2e83f094ec65bed2718315f4b16d00, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7a2e83f094ec65bed2718315f4b16d00,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_7a2e83f094ec65bed2718315f4b16d00 == cache_frame_7a2e83f094ec65bed2718315f4b16d00 )
    {
        Py_DECREF( frame_7a2e83f094ec65bed2718315f4b16d00 );
    }
    cache_frame_7a2e83f094ec65bed2718315f4b16d00 = NULL;

    assertFrameObject( frame_7a2e83f094ec65bed2718315f4b16d00 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_64_create_list );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_64_create_list );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_65_destroy_list( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_26fe090a948bf12251eeaeae99a36b5d = NULL;

    struct Nuitka_FrameObject *frame_26fe090a948bf12251eeaeae99a36b5d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_26fe090a948bf12251eeaeae99a36b5d, codeobj_26fe090a948bf12251eeaeae99a36b5d, module_tweepy$api, sizeof(void *) );
    frame_26fe090a948bf12251eeaeae99a36b5d = cache_frame_26fe090a948bf12251eeaeae99a36b5d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_26fe090a948bf12251eeaeae99a36b5d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_26fe090a948bf12251eeaeae99a36b5d ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 914;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_42118a50e3ae74965934eda9649e9334;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_08ef7d211f3dc1af49eb8c8da29d3172_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_26fe090a948bf12251eeaeae99a36b5d->m_frame.f_lineno = 914;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 914;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_26fe090a948bf12251eeaeae99a36b5d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_26fe090a948bf12251eeaeae99a36b5d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_26fe090a948bf12251eeaeae99a36b5d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_26fe090a948bf12251eeaeae99a36b5d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_26fe090a948bf12251eeaeae99a36b5d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_26fe090a948bf12251eeaeae99a36b5d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_26fe090a948bf12251eeaeae99a36b5d,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_26fe090a948bf12251eeaeae99a36b5d == cache_frame_26fe090a948bf12251eeaeae99a36b5d )
    {
        Py_DECREF( frame_26fe090a948bf12251eeaeae99a36b5d );
    }
    cache_frame_26fe090a948bf12251eeaeae99a36b5d = NULL;

    assertFrameObject( frame_26fe090a948bf12251eeaeae99a36b5d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_65_destroy_list );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_65_destroy_list );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_66_update_list( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_ff826b63f4298daaf03f35bdf1ccf758 = NULL;

    struct Nuitka_FrameObject *frame_ff826b63f4298daaf03f35bdf1ccf758;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ff826b63f4298daaf03f35bdf1ccf758, codeobj_ff826b63f4298daaf03f35bdf1ccf758, module_tweepy$api, sizeof(void *) );
    frame_ff826b63f4298daaf03f35bdf1ccf758 = cache_frame_ff826b63f4298daaf03f35bdf1ccf758;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ff826b63f4298daaf03f35bdf1ccf758 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ff826b63f4298daaf03f35bdf1ccf758 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 928;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_7be423d4555a3c344f1aa8085a43d752;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_42eb6014e92476fb97e4b186a1baeb1b_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_ff826b63f4298daaf03f35bdf1ccf758->m_frame.f_lineno = 928;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 928;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ff826b63f4298daaf03f35bdf1ccf758 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ff826b63f4298daaf03f35bdf1ccf758 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ff826b63f4298daaf03f35bdf1ccf758 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ff826b63f4298daaf03f35bdf1ccf758, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ff826b63f4298daaf03f35bdf1ccf758->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ff826b63f4298daaf03f35bdf1ccf758, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ff826b63f4298daaf03f35bdf1ccf758,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_ff826b63f4298daaf03f35bdf1ccf758 == cache_frame_ff826b63f4298daaf03f35bdf1ccf758 )
    {
        Py_DECREF( frame_ff826b63f4298daaf03f35bdf1ccf758 );
    }
    cache_frame_ff826b63f4298daaf03f35bdf1ccf758 = NULL;

    assertFrameObject( frame_ff826b63f4298daaf03f35bdf1ccf758 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_66_update_list );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_66_update_list );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_67_lists_all( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_a589fbc6c6c4d2e688ed98099928e1bd = NULL;

    struct Nuitka_FrameObject *frame_a589fbc6c6c4d2e688ed98099928e1bd;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a589fbc6c6c4d2e688ed98099928e1bd, codeobj_a589fbc6c6c4d2e688ed98099928e1bd, module_tweepy$api, sizeof(void *) );
    frame_a589fbc6c6c4d2e688ed98099928e1bd = cache_frame_a589fbc6c6c4d2e688ed98099928e1bd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a589fbc6c6c4d2e688ed98099928e1bd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a589fbc6c6c4d2e688ed98099928e1bd ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 942;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_e4e2d408ab774c70222da3d384b38e70;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_screen_name_str_plain_user_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_a589fbc6c6c4d2e688ed98099928e1bd->m_frame.f_lineno = 942;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 942;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a589fbc6c6c4d2e688ed98099928e1bd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a589fbc6c6c4d2e688ed98099928e1bd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a589fbc6c6c4d2e688ed98099928e1bd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a589fbc6c6c4d2e688ed98099928e1bd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a589fbc6c6c4d2e688ed98099928e1bd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a589fbc6c6c4d2e688ed98099928e1bd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a589fbc6c6c4d2e688ed98099928e1bd,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_a589fbc6c6c4d2e688ed98099928e1bd == cache_frame_a589fbc6c6c4d2e688ed98099928e1bd )
    {
        Py_DECREF( frame_a589fbc6c6c4d2e688ed98099928e1bd );
    }
    cache_frame_a589fbc6c6c4d2e688ed98099928e1bd = NULL;

    assertFrameObject( frame_a589fbc6c6c4d2e688ed98099928e1bd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_67_lists_all );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_67_lists_all );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_68_lists_memberships( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_675c0e4b9845349f8b88bb49f567baeb = NULL;

    struct Nuitka_FrameObject *frame_675c0e4b9845349f8b88bb49f567baeb;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_675c0e4b9845349f8b88bb49f567baeb, codeobj_675c0e4b9845349f8b88bb49f567baeb, module_tweepy$api, sizeof(void *) );
    frame_675c0e4b9845349f8b88bb49f567baeb = cache_frame_675c0e4b9845349f8b88bb49f567baeb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_675c0e4b9845349f8b88bb49f567baeb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_675c0e4b9845349f8b88bb49f567baeb ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 955;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_27c77b999a06daa68c1dd046832297fc;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_4669f2659a80dca6b20776d4ec5002eb_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_675c0e4b9845349f8b88bb49f567baeb->m_frame.f_lineno = 955;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 955;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_675c0e4b9845349f8b88bb49f567baeb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_675c0e4b9845349f8b88bb49f567baeb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_675c0e4b9845349f8b88bb49f567baeb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_675c0e4b9845349f8b88bb49f567baeb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_675c0e4b9845349f8b88bb49f567baeb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_675c0e4b9845349f8b88bb49f567baeb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_675c0e4b9845349f8b88bb49f567baeb,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_675c0e4b9845349f8b88bb49f567baeb == cache_frame_675c0e4b9845349f8b88bb49f567baeb )
    {
        Py_DECREF( frame_675c0e4b9845349f8b88bb49f567baeb );
    }
    cache_frame_675c0e4b9845349f8b88bb49f567baeb = NULL;

    assertFrameObject( frame_675c0e4b9845349f8b88bb49f567baeb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_68_lists_memberships );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_68_lists_memberships );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_69_lists_subscriptions( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_60dd79ca1617f50c7abfee1eb3871d75 = NULL;

    struct Nuitka_FrameObject *frame_60dd79ca1617f50c7abfee1eb3871d75;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_60dd79ca1617f50c7abfee1eb3871d75, codeobj_60dd79ca1617f50c7abfee1eb3871d75, module_tweepy$api, sizeof(void *) );
    frame_60dd79ca1617f50c7abfee1eb3871d75 = cache_frame_60dd79ca1617f50c7abfee1eb3871d75;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_60dd79ca1617f50c7abfee1eb3871d75 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_60dd79ca1617f50c7abfee1eb3871d75 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 968;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_6c16d68b6e33255dc9d1b6cd7fc16ff0;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_str_plain_screen_name_str_plain_user_id_str_plain_cursor_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_60dd79ca1617f50c7abfee1eb3871d75->m_frame.f_lineno = 968;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 968;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_60dd79ca1617f50c7abfee1eb3871d75 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_60dd79ca1617f50c7abfee1eb3871d75 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_60dd79ca1617f50c7abfee1eb3871d75 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_60dd79ca1617f50c7abfee1eb3871d75, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_60dd79ca1617f50c7abfee1eb3871d75->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_60dd79ca1617f50c7abfee1eb3871d75, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_60dd79ca1617f50c7abfee1eb3871d75,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_60dd79ca1617f50c7abfee1eb3871d75 == cache_frame_60dd79ca1617f50c7abfee1eb3871d75 )
    {
        Py_DECREF( frame_60dd79ca1617f50c7abfee1eb3871d75 );
    }
    cache_frame_60dd79ca1617f50c7abfee1eb3871d75 = NULL;

    assertFrameObject( frame_60dd79ca1617f50c7abfee1eb3871d75 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_69_lists_subscriptions );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_69_lists_subscriptions );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_70_list_timeline( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_a100af1b2674a51af30997000b279aea = NULL;

    struct Nuitka_FrameObject *frame_a100af1b2674a51af30997000b279aea;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a100af1b2674a51af30997000b279aea, codeobj_a100af1b2674a51af30997000b279aea, module_tweepy$api, sizeof(void *) );
    frame_a100af1b2674a51af30997000b279aea = cache_frame_a100af1b2674a51af30997000b279aea;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a100af1b2674a51af30997000b279aea );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a100af1b2674a51af30997000b279aea ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 982;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_d890a4105d3fed770f9977b8a97975d9;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_status;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_78d9ab4f323992062dce0e89a18449e8_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_a100af1b2674a51af30997000b279aea->m_frame.f_lineno = 982;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 982;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a100af1b2674a51af30997000b279aea );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a100af1b2674a51af30997000b279aea );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a100af1b2674a51af30997000b279aea );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a100af1b2674a51af30997000b279aea, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a100af1b2674a51af30997000b279aea->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a100af1b2674a51af30997000b279aea, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a100af1b2674a51af30997000b279aea,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_a100af1b2674a51af30997000b279aea == cache_frame_a100af1b2674a51af30997000b279aea )
    {
        Py_DECREF( frame_a100af1b2674a51af30997000b279aea );
    }
    cache_frame_a100af1b2674a51af30997000b279aea = NULL;

    assertFrameObject( frame_a100af1b2674a51af30997000b279aea );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_70_list_timeline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_70_list_timeline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_71_get_list( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d0d765880c07ffc8e058372487ffba37 = NULL;

    struct Nuitka_FrameObject *frame_d0d765880c07ffc8e058372487ffba37;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d0d765880c07ffc8e058372487ffba37, codeobj_d0d765880c07ffc8e058372487ffba37, module_tweepy$api, sizeof(void *) );
    frame_d0d765880c07ffc8e058372487ffba37 = cache_frame_d0d765880c07ffc8e058372487ffba37;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d0d765880c07ffc8e058372487ffba37 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d0d765880c07ffc8e058372487ffba37 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 996;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_6ae054d8437a6b6755d526fc27607304;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_4efdb2a1b3943b68db2f85e4d8bf5c7e_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_d0d765880c07ffc8e058372487ffba37->m_frame.f_lineno = 996;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 996;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d0d765880c07ffc8e058372487ffba37 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d0d765880c07ffc8e058372487ffba37 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d0d765880c07ffc8e058372487ffba37 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d0d765880c07ffc8e058372487ffba37, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d0d765880c07ffc8e058372487ffba37->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d0d765880c07ffc8e058372487ffba37, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d0d765880c07ffc8e058372487ffba37,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_d0d765880c07ffc8e058372487ffba37 == cache_frame_d0d765880c07ffc8e058372487ffba37 )
    {
        Py_DECREF( frame_d0d765880c07ffc8e058372487ffba37 );
    }
    cache_frame_d0d765880c07ffc8e058372487ffba37 = NULL;

    assertFrameObject( frame_d0d765880c07ffc8e058372487ffba37 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_71_get_list );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_71_get_list );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_72_add_list_member( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_365649f4302879e824be94a328a355f2 = NULL;

    struct Nuitka_FrameObject *frame_365649f4302879e824be94a328a355f2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_365649f4302879e824be94a328a355f2, codeobj_365649f4302879e824be94a328a355f2, module_tweepy$api, sizeof(void *) );
    frame_365649f4302879e824be94a328a355f2 = cache_frame_365649f4302879e824be94a328a355f2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_365649f4302879e824be94a328a355f2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_365649f4302879e824be94a328a355f2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1009;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_71230f121584b224b45d8a3c12288bb3;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_d09a283f1db5a3b49eee78501b208dc2_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_365649f4302879e824be94a328a355f2->m_frame.f_lineno = 1009;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1009;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_365649f4302879e824be94a328a355f2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_365649f4302879e824be94a328a355f2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_365649f4302879e824be94a328a355f2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_365649f4302879e824be94a328a355f2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_365649f4302879e824be94a328a355f2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_365649f4302879e824be94a328a355f2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_365649f4302879e824be94a328a355f2,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_365649f4302879e824be94a328a355f2 == cache_frame_365649f4302879e824be94a328a355f2 )
    {
        Py_DECREF( frame_365649f4302879e824be94a328a355f2 );
    }
    cache_frame_365649f4302879e824be94a328a355f2 = NULL;

    assertFrameObject( frame_365649f4302879e824be94a328a355f2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_72_add_list_member );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_72_add_list_member );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_73_remove_list_member( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_1a84c706e294e0a34f415ab7921815ba = NULL;

    struct Nuitka_FrameObject *frame_1a84c706e294e0a34f415ab7921815ba;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1a84c706e294e0a34f415ab7921815ba, codeobj_1a84c706e294e0a34f415ab7921815ba, module_tweepy$api, sizeof(void *) );
    frame_1a84c706e294e0a34f415ab7921815ba = cache_frame_1a84c706e294e0a34f415ab7921815ba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1a84c706e294e0a34f415ab7921815ba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1a84c706e294e0a34f415ab7921815ba ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1025;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_320e6028e3b2febfc1c8b575919cf6b2;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_d09a283f1db5a3b49eee78501b208dc2_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_1a84c706e294e0a34f415ab7921815ba->m_frame.f_lineno = 1025;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1025;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1a84c706e294e0a34f415ab7921815ba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1a84c706e294e0a34f415ab7921815ba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1a84c706e294e0a34f415ab7921815ba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1a84c706e294e0a34f415ab7921815ba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1a84c706e294e0a34f415ab7921815ba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1a84c706e294e0a34f415ab7921815ba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1a84c706e294e0a34f415ab7921815ba,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_1a84c706e294e0a34f415ab7921815ba == cache_frame_1a84c706e294e0a34f415ab7921815ba )
    {
        Py_DECREF( frame_1a84c706e294e0a34f415ab7921815ba );
    }
    cache_frame_1a84c706e294e0a34f415ab7921815ba = NULL;

    assertFrameObject( frame_1a84c706e294e0a34f415ab7921815ba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_73_remove_list_member );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_73_remove_list_member );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_74_add_list_members( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_screen_name = python_pars[ 1 ];
    PyObject *par_user_id = python_pars[ 2 ];
    PyObject *par_slug = python_pars[ 3 ];
    PyObject *par_list_id = python_pars[ 4 ];
    PyObject *par_owner_id = python_pars[ 5 ];
    PyObject *par_owner_screen_name = python_pars[ 6 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_8bb38085ca5fdd860404b08f85f9cf11 = NULL;

    struct Nuitka_FrameObject *frame_8bb38085ca5fdd860404b08f85f9cf11;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8bb38085ca5fdd860404b08f85f9cf11, codeobj_8bb38085ca5fdd860404b08f85f9cf11, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_8bb38085ca5fdd860404b08f85f9cf11 = cache_frame_8bb38085ca5fdd860404b08f85f9cf11;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8bb38085ca5fdd860404b08f85f9cf11 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8bb38085ca5fdd860404b08f85f9cf11 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__add_list_members );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1038;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1038;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_screen_name;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "screen_name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1038;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    frame_8bb38085ca5fdd860404b08f85f9cf11->m_frame.f_lineno = 1038;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1038;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1039;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_user_id;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "user_id" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1039;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    frame_8bb38085ca5fdd860404b08f85f9cf11->m_frame.f_lineno = 1039;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1039;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = par_slug;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "slug" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1040;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_list_id;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "list_id" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1040;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_owner_id;

    if ( tmp_args_element_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "owner_id" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1040;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = par_owner_screen_name;

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "owner_screen_name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1041;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    frame_8bb38085ca5fdd860404b08f85f9cf11->m_frame.f_lineno = 1038;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS6( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1038;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8bb38085ca5fdd860404b08f85f9cf11 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8bb38085ca5fdd860404b08f85f9cf11 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8bb38085ca5fdd860404b08f85f9cf11 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8bb38085ca5fdd860404b08f85f9cf11, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8bb38085ca5fdd860404b08f85f9cf11->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8bb38085ca5fdd860404b08f85f9cf11, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8bb38085ca5fdd860404b08f85f9cf11,
        type_description_1,
        par_self,
        par_screen_name,
        par_user_id,
        par_slug,
        par_list_id,
        par_owner_id,
        par_owner_screen_name
    );


    // Release cached frame.
    if ( frame_8bb38085ca5fdd860404b08f85f9cf11 == cache_frame_8bb38085ca5fdd860404b08f85f9cf11 )
    {
        Py_DECREF( frame_8bb38085ca5fdd860404b08f85f9cf11 );
    }
    cache_frame_8bb38085ca5fdd860404b08f85f9cf11 = NULL;

    assertFrameObject( frame_8bb38085ca5fdd860404b08f85f9cf11 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_74_add_list_members );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_screen_name );
    par_screen_name = NULL;

    Py_XDECREF( par_user_id );
    par_user_id = NULL;

    Py_XDECREF( par_slug );
    par_slug = NULL;

    Py_XDECREF( par_list_id );
    par_list_id = NULL;

    Py_XDECREF( par_owner_id );
    par_owner_id = NULL;

    Py_XDECREF( par_owner_screen_name );
    par_owner_screen_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_screen_name );
    par_screen_name = NULL;

    Py_XDECREF( par_user_id );
    par_user_id = NULL;

    Py_XDECREF( par_slug );
    par_slug = NULL;

    Py_XDECREF( par_list_id );
    par_list_id = NULL;

    Py_XDECREF( par_owner_id );
    par_owner_id = NULL;

    Py_XDECREF( par_owner_screen_name );
    par_owner_screen_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_74_add_list_members );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_75__add_list_members( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_7f06e035b9ea779a89051e17a77a4911 = NULL;

    struct Nuitka_FrameObject *frame_7f06e035b9ea779a89051e17a77a4911;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7f06e035b9ea779a89051e17a77a4911, codeobj_7f06e035b9ea779a89051e17a77a4911, module_tweepy$api, sizeof(void *) );
    frame_7f06e035b9ea779a89051e17a77a4911 = cache_frame_7f06e035b9ea779a89051e17a77a4911;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7f06e035b9ea779a89051e17a77a4911 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7f06e035b9ea779a89051e17a77a4911 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1050;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_62baebbc7c7dda5720aa4ae63e7e7223;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_953985fbe3b42e6dd3b0fd228fd13663_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_7f06e035b9ea779a89051e17a77a4911->m_frame.f_lineno = 1050;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1050;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7f06e035b9ea779a89051e17a77a4911 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7f06e035b9ea779a89051e17a77a4911 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7f06e035b9ea779a89051e17a77a4911 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7f06e035b9ea779a89051e17a77a4911, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7f06e035b9ea779a89051e17a77a4911->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7f06e035b9ea779a89051e17a77a4911, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7f06e035b9ea779a89051e17a77a4911,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_7f06e035b9ea779a89051e17a77a4911 == cache_frame_7f06e035b9ea779a89051e17a77a4911 )
    {
        Py_DECREF( frame_7f06e035b9ea779a89051e17a77a4911 );
    }
    cache_frame_7f06e035b9ea779a89051e17a77a4911 = NULL;

    assertFrameObject( frame_7f06e035b9ea779a89051e17a77a4911 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_75__add_list_members );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_75__add_list_members );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_76_remove_list_members( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_screen_name = python_pars[ 1 ];
    PyObject *par_user_id = python_pars[ 2 ];
    PyObject *par_slug = python_pars[ 3 ];
    PyObject *par_list_id = python_pars[ 4 ];
    PyObject *par_owner_id = python_pars[ 5 ];
    PyObject *par_owner_screen_name = python_pars[ 6 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e = NULL;

    struct Nuitka_FrameObject *frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e, codeobj_ba6c73b3d23ff0b6d21dc9d1b6046e4e, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e = cache_frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__remove_list_members );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1063;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1063;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_screen_name;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "screen_name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1063;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e->m_frame.f_lineno = 1063;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 1063;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list_to_csv );
    }

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list_to_csv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1064;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = par_user_id;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "user_id" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1064;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e->m_frame.f_lineno = 1064;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );

        exception_lineno = 1064;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = par_slug;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "slug" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1065;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_list_id;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "list_id" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1065;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_owner_id;

    if ( tmp_args_element_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "owner_id" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1065;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = par_owner_screen_name;

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "owner_screen_name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1066;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e->m_frame.f_lineno = 1063;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS6( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1063;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e,
        type_description_1,
        par_self,
        par_screen_name,
        par_user_id,
        par_slug,
        par_list_id,
        par_owner_id,
        par_owner_screen_name
    );


    // Release cached frame.
    if ( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e == cache_frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e )
    {
        Py_DECREF( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e );
    }
    cache_frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e = NULL;

    assertFrameObject( frame_ba6c73b3d23ff0b6d21dc9d1b6046e4e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_76_remove_list_members );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_screen_name );
    par_screen_name = NULL;

    Py_XDECREF( par_user_id );
    par_user_id = NULL;

    Py_XDECREF( par_slug );
    par_slug = NULL;

    Py_XDECREF( par_list_id );
    par_list_id = NULL;

    Py_XDECREF( par_owner_id );
    par_owner_id = NULL;

    Py_XDECREF( par_owner_screen_name );
    par_owner_screen_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_screen_name );
    par_screen_name = NULL;

    Py_XDECREF( par_user_id );
    par_user_id = NULL;

    Py_XDECREF( par_slug );
    par_slug = NULL;

    Py_XDECREF( par_list_id );
    par_list_id = NULL;

    Py_XDECREF( par_owner_id );
    par_owner_id = NULL;

    Py_XDECREF( par_owner_screen_name );
    par_owner_screen_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_76_remove_list_members );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_77__remove_list_members( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_0952a2783bc1ed7a10bf97b38b69938e = NULL;

    struct Nuitka_FrameObject *frame_0952a2783bc1ed7a10bf97b38b69938e;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0952a2783bc1ed7a10bf97b38b69938e, codeobj_0952a2783bc1ed7a10bf97b38b69938e, module_tweepy$api, sizeof(void *) );
    frame_0952a2783bc1ed7a10bf97b38b69938e = cache_frame_0952a2783bc1ed7a10bf97b38b69938e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0952a2783bc1ed7a10bf97b38b69938e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0952a2783bc1ed7a10bf97b38b69938e ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1075;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_6d2d6f0d1e83b0156232bc0179b43943;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_953985fbe3b42e6dd3b0fd228fd13663_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_0952a2783bc1ed7a10bf97b38b69938e->m_frame.f_lineno = 1075;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1075;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0952a2783bc1ed7a10bf97b38b69938e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0952a2783bc1ed7a10bf97b38b69938e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0952a2783bc1ed7a10bf97b38b69938e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0952a2783bc1ed7a10bf97b38b69938e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0952a2783bc1ed7a10bf97b38b69938e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0952a2783bc1ed7a10bf97b38b69938e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0952a2783bc1ed7a10bf97b38b69938e,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0952a2783bc1ed7a10bf97b38b69938e == cache_frame_0952a2783bc1ed7a10bf97b38b69938e )
    {
        Py_DECREF( frame_0952a2783bc1ed7a10bf97b38b69938e );
    }
    cache_frame_0952a2783bc1ed7a10bf97b38b69938e = NULL;

    assertFrameObject( frame_0952a2783bc1ed7a10bf97b38b69938e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_77__remove_list_members );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_77__remove_list_members );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_78_list_members( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_075e8b41fd62462bd2f85823e73d1086 = NULL;

    struct Nuitka_FrameObject *frame_075e8b41fd62462bd2f85823e73d1086;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_075e8b41fd62462bd2f85823e73d1086, codeobj_075e8b41fd62462bd2f85823e73d1086, module_tweepy$api, sizeof(void *) );
    frame_075e8b41fd62462bd2f85823e73d1086 = cache_frame_075e8b41fd62462bd2f85823e73d1086;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_075e8b41fd62462bd2f85823e73d1086 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_075e8b41fd62462bd2f85823e73d1086 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1091;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_fce7ae9dd7c578af453274d619682b8a;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_4532f42c3637660542f2c1690e08c401_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_075e8b41fd62462bd2f85823e73d1086->m_frame.f_lineno = 1091;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1091;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_075e8b41fd62462bd2f85823e73d1086 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_075e8b41fd62462bd2f85823e73d1086 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_075e8b41fd62462bd2f85823e73d1086 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_075e8b41fd62462bd2f85823e73d1086, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_075e8b41fd62462bd2f85823e73d1086->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_075e8b41fd62462bd2f85823e73d1086, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_075e8b41fd62462bd2f85823e73d1086,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_075e8b41fd62462bd2f85823e73d1086 == cache_frame_075e8b41fd62462bd2f85823e73d1086 )
    {
        Py_DECREF( frame_075e8b41fd62462bd2f85823e73d1086 );
    }
    cache_frame_075e8b41fd62462bd2f85823e73d1086 = NULL;

    assertFrameObject( frame_075e8b41fd62462bd2f85823e73d1086 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_78_list_members );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_78_list_members );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_79_show_list_member( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_3bdc56fc955f1a280b5e1584b388dcb6 = NULL;

    struct Nuitka_FrameObject *frame_3bdc56fc955f1a280b5e1584b388dcb6;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3bdc56fc955f1a280b5e1584b388dcb6, codeobj_3bdc56fc955f1a280b5e1584b388dcb6, module_tweepy$api, sizeof(void *) );
    frame_3bdc56fc955f1a280b5e1584b388dcb6 = cache_frame_3bdc56fc955f1a280b5e1584b388dcb6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3bdc56fc955f1a280b5e1584b388dcb6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3bdc56fc955f1a280b5e1584b388dcb6 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1105;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_804c54db15a9f3830303a1e2cfdea314;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_aaf1294209ffc6dabf0b34770156cdd4_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_3bdc56fc955f1a280b5e1584b388dcb6->m_frame.f_lineno = 1105;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1105;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3bdc56fc955f1a280b5e1584b388dcb6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3bdc56fc955f1a280b5e1584b388dcb6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3bdc56fc955f1a280b5e1584b388dcb6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3bdc56fc955f1a280b5e1584b388dcb6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3bdc56fc955f1a280b5e1584b388dcb6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3bdc56fc955f1a280b5e1584b388dcb6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3bdc56fc955f1a280b5e1584b388dcb6,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_3bdc56fc955f1a280b5e1584b388dcb6 == cache_frame_3bdc56fc955f1a280b5e1584b388dcb6 )
    {
        Py_DECREF( frame_3bdc56fc955f1a280b5e1584b388dcb6 );
    }
    cache_frame_3bdc56fc955f1a280b5e1584b388dcb6 = NULL;

    assertFrameObject( frame_3bdc56fc955f1a280b5e1584b388dcb6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_79_show_list_member );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_79_show_list_member );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_80_subscribe_list( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_149bbff420a576ff844e539212858de3 = NULL;

    struct Nuitka_FrameObject *frame_149bbff420a576ff844e539212858de3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_149bbff420a576ff844e539212858de3, codeobj_149bbff420a576ff844e539212858de3, module_tweepy$api, sizeof(void *) );
    frame_149bbff420a576ff844e539212858de3 = cache_frame_149bbff420a576ff844e539212858de3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_149bbff420a576ff844e539212858de3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_149bbff420a576ff844e539212858de3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1119;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_fd7b1af5cd0729e87a697ede147e56cb;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_1fb635ed5781d1b923088128ff486524_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_149bbff420a576ff844e539212858de3->m_frame.f_lineno = 1119;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1119;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_149bbff420a576ff844e539212858de3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_149bbff420a576ff844e539212858de3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_149bbff420a576ff844e539212858de3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_149bbff420a576ff844e539212858de3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_149bbff420a576ff844e539212858de3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_149bbff420a576ff844e539212858de3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_149bbff420a576ff844e539212858de3,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_149bbff420a576ff844e539212858de3 == cache_frame_149bbff420a576ff844e539212858de3 )
    {
        Py_DECREF( frame_149bbff420a576ff844e539212858de3 );
    }
    cache_frame_149bbff420a576ff844e539212858de3 = NULL;

    assertFrameObject( frame_149bbff420a576ff844e539212858de3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_80_subscribe_list );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_80_subscribe_list );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_81_unsubscribe_list( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_cd4dcd0a2466e5af141034d2249eea54 = NULL;

    struct Nuitka_FrameObject *frame_cd4dcd0a2466e5af141034d2249eea54;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cd4dcd0a2466e5af141034d2249eea54, codeobj_cd4dcd0a2466e5af141034d2249eea54, module_tweepy$api, sizeof(void *) );
    frame_cd4dcd0a2466e5af141034d2249eea54 = cache_frame_cd4dcd0a2466e5af141034d2249eea54;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cd4dcd0a2466e5af141034d2249eea54 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cd4dcd0a2466e5af141034d2249eea54 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1135;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 6 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_eb89ecef1ba53549c1579b18265b3c47;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_method;
    tmp_dict_value_3 = const_str_plain_POST;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_type;
    tmp_dict_value_4 = const_str_plain_list;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_1fb635ed5781d1b923088128ff486524_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_plain_require_auth;
    tmp_dict_value_6 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    frame_cd4dcd0a2466e5af141034d2249eea54->m_frame.f_lineno = 1135;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1135;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cd4dcd0a2466e5af141034d2249eea54 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_cd4dcd0a2466e5af141034d2249eea54 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cd4dcd0a2466e5af141034d2249eea54 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cd4dcd0a2466e5af141034d2249eea54, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cd4dcd0a2466e5af141034d2249eea54->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cd4dcd0a2466e5af141034d2249eea54, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cd4dcd0a2466e5af141034d2249eea54,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_cd4dcd0a2466e5af141034d2249eea54 == cache_frame_cd4dcd0a2466e5af141034d2249eea54 )
    {
        Py_DECREF( frame_cd4dcd0a2466e5af141034d2249eea54 );
    }
    cache_frame_cd4dcd0a2466e5af141034d2249eea54 = NULL;

    assertFrameObject( frame_cd4dcd0a2466e5af141034d2249eea54 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_81_unsubscribe_list );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_81_unsubscribe_list );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_82_list_subscribers( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_d1073e1b567b288f07f07b4eef7e8812 = NULL;

    struct Nuitka_FrameObject *frame_d1073e1b567b288f07f07b4eef7e8812;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d1073e1b567b288f07f07b4eef7e8812, codeobj_d1073e1b567b288f07f07b4eef7e8812, module_tweepy$api, sizeof(void *) );
    frame_d1073e1b567b288f07f07b4eef7e8812 = cache_frame_d1073e1b567b288f07f07b4eef7e8812;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d1073e1b567b288f07f07b4eef7e8812 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d1073e1b567b288f07f07b4eef7e8812 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1151;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_12dda58c2026f49339f0b3c04a296696;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_34e364a3c724a794662a6a4c273727c0_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_d1073e1b567b288f07f07b4eef7e8812->m_frame.f_lineno = 1151;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1151;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d1073e1b567b288f07f07b4eef7e8812 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d1073e1b567b288f07f07b4eef7e8812 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d1073e1b567b288f07f07b4eef7e8812 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d1073e1b567b288f07f07b4eef7e8812, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d1073e1b567b288f07f07b4eef7e8812->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d1073e1b567b288f07f07b4eef7e8812, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d1073e1b567b288f07f07b4eef7e8812,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_d1073e1b567b288f07f07b4eef7e8812 == cache_frame_d1073e1b567b288f07f07b4eef7e8812 )
    {
        Py_DECREF( frame_d1073e1b567b288f07f07b4eef7e8812 );
    }
    cache_frame_d1073e1b567b288f07f07b4eef7e8812 = NULL;

    assertFrameObject( frame_d1073e1b567b288f07f07b4eef7e8812 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_82_list_subscribers );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_82_list_subscribers );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_83_show_list_subscriber( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_2c606181aa11a70ed866d487ecefc6ed = NULL;

    struct Nuitka_FrameObject *frame_2c606181aa11a70ed866d487ecefc6ed;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2c606181aa11a70ed866d487ecefc6ed, codeobj_2c606181aa11a70ed866d487ecefc6ed, module_tweepy$api, sizeof(void *) );
    frame_2c606181aa11a70ed866d487ecefc6ed = cache_frame_2c606181aa11a70ed866d487ecefc6ed;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2c606181aa11a70ed866d487ecefc6ed );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2c606181aa11a70ed866d487ecefc6ed ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1165;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_d496f0569f91c4bcf1eca7ff6015a153;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_user;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_f5255a11d171c4989cf9f14990c23154_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_2c606181aa11a70ed866d487ecefc6ed->m_frame.f_lineno = 1165;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1165;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2c606181aa11a70ed866d487ecefc6ed );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2c606181aa11a70ed866d487ecefc6ed );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2c606181aa11a70ed866d487ecefc6ed );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2c606181aa11a70ed866d487ecefc6ed, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2c606181aa11a70ed866d487ecefc6ed->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2c606181aa11a70ed866d487ecefc6ed, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2c606181aa11a70ed866d487ecefc6ed,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_2c606181aa11a70ed866d487ecefc6ed == cache_frame_2c606181aa11a70ed866d487ecefc6ed )
    {
        Py_DECREF( frame_2c606181aa11a70ed866d487ecefc6ed );
    }
    cache_frame_2c606181aa11a70ed866d487ecefc6ed = NULL;

    assertFrameObject( frame_2c606181aa11a70ed866d487ecefc6ed );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_83_show_list_subscriber );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_83_show_list_subscriber );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_84_trends_available( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_4f55dd9346832b6207ff98409a129c44 = NULL;

    struct Nuitka_FrameObject *frame_4f55dd9346832b6207ff98409a129c44;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4f55dd9346832b6207ff98409a129c44, codeobj_4f55dd9346832b6207ff98409a129c44, module_tweepy$api, sizeof(void *) );
    frame_4f55dd9346832b6207ff98409a129c44 = cache_frame_4f55dd9346832b6207ff98409a129c44;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4f55dd9346832b6207ff98409a129c44 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4f55dd9346832b6207ff98409a129c44 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1176;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 3 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_b5ca8a904acfa86d9d73c1dca8abcdc2;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    frame_4f55dd9346832b6207ff98409a129c44->m_frame.f_lineno = 1176;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1176;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4f55dd9346832b6207ff98409a129c44 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4f55dd9346832b6207ff98409a129c44 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4f55dd9346832b6207ff98409a129c44 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4f55dd9346832b6207ff98409a129c44, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4f55dd9346832b6207ff98409a129c44->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4f55dd9346832b6207ff98409a129c44, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4f55dd9346832b6207ff98409a129c44,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_4f55dd9346832b6207ff98409a129c44 == cache_frame_4f55dd9346832b6207ff98409a129c44 )
    {
        Py_DECREF( frame_4f55dd9346832b6207ff98409a129c44 );
    }
    cache_frame_4f55dd9346832b6207ff98409a129c44 = NULL;

    assertFrameObject( frame_4f55dd9346832b6207ff98409a129c44 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_84_trends_available );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_84_trends_available );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_85_trends_place( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_9d25d8224d9e831eea4a1f2a1e67dc54 = NULL;

    struct Nuitka_FrameObject *frame_9d25d8224d9e831eea4a1f2a1e67dc54;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9d25d8224d9e831eea4a1f2a1e67dc54, codeobj_9d25d8224d9e831eea4a1f2a1e67dc54, module_tweepy$api, sizeof(void *) );
    frame_9d25d8224d9e831eea4a1f2a1e67dc54 = cache_frame_9d25d8224d9e831eea4a1f2a1e67dc54;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9d25d8224d9e831eea4a1f2a1e67dc54 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9d25d8224d9e831eea4a1f2a1e67dc54 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1187;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_38b026e8371d9d15960c8cfa907bf570;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_id_str_plain_exclude_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_9d25d8224d9e831eea4a1f2a1e67dc54->m_frame.f_lineno = 1187;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1187;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9d25d8224d9e831eea4a1f2a1e67dc54 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9d25d8224d9e831eea4a1f2a1e67dc54 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9d25d8224d9e831eea4a1f2a1e67dc54 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9d25d8224d9e831eea4a1f2a1e67dc54, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9d25d8224d9e831eea4a1f2a1e67dc54->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9d25d8224d9e831eea4a1f2a1e67dc54, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9d25d8224d9e831eea4a1f2a1e67dc54,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_9d25d8224d9e831eea4a1f2a1e67dc54 == cache_frame_9d25d8224d9e831eea4a1f2a1e67dc54 )
    {
        Py_DECREF( frame_9d25d8224d9e831eea4a1f2a1e67dc54 );
    }
    cache_frame_9d25d8224d9e831eea4a1f2a1e67dc54 = NULL;

    assertFrameObject( frame_9d25d8224d9e831eea4a1f2a1e67dc54 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_85_trends_place );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_85_trends_place );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_86_trends_closest( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_06cd88486aafc8cfbc3174b6d3eb6269 = NULL;

    struct Nuitka_FrameObject *frame_06cd88486aafc8cfbc3174b6d3eb6269;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_06cd88486aafc8cfbc3174b6d3eb6269, codeobj_06cd88486aafc8cfbc3174b6d3eb6269, module_tweepy$api, sizeof(void *) );
    frame_06cd88486aafc8cfbc3174b6d3eb6269 = cache_frame_06cd88486aafc8cfbc3174b6d3eb6269;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_06cd88486aafc8cfbc3174b6d3eb6269 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_06cd88486aafc8cfbc3174b6d3eb6269 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1199;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_49a107c934b1e01fce7abf772b8589fb;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_lat_str_plain_long_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_06cd88486aafc8cfbc3174b6d3eb6269->m_frame.f_lineno = 1199;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1199;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_06cd88486aafc8cfbc3174b6d3eb6269 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_06cd88486aafc8cfbc3174b6d3eb6269 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_06cd88486aafc8cfbc3174b6d3eb6269 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_06cd88486aafc8cfbc3174b6d3eb6269, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_06cd88486aafc8cfbc3174b6d3eb6269->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_06cd88486aafc8cfbc3174b6d3eb6269, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_06cd88486aafc8cfbc3174b6d3eb6269,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_06cd88486aafc8cfbc3174b6d3eb6269 == cache_frame_06cd88486aafc8cfbc3174b6d3eb6269 )
    {
        Py_DECREF( frame_06cd88486aafc8cfbc3174b6d3eb6269 );
    }
    cache_frame_06cd88486aafc8cfbc3174b6d3eb6269 = NULL;

    assertFrameObject( frame_06cd88486aafc8cfbc3174b6d3eb6269 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_86_trends_closest );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_86_trends_closest );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_87_search( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_bacee294e619b6f131c31821ee37a73d = NULL;

    struct Nuitka_FrameObject *frame_bacee294e619b6f131c31821ee37a73d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bacee294e619b6f131c31821ee37a73d, codeobj_bacee294e619b6f131c31821ee37a73d, module_tweepy$api, sizeof(void *) );
    frame_bacee294e619b6f131c31821ee37a73d = cache_frame_bacee294e619b6f131c31821ee37a73d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bacee294e619b6f131c31821ee37a73d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bacee294e619b6f131c31821ee37a73d ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1213;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_f14466e48af902de6d5c4c2ec0f4179b;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_search_results;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_d067e0399662921590a235ca4f8a110c_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_bacee294e619b6f131c31821ee37a73d->m_frame.f_lineno = 1213;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1213;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bacee294e619b6f131c31821ee37a73d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bacee294e619b6f131c31821ee37a73d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bacee294e619b6f131c31821ee37a73d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bacee294e619b6f131c31821ee37a73d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bacee294e619b6f131c31821ee37a73d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bacee294e619b6f131c31821ee37a73d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bacee294e619b6f131c31821ee37a73d,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_bacee294e619b6f131c31821ee37a73d == cache_frame_bacee294e619b6f131c31821ee37a73d )
    {
        Py_DECREF( frame_bacee294e619b6f131c31821ee37a73d );
    }
    cache_frame_bacee294e619b6f131c31821ee37a73d = NULL;

    assertFrameObject( frame_bacee294e619b6f131c31821ee37a73d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_87_search );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_87_search );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_88_reverse_geocode( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_53021cfe273709e400f55d9544d30d3b = NULL;

    struct Nuitka_FrameObject *frame_53021cfe273709e400f55d9544d30d3b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_53021cfe273709e400f55d9544d30d3b, codeobj_53021cfe273709e400f55d9544d30d3b, module_tweepy$api, sizeof(void *) );
    frame_53021cfe273709e400f55d9544d30d3b = cache_frame_53021cfe273709e400f55d9544d30d3b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_53021cfe273709e400f55d9544d30d3b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_53021cfe273709e400f55d9544d30d3b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1228;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_e8de18a2c60b692789169d0ae81d17ed;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_place;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_ed37b586f3db572b56b4aeb74f84fa9e_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_53021cfe273709e400f55d9544d30d3b->m_frame.f_lineno = 1228;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1228;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_53021cfe273709e400f55d9544d30d3b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_53021cfe273709e400f55d9544d30d3b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_53021cfe273709e400f55d9544d30d3b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_53021cfe273709e400f55d9544d30d3b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_53021cfe273709e400f55d9544d30d3b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_53021cfe273709e400f55d9544d30d3b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_53021cfe273709e400f55d9544d30d3b,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_53021cfe273709e400f55d9544d30d3b == cache_frame_53021cfe273709e400f55d9544d30d3b )
    {
        Py_DECREF( frame_53021cfe273709e400f55d9544d30d3b );
    }
    cache_frame_53021cfe273709e400f55d9544d30d3b = NULL;

    assertFrameObject( frame_53021cfe273709e400f55d9544d30d3b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_88_reverse_geocode );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_88_reverse_geocode );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_89_geo_id( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_6918bffb76b9076623af8f76ae6adbbc = NULL;

    struct Nuitka_FrameObject *frame_6918bffb76b9076623af8f76ae6adbbc;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6918bffb76b9076623af8f76ae6adbbc, codeobj_6918bffb76b9076623af8f76ae6adbbc, module_tweepy$api, sizeof(void *) );
    frame_6918bffb76b9076623af8f76ae6adbbc = cache_frame_6918bffb76b9076623af8f76ae6adbbc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6918bffb76b9076623af8f76ae6adbbc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6918bffb76b9076623af8f76ae6adbbc ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1241;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_88fd5de8fa8c6a74bb7e177787112132;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_place;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_allowed_param;
    tmp_dict_value_4 = LIST_COPY( const_list_str_plain_id_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_6918bffb76b9076623af8f76ae6adbbc->m_frame.f_lineno = 1241;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1241;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6918bffb76b9076623af8f76ae6adbbc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6918bffb76b9076623af8f76ae6adbbc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6918bffb76b9076623af8f76ae6adbbc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6918bffb76b9076623af8f76ae6adbbc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6918bffb76b9076623af8f76ae6adbbc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6918bffb76b9076623af8f76ae6adbbc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6918bffb76b9076623af8f76ae6adbbc,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_6918bffb76b9076623af8f76ae6adbbc == cache_frame_6918bffb76b9076623af8f76ae6adbbc )
    {
        Py_DECREF( frame_6918bffb76b9076623af8f76ae6adbbc );
    }
    cache_frame_6918bffb76b9076623af8f76ae6adbbc = NULL;

    assertFrameObject( frame_6918bffb76b9076623af8f76ae6adbbc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_89_geo_id );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_89_geo_id );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_90_geo_search( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_8e1a5caad32d13e1b8a8659f35d4e6ea = NULL;

    struct Nuitka_FrameObject *frame_8e1a5caad32d13e1b8a8659f35d4e6ea;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8e1a5caad32d13e1b8a8659f35d4e6ea, codeobj_8e1a5caad32d13e1b8a8659f35d4e6ea, module_tweepy$api, sizeof(void *) );
    frame_8e1a5caad32d13e1b8a8659f35d4e6ea = cache_frame_8e1a5caad32d13e1b8a8659f35d4e6ea;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8e1a5caad32d13e1b8a8659f35d4e6ea );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8e1a5caad32d13e1b8a8659f35d4e6ea ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1255;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_571fa9d0a9ad88b0bcf07466f09eb8be;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_place;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_07b71efc5fed6e0a103510e3cd63c4b6_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_8e1a5caad32d13e1b8a8659f35d4e6ea->m_frame.f_lineno = 1255;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1255;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8e1a5caad32d13e1b8a8659f35d4e6ea );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8e1a5caad32d13e1b8a8659f35d4e6ea );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8e1a5caad32d13e1b8a8659f35d4e6ea );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8e1a5caad32d13e1b8a8659f35d4e6ea, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8e1a5caad32d13e1b8a8659f35d4e6ea->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8e1a5caad32d13e1b8a8659f35d4e6ea, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8e1a5caad32d13e1b8a8659f35d4e6ea,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_8e1a5caad32d13e1b8a8659f35d4e6ea == cache_frame_8e1a5caad32d13e1b8a8659f35d4e6ea )
    {
        Py_DECREF( frame_8e1a5caad32d13e1b8a8659f35d4e6ea );
    }
    cache_frame_8e1a5caad32d13e1b8a8659f35d4e6ea = NULL;

    assertFrameObject( frame_8e1a5caad32d13e1b8a8659f35d4e6ea );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_90_geo_search );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_90_geo_search );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_91_geo_similar_places( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_ca6e557aae30210396eb33085a076422 = NULL;

    struct Nuitka_FrameObject *frame_ca6e557aae30210396eb33085a076422;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ca6e557aae30210396eb33085a076422, codeobj_ca6e557aae30210396eb33085a076422, module_tweepy$api, sizeof(void *) );
    frame_ca6e557aae30210396eb33085a076422 = cache_frame_ca6e557aae30210396eb33085a076422;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ca6e557aae30210396eb33085a076422 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ca6e557aae30210396eb33085a076422 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1268;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 5 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_e66eee9a1d5e3481bb822c6b5ab3ca24;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_place;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_payload_list;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_plain_allowed_param;
    tmp_dict_value_5 = LIST_COPY( const_list_9eda2c832631455d3a56a5a445b7219b_list );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    frame_ca6e557aae30210396eb33085a076422->m_frame.f_lineno = 1268;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1268;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca6e557aae30210396eb33085a076422 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca6e557aae30210396eb33085a076422 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca6e557aae30210396eb33085a076422 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ca6e557aae30210396eb33085a076422, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ca6e557aae30210396eb33085a076422->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ca6e557aae30210396eb33085a076422, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ca6e557aae30210396eb33085a076422,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_ca6e557aae30210396eb33085a076422 == cache_frame_ca6e557aae30210396eb33085a076422 )
    {
        Py_DECREF( frame_ca6e557aae30210396eb33085a076422 );
    }
    cache_frame_ca6e557aae30210396eb33085a076422 = NULL;

    assertFrameObject( frame_ca6e557aae30210396eb33085a076422 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_91_geo_similar_places );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_91_geo_similar_places );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_92_supported_languages( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_47346e94767286e71abe9e755d2a5451 = NULL;

    struct Nuitka_FrameObject *frame_47346e94767286e71abe9e755d2a5451;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_47346e94767286e71abe9e755d2a5451, codeobj_47346e94767286e71abe9e755d2a5451, module_tweepy$api, sizeof(void *) );
    frame_47346e94767286e71abe9e755d2a5451 = cache_frame_47346e94767286e71abe9e755d2a5451;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_47346e94767286e71abe9e755d2a5451 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_47346e94767286e71abe9e755d2a5451 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1278;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_5cf980af74af6ab728c2d69eb9327e9f;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_require_auth;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_47346e94767286e71abe9e755d2a5451->m_frame.f_lineno = 1278;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1278;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_47346e94767286e71abe9e755d2a5451 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_47346e94767286e71abe9e755d2a5451 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_47346e94767286e71abe9e755d2a5451 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_47346e94767286e71abe9e755d2a5451, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_47346e94767286e71abe9e755d2a5451->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_47346e94767286e71abe9e755d2a5451, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_47346e94767286e71abe9e755d2a5451,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_47346e94767286e71abe9e755d2a5451 == cache_frame_47346e94767286e71abe9e755d2a5451 )
    {
        Py_DECREF( frame_47346e94767286e71abe9e755d2a5451 );
    }
    cache_frame_47346e94767286e71abe9e755d2a5451 = NULL;

    assertFrameObject( frame_47346e94767286e71abe9e755d2a5451 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_92_supported_languages );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_92_supported_languages );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_93_configuration( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_kw_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_e7c0f20dc88dde0319407ae5901e4a1a = NULL;

    struct Nuitka_FrameObject *frame_e7c0f20dc88dde0319407ae5901e4a1a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e7c0f20dc88dde0319407ae5901e4a1a, codeobj_e7c0f20dc88dde0319407ae5901e4a1a, module_tweepy$api, sizeof(void *) );
    frame_e7c0f20dc88dde0319407ae5901e4a1a = cache_frame_e7c0f20dc88dde0319407ae5901e4a1a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e7c0f20dc88dde0319407ae5901e4a1a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e7c0f20dc88dde0319407ae5901e4a1a ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_bind_api );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "bind_api" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1288;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_kw_name_1 = _PyDict_NewPresized( 4 );
    tmp_dict_key_1 = const_str_plain_api;
    tmp_dict_value_1 = par_self;

    CHECK_OBJECT( tmp_dict_value_1 );
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_path;
    tmp_dict_value_2 = const_str_digest_02aa2813e454885f054fe05b31ab66e3;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_plain_payload_type;
    tmp_dict_value_3 = const_str_plain_json;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_plain_require_auth;
    tmp_dict_value_4 = Py_True;
    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    frame_e7c0f20dc88dde0319407ae5901e4a1a->m_frame.f_lineno = 1288;
    tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1288;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e7c0f20dc88dde0319407ae5901e4a1a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e7c0f20dc88dde0319407ae5901e4a1a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e7c0f20dc88dde0319407ae5901e4a1a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e7c0f20dc88dde0319407ae5901e4a1a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e7c0f20dc88dde0319407ae5901e4a1a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e7c0f20dc88dde0319407ae5901e4a1a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e7c0f20dc88dde0319407ae5901e4a1a,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_e7c0f20dc88dde0319407ae5901e4a1a == cache_frame_e7c0f20dc88dde0319407ae5901e4a1a )
    {
        Py_DECREF( frame_e7c0f20dc88dde0319407ae5901e4a1a );
    }
    cache_frame_e7c0f20dc88dde0319407ae5901e4a1a = NULL;

    assertFrameObject( frame_e7c0f20dc88dde0319407ae5901e4a1a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_93_configuration );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_93_configuration );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_tweepy$api$$$function_94__pack_image( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_filename = python_pars[ 0 ];
    PyObject *par_max_size = python_pars[ 1 ];
    PyObject *par_form_field = python_pars[ 2 ];
    PyObject *par_f = python_pars[ 3 ];
    PyObject *var_e = NULL;
    PyObject *var_fp = NULL;
    PyObject *var_file_type = NULL;
    PyObject *var_BOUNDARY = NULL;
    PyObject *var_body = NULL;
    PyObject *var_headers = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_instance_7;
    PyObject *tmp_called_instance_8;
    PyObject *tmp_called_instance_9;
    PyObject *tmp_called_instance_10;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    int tmp_cmp_Gt_1;
    int tmp_cmp_Gt_2;
    int tmp_cmp_NotIn_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    int tmp_exc_match_exception_match_1;
    bool tmp_is_1;
    bool tmp_is_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_left_name_5;
    PyObject *tmp_left_name_6;
    PyObject *tmp_left_name_7;
    PyObject *tmp_left_name_8;
    PyObject *tmp_left_name_9;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_open_filename_1;
    PyObject *tmp_open_mode_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    PyObject *tmp_raise_type_5;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_right_name_5;
    PyObject *tmp_right_name_6;
    PyObject *tmp_right_name_7;
    PyObject *tmp_right_name_8;
    PyObject *tmp_right_name_9;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unicode_arg_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_f6aefdbb0490b86bd805a79d125e5dc4 = NULL;

    struct Nuitka_FrameObject *frame_f6aefdbb0490b86bd805a79d125e5dc4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f6aefdbb0490b86bd805a79d125e5dc4, codeobj_f6aefdbb0490b86bd805a79d125e5dc4, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f6aefdbb0490b86bd805a79d125e5dc4 = cache_frame_f6aefdbb0490b86bd805a79d125e5dc4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f6aefdbb0490b86bd805a79d125e5dc4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f6aefdbb0490b86bd805a79d125e5dc4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_f;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code:
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1303;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_path );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1303;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_getsize );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1303;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_1 = par_filename;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1303;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1303;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_compare_left_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1303;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    tmp_left_name_1 = par_max_size;

    if ( tmp_left_name_1 == NULL )
    {
        Py_DECREF( tmp_compare_left_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "max_size" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1303;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }

    tmp_right_name_1 = const_int_pos_1024;
    tmp_compare_right_2 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 1303;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    tmp_cmp_Gt_1 = RICH_COMPARE_BOOL_GT( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Gt_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );
        Py_DECREF( tmp_compare_right_2 );

        exception_lineno = 1303;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_2 );
    Py_DECREF( tmp_compare_right_2 );
    if ( tmp_cmp_Gt_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_TweepError );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TweepError );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TweepError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1304;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }

    tmp_left_name_2 = const_str_digest_e81a95708f0e46e85cd3245b3c1b32f1;
    tmp_right_name_2 = par_max_size;

    if ( tmp_right_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "max_size" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1304;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1304;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1304;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 1304;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooo";
    goto try_except_handler_2;
    branch_no_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_f6aefdbb0490b86bd805a79d125e5dc4, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_f6aefdbb0490b86bd805a79d125e5dc4, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    tmp_compare_left_3 = PyThreadState_GET()->exc_type;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_os );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
    }

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1305;
        type_description_1 = "oooooooooo";
        goto try_except_handler_3;
    }

    tmp_compare_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_error );
    if ( tmp_compare_right_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1305;
        type_description_1 = "oooooooooo";
        goto try_except_handler_3;
    }
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_3, tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_right_3 );

        exception_lineno = 1305;
        type_description_1 = "oooooooooo";
        goto try_except_handler_3;
    }
    Py_DECREF( tmp_compare_right_3 );
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assign_source_1 = PyThreadState_GET()->exc_value;
    assert( var_e == NULL );
    Py_INCREF( tmp_assign_source_1 );
    var_e = tmp_assign_source_1;

    // Tried code:
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_TweepError );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TweepError );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TweepError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1306;
        type_description_1 = "oooooooooo";
        goto try_except_handler_4;
    }

    tmp_left_name_3 = const_str_digest_64c81487a3ad4bd585303d823dd3f863;
    tmp_source_name_4 = var_e;

    CHECK_OBJECT( tmp_source_name_4 );
    tmp_right_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_strerror );
    if ( tmp_right_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1306;
        type_description_1 = "oooooooooo";
        goto try_except_handler_4;
    }
    tmp_args_element_name_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_right_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1306;
        type_description_1 = "oooooooooo";
        goto try_except_handler_4;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1306;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1306;
        type_description_1 = "oooooooooo";
        goto try_except_handler_4;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 1306;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooo";
    goto try_except_handler_4;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_94__pack_image );
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_e );
    var_e = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    goto branch_end_3;
    branch_no_3:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1302;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame) frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooo";
    goto try_except_handler_3;
    branch_end_3:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_94__pack_image );
    return NULL;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    tmp_open_filename_1 = par_filename;

    if ( tmp_open_filename_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1309;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_open_mode_1 = const_str_plain_rb;
    tmp_assign_source_2 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1309;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_fp == NULL );
    var_fp = tmp_assign_source_2;

    goto branch_end_1;
    branch_no_1:;
    tmp_called_instance_1 = par_f;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "f" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1311;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1311;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_seek, &PyTuple_GET_ITEM( const_tuple_int_0_int_pos_2_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1311;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_2 = par_f;

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "f" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1312;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1312;
    tmp_compare_left_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
    if ( tmp_compare_left_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1312;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_left_name_4 = par_max_size;

    if ( tmp_left_name_4 == NULL )
    {
        Py_DECREF( tmp_compare_left_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "max_size" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1312;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_right_name_4 = const_int_pos_1024;
    tmp_compare_right_4 = BINARY_OPERATION_MUL( tmp_left_name_4, tmp_right_name_4 );
    if ( tmp_compare_right_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_4 );

        exception_lineno = 1312;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_Gt_2 = RICH_COMPARE_BOOL_GT( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_cmp_Gt_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_4 );
        Py_DECREF( tmp_compare_right_4 );

        exception_lineno = 1312;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_4 );
    Py_DECREF( tmp_compare_right_4 );
    if ( tmp_cmp_Gt_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_TweepError );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TweepError );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TweepError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1313;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_left_name_5 = const_str_digest_e81a95708f0e46e85cd3245b3c1b32f1;
    tmp_right_name_5 = par_max_size;

    if ( tmp_right_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "max_size" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1313;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_5 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1313;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1313;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1313;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_3;
    exception_lineno = 1313;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooo";
    goto frame_exception_exit_1;
    branch_no_4:;
    tmp_called_instance_3 = par_f;

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "f" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1314;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1314;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_seek, &PyTuple_GET_ITEM( const_tuple_int_0_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1314;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_assign_source_3 = par_f;

    if ( tmp_assign_source_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "f" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1315;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    assert( var_fp == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_fp = tmp_assign_source_3;

    branch_end_1:;
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_mimetypes );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_mimetypes );
    }

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "mimetypes" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1318;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_guess_type );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1318;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = par_filename;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1318;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1318;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1318;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    assert( var_file_type == NULL );
    var_file_type = tmp_assign_source_4;

    tmp_compare_left_5 = var_file_type;

    CHECK_OBJECT( tmp_compare_left_5 );
    tmp_compare_right_5 = Py_None;
    tmp_is_2 = ( tmp_compare_left_5 == tmp_compare_right_5 );
    if ( tmp_is_2 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_TweepError );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TweepError );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TweepError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1320;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1320;
    tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_str_digest_fd84b510bbae67ca87724f2fcd7ec268_tuple, 0 ) );

    if ( tmp_raise_type_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1320;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_4;
    exception_lineno = 1320;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooo";
    goto frame_exception_exit_1;
    branch_no_5:;
    tmp_subscribed_name_1 = var_file_type;

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "file_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1321;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_1 = const_int_0;
    tmp_assign_source_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1321;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_file_type;
        var_file_type = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_compare_left_6 = var_file_type;

    CHECK_OBJECT( tmp_compare_left_6 );
    tmp_compare_right_6 = LIST_COPY( const_list_c9f02c3376521f0c5c89f45b748b40b4_list );
    tmp_cmp_NotIn_1 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_NotIn_1 == -1) );
    Py_DECREF( tmp_compare_right_6 );
    if ( tmp_cmp_NotIn_1 == 0 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_TweepError );

    if (unlikely( tmp_called_name_7 == NULL ))
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TweepError );
    }

    if ( tmp_called_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TweepError" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1323;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_left_name_6 = const_str_digest_3414e7d5cbaef30fe06aa06fa3bbbca7;
    tmp_right_name_6 = var_file_type;

    CHECK_OBJECT( tmp_right_name_6 );
    tmp_args_element_name_6 = BINARY_OPERATION_REMAINDER( tmp_left_name_6, tmp_right_name_6 );
    if ( tmp_args_element_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1323;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1323;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_raise_type_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_raise_type_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1323;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_5;
    exception_lineno = 1323;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooooooo";
    goto frame_exception_exit_1;
    branch_no_6:;
    tmp_isinstance_inst_1 = par_filename;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1325;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_six );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_six );
    }

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "six" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1325;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_text_type );
    if ( tmp_isinstance_cls_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    Py_DECREF( tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1325;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_called_instance_4 = par_filename;

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1326;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1326;
    tmp_assign_source_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0 ) );

    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1326;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_filename;
        par_filename = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    branch_no_7:;
    tmp_assign_source_7 = const_bytes_digest_74924bf337e444549ac1b0136fdfb8af;
    assert( var_BOUNDARY == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_BOUNDARY = tmp_assign_source_7;

    tmp_assign_source_8 = PyList_New( 0 );
    assert( var_body == NULL );
    var_body = tmp_assign_source_8;

    tmp_source_name_7 = var_body;

    CHECK_OBJECT( tmp_source_name_7 );
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_append );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1330;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_left_name_7 = const_bytes_digest_f3560215c5dd58a9e4508a4fe4886968;
    tmp_right_name_7 = var_BOUNDARY;

    if ( tmp_right_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_8 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "BOUNDARY" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1330;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = BINARY_OPERATION_ADD( tmp_left_name_7, tmp_right_name_7 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_8 );

        exception_lineno = 1330;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1330;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1330;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_8 = var_body;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "body" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1331;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_append );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1331;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_9 = const_str_digest_314b2037f0172ee47db83851acad0a71;
    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_format );
    assert( tmp_called_name_10 != NULL );
    tmp_args_element_name_9 = par_form_field;

    if ( tmp_args_element_name_9 == NULL )
    {
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "form_field" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1332;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_10 = par_filename;

    if ( tmp_args_element_name_10 == NULL )
    {
        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_called_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filename" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1332;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1331;
    {
        PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
        tmp_called_instance_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    if ( tmp_called_instance_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 1331;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1331;
    tmp_args_element_name_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_5 );
    if ( tmp_args_element_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_9 );

        exception_lineno = 1331;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1331;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1331;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_10 = var_body;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "body" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1334;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_append );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_11 = const_str_digest_6443a4a50635bcbcf7c37a18afb48d25;
    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_format );
    assert( tmp_called_name_12 != NULL );
    tmp_args_element_name_12 = var_file_type;

    if ( tmp_args_element_name_12 == NULL )
    {
        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_called_name_12 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "file_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1334;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1334;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_called_instance_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_called_name_12 );
    if ( tmp_called_instance_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 1334;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1334;
    tmp_args_element_name_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0 ) );

    Py_DECREF( tmp_called_instance_6 );
    if ( tmp_args_element_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_11 );

        exception_lineno = 1334;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1334;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1334;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_7 = var_body;

    if ( tmp_called_instance_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "body" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1335;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1335;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_bytes_empty_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1335;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_12 = var_body;

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "body" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1336;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_append );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1336;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_8 = var_fp;

    if ( tmp_called_instance_8 == NULL )
    {
        Py_DECREF( tmp_called_name_13 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fp" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1336;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1336;
    tmp_args_element_name_13 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_read );
    if ( tmp_args_element_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_13 );

        exception_lineno = 1336;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1336;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1336;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_13 = var_body;

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "body" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1337;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_append );
    if ( tmp_called_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1337;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_left_name_9 = const_bytes_digest_f3560215c5dd58a9e4508a4fe4886968;
    tmp_right_name_8 = var_BOUNDARY;

    if ( tmp_right_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_14 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "BOUNDARY" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1337;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_left_name_8 = BINARY_OPERATION_ADD( tmp_left_name_9, tmp_right_name_8 );
    if ( tmp_left_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 1337;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_right_name_9 = const_bytes_digest_f3560215c5dd58a9e4508a4fe4886968;
    tmp_args_element_name_14 = BINARY_OPERATION_ADD( tmp_left_name_8, tmp_right_name_9 );
    Py_DECREF( tmp_left_name_8 );
    if ( tmp_args_element_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_14 );

        exception_lineno = 1337;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1337;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
    }

    Py_DECREF( tmp_called_name_14 );
    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1337;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_9 = var_body;

    if ( tmp_called_instance_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "body" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1338;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1338;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_bytes_empty_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1338;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_called_instance_10 = var_fp;

    if ( tmp_called_instance_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fp" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1339;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1339;
    tmp_unused = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_close );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1339;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_14 = const_bytes_digest_e22048e4de62b4d2ac355aed7a0f9014;
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_join );
    assert( tmp_called_name_15 != NULL );
    tmp_args_element_name_15 = var_body;

    if ( tmp_args_element_name_15 == NULL )
    {
        Py_DECREF( tmp_called_name_15 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "body" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1340;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }

    frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame.f_lineno = 1340;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    Py_DECREF( tmp_called_name_15 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1340;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_body;
        var_body = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = _PyDict_NewPresized( 2 );
    tmp_dict_key_1 = const_str_digest_6d6a615162e89eb148ba9bf8dbfc06d3;
    tmp_dict_value_1 = const_str_digest_6822502d2bb78ed129a9669cccf02540;
    tmp_res = PyDict_SetItem( tmp_assign_source_10, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_digest_3c9527fc53ea2272c2080ca035d6631c;
    tmp_len_arg_1 = var_body;

    CHECK_OBJECT( tmp_len_arg_1 );
    tmp_unicode_arg_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_unicode_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_10 );

        exception_lineno = 1345;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_dict_value_2 = PyObject_Unicode( tmp_unicode_arg_1 );
    Py_DECREF( tmp_unicode_arg_1 );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_10 );

        exception_lineno = 1345;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_10, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    assert( var_headers == NULL );
    var_headers = tmp_assign_source_10;


#if 1
    RESTORE_FRAME_EXCEPTION( frame_f6aefdbb0490b86bd805a79d125e5dc4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_f6aefdbb0490b86bd805a79d125e5dc4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f6aefdbb0490b86bd805a79d125e5dc4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f6aefdbb0490b86bd805a79d125e5dc4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f6aefdbb0490b86bd805a79d125e5dc4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f6aefdbb0490b86bd805a79d125e5dc4,
        type_description_1,
        par_filename,
        par_max_size,
        par_form_field,
        par_f,
        var_e,
        var_fp,
        var_file_type,
        var_BOUNDARY,
        var_body,
        var_headers
    );


    // Release cached frame.
    if ( frame_f6aefdbb0490b86bd805a79d125e5dc4 == cache_frame_f6aefdbb0490b86bd805a79d125e5dc4 )
    {
        Py_DECREF( frame_f6aefdbb0490b86bd805a79d125e5dc4 );
    }
    cache_frame_f6aefdbb0490b86bd805a79d125e5dc4 = NULL;

    assertFrameObject( frame_f6aefdbb0490b86bd805a79d125e5dc4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_headers;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_body;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "body" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );



        goto try_except_handler_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_94__pack_image );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_max_size );
    par_max_size = NULL;

    Py_XDECREF( par_form_field );
    par_form_field = NULL;

    Py_XDECREF( par_f );
    par_f = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_file_type );
    var_file_type = NULL;

    Py_XDECREF( var_BOUNDARY );
    var_BOUNDARY = NULL;

    Py_XDECREF( var_body );
    var_body = NULL;

    Py_XDECREF( var_headers );
    var_headers = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( par_max_size );
    par_max_size = NULL;

    Py_XDECREF( par_form_field );
    par_form_field = NULL;

    Py_XDECREF( par_f );
    par_f = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_file_type );
    var_file_type = NULL;

    Py_XDECREF( var_BOUNDARY );
    var_BOUNDARY = NULL;

    Py_XDECREF( var_body );
    var_body = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api$$$function_94__pack_image );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_10_update_status(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_10_update_status,
        const_str_plain_update_status,
#if PYTHON_VERSION >= 330
        const_str_digest_90c33e1e7620f71afbdafe4c6e96b721,
#endif
        codeobj_b110dbd4dea70e3df5a3cb7c79f8276c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_1531cf2fd92dcbe136b6a129607467b6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_11_media_upload(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_11_media_upload,
        const_str_plain_media_upload,
#if PYTHON_VERSION >= 330
        const_str_digest_8cef34bdcaae6ce12293342dc0396ca1,
#endif
        codeobj_2108e2d35b352d6aa55ae11749170505,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_0662c6adbae466087c75ecfcae9879f1,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_12_update_with_media(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_12_update_with_media,
        const_str_plain_update_with_media,
#if PYTHON_VERSION >= 330
        const_str_digest_ae4591cdba4f38c808424db8a698b051,
#endif
        codeobj_5b1df0f5e4767236bf4c614e241672ab,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_e24c29d146882f162e3c5517875d43fc,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_13_destroy_status(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_13_destroy_status,
        const_str_plain_destroy_status,
#if PYTHON_VERSION >= 330
        const_str_digest_9540625229012577e2839f9582e3534d,
#endif
        codeobj_36540fc3ef3f30d4336d31d9d0bc104f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_8f3d33d979cf92eb49f299dc76b76849,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_14_retweet(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_14_retweet,
        const_str_plain_retweet,
#if PYTHON_VERSION >= 330
        const_str_digest_ec185a7b7b812ad0e9ad581b07748f4d,
#endif
        codeobj_cf7ed6ecce751c9c1df8a21711cba345,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_b1a370465cde0421dd8ca6827beab883,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_15_retweets(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_15_retweets,
        const_str_plain_retweets,
#if PYTHON_VERSION >= 330
        const_str_digest_9f14ec61bbfd9cea0782795292617d2e,
#endif
        codeobj_eeeaa6b78a757404c7caeee36730c184,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_54d295a4ba6af8d7531bb84e41a3201d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_16_retweeters(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_16_retweeters,
        const_str_plain_retweeters,
#if PYTHON_VERSION >= 330
        const_str_digest_48775b7cf7a6c2dce1aac8aff7fac7c2,
#endif
        codeobj_d4eb1be770bb09f5dc5127e08030139a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_6b553b725b783bbd61a89d2d6054ece7,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_17_get_user(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_17_get_user,
        const_str_plain_get_user,
#if PYTHON_VERSION >= 330
        const_str_digest_a8cbcbd2c1b0b111596e1669bbbec1da,
#endif
        codeobj_1d4c111344c4facdd9f0aa8ddf6f4bc0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_a4970f68db19567c321774b7e4800ae9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_18_get_oembed(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_18_get_oembed,
        const_str_plain_get_oembed,
#if PYTHON_VERSION >= 330
        const_str_digest_3e80c5f8e73ca34db6df5f1a23806bae,
#endif
        codeobj_7e7ab4ceb944a35e9f5ba99235698fce,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_ece36eca1642434f021d31a629a01139,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_19_lookup_users( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_19_lookup_users,
        const_str_plain_lookup_users,
#if PYTHON_VERSION >= 330
        const_str_digest_b05664714ef0894e0ecf4d15ddd9b73f,
#endif
        codeobj_4c432615d74f3053d1abed2e0002aefb,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_adebd5f65a028981f8da63150ee1aa02,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_1___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        const_str_digest_ccd98383543c4ae9b5077b1e6b4c4f4b,
#endif
        codeobj_c94d3f57ab427120a29e9f73b82b649c,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_0ffd4a62a876b9c87d10a1285066ea97,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_20__lookup_users(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_20__lookup_users,
        const_str_plain__lookup_users,
#if PYTHON_VERSION >= 330
        const_str_digest_59c55d9b0c1b7bee220e28823cfa460e,
#endif
        codeobj_5dc4c08475486b194a84a75907dabbd7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_fa841d19ecb669e6d9bf4f0e93bd89c3,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_21_me(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_21_me,
        const_str_plain_me,
#if PYTHON_VERSION >= 330
        const_str_digest_bf1d9bf19d9789f47c21804da3de9103,
#endif
        codeobj_4eee1808bb91e31638aa70ddaa543d30,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_fc9041366e6b71029e3ea1b77c6fa884,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_22_search_users(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_22_search_users,
        const_str_plain_search_users,
#if PYTHON_VERSION >= 330
        const_str_digest_876e75199bc5892619186204715a8e20,
#endif
        codeobj_65bc48de0216fc767a82f2690585ea67,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_4693b8aa0fb9b1af207c1b5dd336d17e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_23_suggested_users(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_23_suggested_users,
        const_str_plain_suggested_users,
#if PYTHON_VERSION >= 330
        const_str_digest_e562a6d022aa3b5ce59db75be9d796b0,
#endif
        codeobj_2d363280eb787780b4195632a708b95e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_578ebd36b303424b31a1aa4842e2d81a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_24_suggested_categories(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_24_suggested_categories,
        const_str_plain_suggested_categories,
#if PYTHON_VERSION >= 330
        const_str_digest_945fea799c35e94540f8a9c04ba3f295,
#endif
        codeobj_ab4e6e8ca538cc6f1925b3019d68cb90,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_23c932ce2ac0ec47fbfdaf86834d80dc,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_25_suggested_users_tweets(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_25_suggested_users_tweets,
        const_str_plain_suggested_users_tweets,
#if PYTHON_VERSION >= 330
        const_str_digest_00ebee2684e92197fe6506cd0fee80ba,
#endif
        codeobj_93d23f99710bf35f8e2f4e7727040926,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_bfc29badd539a95d68d8979f16c26243,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_26_direct_messages(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_26_direct_messages,
        const_str_plain_direct_messages,
#if PYTHON_VERSION >= 330
        const_str_digest_e31af3168fd647c07ddafd143e1fba26,
#endif
        codeobj_1f5aa56e029dbeb407a8a1644ef693cc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_0c4773362cee604a540f9beaabb9825a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_27_get_direct_message(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_27_get_direct_message,
        const_str_plain_get_direct_message,
#if PYTHON_VERSION >= 330
        const_str_digest_993d569ecc312035f9a70dad8655dcaa,
#endif
        codeobj_8e057ad2deee48e0ff7e0f35ddaf46b1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_0a6c3d56c41671a9f36b2def2d826064,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_28_sent_direct_messages(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_28_sent_direct_messages,
        const_str_plain_sent_direct_messages,
#if PYTHON_VERSION >= 330
        const_str_digest_2be67310e57881d3290689415d0cd134,
#endif
        codeobj_f5b64100e4c6d38b868cc509d32a3b65,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_f13378e582ec7033dcc7a257dc43ae3a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_29_send_direct_message(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_29_send_direct_message,
        const_str_plain_send_direct_message,
#if PYTHON_VERSION >= 330
        const_str_digest_8cc3d659f7f338fbd6987eb97378a583,
#endif
        codeobj_45325722189a1794518740bb94a35ecc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_3c02ff2e7dfa9926f8cf7fc098b0c0f2,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_2_home_timeline(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_2_home_timeline,
        const_str_plain_home_timeline,
#if PYTHON_VERSION >= 330
        const_str_digest_3c677b0cd2774d8add18b7be8c610dd5,
#endif
        codeobj_0fc6113ae954ee498f5036f64b914de9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_fc7f46642770fe286a572bede93cf772,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_30_destroy_direct_message(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_30_destroy_direct_message,
        const_str_plain_destroy_direct_message,
#if PYTHON_VERSION >= 330
        const_str_digest_12113c76ab4765bf100194e9994b2512,
#endif
        codeobj_91b19364b154c1522c83bdbb85ad5723,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_62fe6022e4127973bec55672d44251bb,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_31_create_friendship(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_31_create_friendship,
        const_str_plain_create_friendship,
#if PYTHON_VERSION >= 330
        const_str_digest_97c00c9e1f11f77b4fb3e9b1da4dc679,
#endif
        codeobj_d3154221f11db26685e34f0be0f0ec47,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_28f8101301a52289374e84dfddbc77c7,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_32_destroy_friendship(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_32_destroy_friendship,
        const_str_plain_destroy_friendship,
#if PYTHON_VERSION >= 330
        const_str_digest_3fdde71a332dc56f764914a9c12487ee,
#endif
        codeobj_b4e9f3e8920c4b9d41f1a5272c7d6313,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_999b5d4076cb6644e3349e385587cb08,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_33_show_friendship(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_33_show_friendship,
        const_str_plain_show_friendship,
#if PYTHON_VERSION >= 330
        const_str_digest_dbf7bdf5c35a0528fed59ebbd4d3b64a,
#endif
        codeobj_8edf27b5c181c7bb006364033d1d8372,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_e793a5e7d8221c4160e8bdae1c765e52,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_34_lookup_friendships( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_34_lookup_friendships,
        const_str_plain_lookup_friendships,
#if PYTHON_VERSION >= 330
        const_str_digest_d43de8fe953db47b800441dfbd89204f,
#endif
        codeobj_6d841790ffa99d5aac0afc8adc221c75,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_5447453aa9288d90a451b43ec284a820,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_35__lookup_friendships(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_35__lookup_friendships,
        const_str_plain__lookup_friendships,
#if PYTHON_VERSION >= 330
        const_str_digest_19da2bb2d55919865c65aefab08c1911,
#endif
        codeobj_933e27bcff1a5abadfc3535e77bfce32,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_58a451be096e59ac1d5cb6c2503f32d6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_36_friends_ids(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_36_friends_ids,
        const_str_plain_friends_ids,
#if PYTHON_VERSION >= 330
        const_str_digest_2a8b91c605f76de4e74f76fa376c4e0e,
#endif
        codeobj_0f0e14368dfbef76e79bf4d638757d75,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_dd2d86ce4450b61edec967574b1822c9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_37_friends(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_37_friends,
        const_str_plain_friends,
#if PYTHON_VERSION >= 330
        const_str_digest_24a9c55fa89564df44331619ae461145,
#endif
        codeobj_394baa27dfbb0110f9d9f8fe1a9f5226,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_b8fee6cc25e1073dbe97d6f1a83fab53,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_38_friendships_incoming(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_38_friendships_incoming,
        const_str_plain_friendships_incoming,
#if PYTHON_VERSION >= 330
        const_str_digest_e8503bbb3a47258099b6fda53eaf8cdb,
#endif
        codeobj_f356acf7c3066621fadabe71aa1b4533,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_1727320ce5a4f4ddddbff2515eaa9687,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_39_friendships_outgoing(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_39_friendships_outgoing,
        const_str_plain_friendships_outgoing,
#if PYTHON_VERSION >= 330
        const_str_digest_da006593f0dd68ed058b4d90bf10d19d,
#endif
        codeobj_bcc4dd6d7f2cdc1b2f3eb11d84cf4723,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_752d511796b225c99ae604232ccad303,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_3_statuses_lookup( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_3_statuses_lookup,
        const_str_plain_statuses_lookup,
#if PYTHON_VERSION >= 330
        const_str_digest_f94b53fcb401235f7ace70e5b13054dc,
#endif
        codeobj_65f5dfdfe64a5a2f3b29a5ae6904c613,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_40_followers_ids(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_40_followers_ids,
        const_str_plain_followers_ids,
#if PYTHON_VERSION >= 330
        const_str_digest_622a4b6cfe6b5758397e4f2b9d5b4ffa,
#endif
        codeobj_94e979f7ad8522f6307ffbb188083bee,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_ee671456ad77bf6d9095a4663f796692,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_41_followers(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_41_followers,
        const_str_plain_followers,
#if PYTHON_VERSION >= 330
        const_str_digest_7f8e5cdb6b1d80abf810021a12ed733a,
#endif
        codeobj_19d557c35860915b72a22e4a43efbfaa,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_8be43d54e61f3b6b01a346c1ba5054fc,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_42_get_settings(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_42_get_settings,
        const_str_plain_get_settings,
#if PYTHON_VERSION >= 330
        const_str_digest_a1b7d3c3b6f89abee45323018ba91ce3,
#endif
        codeobj_8b4928340945a026c7936958fb9b9d19,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_db8481b718e6868b6f8b952fadfbd81a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_43_set_settings(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_43_set_settings,
        const_str_plain_set_settings,
#if PYTHON_VERSION >= 330
        const_str_digest_fb0627b65aa4e127c274b96bca3f852b,
#endif
        codeobj_f51f7217cbd36622369e03ab5f1a146a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_06999451735b900f32e4cce52a4ace99,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_44_verify_credentials(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_44_verify_credentials,
        const_str_plain_verify_credentials,
#if PYTHON_VERSION >= 330
        const_str_digest_05fbce3583e5a579bf8f75663ce4fd97,
#endif
        codeobj_dd75e9bde9e04364cb8e52ff7cc97169,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_882700d8bd4cef6393e4be98256ab389,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_45_rate_limit_status(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_45_rate_limit_status,
        const_str_plain_rate_limit_status,
#if PYTHON_VERSION >= 330
        const_str_digest_1b3832fbfe9667539901f18ab67148eb,
#endif
        codeobj_eb64591492f915cdf3dcd117e1157421,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_010d1cf9526798a6ed37cb0888b74a79,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_46_set_delivery_device(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_46_set_delivery_device,
        const_str_plain_set_delivery_device,
#if PYTHON_VERSION >= 330
        const_str_digest_15d1d91df570e1ce05e82d1e33268bce,
#endif
        codeobj_1324f5d71873a0dd0efbfc793aa20f3e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_9583c79f21ae46e1ccbd495d8146a4d6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_47_update_profile_colors(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_47_update_profile_colors,
        const_str_plain_update_profile_colors,
#if PYTHON_VERSION >= 330
        const_str_digest_69ded2fb3d38062d248cc7b18d3e0dfd,
#endif
        codeobj_cb98bea3157d9ab578562dc94c3a5bc5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_09229e3d4e2a51bab3c7c3bb7663d7d0,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_48_update_profile_image( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_48_update_profile_image,
        const_str_plain_update_profile_image,
#if PYTHON_VERSION >= 330
        const_str_digest_651dc98e39db510657fcedc61993cbfc,
#endif
        codeobj_7d61f43525aec937819eb91d303aa660,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_92969f760667e1f493ad965ff49eee46,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_49_update_profile_background_image(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_49_update_profile_background_image,
        const_str_plain_update_profile_background_image,
#if PYTHON_VERSION >= 330
        const_str_digest_4de63f19b057aa18bbf6574ef53a17d0,
#endif
        codeobj_97458043ee4b9dada6fe414e54dae771,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_7e73a73d4e07f04e5b4f57f09717a3a6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_4__statuses_lookup(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_4__statuses_lookup,
        const_str_plain__statuses_lookup,
#if PYTHON_VERSION >= 330
        const_str_digest_b2a80a1ed29265bff3e799c44b7d75bc,
#endif
        codeobj_916c110678990919f1a74f25c7ae8de7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_89ace06535690dd3a8ba341162ba6c67,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_50_update_profile_banner(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_50_update_profile_banner,
        const_str_plain_update_profile_banner,
#if PYTHON_VERSION >= 330
        const_str_digest_8eae722029f6152a0a23f8b89d8e61c2,
#endif
        codeobj_f3bc45e07ee294df84f88e63960e44d9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_ef5e9a328337a93a03ee8167ff8bd42c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_51_update_profile(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_51_update_profile,
        const_str_plain_update_profile,
#if PYTHON_VERSION >= 330
        const_str_digest_483bc9ff574d808ea4774e642ac34ecb,
#endif
        codeobj_c9d4c5bff0d02269948281c317988961,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_445b8e5a611c4c0acbaa152db22975b7,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_52_favorites(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_52_favorites,
        const_str_plain_favorites,
#if PYTHON_VERSION >= 330
        const_str_digest_565b527d5304682422919b8a1fd5349e,
#endif
        codeobj_04cd26c47f755cc8d082a966a550203f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_bc5f79134ba4cfb79d1b4fcf5bd87e3c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_53_create_favorite(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_53_create_favorite,
        const_str_plain_create_favorite,
#if PYTHON_VERSION >= 330
        const_str_digest_679314a5b52d2d4f6c06e7d9974468be,
#endif
        codeobj_792fe70121fef6e15c03b996718dd7b4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_de8a49f9d0aaa0c92bf7532265f3c634,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_54_destroy_favorite(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_54_destroy_favorite,
        const_str_plain_destroy_favorite,
#if PYTHON_VERSION >= 330
        const_str_digest_a11ae09cc6fff4c91a41f1df0c6de382,
#endif
        codeobj_d3971143a1e796170d0331aeff6f3e43,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_4ac31e6c9eb193f63b1820b788144c9e,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_55_create_block(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_55_create_block,
        const_str_plain_create_block,
#if PYTHON_VERSION >= 330
        const_str_digest_612580cd99bdcefd40ed2c7188948383,
#endif
        codeobj_a04acbe39cf661016dc67d89b8a317e0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_806c7420fd0e313d1ccd18fe57392a0d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_56_destroy_block(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_56_destroy_block,
        const_str_plain_destroy_block,
#if PYTHON_VERSION >= 330
        const_str_digest_e2b8a1b14aae09068e870c9f25377930,
#endif
        codeobj_d5c8dd3aca257823f9b82da05954a122,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_567891b485c561eb56647b9b4f01e199,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_57_blocks(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_57_blocks,
        const_str_plain_blocks,
#if PYTHON_VERSION >= 330
        const_str_digest_d3a2361ae202e23040117511b6ec4379,
#endif
        codeobj_68e8158894672acef4247c5a14b07981,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_62658d987da2bb3fc3af438e9a683af5,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_58_blocks_ids(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_58_blocks_ids,
        const_str_plain_blocks_ids,
#if PYTHON_VERSION >= 330
        const_str_digest_d00966236b01636a98b6693baf2363d3,
#endif
        codeobj_a2246dde6fbf6c5a04b7d0194da100b3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_eefe8ec72dc1a37e7325cc8109f0417c,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_59_report_spam(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_59_report_spam,
        const_str_plain_report_spam,
#if PYTHON_VERSION >= 330
        const_str_digest_808b83565f2e4813a2cadf5717fe46af,
#endif
        codeobj_83f0ab27baf2b4ee4bebb559b07323c8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_8b8edd03bd68d44df06e8680bbaa789f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_5_user_timeline(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_5_user_timeline,
        const_str_plain_user_timeline,
#if PYTHON_VERSION >= 330
        const_str_digest_88bde37fb2dccbb16c767d94d0909116,
#endif
        codeobj_4a052c9b5d9202790e65ce7d23c3cc97,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_f216853b1486a5e2a12c853e438c42e9,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_60_saved_searches(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_60_saved_searches,
        const_str_plain_saved_searches,
#if PYTHON_VERSION >= 330
        const_str_digest_5d7ae3fa69d744cee0e10ee29f7a8b12,
#endif
        codeobj_9bc5104466090973ca4d199a5b8dc403,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_e65e32e1ad5c89a52e13399091279061,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_61_get_saved_search(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_61_get_saved_search,
        const_str_plain_get_saved_search,
#if PYTHON_VERSION >= 330
        const_str_digest_8f23e8f6c745b7f0856f77415858d0cd,
#endif
        codeobj_9041fde6d27ad33602b87758a101a0f6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_b0efb64b0358cb0119f72d953ff03f37,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_62_create_saved_search(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_62_create_saved_search,
        const_str_plain_create_saved_search,
#if PYTHON_VERSION >= 330
        const_str_digest_30b75129bfc54d96ded03f1b3331096b,
#endif
        codeobj_9b3e99a5de113c8c9505f89113b16cbf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_f6e3f54103d14d447757123fc9e1f5df,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_63_destroy_saved_search(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_63_destroy_saved_search,
        const_str_plain_destroy_saved_search,
#if PYTHON_VERSION >= 330
        const_str_digest_362664de9805359dfc2f9a0e2246546b,
#endif
        codeobj_5687e0f8453ec900cf3fa8d0a04b914b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_23e5cd4e2147e680a9c725f535c4b960,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_64_create_list(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_64_create_list,
        const_str_plain_create_list,
#if PYTHON_VERSION >= 330
        const_str_digest_d96020b03f4161fd4f202922123c709b,
#endif
        codeobj_7a2e83f094ec65bed2718315f4b16d00,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_f71ac90978bc7a9458de53dc8df1a84d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_65_destroy_list(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_65_destroy_list,
        const_str_plain_destroy_list,
#if PYTHON_VERSION >= 330
        const_str_digest_76d28dde72939cf9701efb06feae402b,
#endif
        codeobj_26fe090a948bf12251eeaeae99a36b5d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_627fd97fa680e03f6d71777f60d9650d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_66_update_list(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_66_update_list,
        const_str_plain_update_list,
#if PYTHON_VERSION >= 330
        const_str_digest_69e08e6fc6de624c38c56d4f6953d6ac,
#endif
        codeobj_ff826b63f4298daaf03f35bdf1ccf758,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_c8f3a67339eebb2eb755bd394034951d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_67_lists_all(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_67_lists_all,
        const_str_plain_lists_all,
#if PYTHON_VERSION >= 330
        const_str_digest_51356df55ffc9106e99ddd54fd3883d2,
#endif
        codeobj_a589fbc6c6c4d2e688ed98099928e1bd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_9afabad83130b9166303486347b65f20,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_68_lists_memberships(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_68_lists_memberships,
        const_str_plain_lists_memberships,
#if PYTHON_VERSION >= 330
        const_str_digest_ebc9e95f94a8d9179da0765285d67638,
#endif
        codeobj_675c0e4b9845349f8b88bb49f567baeb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_07eb9f07c84c74670a513477aa4b0f23,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_69_lists_subscriptions(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_69_lists_subscriptions,
        const_str_plain_lists_subscriptions,
#if PYTHON_VERSION >= 330
        const_str_digest_ee72c00a5db8b37e1bc3725f827ef505,
#endif
        codeobj_60dd79ca1617f50c7abfee1eb3871d75,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_86c174cd2c8905fe8fe567931ce895d5,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_6_mentions_timeline(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_6_mentions_timeline,
        const_str_plain_mentions_timeline,
#if PYTHON_VERSION >= 330
        const_str_digest_c3f9e5e7653522b8aaa931fd1de47344,
#endif
        codeobj_c028ba74c751e8a113eebfb453e2176d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_f11a975b85dd2140f7467c867a10608a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_70_list_timeline(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_70_list_timeline,
        const_str_plain_list_timeline,
#if PYTHON_VERSION >= 330
        const_str_digest_3c83afcc81322c46ff39d5c97b1e8ffa,
#endif
        codeobj_a100af1b2674a51af30997000b279aea,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_c7af8385e92a1323e0ffad9de299f5bf,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_71_get_list(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_71_get_list,
        const_str_plain_get_list,
#if PYTHON_VERSION >= 330
        const_str_digest_2d285a07f0074c4ef0b4379ee5b833ca,
#endif
        codeobj_d0d765880c07ffc8e058372487ffba37,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_11e54fbb87091e89143b4323f6712ef8,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_72_add_list_member(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_72_add_list_member,
        const_str_plain_add_list_member,
#if PYTHON_VERSION >= 330
        const_str_digest_28988e33ed956abd088af722965b5d5c,
#endif
        codeobj_365649f4302879e824be94a328a355f2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_78d37c1f54ef33d3da7025bc6b2c802b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_73_remove_list_member(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_73_remove_list_member,
        const_str_plain_remove_list_member,
#if PYTHON_VERSION >= 330
        const_str_digest_28e37a0e30ec7b76e2f64f41a47c896e,
#endif
        codeobj_1a84c706e294e0a34f415ab7921815ba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_aabb67db175cdb2b55a8dbf74a7c234f,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_74_add_list_members( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_74_add_list_members,
        const_str_plain_add_list_members,
#if PYTHON_VERSION >= 330
        const_str_digest_7e81bd2cc3dfbb88aa51a3e3dd08aa40,
#endif
        codeobj_8bb38085ca5fdd860404b08f85f9cf11,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_759ecd650556e808605cc94cab3ed303,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_75__add_list_members(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_75__add_list_members,
        const_str_plain__add_list_members,
#if PYTHON_VERSION >= 330
        const_str_digest_2799ae5a37e5176e4c8ea86ea9b7d7b7,
#endif
        codeobj_7f06e035b9ea779a89051e17a77a4911,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_bb48cd7f766174b99fdc720d0c014766,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_76_remove_list_members( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_76_remove_list_members,
        const_str_plain_remove_list_members,
#if PYTHON_VERSION >= 330
        const_str_digest_2f82eefabf468db807328e640eb73f53,
#endif
        codeobj_ba6c73b3d23ff0b6d21dc9d1b6046e4e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_978374bd9bde6f81405ac169bfeefabb,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_77__remove_list_members(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_77__remove_list_members,
        const_str_plain__remove_list_members,
#if PYTHON_VERSION >= 330
        const_str_digest_363e257218555c565e331ef66987a281,
#endif
        codeobj_0952a2783bc1ed7a10bf97b38b69938e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_985492fc3d37925093d88c0648ed6275,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_78_list_members(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_78_list_members,
        const_str_plain_list_members,
#if PYTHON_VERSION >= 330
        const_str_digest_bf90fe8565be9b1ec6b6d85eaf3804e0,
#endif
        codeobj_075e8b41fd62462bd2f85823e73d1086,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_178b9015b8b333fe13bcaeb3c0163b14,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_79_show_list_member(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_79_show_list_member,
        const_str_plain_show_list_member,
#if PYTHON_VERSION >= 330
        const_str_digest_89a46b5b954d4eba33b465f9747b1236,
#endif
        codeobj_3bdc56fc955f1a280b5e1584b388dcb6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_a61fd80e4b365a71ba9c935f93dda4f0,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_7_related_results(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_7_related_results,
        const_str_plain_related_results,
#if PYTHON_VERSION >= 330
        const_str_digest_6820f38b9cf4f6f75cc3c87e6e91f83d,
#endif
        codeobj_de146b2dec0ae059e88038e4c8d147c9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_8303e4c179f5e998cba680585aa8c2cd,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_80_subscribe_list(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_80_subscribe_list,
        const_str_plain_subscribe_list,
#if PYTHON_VERSION >= 330
        const_str_digest_6225f9cb75d4bac9a74f5302c2a9f5bb,
#endif
        codeobj_149bbff420a576ff844e539212858de3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_7a750f74331b2530dee49577b9d23ee6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_81_unsubscribe_list(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_81_unsubscribe_list,
        const_str_plain_unsubscribe_list,
#if PYTHON_VERSION >= 330
        const_str_digest_f4e5d5ed84ab6513f0d24acff4d86a02,
#endif
        codeobj_cd4dcd0a2466e5af141034d2249eea54,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_212b1fd51e9d2a886c8b632b1e01e542,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_82_list_subscribers(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_82_list_subscribers,
        const_str_plain_list_subscribers,
#if PYTHON_VERSION >= 330
        const_str_digest_e98063d55979bf6aa56048c9e3e3f070,
#endif
        codeobj_d1073e1b567b288f07f07b4eef7e8812,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_ac57a821e7902d5db676dc5d1402fc9d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_83_show_list_subscriber(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_83_show_list_subscriber,
        const_str_plain_show_list_subscriber,
#if PYTHON_VERSION >= 330
        const_str_digest_df0a26594b16b57d38805017a6a21bbc,
#endif
        codeobj_2c606181aa11a70ed866d487ecefc6ed,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_7560d02bf5d90db74ca7f0c4d527a1ca,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_84_trends_available(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_84_trends_available,
        const_str_plain_trends_available,
#if PYTHON_VERSION >= 330
        const_str_digest_3fa4e8e3a69a712952ec4a32468e278a,
#endif
        codeobj_4f55dd9346832b6207ff98409a129c44,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_b723fb08dbad63650f46365a24739dde,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_85_trends_place(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_85_trends_place,
        const_str_plain_trends_place,
#if PYTHON_VERSION >= 330
        const_str_digest_09306c17e3aba90fd078f5b1d7d00ced,
#endif
        codeobj_9d25d8224d9e831eea4a1f2a1e67dc54,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_09063442f5d7a61eda180413305d13a2,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_86_trends_closest(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_86_trends_closest,
        const_str_plain_trends_closest,
#if PYTHON_VERSION >= 330
        const_str_digest_69bfcde34d4fb308921326ac50614cfe,
#endif
        codeobj_06cd88486aafc8cfbc3174b6d3eb6269,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_ee06584f038c3087f8c19cde029e4e76,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_87_search(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_87_search,
        const_str_plain_search,
#if PYTHON_VERSION >= 330
        const_str_digest_618a7ffcb2f21635e473281c4491182b,
#endif
        codeobj_bacee294e619b6f131c31821ee37a73d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_592540e97118d888b37a5ba8e2e119aa,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_88_reverse_geocode(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_88_reverse_geocode,
        const_str_plain_reverse_geocode,
#if PYTHON_VERSION >= 330
        const_str_digest_57f30390d1d25fb7071d2399b5164490,
#endif
        codeobj_53021cfe273709e400f55d9544d30d3b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_b7ffcc238d601b950ccc3fe5b78aa342,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_89_geo_id(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_89_geo_id,
        const_str_plain_geo_id,
#if PYTHON_VERSION >= 330
        const_str_digest_cc7cea676c32de07a5f53327a5a8ca99,
#endif
        codeobj_6918bffb76b9076623af8f76ae6adbbc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_9aee88b4dd118d648a16a63aa71b8b4a,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_8_retweets_of_me(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_8_retweets_of_me,
        const_str_plain_retweets_of_me,
#if PYTHON_VERSION >= 330
        const_str_digest_17da35c39503143982d9656de8125682,
#endif
        codeobj_44fe0ee47feccf7a64396792d6a02023,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_3299a12f6f0d7eff846afc0d562df5c5,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_90_geo_search(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_90_geo_search,
        const_str_plain_geo_search,
#if PYTHON_VERSION >= 330
        const_str_digest_2267a5e5e0ef8ae2ab19d7d4fa3ae731,
#endif
        codeobj_8e1a5caad32d13e1b8a8659f35d4e6ea,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_95f3e76ebd9ac52609ab7456ea730325,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_91_geo_similar_places(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_91_geo_similar_places,
        const_str_plain_geo_similar_places,
#if PYTHON_VERSION >= 330
        const_str_digest_0ad5de10c31e802b5b04470a968c2bff,
#endif
        codeobj_ca6e557aae30210396eb33085a076422,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_df790ea9e071dfbd320d15db065af57b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_92_supported_languages(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_92_supported_languages,
        const_str_plain_supported_languages,
#if PYTHON_VERSION >= 330
        const_str_digest_fb77c2a336f766dce4d63fd0ff1ea3be,
#endif
        codeobj_47346e94767286e71abe9e755d2a5451,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_9f5a3c926723ef90ae0fb2c680781661,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_93_configuration(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_93_configuration,
        const_str_plain_configuration,
#if PYTHON_VERSION >= 330
        const_str_digest_281199dc3e47b43394a8ba5373d1dc53,
#endif
        codeobj_e7c0f20dc88dde0319407ae5901e4a1a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_ed376d057536894260bd5c3dd47dde41,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_94__pack_image( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_94__pack_image,
        const_str_plain__pack_image,
#if PYTHON_VERSION >= 330
        const_str_digest_2913d5d352c29486a324a4ce71584f9e,
#endif
        codeobj_f6aefdbb0490b86bd805a79d125e5dc4,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_1769d5d3970875d9351040fd0d1717c7,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_tweepy$api$$$function_9_get_status(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_tweepy$api$$$function_9_get_status,
        const_str_plain_get_status,
#if PYTHON_VERSION >= 330
        const_str_digest_93055e87ecf6ea7a7e144217536e9ada,
#endif
        codeobj_6d8ebd1d5bc4f6ea7f8fad4ba527731f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_tweepy$api,
        const_str_digest_c84c0c72d2158a4f641721eefcafefe0,
        0
    );


    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_tweepy$api =
{
    PyModuleDef_HEAD_INIT,
    "tweepy.api",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif
#if PYTHON_VERSION >= 330
extern PyObject *const_str_plain___loader__;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( tweepy$api )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_tweepy$api );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("tweepy.api: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("tweepy.api: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in inittweepy$api" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_tweepy$api = Py_InitModule4(
        "tweepy.api",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_tweepy$api = PyModule_Create( &mdef_tweepy$api );
#endif

    moduledict_tweepy$api = MODULE_DICT( module_tweepy$api );

    CHECK_OBJECT( module_tweepy$api );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_eefde7c00c3216345f2e7c1eca9ec9bc, module_tweepy$api );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 330
    UPDATE_STRING_DICT0( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_0_var___qualname__ = NULL;
    PyObject *outline_0_var___module__ = NULL;
    PyObject *outline_0_var___doc__ = NULL;
    PyObject *outline_0_var___init__ = NULL;
    PyObject *outline_0_var_home_timeline = NULL;
    PyObject *outline_0_var_statuses_lookup = NULL;
    PyObject *outline_0_var__statuses_lookup = NULL;
    PyObject *outline_0_var_user_timeline = NULL;
    PyObject *outline_0_var_mentions_timeline = NULL;
    PyObject *outline_0_var_related_results = NULL;
    PyObject *outline_0_var_retweets_of_me = NULL;
    PyObject *outline_0_var_get_status = NULL;
    PyObject *outline_0_var_update_status = NULL;
    PyObject *outline_0_var_media_upload = NULL;
    PyObject *outline_0_var_update_with_media = NULL;
    PyObject *outline_0_var_destroy_status = NULL;
    PyObject *outline_0_var_retweet = NULL;
    PyObject *outline_0_var_retweets = NULL;
    PyObject *outline_0_var_retweeters = NULL;
    PyObject *outline_0_var_get_user = NULL;
    PyObject *outline_0_var_get_oembed = NULL;
    PyObject *outline_0_var_lookup_users = NULL;
    PyObject *outline_0_var__lookup_users = NULL;
    PyObject *outline_0_var_me = NULL;
    PyObject *outline_0_var_search_users = NULL;
    PyObject *outline_0_var_suggested_users = NULL;
    PyObject *outline_0_var_suggested_categories = NULL;
    PyObject *outline_0_var_suggested_users_tweets = NULL;
    PyObject *outline_0_var_direct_messages = NULL;
    PyObject *outline_0_var_get_direct_message = NULL;
    PyObject *outline_0_var_sent_direct_messages = NULL;
    PyObject *outline_0_var_send_direct_message = NULL;
    PyObject *outline_0_var_destroy_direct_message = NULL;
    PyObject *outline_0_var_create_friendship = NULL;
    PyObject *outline_0_var_destroy_friendship = NULL;
    PyObject *outline_0_var_show_friendship = NULL;
    PyObject *outline_0_var_lookup_friendships = NULL;
    PyObject *outline_0_var__lookup_friendships = NULL;
    PyObject *outline_0_var_friends_ids = NULL;
    PyObject *outline_0_var_friends = NULL;
    PyObject *outline_0_var_friendships_incoming = NULL;
    PyObject *outline_0_var_friendships_outgoing = NULL;
    PyObject *outline_0_var_followers_ids = NULL;
    PyObject *outline_0_var_followers = NULL;
    PyObject *outline_0_var_get_settings = NULL;
    PyObject *outline_0_var_set_settings = NULL;
    PyObject *outline_0_var_verify_credentials = NULL;
    PyObject *outline_0_var_rate_limit_status = NULL;
    PyObject *outline_0_var_set_delivery_device = NULL;
    PyObject *outline_0_var_update_profile_colors = NULL;
    PyObject *outline_0_var_update_profile_image = NULL;
    PyObject *outline_0_var_update_profile_background_image = NULL;
    PyObject *outline_0_var_update_profile_banner = NULL;
    PyObject *outline_0_var_update_profile = NULL;
    PyObject *outline_0_var_favorites = NULL;
    PyObject *outline_0_var_create_favorite = NULL;
    PyObject *outline_0_var_destroy_favorite = NULL;
    PyObject *outline_0_var_create_block = NULL;
    PyObject *outline_0_var_destroy_block = NULL;
    PyObject *outline_0_var_blocks = NULL;
    PyObject *outline_0_var_blocks_ids = NULL;
    PyObject *outline_0_var_report_spam = NULL;
    PyObject *outline_0_var_saved_searches = NULL;
    PyObject *outline_0_var_get_saved_search = NULL;
    PyObject *outline_0_var_create_saved_search = NULL;
    PyObject *outline_0_var_destroy_saved_search = NULL;
    PyObject *outline_0_var_create_list = NULL;
    PyObject *outline_0_var_destroy_list = NULL;
    PyObject *outline_0_var_update_list = NULL;
    PyObject *outline_0_var_lists_all = NULL;
    PyObject *outline_0_var_lists_memberships = NULL;
    PyObject *outline_0_var_lists_subscriptions = NULL;
    PyObject *outline_0_var_list_timeline = NULL;
    PyObject *outline_0_var_get_list = NULL;
    PyObject *outline_0_var_add_list_member = NULL;
    PyObject *outline_0_var_remove_list_member = NULL;
    PyObject *outline_0_var_add_list_members = NULL;
    PyObject *outline_0_var__add_list_members = NULL;
    PyObject *outline_0_var_remove_list_members = NULL;
    PyObject *outline_0_var__remove_list_members = NULL;
    PyObject *outline_0_var_list_members = NULL;
    PyObject *outline_0_var_show_list_member = NULL;
    PyObject *outline_0_var_subscribe_list = NULL;
    PyObject *outline_0_var_unsubscribe_list = NULL;
    PyObject *outline_0_var_list_subscribers = NULL;
    PyObject *outline_0_var_show_list_subscriber = NULL;
    PyObject *outline_0_var_trends_available = NULL;
    PyObject *outline_0_var_trends_place = NULL;
    PyObject *outline_0_var_trends_closest = NULL;
    PyObject *outline_0_var_search = NULL;
    PyObject *outline_0_var_reverse_geocode = NULL;
    PyObject *outline_0_var_geo_id = NULL;
    PyObject *outline_0_var_geo_search = NULL;
    PyObject *outline_0_var_geo_similar_places = NULL;
    PyObject *outline_0_var_supported_languages = NULL;
    PyObject *outline_0_var_configuration = NULL;
    PyObject *outline_0_var__pack_image = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_args_element_name_13;
    PyObject *tmp_args_element_name_14;
    PyObject *tmp_args_element_name_15;
    PyObject *tmp_args_element_name_16;
    PyObject *tmp_args_element_name_17;
    PyObject *tmp_args_element_name_18;
    PyObject *tmp_args_element_name_19;
    PyObject *tmp_args_element_name_20;
    PyObject *tmp_args_element_name_21;
    PyObject *tmp_args_element_name_22;
    PyObject *tmp_args_element_name_23;
    PyObject *tmp_args_element_name_24;
    PyObject *tmp_args_element_name_25;
    PyObject *tmp_args_element_name_26;
    PyObject *tmp_args_element_name_27;
    PyObject *tmp_args_element_name_28;
    PyObject *tmp_args_element_name_29;
    PyObject *tmp_args_element_name_30;
    PyObject *tmp_args_element_name_31;
    PyObject *tmp_args_element_name_32;
    PyObject *tmp_args_element_name_33;
    PyObject *tmp_args_element_name_34;
    PyObject *tmp_args_element_name_35;
    PyObject *tmp_args_element_name_36;
    PyObject *tmp_args_element_name_37;
    PyObject *tmp_args_element_name_38;
    PyObject *tmp_args_element_name_39;
    PyObject *tmp_args_element_name_40;
    PyObject *tmp_args_element_name_41;
    PyObject *tmp_args_element_name_42;
    PyObject *tmp_args_element_name_43;
    PyObject *tmp_args_element_name_44;
    PyObject *tmp_args_element_name_45;
    PyObject *tmp_args_element_name_46;
    PyObject *tmp_args_element_name_47;
    PyObject *tmp_args_element_name_48;
    PyObject *tmp_args_element_name_49;
    PyObject *tmp_args_element_name_50;
    PyObject *tmp_args_element_name_51;
    PyObject *tmp_args_element_name_52;
    PyObject *tmp_args_element_name_53;
    PyObject *tmp_args_element_name_54;
    PyObject *tmp_args_element_name_55;
    PyObject *tmp_args_element_name_56;
    PyObject *tmp_args_element_name_57;
    PyObject *tmp_args_element_name_58;
    PyObject *tmp_args_element_name_59;
    PyObject *tmp_args_element_name_60;
    PyObject *tmp_args_element_name_61;
    PyObject *tmp_args_element_name_62;
    PyObject *tmp_args_element_name_63;
    PyObject *tmp_args_element_name_64;
    PyObject *tmp_args_element_name_65;
    PyObject *tmp_args_element_name_66;
    PyObject *tmp_args_element_name_67;
    PyObject *tmp_args_element_name_68;
    PyObject *tmp_args_element_name_69;
    PyObject *tmp_args_element_name_70;
    PyObject *tmp_args_element_name_71;
    PyObject *tmp_args_element_name_72;
    PyObject *tmp_args_element_name_73;
    PyObject *tmp_args_element_name_74;
    PyObject *tmp_args_element_name_75;
    PyObject *tmp_args_element_name_76;
    PyObject *tmp_args_element_name_77;
    PyObject *tmp_args_element_name_78;
    PyObject *tmp_args_element_name_79;
    PyObject *tmp_args_element_name_80;
    PyObject *tmp_args_element_name_81;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_bases_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_called_name_52;
    PyObject *tmp_called_name_53;
    PyObject *tmp_called_name_54;
    PyObject *tmp_called_name_55;
    PyObject *tmp_called_name_56;
    PyObject *tmp_called_name_57;
    PyObject *tmp_called_name_58;
    PyObject *tmp_called_name_59;
    PyObject *tmp_called_name_60;
    PyObject *tmp_called_name_61;
    PyObject *tmp_called_name_62;
    PyObject *tmp_called_name_63;
    PyObject *tmp_called_name_64;
    PyObject *tmp_called_name_65;
    PyObject *tmp_called_name_66;
    PyObject *tmp_called_name_67;
    PyObject *tmp_called_name_68;
    PyObject *tmp_called_name_69;
    PyObject *tmp_called_name_70;
    PyObject *tmp_called_name_71;
    PyObject *tmp_called_name_72;
    PyObject *tmp_called_name_73;
    PyObject *tmp_called_name_74;
    PyObject *tmp_called_name_75;
    PyObject *tmp_called_name_76;
    PyObject *tmp_called_name_77;
    PyObject *tmp_called_name_78;
    PyObject *tmp_called_name_79;
    PyObject *tmp_called_name_80;
    PyObject *tmp_called_name_81;
    PyObject *tmp_called_name_82;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_defaults_4;
    PyObject *tmp_defaults_5;
    PyObject *tmp_defaults_6;
    PyObject *tmp_defaults_7;
    PyObject *tmp_defaults_8;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *tmp_fromlist_name_1;
    PyObject *tmp_fromlist_name_2;
    PyObject *tmp_fromlist_name_3;
    PyObject *tmp_fromlist_name_4;
    PyObject *tmp_fromlist_name_5;
    PyObject *tmp_fromlist_name_6;
    PyObject *tmp_fromlist_name_7;
    PyObject *tmp_globals_name_1;
    PyObject *tmp_globals_name_2;
    PyObject *tmp_globals_name_3;
    PyObject *tmp_globals_name_4;
    PyObject *tmp_globals_name_5;
    PyObject *tmp_globals_name_6;
    PyObject *tmp_globals_name_7;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_source_1;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    PyObject *tmp_key_name_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_level_name_1;
    PyObject *tmp_level_name_2;
    PyObject *tmp_level_name_3;
    PyObject *tmp_level_name_4;
    PyObject *tmp_level_name_5;
    PyObject *tmp_level_name_6;
    PyObject *tmp_level_name_7;
    PyObject *tmp_locals_name_1;
    PyObject *tmp_locals_name_2;
    PyObject *tmp_locals_name_3;
    PyObject *tmp_locals_name_4;
    PyObject *tmp_locals_name_5;
    PyObject *tmp_locals_name_6;
    PyObject *tmp_locals_name_7;
    PyObject *tmp_metaclass_name_1;
    PyObject *tmp_name_name_1;
    PyObject *tmp_name_name_2;
    PyObject *tmp_name_name_3;
    PyObject *tmp_name_name_4;
    PyObject *tmp_name_name_5;
    PyObject *tmp_name_name_6;
    PyObject *tmp_name_name_7;
    PyObject *tmp_outline_return_value_1;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_staticmethod_arg_1;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_type_arg_1;
    static struct Nuitka_FrameObject *cache_frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 = NULL;

    struct Nuitka_FrameObject *frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2;

    struct Nuitka_FrameObject *frame_f082c71637b55fc69b5f26008da43125;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    tmp_outline_return_value_1 = NULL;
    // Locals dictionary setup.
PyObject *locals_dict_1 = PyDict_New();


    // Module code.
    tmp_assign_source_1 = Py_None;
    UPDATE_STRING_DICT0( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = module_filename_obj;
    UPDATE_STRING_DICT0( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = metapath_based_loader;
    UPDATE_STRING_DICT0( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___loader__, tmp_assign_source_3 );
    // Frame without reuse.
    frame_f082c71637b55fc69b5f26008da43125 = MAKE_MODULE_FRAME( codeobj_f082c71637b55fc69b5f26008da43125, module_tweepy$api );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_f082c71637b55fc69b5f26008da43125 );
    assert( Py_REFCNT( frame_f082c71637b55fc69b5f26008da43125 ) == 2 );

    // Framed code:
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 1;
    {
        PyObject *module = PyImport_ImportModule("importlib._bootstrap");
        if (likely( module != NULL ))
        {
            tmp_called_name_1 = PyObject_GetAttr( module, const_str_plain_ModuleSpec );
        }
        else
        {
            tmp_called_name_1 = NULL;
        }
    }

    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_str_digest_eefde7c00c3216345f2e7c1eca9ec9bc;
    tmp_args_element_name_2 = metapath_based_loader;
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 1;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___spec__, tmp_assign_source_4 );
    tmp_assign_source_5 = Py_None;
    UPDATE_STRING_DICT0( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_5 );
    tmp_assign_source_6 = const_str_plain_tweepy;
    UPDATE_STRING_DICT0( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_6 );
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 5;
    tmp_import_name_from_1 = PyImport_ImportModule("__future__");
    assert( tmp_import_name_from_1 != NULL );
    tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_print_function );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 5;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_print_function, tmp_assign_source_7 );
    tmp_name_name_1 = const_str_plain_os;
    tmp_globals_name_1 = (PyObject *)moduledict_tweepy$api;
    tmp_locals_name_1 = Py_None;
    tmp_fromlist_name_1 = Py_None;
    tmp_level_name_1 = const_int_0;
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 7;
    tmp_assign_source_8 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 7;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_8 );
    tmp_name_name_2 = const_str_plain_mimetypes;
    tmp_globals_name_2 = (PyObject *)moduledict_tweepy$api;
    tmp_locals_name_2 = Py_None;
    tmp_fromlist_name_2 = Py_None;
    tmp_level_name_2 = const_int_0;
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 8;
    tmp_assign_source_9 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 8;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_mimetypes, tmp_assign_source_9 );
    tmp_name_name_3 = const_str_plain_six;
    tmp_globals_name_3 = (PyObject *)moduledict_tweepy$api;
    tmp_locals_name_3 = Py_None;
    tmp_fromlist_name_3 = Py_None;
    tmp_level_name_3 = const_int_0;
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 10;
    tmp_assign_source_10 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 10;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_six, tmp_assign_source_10 );
    tmp_name_name_4 = const_str_digest_8f8266b0511b01bec41e7a400426b34f;
    tmp_globals_name_4 = (PyObject *)moduledict_tweepy$api;
    tmp_locals_name_4 = Py_None;
    tmp_fromlist_name_4 = const_tuple_str_plain_bind_api_tuple;
    tmp_level_name_4 = const_int_0;
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 12;
    tmp_import_name_from_2 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 12;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_bind_api );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 12;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_bind_api, tmp_assign_source_11 );
    tmp_name_name_5 = const_str_digest_4fe4e33419813bebd8b0147aaca0d197;
    tmp_globals_name_5 = (PyObject *)moduledict_tweepy$api;
    tmp_locals_name_5 = Py_None;
    tmp_fromlist_name_5 = const_tuple_str_plain_TweepError_tuple;
    tmp_level_name_5 = const_int_0;
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 13;
    tmp_import_name_from_3 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
    if ( tmp_import_name_from_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 13;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_TweepError );
    Py_DECREF( tmp_import_name_from_3 );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 13;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_TweepError, tmp_assign_source_12 );
    tmp_name_name_6 = const_str_digest_58ab37ac2c9f453dd3b8cd2f61be2841;
    tmp_globals_name_6 = (PyObject *)moduledict_tweepy$api;
    tmp_locals_name_6 = Py_None;
    tmp_fromlist_name_6 = const_tuple_str_plain_ModelParser_str_plain_Parser_tuple;
    tmp_level_name_6 = const_int_0;
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 14;
    tmp_assign_source_13 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 14;

        goto frame_exception_exit_1;
    }
    assert( tmp_import_from_1__module == NULL );
    tmp_import_from_1__module = tmp_assign_source_13;

    // Tried code:
    tmp_import_name_from_4 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_4 );
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_ModelParser );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 14;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_ModelParser, tmp_assign_source_14 );
    tmp_import_name_from_5 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_5 );
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_Parser );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 14;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_Parser, tmp_assign_source_15 );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    tmp_name_name_7 = const_str_digest_42e125dde2b0dfbc83d32ab394284b81;
    tmp_globals_name_7 = (PyObject *)moduledict_tweepy$api;
    tmp_locals_name_7 = Py_None;
    tmp_fromlist_name_7 = const_tuple_str_plain_list_to_csv_tuple;
    tmp_level_name_7 = const_int_0;
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 15;
    tmp_import_name_from_6 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7 );
    if ( tmp_import_name_from_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_list_to_csv );
    Py_DECREF( tmp_import_name_from_6 );
    if ( tmp_assign_source_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_list_to_csv, tmp_assign_source_16 );
    tmp_assign_source_17 = const_tuple_type_object_tuple;
    assert( tmp_class_creation_1__bases == NULL );
    Py_INCREF( tmp_assign_source_17 );
    tmp_class_creation_1__bases = tmp_assign_source_17;

    tmp_assign_source_18 = PyDict_New();
    assert( tmp_class_creation_1__class_decl_dict == NULL );
    tmp_class_creation_1__class_decl_dict = tmp_assign_source_18;

    // Tried code:
    tmp_compare_left_1 = const_str_plain_metaclass;
    tmp_compare_right_1 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_1 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_1 );
    tmp_key_name_1 = const_str_plain_metaclass;
    tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_metaclass_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_2;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_subscribed_name_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = const_int_0;
    tmp_type_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_type_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_2;
    }
    tmp_metaclass_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    Py_DECREF( tmp_type_arg_1 );
    if ( tmp_metaclass_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_2;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_1 );
    condexpr_end_2:;
    condexpr_end_1:;
    tmp_bases_name_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_bases_name_1 );
    tmp_assign_source_19 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
    if ( tmp_assign_source_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_1 );

        exception_lineno = 18;

        goto try_except_handler_2;
    }
    Py_DECREF( tmp_metaclass_name_1 );
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_19;

    tmp_compare_left_2 = const_str_plain_metaclass;
    tmp_compare_right_2 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_2 );
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_2;
    }
    branch_no_1:;
    tmp_hasattr_source_1 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_1 );
    tmp_hasattr_attr_1 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_1, tmp_hasattr_attr_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_source_name_1 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___prepare__ );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = const_str_plain_API;
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
    tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_1 );
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 18;
    tmp_assign_source_20 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_2;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_assign_source_20 = PyDict_New();
    condexpr_end_3:;
    assert( tmp_class_creation_1__prepared == NULL );
    tmp_class_creation_1__prepared = tmp_assign_source_20;

    tmp_set_locals = tmp_class_creation_1__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_1);
    locals_dict_1 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_22 = const_str_digest_eefde7c00c3216345f2e7c1eca9ec9bc;
    assert( outline_0_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_22 );
    outline_0_var___module__ = tmp_assign_source_22;

    tmp_assign_source_23 = const_str_digest_61a5babeef606f6faa0f7b3dc0cd5558;
    assert( outline_0_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_23 );
    outline_0_var___doc__ = tmp_assign_source_23;

    tmp_assign_source_24 = const_str_plain_API;
    assert( outline_0_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_24 );
    outline_0_var___qualname__ = tmp_assign_source_24;

    tmp_defaults_1 = const_tuple_33a1f4f5e6d8f90931ccedc9e2911441_tuple;
    Py_INCREF( tmp_defaults_1 );
    tmp_assign_source_25 = MAKE_FUNCTION_tweepy$api$$$function_1___init__( tmp_defaults_1 );
    assert( outline_0_var___init__ == NULL );
    outline_0_var___init__ = tmp_assign_source_25;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2, codeobj_7dcd7b08d709bef50d9b0cd8ae5ecd8c, module_tweepy$api, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 = cache_frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_3 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_3 = MAKE_FUNCTION_tweepy$api$$$function_2_home_timeline(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 83;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_26 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        type_description_2 = "NooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_home_timeline == NULL );
    outline_0_var_home_timeline = tmp_assign_source_26;

    tmp_defaults_2 = const_tuple_none_none_none_tuple;
    Py_INCREF( tmp_defaults_2 );
    tmp_assign_source_27 = MAKE_FUNCTION_tweepy$api$$$function_3_statuses_lookup( tmp_defaults_2 );
    assert( outline_0_var_statuses_lookup == NULL );
    outline_0_var_statuses_lookup = tmp_assign_source_27;

    tmp_called_name_4 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_4 = MAKE_FUNCTION_tweepy$api$$$function_4__statuses_lookup(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 101;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_assign_source_28 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 101;
        type_description_2 = "NooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var__statuses_lookup == NULL );
    outline_0_var__statuses_lookup = tmp_assign_source_28;

    tmp_called_name_5 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_5 = MAKE_FUNCTION_tweepy$api$$$function_5_user_timeline(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 114;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_assign_source_29 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_assign_source_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 114;
        type_description_2 = "NoooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_user_timeline == NULL );
    outline_0_var_user_timeline = tmp_assign_source_29;

    tmp_called_name_6 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_6 = MAKE_FUNCTION_tweepy$api$$$function_6_mentions_timeline(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 127;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_assign_source_30 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_assign_source_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 127;
        type_description_2 = "NooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_mentions_timeline == NULL );
    outline_0_var_mentions_timeline = tmp_assign_source_30;

    tmp_called_name_7 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_7 = MAKE_FUNCTION_tweepy$api$$$function_7_related_results(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 140;
    {
        PyObject *call_args[] = { tmp_args_element_name_7 };
        tmp_assign_source_31 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        type_description_2 = "NoooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_related_results == NULL );
    outline_0_var_related_results = tmp_assign_source_31;

    tmp_called_name_8 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_8 = MAKE_FUNCTION_tweepy$api$$$function_8_retweets_of_me(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 153;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_assign_source_32 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_args_element_name_8 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 153;
        type_description_2 = "NooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_retweets_of_me == NULL );
    outline_0_var_retweets_of_me = tmp_assign_source_32;

    tmp_called_name_9 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_9 = MAKE_FUNCTION_tweepy$api$$$function_9_get_status(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 166;
    {
        PyObject *call_args[] = { tmp_args_element_name_9 };
        tmp_assign_source_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_args_element_name_9 );
    if ( tmp_assign_source_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 166;
        type_description_2 = "NoooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_get_status == NULL );
    outline_0_var_get_status = tmp_assign_source_33;

    tmp_assign_source_34 = MAKE_FUNCTION_tweepy$api$$$function_10_update_status(  );
    assert( outline_0_var_update_status == NULL );
    outline_0_var_update_status = tmp_assign_source_34;

    tmp_assign_source_35 = MAKE_FUNCTION_tweepy$api$$$function_11_media_upload(  );
    assert( outline_0_var_media_upload == NULL );
    outline_0_var_media_upload = tmp_assign_source_35;

    tmp_assign_source_36 = MAKE_FUNCTION_tweepy$api$$$function_12_update_with_media(  );
    assert( outline_0_var_update_with_media == NULL );
    outline_0_var_update_with_media = tmp_assign_source_36;

    tmp_called_name_10 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_10 = MAKE_FUNCTION_tweepy$api$$$function_13_destroy_status(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 234;
    {
        PyObject *call_args[] = { tmp_args_element_name_10 };
        tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_args_element_name_10 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 234;
        type_description_2 = "NoooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_destroy_status == NULL );
    outline_0_var_destroy_status = tmp_assign_source_37;

    tmp_called_name_11 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_11 = MAKE_FUNCTION_tweepy$api$$$function_14_retweet(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 248;
    {
        PyObject *call_args[] = { tmp_args_element_name_11 };
        tmp_assign_source_38 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
    }

    Py_DECREF( tmp_args_element_name_11 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 248;
        type_description_2 = "NooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_retweet == NULL );
    outline_0_var_retweet = tmp_assign_source_38;

    tmp_called_name_12 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_12 = MAKE_FUNCTION_tweepy$api$$$function_15_retweets(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 262;
    {
        PyObject *call_args[] = { tmp_args_element_name_12 };
        tmp_assign_source_39 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
    }

    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_assign_source_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        type_description_2 = "NoooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_retweets == NULL );
    outline_0_var_retweets = tmp_assign_source_39;

    tmp_called_name_13 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_13 = MAKE_FUNCTION_tweepy$api$$$function_16_retweeters(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 275;
    {
        PyObject *call_args[] = { tmp_args_element_name_13 };
        tmp_assign_source_40 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
    }

    Py_DECREF( tmp_args_element_name_13 );
    if ( tmp_assign_source_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;
        type_description_2 = "NooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_retweeters == NULL );
    outline_0_var_retweeters = tmp_assign_source_40;

    tmp_called_name_14 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_14 = MAKE_FUNCTION_tweepy$api$$$function_17_get_user(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 287;
    {
        PyObject *call_args[] = { tmp_args_element_name_14 };
        tmp_assign_source_41 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
    }

    Py_DECREF( tmp_args_element_name_14 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 287;
        type_description_2 = "NoooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_get_user == NULL );
    outline_0_var_get_user = tmp_assign_source_41;

    tmp_called_name_15 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_15 = MAKE_FUNCTION_tweepy$api$$$function_18_get_oembed(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 299;
    {
        PyObject *call_args[] = { tmp_args_element_name_15 };
        tmp_assign_source_42 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
    }

    Py_DECREF( tmp_args_element_name_15 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;
        type_description_2 = "NooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_get_oembed == NULL );
    outline_0_var_get_oembed = tmp_assign_source_42;

    tmp_defaults_3 = const_tuple_none_none_none_tuple;
    Py_INCREF( tmp_defaults_3 );
    tmp_assign_source_43 = MAKE_FUNCTION_tweepy$api$$$function_19_lookup_users( tmp_defaults_3 );
    assert( outline_0_var_lookup_users == NULL );
    outline_0_var_lookup_users = tmp_assign_source_43;

    tmp_called_name_16 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_16 = MAKE_FUNCTION_tweepy$api$$$function_20__lookup_users(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 324;
    {
        PyObject *call_args[] = { tmp_args_element_name_16 };
        tmp_assign_source_44 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
    }

    Py_DECREF( tmp_args_element_name_16 );
    if ( tmp_assign_source_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 324;
        type_description_2 = "NooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var__lookup_users == NULL );
    outline_0_var__lookup_users = tmp_assign_source_44;

    tmp_assign_source_45 = MAKE_FUNCTION_tweepy$api$$$function_21_me(  );
    assert( outline_0_var_me == NULL );
    outline_0_var_me = tmp_assign_source_45;

    tmp_called_name_17 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_17 = MAKE_FUNCTION_tweepy$api$$$function_22_search_users(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 340;
    {
        PyObject *call_args[] = { tmp_args_element_name_17 };
        tmp_assign_source_46 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
    }

    Py_DECREF( tmp_args_element_name_17 );
    if ( tmp_assign_source_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;
        type_description_2 = "NooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_search_users == NULL );
    outline_0_var_search_users = tmp_assign_source_46;

    tmp_called_name_18 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_18 = MAKE_FUNCTION_tweepy$api$$$function_23_suggested_users(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 353;
    {
        PyObject *call_args[] = { tmp_args_element_name_18 };
        tmp_assign_source_47 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
    }

    Py_DECREF( tmp_args_element_name_18 );
    if ( tmp_assign_source_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 353;
        type_description_2 = "NoooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_suggested_users == NULL );
    outline_0_var_suggested_users = tmp_assign_source_47;

    tmp_called_name_19 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_19 = MAKE_FUNCTION_tweepy$api$$$function_24_suggested_categories(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 366;
    {
        PyObject *call_args[] = { tmp_args_element_name_19 };
        tmp_assign_source_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
    }

    Py_DECREF( tmp_args_element_name_19 );
    if ( tmp_assign_source_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 366;
        type_description_2 = "NooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_suggested_categories == NULL );
    outline_0_var_suggested_categories = tmp_assign_source_48;

    tmp_called_name_20 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_20 = MAKE_FUNCTION_tweepy$api$$$function_25_suggested_users_tweets(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 379;
    {
        PyObject *call_args[] = { tmp_args_element_name_20 };
        tmp_assign_source_49 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
    }

    Py_DECREF( tmp_args_element_name_20 );
    if ( tmp_assign_source_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 379;
        type_description_2 = "NoooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_suggested_users_tweets == NULL );
    outline_0_var_suggested_users_tweets = tmp_assign_source_49;

    tmp_called_name_21 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_21 = MAKE_FUNCTION_tweepy$api$$$function_26_direct_messages(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 392;
    {
        PyObject *call_args[] = { tmp_args_element_name_21 };
        tmp_assign_source_50 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, call_args );
    }

    Py_DECREF( tmp_args_element_name_21 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 392;
        type_description_2 = "NooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_direct_messages == NULL );
    outline_0_var_direct_messages = tmp_assign_source_50;

    tmp_called_name_22 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_22 = MAKE_FUNCTION_tweepy$api$$$function_27_get_direct_message(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 405;
    {
        PyObject *call_args[] = { tmp_args_element_name_22 };
        tmp_assign_source_51 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_22, call_args );
    }

    Py_DECREF( tmp_args_element_name_22 );
    if ( tmp_assign_source_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 405;
        type_description_2 = "NoooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_get_direct_message == NULL );
    outline_0_var_get_direct_message = tmp_assign_source_51;

    tmp_called_name_23 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_23 = MAKE_FUNCTION_tweepy$api$$$function_28_sent_direct_messages(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 418;
    {
        PyObject *call_args[] = { tmp_args_element_name_23 };
        tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_23, call_args );
    }

    Py_DECREF( tmp_args_element_name_23 );
    if ( tmp_assign_source_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 418;
        type_description_2 = "NooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_sent_direct_messages == NULL );
    outline_0_var_sent_direct_messages = tmp_assign_source_52;

    tmp_called_name_24 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_24 = MAKE_FUNCTION_tweepy$api$$$function_29_send_direct_message(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 431;
    {
        PyObject *call_args[] = { tmp_args_element_name_24 };
        tmp_assign_source_53 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_24, call_args );
    }

    Py_DECREF( tmp_args_element_name_24 );
    if ( tmp_assign_source_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 431;
        type_description_2 = "NoooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_send_direct_message == NULL );
    outline_0_var_send_direct_message = tmp_assign_source_53;

    tmp_called_name_25 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_25 = MAKE_FUNCTION_tweepy$api$$$function_30_destroy_direct_message(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 445;
    {
        PyObject *call_args[] = { tmp_args_element_name_25 };
        tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_25, call_args );
    }

    Py_DECREF( tmp_args_element_name_25 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 445;
        type_description_2 = "NooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_destroy_direct_message == NULL );
    outline_0_var_destroy_direct_message = tmp_assign_source_54;

    tmp_called_name_26 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_26 = MAKE_FUNCTION_tweepy$api$$$function_31_create_friendship(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 459;
    {
        PyObject *call_args[] = { tmp_args_element_name_26 };
        tmp_assign_source_55 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_26, call_args );
    }

    Py_DECREF( tmp_args_element_name_26 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 459;
        type_description_2 = "NoooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_create_friendship == NULL );
    outline_0_var_create_friendship = tmp_assign_source_55;

    tmp_called_name_27 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_27 = MAKE_FUNCTION_tweepy$api$$$function_32_destroy_friendship(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 473;
    {
        PyObject *call_args[] = { tmp_args_element_name_27 };
        tmp_assign_source_56 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_27, call_args );
    }

    Py_DECREF( tmp_args_element_name_27 );
    if ( tmp_assign_source_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 473;
        type_description_2 = "NooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_destroy_friendship == NULL );
    outline_0_var_destroy_friendship = tmp_assign_source_56;

    tmp_called_name_28 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_28 = MAKE_FUNCTION_tweepy$api$$$function_33_show_friendship(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 487;
    {
        PyObject *call_args[] = { tmp_args_element_name_28 };
        tmp_assign_source_57 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_28, call_args );
    }

    Py_DECREF( tmp_args_element_name_28 );
    if ( tmp_assign_source_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 487;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_show_friendship == NULL );
    outline_0_var_show_friendship = tmp_assign_source_57;

    tmp_defaults_4 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_4 );
    tmp_assign_source_58 = MAKE_FUNCTION_tweepy$api$$$function_34_lookup_friendships( tmp_defaults_4 );
    assert( outline_0_var_lookup_friendships == NULL );
    outline_0_var_lookup_friendships = tmp_assign_source_58;

    tmp_called_name_29 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_29 = MAKE_FUNCTION_tweepy$api$$$function_35__lookup_friendships(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 504;
    {
        PyObject *call_args[] = { tmp_args_element_name_29 };
        tmp_assign_source_59 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, call_args );
    }

    Py_DECREF( tmp_args_element_name_29 );
    if ( tmp_assign_source_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 504;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var__lookup_friendships == NULL );
    outline_0_var__lookup_friendships = tmp_assign_source_59;

    tmp_called_name_30 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_30 = MAKE_FUNCTION_tweepy$api$$$function_36_friends_ids(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 517;
    {
        PyObject *call_args[] = { tmp_args_element_name_30 };
        tmp_assign_source_60 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_30, call_args );
    }

    Py_DECREF( tmp_args_element_name_30 );
    if ( tmp_assign_source_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 517;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_friends_ids == NULL );
    outline_0_var_friends_ids = tmp_assign_source_60;

    tmp_called_name_31 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_31 = MAKE_FUNCTION_tweepy$api$$$function_37_friends(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 529;
    {
        PyObject *call_args[] = { tmp_args_element_name_31 };
        tmp_assign_source_61 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_31, call_args );
    }

    Py_DECREF( tmp_args_element_name_31 );
    if ( tmp_assign_source_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 529;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_friends == NULL );
    outline_0_var_friends = tmp_assign_source_61;

    tmp_called_name_32 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_32 = MAKE_FUNCTION_tweepy$api$$$function_38_friendships_incoming(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 541;
    {
        PyObject *call_args[] = { tmp_args_element_name_32 };
        tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_32, call_args );
    }

    Py_DECREF( tmp_args_element_name_32 );
    if ( tmp_assign_source_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 541;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_friendships_incoming == NULL );
    outline_0_var_friendships_incoming = tmp_assign_source_62;

    tmp_called_name_33 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_33 = MAKE_FUNCTION_tweepy$api$$$function_39_friendships_outgoing(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 553;
    {
        PyObject *call_args[] = { tmp_args_element_name_33 };
        tmp_assign_source_63 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_33, call_args );
    }

    Py_DECREF( tmp_args_element_name_33 );
    if ( tmp_assign_source_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 553;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_friendships_outgoing == NULL );
    outline_0_var_friendships_outgoing = tmp_assign_source_63;

    tmp_called_name_34 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_34 = MAKE_FUNCTION_tweepy$api$$$function_40_followers_ids(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 565;
    {
        PyObject *call_args[] = { tmp_args_element_name_34 };
        tmp_assign_source_64 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_34, call_args );
    }

    Py_DECREF( tmp_args_element_name_34 );
    if ( tmp_assign_source_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 565;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_followers_ids == NULL );
    outline_0_var_followers_ids = tmp_assign_source_64;

    tmp_called_name_35 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_35 = MAKE_FUNCTION_tweepy$api$$$function_41_followers(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 577;
    {
        PyObject *call_args[] = { tmp_args_element_name_35 };
        tmp_assign_source_65 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_35, call_args );
    }

    Py_DECREF( tmp_args_element_name_35 );
    if ( tmp_assign_source_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 577;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_followers == NULL );
    outline_0_var_followers = tmp_assign_source_65;

    tmp_called_name_36 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_36 = MAKE_FUNCTION_tweepy$api$$$function_42_get_settings(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 590;
    {
        PyObject *call_args[] = { tmp_args_element_name_36 };
        tmp_assign_source_66 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_36, call_args );
    }

    Py_DECREF( tmp_args_element_name_36 );
    if ( tmp_assign_source_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 590;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_get_settings == NULL );
    outline_0_var_get_settings = tmp_assign_source_66;

    tmp_called_name_37 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_37 = MAKE_FUNCTION_tweepy$api$$$function_43_set_settings(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 601;
    {
        PyObject *call_args[] = { tmp_args_element_name_37 };
        tmp_assign_source_67 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_37, call_args );
    }

    Py_DECREF( tmp_args_element_name_37 );
    if ( tmp_assign_source_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 601;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_set_settings == NULL );
    outline_0_var_set_settings = tmp_assign_source_67;

    tmp_assign_source_68 = MAKE_FUNCTION_tweepy$api$$$function_44_verify_credentials(  );
    assert( outline_0_var_verify_credentials == NULL );
    outline_0_var_verify_credentials = tmp_assign_source_68;

    tmp_called_name_38 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_38 = MAKE_FUNCTION_tweepy$api$$$function_45_rate_limit_status(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 637;
    {
        PyObject *call_args[] = { tmp_args_element_name_38 };
        tmp_assign_source_69 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_38, call_args );
    }

    Py_DECREF( tmp_args_element_name_38 );
    if ( tmp_assign_source_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 637;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_rate_limit_status == NULL );
    outline_0_var_rate_limit_status = tmp_assign_source_69;

    tmp_called_name_39 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_39 = MAKE_FUNCTION_tweepy$api$$$function_46_set_delivery_device(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 650;
    {
        PyObject *call_args[] = { tmp_args_element_name_39 };
        tmp_assign_source_70 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_39, call_args );
    }

    Py_DECREF( tmp_args_element_name_39 );
    if ( tmp_assign_source_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 650;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_set_delivery_device == NULL );
    outline_0_var_set_delivery_device = tmp_assign_source_70;

    tmp_called_name_40 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_40 = MAKE_FUNCTION_tweepy$api$$$function_47_update_profile_colors(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 664;
    {
        PyObject *call_args[] = { tmp_args_element_name_40 };
        tmp_assign_source_71 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_40, call_args );
    }

    Py_DECREF( tmp_args_element_name_40 );
    if ( tmp_assign_source_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 664;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_update_profile_colors == NULL );
    outline_0_var_update_profile_colors = tmp_assign_source_71;

    tmp_defaults_5 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_5 );
    tmp_assign_source_72 = MAKE_FUNCTION_tweepy$api$$$function_48_update_profile_image( tmp_defaults_5 );
    assert( outline_0_var_update_profile_image == NULL );
    outline_0_var_update_profile_image = tmp_assign_source_72;

    tmp_assign_source_73 = MAKE_FUNCTION_tweepy$api$$$function_49_update_profile_background_image(  );
    assert( outline_0_var_update_profile_background_image == NULL );
    outline_0_var_update_profile_background_image = tmp_assign_source_73;

    tmp_assign_source_74 = MAKE_FUNCTION_tweepy$api$$$function_50_update_profile_banner(  );
    assert( outline_0_var_update_profile_banner == NULL );
    outline_0_var_update_profile_banner = tmp_assign_source_74;

    tmp_called_name_41 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_41 = MAKE_FUNCTION_tweepy$api$$$function_51_update_profile(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 725;
    {
        PyObject *call_args[] = { tmp_args_element_name_41 };
        tmp_assign_source_75 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_41, call_args );
    }

    Py_DECREF( tmp_args_element_name_41 );
    if ( tmp_assign_source_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 725;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_update_profile == NULL );
    outline_0_var_update_profile = tmp_assign_source_75;

    tmp_called_name_42 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_42 = MAKE_FUNCTION_tweepy$api$$$function_52_favorites(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 739;
    {
        PyObject *call_args[] = { tmp_args_element_name_42 };
        tmp_assign_source_76 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_42, call_args );
    }

    Py_DECREF( tmp_args_element_name_42 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 739;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_favorites == NULL );
    outline_0_var_favorites = tmp_assign_source_76;

    tmp_called_name_43 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_43 = MAKE_FUNCTION_tweepy$api$$$function_53_create_favorite(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 751;
    {
        PyObject *call_args[] = { tmp_args_element_name_43 };
        tmp_assign_source_77 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_43, call_args );
    }

    Py_DECREF( tmp_args_element_name_43 );
    if ( tmp_assign_source_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 751;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_create_favorite == NULL );
    outline_0_var_create_favorite = tmp_assign_source_77;

    tmp_called_name_44 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_44 = MAKE_FUNCTION_tweepy$api$$$function_54_destroy_favorite(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 765;
    {
        PyObject *call_args[] = { tmp_args_element_name_44 };
        tmp_assign_source_78 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_44, call_args );
    }

    Py_DECREF( tmp_args_element_name_44 );
    if ( tmp_assign_source_78 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 765;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_destroy_favorite == NULL );
    outline_0_var_destroy_favorite = tmp_assign_source_78;

    tmp_called_name_45 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_45 = MAKE_FUNCTION_tweepy$api$$$function_55_create_block(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 779;
    {
        PyObject *call_args[] = { tmp_args_element_name_45 };
        tmp_assign_source_79 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_45, call_args );
    }

    Py_DECREF( tmp_args_element_name_45 );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 779;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_create_block == NULL );
    outline_0_var_create_block = tmp_assign_source_79;

    tmp_called_name_46 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_46 = MAKE_FUNCTION_tweepy$api$$$function_56_destroy_block(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 793;
    {
        PyObject *call_args[] = { tmp_args_element_name_46 };
        tmp_assign_source_80 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_46, call_args );
    }

    Py_DECREF( tmp_args_element_name_46 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 793;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_destroy_block == NULL );
    outline_0_var_destroy_block = tmp_assign_source_80;

    tmp_called_name_47 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_47 = MAKE_FUNCTION_tweepy$api$$$function_57_blocks(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 807;
    {
        PyObject *call_args[] = { tmp_args_element_name_47 };
        tmp_assign_source_81 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_47, call_args );
    }

    Py_DECREF( tmp_args_element_name_47 );
    if ( tmp_assign_source_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 807;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_blocks == NULL );
    outline_0_var_blocks = tmp_assign_source_81;

    tmp_called_name_48 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_48 = MAKE_FUNCTION_tweepy$api$$$function_58_blocks_ids(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 820;
    {
        PyObject *call_args[] = { tmp_args_element_name_48 };
        tmp_assign_source_82 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_48, call_args );
    }

    Py_DECREF( tmp_args_element_name_48 );
    if ( tmp_assign_source_82 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 820;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_blocks_ids == NULL );
    outline_0_var_blocks_ids = tmp_assign_source_82;

    tmp_called_name_49 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_49 = MAKE_FUNCTION_tweepy$api$$$function_59_report_spam(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 830;
    {
        PyObject *call_args[] = { tmp_args_element_name_49 };
        tmp_assign_source_83 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_49, call_args );
    }

    Py_DECREF( tmp_args_element_name_49 );
    if ( tmp_assign_source_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 830;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_report_spam == NULL );
    outline_0_var_report_spam = tmp_assign_source_83;

    tmp_called_name_50 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_50 = MAKE_FUNCTION_tweepy$api$$$function_60_saved_searches(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 844;
    {
        PyObject *call_args[] = { tmp_args_element_name_50 };
        tmp_assign_source_84 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_50, call_args );
    }

    Py_DECREF( tmp_args_element_name_50 );
    if ( tmp_assign_source_84 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 844;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_saved_searches == NULL );
    outline_0_var_saved_searches = tmp_assign_source_84;

    tmp_called_name_51 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_51 = MAKE_FUNCTION_tweepy$api$$$function_61_get_saved_search(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 854;
    {
        PyObject *call_args[] = { tmp_args_element_name_51 };
        tmp_assign_source_85 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_51, call_args );
    }

    Py_DECREF( tmp_args_element_name_51 );
    if ( tmp_assign_source_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 854;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_get_saved_search == NULL );
    outline_0_var_get_saved_search = tmp_assign_source_85;

    tmp_called_name_52 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_52 = MAKE_FUNCTION_tweepy$api$$$function_62_create_saved_search(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 867;
    {
        PyObject *call_args[] = { tmp_args_element_name_52 };
        tmp_assign_source_86 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_52, call_args );
    }

    Py_DECREF( tmp_args_element_name_52 );
    if ( tmp_assign_source_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 867;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_create_saved_search == NULL );
    outline_0_var_create_saved_search = tmp_assign_source_86;

    tmp_called_name_53 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_53 = MAKE_FUNCTION_tweepy$api$$$function_63_destroy_saved_search(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 881;
    {
        PyObject *call_args[] = { tmp_args_element_name_53 };
        tmp_assign_source_87 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_53, call_args );
    }

    Py_DECREF( tmp_args_element_name_53 );
    if ( tmp_assign_source_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 881;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_destroy_saved_search == NULL );
    outline_0_var_destroy_saved_search = tmp_assign_source_87;

    tmp_called_name_54 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_54 = MAKE_FUNCTION_tweepy$api$$$function_64_create_list(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 895;
    {
        PyObject *call_args[] = { tmp_args_element_name_54 };
        tmp_assign_source_88 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_54, call_args );
    }

    Py_DECREF( tmp_args_element_name_54 );
    if ( tmp_assign_source_88 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 895;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_create_list == NULL );
    outline_0_var_create_list = tmp_assign_source_88;

    tmp_called_name_55 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_55 = MAKE_FUNCTION_tweepy$api$$$function_65_destroy_list(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 909;
    {
        PyObject *call_args[] = { tmp_args_element_name_55 };
        tmp_assign_source_89 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_55, call_args );
    }

    Py_DECREF( tmp_args_element_name_55 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 909;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_destroy_list == NULL );
    outline_0_var_destroy_list = tmp_assign_source_89;

    tmp_called_name_56 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_56 = MAKE_FUNCTION_tweepy$api$$$function_66_update_list(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 923;
    {
        PyObject *call_args[] = { tmp_args_element_name_56 };
        tmp_assign_source_90 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_56, call_args );
    }

    Py_DECREF( tmp_args_element_name_56 );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 923;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_update_list == NULL );
    outline_0_var_update_list = tmp_assign_source_90;

    tmp_called_name_57 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_57 = MAKE_FUNCTION_tweepy$api$$$function_67_lists_all(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 937;
    {
        PyObject *call_args[] = { tmp_args_element_name_57 };
        tmp_assign_source_91 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_57, call_args );
    }

    Py_DECREF( tmp_args_element_name_57 );
    if ( tmp_assign_source_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 937;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_lists_all == NULL );
    outline_0_var_lists_all = tmp_assign_source_91;

    tmp_called_name_58 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_58 = MAKE_FUNCTION_tweepy$api$$$function_68_lists_memberships(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 950;
    {
        PyObject *call_args[] = { tmp_args_element_name_58 };
        tmp_assign_source_92 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_58, call_args );
    }

    Py_DECREF( tmp_args_element_name_58 );
    if ( tmp_assign_source_92 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 950;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_lists_memberships == NULL );
    outline_0_var_lists_memberships = tmp_assign_source_92;

    tmp_called_name_59 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_59 = MAKE_FUNCTION_tweepy$api$$$function_69_lists_subscriptions(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 963;
    {
        PyObject *call_args[] = { tmp_args_element_name_59 };
        tmp_assign_source_93 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_59, call_args );
    }

    Py_DECREF( tmp_args_element_name_59 );
    if ( tmp_assign_source_93 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 963;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_lists_subscriptions == NULL );
    outline_0_var_lists_subscriptions = tmp_assign_source_93;

    tmp_called_name_60 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_60 = MAKE_FUNCTION_tweepy$api$$$function_70_list_timeline(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 976;
    {
        PyObject *call_args[] = { tmp_args_element_name_60 };
        tmp_assign_source_94 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_60, call_args );
    }

    Py_DECREF( tmp_args_element_name_60 );
    if ( tmp_assign_source_94 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 976;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_list_timeline == NULL );
    outline_0_var_list_timeline = tmp_assign_source_94;

    tmp_called_name_61 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_61 = MAKE_FUNCTION_tweepy$api$$$function_71_get_list(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 991;
    {
        PyObject *call_args[] = { tmp_args_element_name_61 };
        tmp_assign_source_95 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_61, call_args );
    }

    Py_DECREF( tmp_args_element_name_61 );
    if ( tmp_assign_source_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 991;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_get_list == NULL );
    outline_0_var_get_list = tmp_assign_source_95;

    tmp_called_name_62 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_62 = MAKE_FUNCTION_tweepy$api$$$function_72_add_list_member(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1003;
    {
        PyObject *call_args[] = { tmp_args_element_name_62 };
        tmp_assign_source_96 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_62, call_args );
    }

    Py_DECREF( tmp_args_element_name_62 );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1003;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_add_list_member == NULL );
    outline_0_var_add_list_member = tmp_assign_source_96;

    tmp_called_name_63 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_63 = MAKE_FUNCTION_tweepy$api$$$function_73_remove_list_member(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1019;
    {
        PyObject *call_args[] = { tmp_args_element_name_63 };
        tmp_assign_source_97 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_63, call_args );
    }

    Py_DECREF( tmp_args_element_name_63 );
    if ( tmp_assign_source_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1019;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_remove_list_member == NULL );
    outline_0_var_remove_list_member = tmp_assign_source_97;

    tmp_defaults_6 = const_tuple_none_none_none_none_none_none_tuple;
    Py_INCREF( tmp_defaults_6 );
    tmp_assign_source_98 = MAKE_FUNCTION_tweepy$api$$$function_74_add_list_members( tmp_defaults_6 );
    assert( outline_0_var_add_list_members == NULL );
    outline_0_var_add_list_members = tmp_assign_source_98;

    tmp_called_name_64 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_64 = MAKE_FUNCTION_tweepy$api$$$function_75__add_list_members(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1043;
    {
        PyObject *call_args[] = { tmp_args_element_name_64 };
        tmp_assign_source_99 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_64, call_args );
    }

    Py_DECREF( tmp_args_element_name_64 );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1043;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var__add_list_members == NULL );
    outline_0_var__add_list_members = tmp_assign_source_99;

    tmp_defaults_7 = const_tuple_none_none_none_none_none_none_tuple;
    Py_INCREF( tmp_defaults_7 );
    tmp_assign_source_100 = MAKE_FUNCTION_tweepy$api$$$function_76_remove_list_members( tmp_defaults_7 );
    assert( outline_0_var_remove_list_members == NULL );
    outline_0_var_remove_list_members = tmp_assign_source_100;

    tmp_called_name_65 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_65 = MAKE_FUNCTION_tweepy$api$$$function_77__remove_list_members(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1068;
    {
        PyObject *call_args[] = { tmp_args_element_name_65 };
        tmp_assign_source_101 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_65, call_args );
    }

    Py_DECREF( tmp_args_element_name_65 );
    if ( tmp_assign_source_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1068;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var__remove_list_members == NULL );
    outline_0_var__remove_list_members = tmp_assign_source_101;

    tmp_called_name_66 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_66 = MAKE_FUNCTION_tweepy$api$$$function_78_list_members(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1085;
    {
        PyObject *call_args[] = { tmp_args_element_name_66 };
        tmp_assign_source_102 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_66, call_args );
    }

    Py_DECREF( tmp_args_element_name_66 );
    if ( tmp_assign_source_102 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1085;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_list_members == NULL );
    outline_0_var_list_members = tmp_assign_source_102;

    tmp_called_name_67 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_67 = MAKE_FUNCTION_tweepy$api$$$function_79_show_list_member(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1099;
    {
        PyObject *call_args[] = { tmp_args_element_name_67 };
        tmp_assign_source_103 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_67, call_args );
    }

    Py_DECREF( tmp_args_element_name_67 );
    if ( tmp_assign_source_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1099;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_show_list_member == NULL );
    outline_0_var_show_list_member = tmp_assign_source_103;

    tmp_called_name_68 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_68 = MAKE_FUNCTION_tweepy$api$$$function_80_subscribe_list(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1113;
    {
        PyObject *call_args[] = { tmp_args_element_name_68 };
        tmp_assign_source_104 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_68, call_args );
    }

    Py_DECREF( tmp_args_element_name_68 );
    if ( tmp_assign_source_104 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1113;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_subscribe_list == NULL );
    outline_0_var_subscribe_list = tmp_assign_source_104;

    tmp_called_name_69 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_69 = MAKE_FUNCTION_tweepy$api$$$function_81_unsubscribe_list(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1129;
    {
        PyObject *call_args[] = { tmp_args_element_name_69 };
        tmp_assign_source_105 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_69, call_args );
    }

    Py_DECREF( tmp_args_element_name_69 );
    if ( tmp_assign_source_105 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1129;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_unsubscribe_list == NULL );
    outline_0_var_unsubscribe_list = tmp_assign_source_105;

    tmp_called_name_70 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_70 = MAKE_FUNCTION_tweepy$api$$$function_82_list_subscribers(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1145;
    {
        PyObject *call_args[] = { tmp_args_element_name_70 };
        tmp_assign_source_106 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_70, call_args );
    }

    Py_DECREF( tmp_args_element_name_70 );
    if ( tmp_assign_source_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1145;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_list_subscribers == NULL );
    outline_0_var_list_subscribers = tmp_assign_source_106;

    tmp_called_name_71 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_71 = MAKE_FUNCTION_tweepy$api$$$function_83_show_list_subscriber(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1159;
    {
        PyObject *call_args[] = { tmp_args_element_name_71 };
        tmp_assign_source_107 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_71, call_args );
    }

    Py_DECREF( tmp_args_element_name_71 );
    if ( tmp_assign_source_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1159;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_show_list_subscriber == NULL );
    outline_0_var_show_list_subscriber = tmp_assign_source_107;

    tmp_called_name_72 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_72 = MAKE_FUNCTION_tweepy$api$$$function_84_trends_available(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1173;
    {
        PyObject *call_args[] = { tmp_args_element_name_72 };
        tmp_assign_source_108 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_72, call_args );
    }

    Py_DECREF( tmp_args_element_name_72 );
    if ( tmp_assign_source_108 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1173;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_trends_available == NULL );
    outline_0_var_trends_available = tmp_assign_source_108;

    tmp_called_name_73 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_73 = MAKE_FUNCTION_tweepy$api$$$function_85_trends_place(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1182;
    {
        PyObject *call_args[] = { tmp_args_element_name_73 };
        tmp_assign_source_109 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_73, call_args );
    }

    Py_DECREF( tmp_args_element_name_73 );
    if ( tmp_assign_source_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1182;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_trends_place == NULL );
    outline_0_var_trends_place = tmp_assign_source_109;

    tmp_called_name_74 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_74 = MAKE_FUNCTION_tweepy$api$$$function_86_trends_closest(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1194;
    {
        PyObject *call_args[] = { tmp_args_element_name_74 };
        tmp_assign_source_110 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_74, call_args );
    }

    Py_DECREF( tmp_args_element_name_74 );
    if ( tmp_assign_source_110 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1194;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_trends_closest == NULL );
    outline_0_var_trends_closest = tmp_assign_source_110;

    tmp_called_name_75 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_75 = MAKE_FUNCTION_tweepy$api$$$function_87_search(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1206;
    {
        PyObject *call_args[] = { tmp_args_element_name_75 };
        tmp_assign_source_111 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_75, call_args );
    }

    Py_DECREF( tmp_args_element_name_75 );
    if ( tmp_assign_source_111 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1206;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_search == NULL );
    outline_0_var_search = tmp_assign_source_111;

    tmp_called_name_76 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_76 = MAKE_FUNCTION_tweepy$api$$$function_88_reverse_geocode(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1223;
    {
        PyObject *call_args[] = { tmp_args_element_name_76 };
        tmp_assign_source_112 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_76, call_args );
    }

    Py_DECREF( tmp_args_element_name_76 );
    if ( tmp_assign_source_112 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1223;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_reverse_geocode == NULL );
    outline_0_var_reverse_geocode = tmp_assign_source_112;

    tmp_called_name_77 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_77 = MAKE_FUNCTION_tweepy$api$$$function_89_geo_id(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1236;
    {
        PyObject *call_args[] = { tmp_args_element_name_77 };
        tmp_assign_source_113 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_77, call_args );
    }

    Py_DECREF( tmp_args_element_name_77 );
    if ( tmp_assign_source_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1236;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_geo_id == NULL );
    outline_0_var_geo_id = tmp_assign_source_113;

    tmp_called_name_78 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_78 = MAKE_FUNCTION_tweepy$api$$$function_90_geo_search(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1248;
    {
        PyObject *call_args[] = { tmp_args_element_name_78 };
        tmp_assign_source_114 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_78, call_args );
    }

    Py_DECREF( tmp_args_element_name_78 );
    if ( tmp_assign_source_114 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1248;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_geo_search == NULL );
    outline_0_var_geo_search = tmp_assign_source_114;

    tmp_called_name_79 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_79 = MAKE_FUNCTION_tweepy$api$$$function_91_geo_similar_places(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1263;
    {
        PyObject *call_args[] = { tmp_args_element_name_79 };
        tmp_assign_source_115 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_79, call_args );
    }

    Py_DECREF( tmp_args_element_name_79 );
    if ( tmp_assign_source_115 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1263;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_geo_similar_places == NULL );
    outline_0_var_geo_similar_places = tmp_assign_source_115;

    tmp_called_name_80 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_80 = MAKE_FUNCTION_tweepy$api$$$function_92_supported_languages(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1275;
    {
        PyObject *call_args[] = { tmp_args_element_name_80 };
        tmp_assign_source_116 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_80, call_args );
    }

    Py_DECREF( tmp_args_element_name_80 );
    if ( tmp_assign_source_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1275;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_supported_languages == NULL );
    outline_0_var_supported_languages = tmp_assign_source_116;

    tmp_called_name_81 = (PyObject *)&PyProperty_Type;
    tmp_args_element_name_81 = MAKE_FUNCTION_tweepy$api$$$function_93_configuration(  );
    frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame.f_lineno = 1285;
    {
        PyObject *call_args[] = { tmp_args_element_name_81 };
        tmp_assign_source_117 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_81, call_args );
    }

    Py_DECREF( tmp_args_element_name_81 );
    if ( tmp_assign_source_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1285;
        type_description_2 = "NoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooNN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var_configuration == NULL );
    outline_0_var_configuration = tmp_assign_source_117;

    tmp_defaults_8 = const_tuple_str_plain_image_none_tuple;
    Py_INCREF( tmp_defaults_8 );
    tmp_staticmethod_arg_1 = MAKE_FUNCTION_tweepy$api$$$function_94__pack_image( tmp_defaults_8 );
    tmp_assign_source_118 = BUILTIN_STATICMETHOD( tmp_staticmethod_arg_1 );
    Py_DECREF( tmp_staticmethod_arg_1 );
    if ( tmp_assign_source_118 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1297;
        type_description_2 = "NooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooN";
        goto frame_exception_exit_2;
    }
    assert( outline_0_var__pack_image == NULL );
    outline_0_var__pack_image = tmp_assign_source_118;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2,
        type_description_2,
        NULL,
        outline_0_var___qualname__,
        outline_0_var___module__,
        outline_0_var___doc__,
        outline_0_var___init__,
        outline_0_var_home_timeline,
        outline_0_var_statuses_lookup,
        outline_0_var__statuses_lookup,
        outline_0_var_user_timeline,
        outline_0_var_mentions_timeline,
        outline_0_var_related_results,
        outline_0_var_retweets_of_me,
        outline_0_var_get_status,
        outline_0_var_update_status,
        outline_0_var_media_upload,
        outline_0_var_update_with_media,
        outline_0_var_destroy_status,
        outline_0_var_retweet,
        outline_0_var_retweets,
        outline_0_var_retweeters,
        outline_0_var_get_user,
        outline_0_var_get_oembed,
        outline_0_var_lookup_users,
        outline_0_var__lookup_users,
        outline_0_var_me,
        outline_0_var_search_users,
        outline_0_var_suggested_users,
        outline_0_var_suggested_categories,
        outline_0_var_suggested_users_tweets,
        outline_0_var_direct_messages,
        outline_0_var_get_direct_message,
        outline_0_var_sent_direct_messages,
        outline_0_var_send_direct_message,
        outline_0_var_destroy_direct_message,
        outline_0_var_create_friendship,
        outline_0_var_destroy_friendship,
        outline_0_var_show_friendship,
        outline_0_var_lookup_friendships,
        outline_0_var__lookup_friendships,
        outline_0_var_friends_ids,
        outline_0_var_friends,
        outline_0_var_friendships_incoming,
        outline_0_var_friendships_outgoing,
        outline_0_var_followers_ids,
        outline_0_var_followers,
        outline_0_var_get_settings,
        outline_0_var_set_settings,
        outline_0_var_verify_credentials,
        outline_0_var_rate_limit_status,
        outline_0_var_set_delivery_device,
        outline_0_var_update_profile_colors,
        outline_0_var_update_profile_image,
        outline_0_var_update_profile_background_image,
        outline_0_var_update_profile_banner,
        outline_0_var_update_profile,
        outline_0_var_favorites,
        outline_0_var_create_favorite,
        outline_0_var_destroy_favorite,
        outline_0_var_create_block,
        outline_0_var_destroy_block,
        outline_0_var_blocks,
        outline_0_var_blocks_ids,
        outline_0_var_report_spam,
        outline_0_var_saved_searches,
        outline_0_var_get_saved_search,
        outline_0_var_create_saved_search,
        outline_0_var_destroy_saved_search,
        outline_0_var_create_list,
        outline_0_var_destroy_list,
        outline_0_var_update_list,
        outline_0_var_lists_all,
        outline_0_var_lists_memberships,
        outline_0_var_lists_subscriptions,
        outline_0_var_list_timeline,
        outline_0_var_get_list,
        outline_0_var_add_list_member,
        outline_0_var_remove_list_member,
        outline_0_var_add_list_members,
        outline_0_var__add_list_members,
        outline_0_var_remove_list_members,
        outline_0_var__remove_list_members,
        outline_0_var_list_members,
        outline_0_var_show_list_member,
        outline_0_var_subscribe_list,
        outline_0_var_unsubscribe_list,
        outline_0_var_list_subscribers,
        outline_0_var_show_list_subscriber,
        outline_0_var_trends_available,
        outline_0_var_trends_place,
        outline_0_var_trends_closest,
        outline_0_var_search,
        outline_0_var_reverse_geocode,
        outline_0_var_geo_id,
        outline_0_var_geo_search,
        outline_0_var_geo_similar_places,
        outline_0_var_supported_languages,
        outline_0_var_configuration,
        outline_0_var__pack_image
    );


    // Release cached frame.
    if ( frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 == cache_frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 )
    {
        Py_DECREF( frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 );
    }
    cache_frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 = NULL;

    assertFrameObject( frame_7dcd7b08d709bef50d9b0cd8ae5ecd8c_2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_1;

    frame_no_exception_1:;

    goto skip_nested_handling_1;
    nested_frame_exit_1:;

    goto try_except_handler_3;
    skip_nested_handling_1:;
    tmp_called_name_82 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_called_name_82 );
    tmp_args_name_2 = PyTuple_New( 3 );
    tmp_tuple_element_2 = const_str_plain_API;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
    tmp_tuple_element_2 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_tuple_element_2 );
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_2 );
    tmp_tuple_element_2 = locals_dict_1;
    Py_INCREF( tmp_tuple_element_2 );
    if ( outline_0_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain___qualname__,
            outline_0_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain___module__,
            outline_0_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain___doc__,
            outline_0_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var___init__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain___init__,
            outline_0_var___init__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain___init__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain___init__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_home_timeline != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_home_timeline,
            outline_0_var_home_timeline
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_home_timeline
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_home_timeline
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_statuses_lookup != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_statuses_lookup,
            outline_0_var_statuses_lookup
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_statuses_lookup
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_statuses_lookup
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var__statuses_lookup != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain__statuses_lookup,
            outline_0_var__statuses_lookup
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain__statuses_lookup
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain__statuses_lookup
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_user_timeline != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_user_timeline,
            outline_0_var_user_timeline
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_user_timeline
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_user_timeline
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_mentions_timeline != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_mentions_timeline,
            outline_0_var_mentions_timeline
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_mentions_timeline
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_mentions_timeline
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_related_results != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_related_results,
            outline_0_var_related_results
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_related_results
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_related_results
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_retweets_of_me != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_retweets_of_me,
            outline_0_var_retweets_of_me
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_retweets_of_me
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_retweets_of_me
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_get_status != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_get_status,
            outline_0_var_get_status
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_get_status
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_get_status
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_update_status != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_update_status,
            outline_0_var_update_status
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_update_status
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_update_status
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_media_upload != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_media_upload,
            outline_0_var_media_upload
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_media_upload
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_media_upload
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_update_with_media != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_update_with_media,
            outline_0_var_update_with_media
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_update_with_media
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_update_with_media
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_destroy_status != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_status,
            outline_0_var_destroy_status
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_status
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_destroy_status
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_retweet != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_retweet,
            outline_0_var_retweet
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_retweet
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_retweet
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_retweets != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_retweets,
            outline_0_var_retweets
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_retweets
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_retweets
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_retweeters != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_retweeters,
            outline_0_var_retweeters
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_retweeters
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_retweeters
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_get_user != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_get_user,
            outline_0_var_get_user
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_get_user
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_get_user
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_get_oembed != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_get_oembed,
            outline_0_var_get_oembed
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_get_oembed
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_get_oembed
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_lookup_users != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_lookup_users,
            outline_0_var_lookup_users
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_lookup_users
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_lookup_users
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var__lookup_users != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain__lookup_users,
            outline_0_var__lookup_users
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain__lookup_users
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain__lookup_users
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_me != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_me,
            outline_0_var_me
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_me
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_me
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_search_users != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_search_users,
            outline_0_var_search_users
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_search_users
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_search_users
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_suggested_users != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_suggested_users,
            outline_0_var_suggested_users
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_suggested_users
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_suggested_users
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_suggested_categories != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_suggested_categories,
            outline_0_var_suggested_categories
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_suggested_categories
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_suggested_categories
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_suggested_users_tweets != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_suggested_users_tweets,
            outline_0_var_suggested_users_tweets
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_suggested_users_tweets
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_suggested_users_tweets
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_direct_messages != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_direct_messages,
            outline_0_var_direct_messages
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_direct_messages
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_direct_messages
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_get_direct_message != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_get_direct_message,
            outline_0_var_get_direct_message
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_get_direct_message
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_get_direct_message
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_sent_direct_messages != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_sent_direct_messages,
            outline_0_var_sent_direct_messages
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_sent_direct_messages
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_sent_direct_messages
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_send_direct_message != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_send_direct_message,
            outline_0_var_send_direct_message
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_send_direct_message
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_send_direct_message
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_destroy_direct_message != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_direct_message,
            outline_0_var_destroy_direct_message
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_direct_message
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_destroy_direct_message
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_create_friendship != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_create_friendship,
            outline_0_var_create_friendship
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_create_friendship
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_create_friendship
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_destroy_friendship != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_friendship,
            outline_0_var_destroy_friendship
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_friendship
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_destroy_friendship
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_show_friendship != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_show_friendship,
            outline_0_var_show_friendship
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_show_friendship
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_show_friendship
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_lookup_friendships != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_lookup_friendships,
            outline_0_var_lookup_friendships
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_lookup_friendships
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_lookup_friendships
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var__lookup_friendships != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain__lookup_friendships,
            outline_0_var__lookup_friendships
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain__lookup_friendships
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain__lookup_friendships
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_friends_ids != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_friends_ids,
            outline_0_var_friends_ids
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_friends_ids
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_friends_ids
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_friends != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_friends,
            outline_0_var_friends
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_friends
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_friends
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_friendships_incoming != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_friendships_incoming,
            outline_0_var_friendships_incoming
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_friendships_incoming
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_friendships_incoming
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_friendships_outgoing != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_friendships_outgoing,
            outline_0_var_friendships_outgoing
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_friendships_outgoing
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_friendships_outgoing
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_followers_ids != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_followers_ids,
            outline_0_var_followers_ids
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_followers_ids
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_followers_ids
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_followers != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_followers,
            outline_0_var_followers
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_followers
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_followers
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_get_settings != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_get_settings,
            outline_0_var_get_settings
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_get_settings
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_get_settings
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_set_settings != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_set_settings,
            outline_0_var_set_settings
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_set_settings
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_set_settings
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_verify_credentials != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_verify_credentials,
            outline_0_var_verify_credentials
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_verify_credentials
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_verify_credentials
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_rate_limit_status != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_rate_limit_status,
            outline_0_var_rate_limit_status
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_rate_limit_status
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_rate_limit_status
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_set_delivery_device != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_set_delivery_device,
            outline_0_var_set_delivery_device
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_set_delivery_device
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_set_delivery_device
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_update_profile_colors != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile_colors,
            outline_0_var_update_profile_colors
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile_colors
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_update_profile_colors
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_update_profile_image != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile_image,
            outline_0_var_update_profile_image
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile_image
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_update_profile_image
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_update_profile_background_image != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile_background_image,
            outline_0_var_update_profile_background_image
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile_background_image
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_update_profile_background_image
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_update_profile_banner != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile_banner,
            outline_0_var_update_profile_banner
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile_banner
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_update_profile_banner
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_update_profile != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile,
            outline_0_var_update_profile
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_update_profile
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_update_profile
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_favorites != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_favorites,
            outline_0_var_favorites
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_favorites
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_favorites
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_create_favorite != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_create_favorite,
            outline_0_var_create_favorite
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_create_favorite
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_create_favorite
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_destroy_favorite != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_favorite,
            outline_0_var_destroy_favorite
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_favorite
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_destroy_favorite
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_create_block != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_create_block,
            outline_0_var_create_block
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_create_block
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_create_block
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_destroy_block != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_block,
            outline_0_var_destroy_block
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_block
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_destroy_block
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_blocks != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_blocks,
            outline_0_var_blocks
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_blocks
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_blocks
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_blocks_ids != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_blocks_ids,
            outline_0_var_blocks_ids
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_blocks_ids
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_blocks_ids
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_report_spam != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_report_spam,
            outline_0_var_report_spam
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_report_spam
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_report_spam
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_saved_searches != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_saved_searches,
            outline_0_var_saved_searches
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_saved_searches
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_saved_searches
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_get_saved_search != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_get_saved_search,
            outline_0_var_get_saved_search
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_get_saved_search
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_get_saved_search
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_create_saved_search != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_create_saved_search,
            outline_0_var_create_saved_search
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_create_saved_search
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_create_saved_search
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_destroy_saved_search != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_saved_search,
            outline_0_var_destroy_saved_search
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_saved_search
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_destroy_saved_search
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_create_list != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_create_list,
            outline_0_var_create_list
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_create_list
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_create_list
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_destroy_list != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_list,
            outline_0_var_destroy_list
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_destroy_list
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_destroy_list
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_update_list != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_update_list,
            outline_0_var_update_list
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_update_list
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_update_list
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_lists_all != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_lists_all,
            outline_0_var_lists_all
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_lists_all
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_lists_all
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_lists_memberships != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_lists_memberships,
            outline_0_var_lists_memberships
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_lists_memberships
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_lists_memberships
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_lists_subscriptions != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_lists_subscriptions,
            outline_0_var_lists_subscriptions
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_lists_subscriptions
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_lists_subscriptions
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_list_timeline != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_list_timeline,
            outline_0_var_list_timeline
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_list_timeline
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_list_timeline
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_get_list != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_get_list,
            outline_0_var_get_list
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_get_list
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_get_list
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_add_list_member != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_add_list_member,
            outline_0_var_add_list_member
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_add_list_member
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_add_list_member
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_remove_list_member != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_remove_list_member,
            outline_0_var_remove_list_member
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_remove_list_member
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_remove_list_member
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_add_list_members != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_add_list_members,
            outline_0_var_add_list_members
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_add_list_members
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_add_list_members
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var__add_list_members != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain__add_list_members,
            outline_0_var__add_list_members
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain__add_list_members
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain__add_list_members
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_remove_list_members != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_remove_list_members,
            outline_0_var_remove_list_members
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_remove_list_members
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_remove_list_members
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var__remove_list_members != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain__remove_list_members,
            outline_0_var__remove_list_members
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain__remove_list_members
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain__remove_list_members
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_list_members != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_list_members,
            outline_0_var_list_members
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_list_members
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_list_members
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_show_list_member != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_show_list_member,
            outline_0_var_show_list_member
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_show_list_member
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_show_list_member
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_subscribe_list != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_subscribe_list,
            outline_0_var_subscribe_list
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_subscribe_list
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_subscribe_list
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_unsubscribe_list != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_unsubscribe_list,
            outline_0_var_unsubscribe_list
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_unsubscribe_list
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_unsubscribe_list
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_list_subscribers != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_list_subscribers,
            outline_0_var_list_subscribers
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_list_subscribers
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_list_subscribers
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_show_list_subscriber != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_show_list_subscriber,
            outline_0_var_show_list_subscriber
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_show_list_subscriber
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_show_list_subscriber
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_trends_available != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_trends_available,
            outline_0_var_trends_available
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_trends_available
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_trends_available
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_trends_place != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_trends_place,
            outline_0_var_trends_place
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_trends_place
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_trends_place
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_trends_closest != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_trends_closest,
            outline_0_var_trends_closest
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_trends_closest
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_trends_closest
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_search != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_search,
            outline_0_var_search
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_search
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_search
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_reverse_geocode != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_reverse_geocode,
            outline_0_var_reverse_geocode
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_reverse_geocode
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_reverse_geocode
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_geo_id != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_geo_id,
            outline_0_var_geo_id
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_geo_id
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_geo_id
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_geo_search != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_geo_search,
            outline_0_var_geo_search
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_geo_search
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_geo_search
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_geo_similar_places != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_geo_similar_places,
            outline_0_var_geo_similar_places
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_geo_similar_places
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_geo_similar_places
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_supported_languages != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_supported_languages,
            outline_0_var_supported_languages
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_supported_languages
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_supported_languages
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var_configuration != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain_configuration,
            outline_0_var_configuration
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain_configuration
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain_configuration
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    if ( outline_0_var__pack_image != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_2,
            const_str_plain__pack_image,
            outline_0_var__pack_image
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_2,
            const_str_plain__pack_image
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_2,
                const_str_plain__pack_image
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_2 );

        exception_lineno = 18;

        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_2 );
    tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_2 );
    frame_f082c71637b55fc69b5f26008da43125->m_frame.f_lineno = 18;
    tmp_assign_source_119 = CALL_FUNCTION( tmp_called_name_82, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_args_name_2 );
    if ( tmp_assign_source_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto try_except_handler_3;
    }
    assert( outline_0_var___class__ == NULL );
    outline_0_var___class__ = tmp_assign_source_119;

    tmp_outline_return_value_1 = outline_0_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_1 );
    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_3;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( tweepy$api );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_3:;
    CHECK_OBJECT( (PyObject *)outline_0_var___class__ );
    Py_DECREF( outline_0_var___class__ );
    outline_0_var___class__ = NULL;

    Py_XDECREF( outline_0_var___qualname__ );
    outline_0_var___qualname__ = NULL;

    Py_XDECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    Py_XDECREF( outline_0_var___doc__ );
    outline_0_var___doc__ = NULL;

    Py_XDECREF( outline_0_var___init__ );
    outline_0_var___init__ = NULL;

    Py_XDECREF( outline_0_var_home_timeline );
    outline_0_var_home_timeline = NULL;

    Py_XDECREF( outline_0_var_statuses_lookup );
    outline_0_var_statuses_lookup = NULL;

    Py_XDECREF( outline_0_var__statuses_lookup );
    outline_0_var__statuses_lookup = NULL;

    Py_XDECREF( outline_0_var_user_timeline );
    outline_0_var_user_timeline = NULL;

    Py_XDECREF( outline_0_var_mentions_timeline );
    outline_0_var_mentions_timeline = NULL;

    Py_XDECREF( outline_0_var_related_results );
    outline_0_var_related_results = NULL;

    Py_XDECREF( outline_0_var_retweets_of_me );
    outline_0_var_retweets_of_me = NULL;

    Py_XDECREF( outline_0_var_get_status );
    outline_0_var_get_status = NULL;

    Py_XDECREF( outline_0_var_update_status );
    outline_0_var_update_status = NULL;

    Py_XDECREF( outline_0_var_media_upload );
    outline_0_var_media_upload = NULL;

    Py_XDECREF( outline_0_var_update_with_media );
    outline_0_var_update_with_media = NULL;

    Py_XDECREF( outline_0_var_destroy_status );
    outline_0_var_destroy_status = NULL;

    Py_XDECREF( outline_0_var_retweet );
    outline_0_var_retweet = NULL;

    Py_XDECREF( outline_0_var_retweets );
    outline_0_var_retweets = NULL;

    Py_XDECREF( outline_0_var_retweeters );
    outline_0_var_retweeters = NULL;

    Py_XDECREF( outline_0_var_get_user );
    outline_0_var_get_user = NULL;

    Py_XDECREF( outline_0_var_get_oembed );
    outline_0_var_get_oembed = NULL;

    Py_XDECREF( outline_0_var_lookup_users );
    outline_0_var_lookup_users = NULL;

    Py_XDECREF( outline_0_var__lookup_users );
    outline_0_var__lookup_users = NULL;

    Py_XDECREF( outline_0_var_me );
    outline_0_var_me = NULL;

    Py_XDECREF( outline_0_var_search_users );
    outline_0_var_search_users = NULL;

    Py_XDECREF( outline_0_var_suggested_users );
    outline_0_var_suggested_users = NULL;

    Py_XDECREF( outline_0_var_suggested_categories );
    outline_0_var_suggested_categories = NULL;

    Py_XDECREF( outline_0_var_suggested_users_tweets );
    outline_0_var_suggested_users_tweets = NULL;

    Py_XDECREF( outline_0_var_direct_messages );
    outline_0_var_direct_messages = NULL;

    Py_XDECREF( outline_0_var_get_direct_message );
    outline_0_var_get_direct_message = NULL;

    Py_XDECREF( outline_0_var_sent_direct_messages );
    outline_0_var_sent_direct_messages = NULL;

    Py_XDECREF( outline_0_var_send_direct_message );
    outline_0_var_send_direct_message = NULL;

    Py_XDECREF( outline_0_var_destroy_direct_message );
    outline_0_var_destroy_direct_message = NULL;

    Py_XDECREF( outline_0_var_create_friendship );
    outline_0_var_create_friendship = NULL;

    Py_XDECREF( outline_0_var_destroy_friendship );
    outline_0_var_destroy_friendship = NULL;

    Py_XDECREF( outline_0_var_show_friendship );
    outline_0_var_show_friendship = NULL;

    Py_XDECREF( outline_0_var_lookup_friendships );
    outline_0_var_lookup_friendships = NULL;

    Py_XDECREF( outline_0_var__lookup_friendships );
    outline_0_var__lookup_friendships = NULL;

    Py_XDECREF( outline_0_var_friends_ids );
    outline_0_var_friends_ids = NULL;

    Py_XDECREF( outline_0_var_friends );
    outline_0_var_friends = NULL;

    Py_XDECREF( outline_0_var_friendships_incoming );
    outline_0_var_friendships_incoming = NULL;

    Py_XDECREF( outline_0_var_friendships_outgoing );
    outline_0_var_friendships_outgoing = NULL;

    Py_XDECREF( outline_0_var_followers_ids );
    outline_0_var_followers_ids = NULL;

    Py_XDECREF( outline_0_var_followers );
    outline_0_var_followers = NULL;

    Py_XDECREF( outline_0_var_get_settings );
    outline_0_var_get_settings = NULL;

    Py_XDECREF( outline_0_var_set_settings );
    outline_0_var_set_settings = NULL;

    Py_XDECREF( outline_0_var_verify_credentials );
    outline_0_var_verify_credentials = NULL;

    Py_XDECREF( outline_0_var_rate_limit_status );
    outline_0_var_rate_limit_status = NULL;

    Py_XDECREF( outline_0_var_set_delivery_device );
    outline_0_var_set_delivery_device = NULL;

    Py_XDECREF( outline_0_var_update_profile_colors );
    outline_0_var_update_profile_colors = NULL;

    Py_XDECREF( outline_0_var_update_profile_image );
    outline_0_var_update_profile_image = NULL;

    Py_XDECREF( outline_0_var_update_profile_background_image );
    outline_0_var_update_profile_background_image = NULL;

    Py_XDECREF( outline_0_var_update_profile_banner );
    outline_0_var_update_profile_banner = NULL;

    Py_XDECREF( outline_0_var_update_profile );
    outline_0_var_update_profile = NULL;

    Py_XDECREF( outline_0_var_favorites );
    outline_0_var_favorites = NULL;

    Py_XDECREF( outline_0_var_create_favorite );
    outline_0_var_create_favorite = NULL;

    Py_XDECREF( outline_0_var_destroy_favorite );
    outline_0_var_destroy_favorite = NULL;

    Py_XDECREF( outline_0_var_create_block );
    outline_0_var_create_block = NULL;

    Py_XDECREF( outline_0_var_destroy_block );
    outline_0_var_destroy_block = NULL;

    Py_XDECREF( outline_0_var_blocks );
    outline_0_var_blocks = NULL;

    Py_XDECREF( outline_0_var_blocks_ids );
    outline_0_var_blocks_ids = NULL;

    Py_XDECREF( outline_0_var_report_spam );
    outline_0_var_report_spam = NULL;

    Py_XDECREF( outline_0_var_saved_searches );
    outline_0_var_saved_searches = NULL;

    Py_XDECREF( outline_0_var_get_saved_search );
    outline_0_var_get_saved_search = NULL;

    Py_XDECREF( outline_0_var_create_saved_search );
    outline_0_var_create_saved_search = NULL;

    Py_XDECREF( outline_0_var_destroy_saved_search );
    outline_0_var_destroy_saved_search = NULL;

    Py_XDECREF( outline_0_var_create_list );
    outline_0_var_create_list = NULL;

    Py_XDECREF( outline_0_var_destroy_list );
    outline_0_var_destroy_list = NULL;

    Py_XDECREF( outline_0_var_update_list );
    outline_0_var_update_list = NULL;

    Py_XDECREF( outline_0_var_lists_all );
    outline_0_var_lists_all = NULL;

    Py_XDECREF( outline_0_var_lists_memberships );
    outline_0_var_lists_memberships = NULL;

    Py_XDECREF( outline_0_var_lists_subscriptions );
    outline_0_var_lists_subscriptions = NULL;

    Py_XDECREF( outline_0_var_list_timeline );
    outline_0_var_list_timeline = NULL;

    Py_XDECREF( outline_0_var_get_list );
    outline_0_var_get_list = NULL;

    Py_XDECREF( outline_0_var_add_list_member );
    outline_0_var_add_list_member = NULL;

    Py_XDECREF( outline_0_var_remove_list_member );
    outline_0_var_remove_list_member = NULL;

    Py_XDECREF( outline_0_var_add_list_members );
    outline_0_var_add_list_members = NULL;

    Py_XDECREF( outline_0_var__add_list_members );
    outline_0_var__add_list_members = NULL;

    Py_XDECREF( outline_0_var_remove_list_members );
    outline_0_var_remove_list_members = NULL;

    Py_XDECREF( outline_0_var__remove_list_members );
    outline_0_var__remove_list_members = NULL;

    Py_XDECREF( outline_0_var_list_members );
    outline_0_var_list_members = NULL;

    Py_XDECREF( outline_0_var_show_list_member );
    outline_0_var_show_list_member = NULL;

    Py_XDECREF( outline_0_var_subscribe_list );
    outline_0_var_subscribe_list = NULL;

    Py_XDECREF( outline_0_var_unsubscribe_list );
    outline_0_var_unsubscribe_list = NULL;

    Py_XDECREF( outline_0_var_list_subscribers );
    outline_0_var_list_subscribers = NULL;

    Py_XDECREF( outline_0_var_show_list_subscriber );
    outline_0_var_show_list_subscriber = NULL;

    Py_XDECREF( outline_0_var_trends_available );
    outline_0_var_trends_available = NULL;

    Py_XDECREF( outline_0_var_trends_place );
    outline_0_var_trends_place = NULL;

    Py_XDECREF( outline_0_var_trends_closest );
    outline_0_var_trends_closest = NULL;

    Py_XDECREF( outline_0_var_search );
    outline_0_var_search = NULL;

    Py_XDECREF( outline_0_var_reverse_geocode );
    outline_0_var_reverse_geocode = NULL;

    Py_XDECREF( outline_0_var_geo_id );
    outline_0_var_geo_id = NULL;

    Py_XDECREF( outline_0_var_geo_search );
    outline_0_var_geo_search = NULL;

    Py_XDECREF( outline_0_var_geo_similar_places );
    outline_0_var_geo_similar_places = NULL;

    Py_XDECREF( outline_0_var_supported_languages );
    outline_0_var_supported_languages = NULL;

    Py_XDECREF( outline_0_var_configuration );
    outline_0_var_configuration = NULL;

    Py_XDECREF( outline_0_var__pack_image );
    outline_0_var__pack_image = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_0_var___qualname__ );
    outline_0_var___qualname__ = NULL;

    Py_XDECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    Py_XDECREF( outline_0_var___doc__ );
    outline_0_var___doc__ = NULL;

    Py_XDECREF( outline_0_var___init__ );
    outline_0_var___init__ = NULL;

    Py_XDECREF( outline_0_var_home_timeline );
    outline_0_var_home_timeline = NULL;

    Py_XDECREF( outline_0_var_statuses_lookup );
    outline_0_var_statuses_lookup = NULL;

    Py_XDECREF( outline_0_var__statuses_lookup );
    outline_0_var__statuses_lookup = NULL;

    Py_XDECREF( outline_0_var_user_timeline );
    outline_0_var_user_timeline = NULL;

    Py_XDECREF( outline_0_var_mentions_timeline );
    outline_0_var_mentions_timeline = NULL;

    Py_XDECREF( outline_0_var_related_results );
    outline_0_var_related_results = NULL;

    Py_XDECREF( outline_0_var_retweets_of_me );
    outline_0_var_retweets_of_me = NULL;

    Py_XDECREF( outline_0_var_get_status );
    outline_0_var_get_status = NULL;

    Py_XDECREF( outline_0_var_update_status );
    outline_0_var_update_status = NULL;

    Py_XDECREF( outline_0_var_media_upload );
    outline_0_var_media_upload = NULL;

    Py_XDECREF( outline_0_var_update_with_media );
    outline_0_var_update_with_media = NULL;

    Py_XDECREF( outline_0_var_destroy_status );
    outline_0_var_destroy_status = NULL;

    Py_XDECREF( outline_0_var_retweet );
    outline_0_var_retweet = NULL;

    Py_XDECREF( outline_0_var_retweets );
    outline_0_var_retweets = NULL;

    Py_XDECREF( outline_0_var_retweeters );
    outline_0_var_retweeters = NULL;

    Py_XDECREF( outline_0_var_get_user );
    outline_0_var_get_user = NULL;

    Py_XDECREF( outline_0_var_get_oembed );
    outline_0_var_get_oembed = NULL;

    Py_XDECREF( outline_0_var_lookup_users );
    outline_0_var_lookup_users = NULL;

    Py_XDECREF( outline_0_var__lookup_users );
    outline_0_var__lookup_users = NULL;

    Py_XDECREF( outline_0_var_me );
    outline_0_var_me = NULL;

    Py_XDECREF( outline_0_var_search_users );
    outline_0_var_search_users = NULL;

    Py_XDECREF( outline_0_var_suggested_users );
    outline_0_var_suggested_users = NULL;

    Py_XDECREF( outline_0_var_suggested_categories );
    outline_0_var_suggested_categories = NULL;

    Py_XDECREF( outline_0_var_suggested_users_tweets );
    outline_0_var_suggested_users_tweets = NULL;

    Py_XDECREF( outline_0_var_direct_messages );
    outline_0_var_direct_messages = NULL;

    Py_XDECREF( outline_0_var_get_direct_message );
    outline_0_var_get_direct_message = NULL;

    Py_XDECREF( outline_0_var_sent_direct_messages );
    outline_0_var_sent_direct_messages = NULL;

    Py_XDECREF( outline_0_var_send_direct_message );
    outline_0_var_send_direct_message = NULL;

    Py_XDECREF( outline_0_var_destroy_direct_message );
    outline_0_var_destroy_direct_message = NULL;

    Py_XDECREF( outline_0_var_create_friendship );
    outline_0_var_create_friendship = NULL;

    Py_XDECREF( outline_0_var_destroy_friendship );
    outline_0_var_destroy_friendship = NULL;

    Py_XDECREF( outline_0_var_show_friendship );
    outline_0_var_show_friendship = NULL;

    Py_XDECREF( outline_0_var_lookup_friendships );
    outline_0_var_lookup_friendships = NULL;

    Py_XDECREF( outline_0_var__lookup_friendships );
    outline_0_var__lookup_friendships = NULL;

    Py_XDECREF( outline_0_var_friends_ids );
    outline_0_var_friends_ids = NULL;

    Py_XDECREF( outline_0_var_friends );
    outline_0_var_friends = NULL;

    Py_XDECREF( outline_0_var_friendships_incoming );
    outline_0_var_friendships_incoming = NULL;

    Py_XDECREF( outline_0_var_friendships_outgoing );
    outline_0_var_friendships_outgoing = NULL;

    Py_XDECREF( outline_0_var_followers_ids );
    outline_0_var_followers_ids = NULL;

    Py_XDECREF( outline_0_var_followers );
    outline_0_var_followers = NULL;

    Py_XDECREF( outline_0_var_get_settings );
    outline_0_var_get_settings = NULL;

    Py_XDECREF( outline_0_var_set_settings );
    outline_0_var_set_settings = NULL;

    Py_XDECREF( outline_0_var_verify_credentials );
    outline_0_var_verify_credentials = NULL;

    Py_XDECREF( outline_0_var_rate_limit_status );
    outline_0_var_rate_limit_status = NULL;

    Py_XDECREF( outline_0_var_set_delivery_device );
    outline_0_var_set_delivery_device = NULL;

    Py_XDECREF( outline_0_var_update_profile_colors );
    outline_0_var_update_profile_colors = NULL;

    Py_XDECREF( outline_0_var_update_profile_image );
    outline_0_var_update_profile_image = NULL;

    Py_XDECREF( outline_0_var_update_profile_background_image );
    outline_0_var_update_profile_background_image = NULL;

    Py_XDECREF( outline_0_var_update_profile_banner );
    outline_0_var_update_profile_banner = NULL;

    Py_XDECREF( outline_0_var_update_profile );
    outline_0_var_update_profile = NULL;

    Py_XDECREF( outline_0_var_favorites );
    outline_0_var_favorites = NULL;

    Py_XDECREF( outline_0_var_create_favorite );
    outline_0_var_create_favorite = NULL;

    Py_XDECREF( outline_0_var_destroy_favorite );
    outline_0_var_destroy_favorite = NULL;

    Py_XDECREF( outline_0_var_create_block );
    outline_0_var_create_block = NULL;

    Py_XDECREF( outline_0_var_destroy_block );
    outline_0_var_destroy_block = NULL;

    Py_XDECREF( outline_0_var_blocks );
    outline_0_var_blocks = NULL;

    Py_XDECREF( outline_0_var_blocks_ids );
    outline_0_var_blocks_ids = NULL;

    Py_XDECREF( outline_0_var_report_spam );
    outline_0_var_report_spam = NULL;

    Py_XDECREF( outline_0_var_saved_searches );
    outline_0_var_saved_searches = NULL;

    Py_XDECREF( outline_0_var_get_saved_search );
    outline_0_var_get_saved_search = NULL;

    Py_XDECREF( outline_0_var_create_saved_search );
    outline_0_var_create_saved_search = NULL;

    Py_XDECREF( outline_0_var_destroy_saved_search );
    outline_0_var_destroy_saved_search = NULL;

    Py_XDECREF( outline_0_var_create_list );
    outline_0_var_create_list = NULL;

    Py_XDECREF( outline_0_var_destroy_list );
    outline_0_var_destroy_list = NULL;

    Py_XDECREF( outline_0_var_update_list );
    outline_0_var_update_list = NULL;

    Py_XDECREF( outline_0_var_lists_all );
    outline_0_var_lists_all = NULL;

    Py_XDECREF( outline_0_var_lists_memberships );
    outline_0_var_lists_memberships = NULL;

    Py_XDECREF( outline_0_var_lists_subscriptions );
    outline_0_var_lists_subscriptions = NULL;

    Py_XDECREF( outline_0_var_list_timeline );
    outline_0_var_list_timeline = NULL;

    Py_XDECREF( outline_0_var_get_list );
    outline_0_var_get_list = NULL;

    Py_XDECREF( outline_0_var_add_list_member );
    outline_0_var_add_list_member = NULL;

    Py_XDECREF( outline_0_var_remove_list_member );
    outline_0_var_remove_list_member = NULL;

    Py_XDECREF( outline_0_var_add_list_members );
    outline_0_var_add_list_members = NULL;

    Py_XDECREF( outline_0_var__add_list_members );
    outline_0_var__add_list_members = NULL;

    Py_XDECREF( outline_0_var_remove_list_members );
    outline_0_var_remove_list_members = NULL;

    Py_XDECREF( outline_0_var__remove_list_members );
    outline_0_var__remove_list_members = NULL;

    Py_XDECREF( outline_0_var_list_members );
    outline_0_var_list_members = NULL;

    Py_XDECREF( outline_0_var_show_list_member );
    outline_0_var_show_list_member = NULL;

    Py_XDECREF( outline_0_var_subscribe_list );
    outline_0_var_subscribe_list = NULL;

    Py_XDECREF( outline_0_var_unsubscribe_list );
    outline_0_var_unsubscribe_list = NULL;

    Py_XDECREF( outline_0_var_list_subscribers );
    outline_0_var_list_subscribers = NULL;

    Py_XDECREF( outline_0_var_show_list_subscriber );
    outline_0_var_show_list_subscriber = NULL;

    Py_XDECREF( outline_0_var_trends_available );
    outline_0_var_trends_available = NULL;

    Py_XDECREF( outline_0_var_trends_place );
    outline_0_var_trends_place = NULL;

    Py_XDECREF( outline_0_var_trends_closest );
    outline_0_var_trends_closest = NULL;

    Py_XDECREF( outline_0_var_search );
    outline_0_var_search = NULL;

    Py_XDECREF( outline_0_var_reverse_geocode );
    outline_0_var_reverse_geocode = NULL;

    Py_XDECREF( outline_0_var_geo_id );
    outline_0_var_geo_id = NULL;

    Py_XDECREF( outline_0_var_geo_search );
    outline_0_var_geo_search = NULL;

    Py_XDECREF( outline_0_var_geo_similar_places );
    outline_0_var_geo_similar_places = NULL;

    Py_XDECREF( outline_0_var_supported_languages );
    outline_0_var_supported_languages = NULL;

    Py_XDECREF( outline_0_var_configuration );
    outline_0_var_configuration = NULL;

    Py_XDECREF( outline_0_var__pack_image );
    outline_0_var__pack_image = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto outline_exception_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( tweepy$api );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_1:;
    exception_lineno = 18;
    goto try_except_handler_2;
    outline_result_1:;
    tmp_assign_source_21 = tmp_outline_return_value_1;
    UPDATE_STRING_DICT1( moduledict_tweepy$api, (Nuitka_StringObject *)const_str_plain_API, tmp_assign_source_21 );
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f082c71637b55fc69b5f26008da43125 );
#endif
    popFrameStack();

    assertFrameObject( frame_f082c71637b55fc69b5f26008da43125 );

    goto frame_no_exception_2;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f082c71637b55fc69b5f26008da43125 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f082c71637b55fc69b5f26008da43125, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f082c71637b55fc69b5f26008da43125->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f082c71637b55fc69b5f26008da43125, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_2:;
    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;


    return MOD_RETURN_VALUE( module_tweepy$api );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
