/* Generated code for Python source for module 'jinja2.nodes'
 * created by Nuitka version 0.5.28.2
 *
 * This code is in part copyright 2017 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The _module_jinja2$nodes is a Python object pointer of module type. */

/* Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_jinja2$nodes;
PyDictObject *moduledict_jinja2$nodes;

/* The module constants used, if any. */
extern PyObject *const_tuple_str_plain_items_tuple;
static PyObject *const_str_digest_50e5135d9fc0d9c505da14632777f939;
static PyObject *const_str_plain_Expr;
static PyObject *const_str_digest_61111f079391d235704d0f7a5ed3ba38;
extern PyObject *const_str_plain___spec__;
static PyObject *const_str_digest_5e05da3af0295c94257c0204d091460a;
static PyObject *const_str_digest_74112eebfe332d831d9b921bac1fce2b;
extern PyObject *const_str_plain___name__;
extern PyObject *const_str_plain_floordiv;
extern PyObject *const_str_plain_sorted;
extern PyObject *const_dict_empty;
extern PyObject *const_str_plain_save;
extern PyObject *const_str_plain_elif_;
extern PyObject *const_str_plain__context_function_types;
extern PyObject *const_str_plain_Test;
static PyObject *const_tuple_str_plain_start_str_plain_stop_str_plain_step_tuple;
extern PyObject *const_tuple_str_plain_value_tuple;
extern PyObject *const_str_angle_listcontraction;
extern PyObject *const_str_plain_else_;
extern PyObject *const_str_plain_encode;
static PyObject *const_str_digest_ba4414296584bed63dbbbf1abebe04f2;
static PyObject *const_str_digest_4cd8030e215c61a4db3d457280fabf87;
static PyObject *const_str_digest_b4b9ffa6f1ca14bbe6420a108432db56;
extern PyObject *const_str_chr_42;
extern PyObject *const_str_plain_None;
extern PyObject *const_str_plain_NSRef;
static PyObject *const_str_digest_70ea80b28f642acc57035d060bf1a656;
extern PyObject *const_str_plain_List;
extern PyObject *const_str_digest_29bbf2a0ea668f7cb550eb66ebe90f9e;
static PyObject *const_str_digest_adb63acf99b0f61bd500405681614422;
extern PyObject *const_str_plain_callable;
static PyObject *const_str_digest_0c85c04508f6327eca689634a71355c0;
static PyObject *const_str_digest_8099e76318d48de2044c72bc69e26d62;
static PyObject *const_str_digest_35e49d69578b22d3ac5149339539df84;
static PyObject *const_str_plain_filter_;
extern PyObject *const_str_plain_start;
extern PyObject *const_str_plain_false;
static PyObject *const_str_digest_25136860d008ccc67956b0ab8b23d3a3;
extern PyObject *const_str_digest_29db59be4b58f9ee91a4a5c877028c0e;
extern PyObject *const_tuple_str_plain_self_str_plain_item_tuple;
static PyObject *const_str_digest_d06746aa47b9d1d9b048c9ac192e1e9b;
extern PyObject *const_str_chr_41;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain___ne__;
static PyObject *const_str_digest_1807c5d7a12375951f2078407128987a;
extern PyObject *const_str_plain_none;
static PyObject *const_tuple_str_plain_key_str_plain_value_tuple;
extern PyObject *const_str_plain_sandboxed;
static PyObject *const_str_digest_92ad115e7d972b3d1a9f20bd23bf875a;
extern PyObject *const_str_chr_45;
extern PyObject *const_str_plain_bases;
extern PyObject *const_str_plain_AssignBlock;
extern PyObject *const_tuple_str_plain_args_str_plain_kwargs_tuple;
extern PyObject *const_str_plain_ctx;
extern PyObject *const_str_plain_Tuple;
extern PyObject *const_str_plain_load;
extern PyObject *const_str_plain_True;
extern PyObject *const_str_plain_Pow;
extern PyObject *const_str_plain_volatile;
static PyObject *const_str_plain_Stmt;
extern PyObject *const_str_plain_contextfilter;
extern PyObject *const_str_plain___loader__;
extern PyObject *const_str_plain_template_name;
extern PyObject *const_str_plain_name;
static PyObject *const_str_digest_9ecad2c396532584fe2ad71cc894a103;
static PyObject *const_str_digest_835ac4b829346a2256d258bdb290afe3;
static PyObject *const_str_digest_a66f482eac6a31b80de103ecefcb560b;
static PyObject *const_str_digest_1a54bdadf362c140e2262c76f6c45563;
static PyObject *const_str_digest_e3f9ba139273c154f4cf545268c54001;
extern PyObject *const_str_plain_False;
static PyObject *const_tuple_str_plain_expr_tuple;
extern PyObject *const_str_plain_lineno;
extern PyObject *const_tuple_type_type_tuple;
extern PyObject *const_str_plain___new__;
static PyObject *const_str_plain_node_type;
static PyObject *const_str_digest_2abb66649b32f53ab4a8d9fe7c3bfbb9;
extern PyObject *const_str_plain_pop;
extern PyObject *const_str_plain_buf;
extern PyObject *const_int_0;
static PyObject *const_str_digest_69b6ecec1ddb0b99fd2288f02d4834e9;
extern PyObject *const_str_plain_lteq;
static PyObject *const_str_digest_62ec52fbadea4400c885be3c37827827;
extern PyObject *const_str_plain_revert;
extern PyObject *const_str_plain_Compare;
static PyObject *const_str_digest_aa106bda900de2bd2a72d21b433949d2;
static PyObject *const_str_digest_e71cef5b10b09470a885f6bd4a9f3802;
extern PyObject *const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
extern PyObject *const_str_plain_defaults;
static PyObject *const_str_digest_55f38441a8fad4734f80deabe4862d47;
extern PyObject *const_str_plain_compiler;
static PyObject *const_str_digest_ab66ad8af3983f79e381ca04dbb8f1e1;
static PyObject *const_str_digest_f0bda5c3ed94a095299059b8d099b5d2;
static PyObject *const_str_digest_20dffb12e48304fa2db99a68a5e34d1e;
extern PyObject *const_tuple_str_plain_data_tuple;
extern PyObject *const_str_plain_setdefault;
static PyObject *const_str_plain_set_lineno;
static PyObject *const_str_digest_c89b6762e2fbfd3057435d424c4947d0;
static PyObject *const_str_digest_7405eb26496b03c1fc4702a7ec9a1ed8;
extern PyObject *const_str_plain___cached__;
extern PyObject *const_tuple_none_tuple;
extern PyObject *const_str_plain___hash__;
static PyObject *const_str_digest_7605151d55a47abf480956a78c7fdec8;
extern PyObject *const_str_plain__dump;
static PyObject *const_str_digest_31e7c9d9d00fdc949ed6b2a1e884129d;
static PyObject *const_tuple_str_plain_target_str_plain_filter_str_plain_body_tuple;
extern PyObject *const_str_plain_getattr;
static PyObject *const_tuple_59e37e622c2598ebb986b4a2056ed9a9_tuple;
extern PyObject *const_int_pos_1;
static PyObject *const_str_digest_b49472c86d89e135c19e331a4f72d626;
extern PyObject *const_str_plain_Pair;
extern PyObject *const_str_plain_and;
extern PyObject *const_str_plain_field;
static PyObject *const_str_digest_d364da1f2a98272e996ae1943cda6b6c;
extern PyObject *const_str_plain_other;
static PyObject *const_str_digest_614dd9d449339ae9c67e653f60e76ee9;
extern PyObject *const_str_plain_Pos;
extern PyObject *const_str_plain___prepare__;
extern PyObject *const_str_plain_child;
static PyObject *const_tuple_7bf4fbbdba32d9148daca07d0d9906de_tuple;
extern PyObject *const_str_plain___repr__;
static PyObject *const_str_digest_86f2787df3d43109e652aefde8ba7f0e;
static PyObject *const_str_plain_not_;
extern PyObject *const_str_plain_kwargs;
static PyObject *const_str_digest_845cafcab2f0caa927796cd7bcdd0142;
static PyObject *const_str_plain_MarkSafe;
extern PyObject *const_str_plain_ne;
extern PyObject *const_str_plain_With;
extern PyObject *const_str_plain_popleft;
static PyObject *const_str_digest_e603c715dadcbbeeda4b1a748ae3e14c;
extern PyObject *const_str_plain_find;
extern PyObject *const_str_plain_Block;
static PyObject *const_str_digest_c58c3c9ae2033318f0348053e325e7e1;
static PyObject *const_str_digest_bfd820e9092fffa14429396739129d6a;
static PyObject *const_str_digest_abeaa30875478a8728439599b60393c8;
static PyObject *const_str_digest_437d34f877389138c34928ec1dfd0227;
extern PyObject *const_str_plain_op;
extern PyObject *const_str_plain_FunctionType;
extern PyObject *const_str_chr_43;
static PyObject *const_str_plain_MarkSafeIfAutoescape;
static PyObject *const_tuple_str_plain_template_str_plain_names_str_plain_with_context_tuple;
static PyObject *const_str_digest_0670adee5187015bcb491127cf260b75;
extern PyObject *const_str_plain_override;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_digest_080725e57cfe09bac83bef042d6ec2c0;
static PyObject *const_tuple_str_plain_left_str_plain_right_tuple;
static PyObject *const_str_digest_fc365cf01d2591bedc22470a116c9165;
static PyObject *const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple;
static PyObject *const_tuple_str_plain_lineno_str_plain_environment_tuple;
static PyObject *const_tuple_str_plain_targets_str_plain_values_str_plain_body_tuple;
extern PyObject *const_str_plain_CondExpr;
static PyObject *const_tuple_str_plain_items_str_plain_ctx_tuple;
extern PyObject *const_str_plain_Or;
static PyObject *const_str_digest_ad78917dee59b8ced41dc4b5c9d574b3;
static PyObject *const_str_digest_9e185a50d3143e0445910a9a8c2d40e9;
extern PyObject *const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
static PyObject *const_str_digest_25694a9685cc0ed9447ef898495eaf5c;
extern PyObject *const_str_plain_Sub;
extern PyObject *const_str_plain_storage;
extern PyObject *const_str_chr_37;
extern PyObject *const_str_plain_todo;
extern PyObject *const_str_plain_Dict;
static PyObject *const_str_digest_a5be934f62deb29c722cd2af54ba0d8b;
extern PyObject *const_str_plain_filter;
static PyObject *const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple;
static PyObject *const_str_digest_1db01a7e1949a287f12cf968128329d7;
static PyObject *const_tuple_str_plain_name_str_plain_ctx_tuple;
extern PyObject *const_str_plain_is_async;
static PyObject *const_str_digest_86d45a7144233bec976d910632daef95;
extern PyObject *const_str_plain_ImportedName;
extern PyObject *const_str_plain_names;
static PyObject *const_tuple_1d7bd8276cb9da372482cb578e1e0d10_tuple;
extern PyObject *const_str_plain_FloorDiv;
extern PyObject *const_str_plain_getitem;
extern PyObject *const_str_plain_Not;
extern PyObject *const_tuple_str_chr_41_tuple;
static PyObject *const_str_plain_not;
extern PyObject *const_str_plain_notin;
static PyObject *const_tuple_str_plain_node_str_plain_ctx_tuple;
extern PyObject *const_str_plain_template;
extern PyObject *const_str_plain_gt;
extern PyObject *const_str_plain___qualname__;
extern PyObject *const_str_plain_n;
extern PyObject *const_str_plain_from_untrusted;
static PyObject *const_tuple_c393dd118778570338b62cd408509935_tuple;
static PyObject *const_str_digest_40f6322b8c54e2a631a22f0cad68bbc1;
static PyObject *const_str_digest_8362f750add64e017837c7197fbbdddc;
static PyObject *const_str_plain_ContextReference;
static PyObject *const_str_digest_797433fccfc787066be93fb6493d73ad;
extern PyObject *const_str_plain_value;
static PyObject *const_str_digest_0b23597c9aa01e7b47caefef002eca86;
extern PyObject *const_str_plain_insert;
extern PyObject *const_str_plain_collections;
extern PyObject *const_str_plain_Concat;
static PyObject *const_str_digest_60efb76ccf12c2b2d02ba86e5583e718;
extern PyObject *const_str_chr_91;
static PyObject *const_str_digest_90117f16312294e8b31ad692ca74733e;
static PyObject *const_str_plain__cmpop_to_func;
extern PyObject *const_str_plain_find_all;
static PyObject *const_str_digest_3740cc5eeb1f2781cbc1ef396ea8675f;
extern PyObject *const_str_plain_Getattr;
static PyObject *const_tuple_str_plain_fields_str_plain_attributes_tuple;
extern PyObject *const_str_plain_const;
static PyObject *const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple;
extern PyObject *const_str_plain_old;
extern PyObject *const_str_plain_context;
extern PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_x_tuple;
extern PyObject *const_str_plain_Const;
static PyObject *const_str_plain_ExtensionAttribute;
extern PyObject *const_str_plain_mul;
static PyObject *const_tuple_8d404e7ebddaf61fb74081e691842b19_tuple;
extern PyObject *const_str_plain_ignore_missing;
static PyObject *const_tuple_c11ac06eac59c9675cae026ca38f9276_tuple;
static PyObject *const_tuple_e2332645ce854f293f4caeff0a011386_tuple;
extern PyObject *const_str_plain_If;
static PyObject *const_str_digest_96fde943d01e256398bbf1b6ca455873;
static PyObject *const_str_digest_d7d129e7ee6a5579b086ac1210e32f6d;
static PyObject *const_str_digest_e592c4a2ffca3524958806f6a552fc64;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_iter;
static PyObject *const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_const_tuple;
extern PyObject *const_str_plain_ops;
static PyObject *const_str_plain_Break;
static PyObject *const_tuple_str_plain_importname_tuple;
extern PyObject *const_str_plain_call;
static PyObject *const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple;
static PyObject *const_tuple_8d76ad4efeb101f584d904b2a92105db_tuple;
static PyObject *const_str_digest_62c4af48d20ce9b09b9aba02e5a47e45;
static PyObject *const_str_digest_46ccee62c8ef22cb3237ef8e568829f0;
static PyObject *const_str_digest_1904fbcd9fa3e756c9852501a69875b5;
static PyObject *const_str_plain_asyncfiltervariant;
extern PyObject *const_str_plain_gteq;
static PyObject *const_tuple_str_plain_body_str_plain_filter_tuple;
static PyObject *const_str_digest_52ffc572cc80d7fb4467e8bde7129e40;
extern PyObject *const_str_plain_And;
extern PyObject *const_str_plain_expr2;
extern PyObject *const_str_plain_Extends;
extern PyObject *const_str_plain_importname;
extern PyObject *const_str_plain_d;
static PyObject *const_tuple_str_plain_node_str_plain_arg_str_plain_ctx_tuple;
extern PyObject *const_str_plain_PY2;
extern PyObject *const_str_chr_47;
static PyObject *const_str_digest_3d7284bae3fb785b579b3e8164ee90a5;
static PyObject *const_tuple_str_plain_context_str_plain_body_tuple;
static PyObject *const_str_digest_42312d483ec942858c3736c314adc1d9;
static PyObject *const_str_plain_EvalContextModifier;
extern PyObject *const_str_plain_Filter;
static PyObject *const_str_digest_41496a23db1a51655852694516177510;
extern PyObject *const_str_plain_copy;
static PyObject *const_str_digest_1b51e54a79422c06d441fd9d629f0442;
extern PyObject *const_str_plain_key;
extern PyObject *const_str_plain_stop;
extern PyObject *const_str_plain___init__;
extern PyObject *const_str_plain_left;
extern PyObject *const_str_plain_types;
static PyObject *const_str_digest_7ce06fe189898c976a03a3c14041aa56;
extern PyObject *const_str_digest_6a1b15fc617d9b2615daf846b271eabb;
static PyObject *const_str_digest_f8070aff6952c87b12859e25ef90bca2;
static PyObject *const_str_digest_5a3a854b390024a6f292bfb3854773ef;
extern PyObject *const_str_plain_MethodType;
static PyObject *const_str_digest_e3a4c823e1ef10e127881c4bbabde90e;
static PyObject *const_tuple_str_plain_expr_str_plain_ops_tuple;
static PyObject *const_tuple_str_plain_identifier_str_plain_name_tuple;
static PyObject *const_str_digest_95b57a0cd069bd281c67fb07a21e72fd;
extern PyObject *const_str_plain_ascii;
static PyObject *const_str_digest_ce1a7c91f9f5083b68e2a321a008fae9;
static PyObject *const_str_plain_get_eval_context;
extern PyObject *const_str_empty;
extern PyObject *const_tuple_none_none_tuple;
extern PyObject *const_str_plain_with_metaclass;
static PyObject *const_str_plain_ExprStmt;
extern PyObject *const_str_digest_124f1473eafa684c185fd606074efc0f;
static PyObject *const_str_digest_223828ec3f21802d35392672e806dae6;
extern PyObject *const_str_plain_Node;
static PyObject *const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_expr_tuple;
extern PyObject *const_str_plain_result;
extern PyObject *const_str_plain_environmentfilter;
extern PyObject *const_str_plain_test;
static PyObject *const_str_plain_Continue;
static PyObject *const_str_digest_35defc2dd8b3963f08b644ee8f7ab4a9;
static PyObject *const_str_digest_bf5875428d198777337f11f950de50d2;
static PyObject *const_str_digest_078fffba1ab83fa8ba0083a9c3d74edf;
static PyObject *const_tuple_str_plain_test_str_plain_expr1_str_plain_expr2_tuple;
extern PyObject *const_str_plain_recursive;
static PyObject *const_str_digest_31aac5220761c2bcb9b9206343d3b20f;
static PyObject *const_str_digest_b5d186439a50b4d992ca35e19b3d8bd0;
static PyObject *const_str_digest_5cdce82ded47fc54bb0da62bafae233b;
static PyObject *const_str_digest_8b995823d5fc8c89069764d298740c71;
static PyObject *const_str_plain__failing_new;
static PyObject *const_str_digest_01de7be6f170be43c661981511ba219f;
extern PyObject *const_str_plain_rv;
extern PyObject *const_str_plain_EvalContext;
extern PyObject *const_tuple_3543ea77468a4b5e783701587e871300_tuple;
static PyObject *const_tuple_str_plain_target_str_plain_node_tuple;
static PyObject *const_tuple_str_plain_self_str_plain__dump_str_plain_buf_tuple;
static PyObject *const_str_plain_args_as_const;
static PyObject *const_tuple_str_plain_self_str_plain_ctx_str_plain_todo_str_plain_node_tuple;
static PyObject *const_str_digest_7827295ccf1d1a35c3b8d70c52b35a4e;
extern PyObject *const_str_plain_FromImport;
extern PyObject *const_str_plain_Scope;
static PyObject *const_str_digest_23b07bf9c2508cc2c03f2b524e053e48;
static PyObject *const_str_digest_2155a363578f790ff076e2fb4ba00f28;
extern PyObject *const_str_plain_body;
extern PyObject *const_str_plain_CallBlock;
extern PyObject *const_str_plain_pos;
static PyObject *const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain_TemplateData;
static PyObject *const_str_plain_BinExpr;
extern PyObject *const_str_plain_as_const;
static PyObject *const_str_digest_23d59ecd28baf66326d8bffa4a30f963;
extern PyObject *const_str_plain_extend;
static PyObject *const_tuple_str_plain_self_str_plain_eval_ctx_tuple;
static PyObject *const_str_digest_3e0434cc2aa434e9921390a6eae9a8c4;
extern PyObject *const_str_plain_ScopedEvalContextModifier;
extern PyObject *const_str_plain_data;
extern PyObject *const_str_plain_options;
extern PyObject *const_str_plain___package__;
extern PyObject *const_str_plain_s;
extern PyObject *const_tuple_str_plain_ascii_tuple;
extern PyObject *const_str_plain_add;
static PyObject *const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple;
static PyObject *const_str_digest_8d386ed28e6d3cbb9633c4e8c974cc26;
extern PyObject *const_str_plain_Slice;
extern PyObject *const_str_plain_evalcontextfilter;
static PyObject *const_str_digest_82ad5b90956fdb9d776a160d5f2abbe8;
extern PyObject *const_str_plain_node;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
extern PyObject *const_str_plain_item;
extern PyObject *const_str_digest_13f6f53a57732ccfbf74bec09e0ab9d8;
extern PyObject *const_tuple_str_plain_self_tuple;
static PyObject *const_str_digest_462f18509bc45590e3052f7f9d4dcf9d;
extern PyObject *const_str_plain_environment;
extern PyObject *const_str_plain_Template;
extern PyObject *const_str_plain_expr;
extern PyObject *const_str_plain_abstract;
static PyObject *const_tuple_str_digest_a0b2657cd503cb2bd14fe47bed993185_tuple;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_plain_set_environment;
extern PyObject *const_str_plain_Add;
extern PyObject *const_tuple_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_tuple;
extern PyObject *const_str_plain_ge;
static PyObject *const_str_digest_1807f11488188858b85bbff1207951d9;
extern PyObject *const_str_plain_append;
static PyObject *const_str_digest_59f1961dfcfd5f1dc5b41c0848075be8;
static PyObject *const_str_digest_2cebed3d292fcb9f12e9f1f991056630;
extern PyObject *const_str_plain_set_ctx;
extern PyObject *const_str_plain_b;
static PyObject *const_str_digest_e797672dfeb66e79776047224f876ffc;
extern PyObject *const_str_plain_ModuleSpec;
extern PyObject *const_str_plain_iter_fields;
extern PyObject *const_str_plain_eq;
extern PyObject *const_tuple_str_chr_91_tuple;
extern PyObject *const_str_plain_Markup;
static PyObject *const_str_digest_35cbbaa2a2bafa645a059a9fc1ad3117;
static PyObject *const_str_digest_f01a271dd9e266380ecd5270d1ea6d65;
extern PyObject *const_str_plain_neg;
extern PyObject *const_str_plain_filters;
extern PyObject *const_str_plain_Call;
static PyObject *const_str_digest_747f6d8e7ff5bcadb3c43747302ef158;
extern PyObject *const_str_plain_pow;
static PyObject *const_str_digest_472796dcef6b45d0473d8b520f22289a;
static PyObject *const_tuple_0ca6dcd1bce525c38567b7c3b00b508e_tuple;
extern PyObject *const_str_plain_has_safe_repr;
extern PyObject *const_str_digest_54a1b7987965ea2b354fce1527b089d1;
extern PyObject *const_str_plain_step;
extern PyObject *const_str_plain_x;
static PyObject *const_str_digest_8f6598f348110ec82837ebe097590a72;
static PyObject *const_tuple_str_plain_op_str_plain_expr_tuple;
static PyObject *const_str_digest_6f8723fa6e9b819ccdb2cdd550a2f1fd;
extern PyObject *const_str_plain_can_assign;
extern PyObject *const_str_plain___class__;
extern PyObject *const_str_plain_eval_ctx;
static PyObject *const_str_digest_b18e2494f37a01ed6b4aec008b396c1a;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain_true;
static PyObject *const_str_digest_fdcbd20fae004c3283c3ee2fb4fdf02b;
extern PyObject *const_str_plain_text_type;
extern PyObject *const_str_plain_update;
extern PyObject *const_tuple_str_plain_body_tuple;
extern PyObject *const_tuple_str_plain_template_tuple;
extern PyObject *const_str_plain_For;
extern PyObject *const_str_plain_identifier;
extern PyObject *const_str_plain_Operand;
extern PyObject *const_str_plain_target;
static PyObject *const_str_digest_ef06d2ead7eefbc0776d3df6754b814c;
static PyObject *const_str_digest_5d380c03eda83b830a98dd20cbb95ea6;
static PyObject *const_str_digest_e66d5d90f3cfbb6f1c300980eaa064f2;
extern PyObject *const_str_plain_Name;
static PyObject *const_str_digest_aff0abde118742498abcfb37daca5cf1;
extern PyObject *const_str_plain_Include;
extern PyObject *const_str_plain_Keyword;
extern PyObject *const_str_plain_get;
extern PyObject *const_tuple_str_plain_options_tuple;
static PyObject *const_str_digest_e54b1298a4b28d18c201d20b74e5663f;
extern PyObject *const_str_plain_targets;
extern PyObject *const_tuple_str_plain_a_str_plain_b_tuple;
extern PyObject *const_str_plain_Impossible;
static PyObject *const_str_plain_Helper;
extern PyObject *const_str_plain_attributes;
static PyObject *const_str_digest_a2d4d3c49cf679dedd19d5ac5757ad39;
extern PyObject *const_str_plain_Macro;
extern PyObject *const_str_plain_InternalName;
static PyObject *const_str_digest_c85072b41b83fc5131ebdc308d14ed1b;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_str_digest_7bba61511efd1ca2924d85e5500f1ad8;
static PyObject *const_str_digest_0f246d429226ee7f6d2b0fc496946ce6;
extern PyObject *const_tuple_str_chr_93_tuple;
extern PyObject *const_tuple_false_tuple;
static PyObject *const_str_digest_1ef543176b23d2e7a74fa9a1713c8954;
static PyObject *const_tuple_str_plain_name_str_plain_body_str_plain_scoped_tuple;
extern PyObject *const_str_plain_arg;
extern PyObject *const_str_digest_13971ae58b983978540cbb4bbf3b1360;
extern PyObject *const_str_plain_args;
static PyObject *const_str_plain_EnvironmentAttribute;
static PyObject *const_str_digest_4dc97139913cc5dbab53325e16cd937c;
static PyObject *const_str_digest_ee48227349a09fdbcf1c4ba79c558779;
extern PyObject *const_str_plain_a;
extern PyObject *const_str_plain_Getitem;
extern PyObject *const_str_plain_items;
static PyObject *const_tuple_a41f5783090772997ee8835f153e0557_tuple;
extern PyObject *const_str_plain_tests;
static PyObject *const_str_digest_bfa32c8e54fe979968d4c0c2597e4cd9;
static PyObject *const_tuple_str_plain_self_str_plain_environment_str_plain_template_name_tuple;
static PyObject *const_str_digest_f24f0d2d61a12ffb7f933692c0769883;
extern PyObject *const_str_plain_sub;
static PyObject *const_tuple_str_plain_self_str_plain_old_tuple;
extern PyObject *const_str_plain_dyn_args;
extern PyObject *const_str_plain_scoped;
extern PyObject *const_str_plain_cls;
extern PyObject *const_str_plain_join;
extern PyObject *const_str_plain_expr1;
extern PyObject *const_str_plain_Neg;
static PyObject *const_tuple_str_plain_self_str_plain_node_type_str_plain_result_tuple;
static PyObject *const_str_digest_d7de95db12f1e5c1e6c3d2e6f2bd93a5;
static PyObject *const_str_digest_9d26efa9da46a7c6988525f4bf1dc363;
static PyObject *const_tuple_str_plain_name_str_plain_attr_tuple;
extern PyObject *const_str_plain_Output;
static PyObject *const_str_digest_606764ad10f6285ee83574a80dfe9a10;
extern PyObject *const_str_plain_policies;
extern PyObject *const_tuple_str_plain_self_str_plain_other_tuple;
extern PyObject *const_str_plain_Import;
static PyObject *const_str_digest_0d8a36e587d6d1fce4f00da44d86934e;
extern PyObject *const_str_plain_in;
extern PyObject *const_tuple_str_plain_deque_tuple;
static PyObject *const_str_digest_179bd4451cd6c7cae43bb732032e8fe2;
static PyObject *const_str_plain_UnaryExpr;
extern PyObject *const_str_plain_dump;
static PyObject *const_tuple_75062d804f125afdc8d9e83beb2e809e_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_rv_tuple;
extern PyObject *const_str_plain_izip;
static PyObject *const_tuple_str_plain_x_str_plain_self_str_plain_eval_ctx_tuple;
static PyObject *const_str_digest_c51e93720396e16a1ba7164571da2985;
extern PyObject *const_str_plain_attr;
extern PyObject *const_str_plain_FilterBlock;
static PyObject *const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_node_str_plain_eval_ctx_tuple;
static PyObject *const_str_digest_513ebb5465cc1f66ac24870fa7fd35b3;
static PyObject *const_str_digest_e1f7043972de37584b4f7cffc6aa47a6;
static PyObject *const_str_plain_Literal;
static PyObject *const_tuple_str_plain_has_safe_repr_tuple;
static PyObject *const_tuple_165ce5f2b400e959de3c730e4adb7681_tuple;
extern PyObject *const_str_plain_Assign;
static PyObject *const_tuple_str_plain_abstract_false_tuple;
static PyObject *const_str_digest_179b8dbc1002cf52620d347c505f88a7;
static PyObject *const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple;
static PyObject *const_str_plain_OverlayScope;
static PyObject *const_str_digest_a0b2657cd503cb2bd14fe47bed993185;
extern PyObject *const_str_plain_exclude;
extern PyObject *const_str_plain_with_context;
extern PyObject *const_str_plain___eq__;
static PyObject *const_str_digest_bc7983e79634e0b23326239af8a9407e;
extern PyObject *const_str_digest_7ce947e0d12ef9f32e46c662f7408804;
extern PyObject *const_str_plain_Mod;
extern PyObject *const_tuple_str_plain_nodes_tuple;
extern PyObject *const_str_plain_right;
extern PyObject *const_str_digest_a7636f57d1f8f80548278378b7bf84e2;
static PyObject *const_str_digest_bbeb099f42d8fe01e00dfc907ed7f617;
extern PyObject *const_str_plain_autoescape;
extern PyObject *const_str_plain_Mul;
static PyObject *const_tuple_str_plain_obj_str_plain_eval_ctx_tuple;
static PyObject *const_str_digest_79ea6dec54e21b3bfa6b7035b4beebe1;
static PyObject *const_str_digest_aa123e7d99689cc7b3ce83e139c6d754;
extern PyObject *const_str_plain_intercepted_binops;
static PyObject *const_str_digest_cca0fd94d05de45173845d1fabb7ddfc;
extern PyObject *const_str_angle_lambda;
static PyObject *const_str_digest_9ad06085bb539d3c8b5f9e8dc4ddbcd1;
static PyObject *const_str_plain_NodeType;
static PyObject *const_str_digest_a7615ef201e97f33738f0841b1a755b3;
static PyObject *const_tuple_be9a87c3e90dadcc17dd16be0249d5f6_tuple;
static PyObject *const_str_digest_93e1278a5a7c6d8f54966c2ae018b500;
extern PyObject *const_str_chr_93;
static PyObject *const_tuple_str_plain_node_tuple;
extern PyObject *const_str_plain_intercepted_unops;
static PyObject *const_str_digest_a88490ebb1db53c83dfe84f0dc94fbb0;
static PyObject *const_str_digest_7bfa80dceef25576d6c9e691b5921d73;
extern PyObject *const_str_plain_or;
static PyObject *const_str_plain__binop_to_func;
extern PyObject *const_str_plain_idx;
extern PyObject *const_tuple_type_object_tuple;
static PyObject *const_str_digest_5e47309bb0f9637116c5091ee5e8b4ca;
extern PyObject *const_str_plain_nodes;
static PyObject *const_tuple_str_plain_node_str_plain_attr_str_plain_ctx_tuple;
static PyObject *const_str_digest_121b76e75f90f7452a3893653c098859;
extern PyObject *const_str_plain_values;
static PyObject *const_tuple_600df8892939241348208cee2ee6cb5b_tuple;
static PyObject *const_str_plain__uaop_to_func;
extern PyObject *const_tuple_str_plain_Markup_tuple;
extern PyObject *const_str_plain_jinja2;
extern PyObject *const_str_plain_deque;
static PyObject *const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_f_tuple;
static PyObject *const_tuple_8e4e93cbef34e74fbf5b7192e2fa5d58_tuple;
static PyObject *const_tuple_8307349a2b2f15223b59b888a4574046_tuple;
static PyObject *const_str_plain_truediv;
extern PyObject *const_str_plain_fields;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_clear;
extern PyObject *const_str_plain_iter_child_nodes;
static PyObject *const_tuple_9f9c32bb876e06977dc745e18980f310_tuple;
extern PyObject *const_tuple_str_plain_name_tuple;
extern PyObject *const_str_plain_dyn_kwargs;
static PyObject *const_str_digest_ab23fc444956a1e022e0390c9e5ee095;
extern PyObject *const_str_plain_Div;
static PyObject *const_tuple_str_digest_aa106bda900de2bd2a72d21b433949d2_tuple;
extern PyObject *const_str_plain_mod;
extern PyObject *const_str_plain_operator;
static PyObject *const_str_digest_291f6292edff092781eb7347e49d3c45;
extern PyObject *const_str_plain_lt;
extern PyObject *const_str_plain_obj;
static PyObject *const_str_digest_6e0c4529c205a3b336c0107d0bc630b7;
extern PyObject *const_str_plain_only;
static PyObject *const_str_digest_04d80127de7cd6f0d2bb0f6f54a3cb79;
extern PyObject *const_str_plain_le;
extern PyObject *const_str_plain_new_value;
static PyObject *const_tuple_str_plain_template_str_plain_target_str_plain_with_context_tuple;
static PyObject *module_filename_obj;

static bool constants_created = false;

static void createModuleConstants( void )
{
    const_str_digest_50e5135d9fc0d9c505da14632777f939 = UNSTREAM_STRING( &constant_bin[ 1509323 ], 20, 0 );
    const_str_plain_Expr = UNSTREAM_STRING( &constant_bin[ 866745 ], 4, 1 );
    const_str_digest_61111f079391d235704d0f7a5ed3ba38 = UNSTREAM_STRING( &constant_bin[ 1509343 ], 287, 0 );
    const_str_digest_5e05da3af0295c94257c0204d091460a = UNSTREAM_STRING( &constant_bin[ 1509630 ], 16, 0 );
    const_str_digest_74112eebfe332d831d9b921bac1fce2b = UNSTREAM_STRING( &constant_bin[ 1509646 ], 700, 0 );
    const_tuple_str_plain_start_str_plain_stop_str_plain_step_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_start_str_plain_stop_str_plain_step_tuple, 0, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_str_plain_start_str_plain_stop_str_plain_step_tuple, 1, const_str_plain_stop ); Py_INCREF( const_str_plain_stop );
    PyTuple_SET_ITEM( const_tuple_str_plain_start_str_plain_stop_str_plain_step_tuple, 2, const_str_plain_step ); Py_INCREF( const_str_plain_step );
    const_str_digest_ba4414296584bed63dbbbf1abebe04f2 = UNSTREAM_STRING( &constant_bin[ 1510346 ], 73, 0 );
    const_str_digest_4cd8030e215c61a4db3d457280fabf87 = UNSTREAM_STRING( &constant_bin[ 1510419 ], 17, 0 );
    const_str_digest_b4b9ffa6f1ca14bbe6420a108432db56 = UNSTREAM_STRING( &constant_bin[ 1510436 ], 40, 0 );
    const_str_digest_70ea80b28f642acc57035d060bf1a656 = UNSTREAM_STRING( &constant_bin[ 1510476 ], 188, 0 );
    const_str_digest_adb63acf99b0f61bd500405681614422 = UNSTREAM_STRING( &constant_bin[ 1510664 ], 38, 0 );
    const_str_digest_0c85c04508f6327eca689634a71355c0 = UNSTREAM_STRING( &constant_bin[ 1510702 ], 9, 0 );
    const_str_digest_8099e76318d48de2044c72bc69e26d62 = UNSTREAM_STRING( &constant_bin[ 1510711 ], 15, 0 );
    const_str_digest_35e49d69578b22d3ac5149339539df84 = UNSTREAM_STRING( &constant_bin[ 1510726 ], 16, 0 );
    const_str_plain_filter_ = UNSTREAM_STRING( &constant_bin[ 161148 ], 7, 1 );
    const_str_digest_25136860d008ccc67956b0ab8b23d3a3 = UNSTREAM_STRING( &constant_bin[ 1510742 ], 15, 0 );
    const_str_digest_d06746aa47b9d1d9b048c9ac192e1e9b = UNSTREAM_STRING( &constant_bin[ 1510757 ], 41, 0 );
    const_str_digest_1807c5d7a12375951f2078407128987a = UNSTREAM_STRING( &constant_bin[ 1510798 ], 311, 0 );
    const_tuple_str_plain_key_str_plain_value_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_key_str_plain_value_tuple, 0, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_str_plain_key_str_plain_value_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_digest_92ad115e7d972b3d1a9f20bd23bf875a = UNSTREAM_STRING( &constant_bin[ 1511109 ], 95, 0 );
    const_str_plain_Stmt = UNSTREAM_STRING( &constant_bin[ 1432796 ], 4, 1 );
    const_str_digest_9ecad2c396532584fe2ad71cc894a103 = UNSTREAM_STRING( &constant_bin[ 1511204 ], 18, 0 );
    const_str_digest_835ac4b829346a2256d258bdb290afe3 = UNSTREAM_STRING( &constant_bin[ 1511222 ], 21, 0 );
    const_str_digest_a66f482eac6a31b80de103ecefcb560b = UNSTREAM_STRING( &constant_bin[ 1511243 ], 13, 0 );
    const_str_digest_1a54bdadf362c140e2262c76f6c45563 = UNSTREAM_STRING( &constant_bin[ 1511256 ], 267, 0 );
    const_str_digest_e3f9ba139273c154f4cf545268c54001 = UNSTREAM_STRING( &constant_bin[ 1511523 ], 16, 0 );
    const_tuple_str_plain_expr_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_expr_tuple, 0, const_str_plain_expr ); Py_INCREF( const_str_plain_expr );
    const_str_plain_node_type = UNSTREAM_STRING( &constant_bin[ 1511539 ], 9, 1 );
    const_str_digest_2abb66649b32f53ab4a8d9fe7c3bfbb9 = UNSTREAM_STRING( &constant_bin[ 1511548 ], 25, 0 );
    const_str_digest_69b6ecec1ddb0b99fd2288f02d4834e9 = UNSTREAM_STRING( &constant_bin[ 846960 ], 5, 0 );
    const_str_digest_62ec52fbadea4400c885be3c37827827 = UNSTREAM_STRING( &constant_bin[ 1511573 ], 62, 0 );
    const_str_digest_aa106bda900de2bd2a72d21b433949d2 = UNSTREAM_STRING( &constant_bin[ 1511635 ], 32, 0 );
    const_str_digest_e71cef5b10b09470a885f6bd4a9f3802 = UNSTREAM_STRING( &constant_bin[ 1511667 ], 40, 0 );
    const_str_digest_55f38441a8fad4734f80deabe4862d47 = UNSTREAM_STRING( &constant_bin[ 1511707 ], 32, 0 );
    const_str_digest_ab66ad8af3983f79e381ca04dbb8f1e1 = UNSTREAM_STRING( &constant_bin[ 1511739 ], 248, 0 );
    const_str_digest_f0bda5c3ed94a095299059b8d099b5d2 = UNSTREAM_STRING( &constant_bin[ 1511987 ], 64, 0 );
    const_str_digest_20dffb12e48304fa2db99a68a5e34d1e = UNSTREAM_STRING( &constant_bin[ 1512051 ], 29, 0 );
    const_str_plain_set_lineno = UNSTREAM_STRING( &constant_bin[ 1512080 ], 10, 1 );
    const_str_digest_c89b6762e2fbfd3057435d424c4947d0 = UNSTREAM_STRING( &constant_bin[ 1512090 ], 13, 0 );
    const_str_digest_7405eb26496b03c1fc4702a7ec9a1ed8 = UNSTREAM_STRING( &constant_bin[ 1512103 ], 143, 0 );
    const_str_digest_7605151d55a47abf480956a78c7fdec8 = UNSTREAM_STRING( &constant_bin[ 1512246 ], 9, 0 );
    const_str_digest_31e7c9d9d00fdc949ed6b2a1e884129d = UNSTREAM_STRING( &constant_bin[ 1512255 ], 16, 0 );
    const_tuple_str_plain_target_str_plain_filter_str_plain_body_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_target_str_plain_filter_str_plain_body_tuple, 0, const_str_plain_target ); Py_INCREF( const_str_plain_target );
    PyTuple_SET_ITEM( const_tuple_str_plain_target_str_plain_filter_str_plain_body_tuple, 1, const_str_plain_filter ); Py_INCREF( const_str_plain_filter );
    PyTuple_SET_ITEM( const_tuple_str_plain_target_str_plain_filter_str_plain_body_tuple, 2, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    const_tuple_59e37e622c2598ebb986b4a2056ed9a9_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_59e37e622c2598ebb986b4a2056ed9a9_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_59e37e622c2598ebb986b4a2056ed9a9_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    PyTuple_SET_ITEM( const_tuple_59e37e622c2598ebb986b4a2056ed9a9_tuple, 2, const_str_plain_test ); Py_INCREF( const_str_plain_test );
    PyTuple_SET_ITEM( const_tuple_59e37e622c2598ebb986b4a2056ed9a9_tuple, 3, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_59e37e622c2598ebb986b4a2056ed9a9_tuple, 4, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_str_digest_b49472c86d89e135c19e331a4f72d626 = UNSTREAM_STRING( &constant_bin[ 1512271 ], 381, 0 );
    const_str_digest_d364da1f2a98272e996ae1943cda6b6c = UNSTREAM_STRING( &constant_bin[ 1512652 ], 22, 0 );
    const_str_digest_614dd9d449339ae9c67e653f60e76ee9 = UNSTREAM_STRING( &constant_bin[ 1512674 ], 15, 0 );
    const_tuple_7bf4fbbdba32d9148daca07d0d9906de_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_7bf4fbbdba32d9148daca07d0d9906de_tuple, 0, const_str_plain_izip ); Py_INCREF( const_str_plain_izip );
    PyTuple_SET_ITEM( const_tuple_7bf4fbbdba32d9148daca07d0d9906de_tuple, 1, const_str_plain_with_metaclass ); Py_INCREF( const_str_plain_with_metaclass );
    PyTuple_SET_ITEM( const_tuple_7bf4fbbdba32d9148daca07d0d9906de_tuple, 2, const_str_plain_text_type ); Py_INCREF( const_str_plain_text_type );
    PyTuple_SET_ITEM( const_tuple_7bf4fbbdba32d9148daca07d0d9906de_tuple, 3, const_str_plain_PY2 ); Py_INCREF( const_str_plain_PY2 );
    const_str_digest_86f2787df3d43109e652aefde8ba7f0e = UNSTREAM_STRING( &constant_bin[ 1512689 ], 537, 0 );
    const_str_plain_not_ = UNSTREAM_STRING( &constant_bin[ 12177 ], 4, 1 );
    const_str_digest_845cafcab2f0caa927796cd7bcdd0142 = UNSTREAM_STRING( &constant_bin[ 1513226 ], 23, 0 );
    const_str_plain_MarkSafe = UNSTREAM_STRING( &constant_bin[ 1433714 ], 8, 1 );
    const_str_digest_e603c715dadcbbeeda4b1a748ae3e14c = UNSTREAM_STRING( &constant_bin[ 1513249 ], 106, 0 );
    const_str_digest_c58c3c9ae2033318f0348053e325e7e1 = UNSTREAM_STRING( &constant_bin[ 1513355 ], 370, 0 );
    const_str_digest_bfd820e9092fffa14429396739129d6a = UNSTREAM_STRING( &constant_bin[ 1513725 ], 16, 0 );
    const_str_digest_abeaa30875478a8728439599b60393c8 = UNSTREAM_STRING( &constant_bin[ 1513741 ], 34, 0 );
    const_str_digest_437d34f877389138c34928ec1dfd0227 = UNSTREAM_STRING( &constant_bin[ 1513775 ], 20, 0 );
    const_str_plain_MarkSafeIfAutoescape = UNSTREAM_STRING( &constant_bin[ 1433714 ], 20, 1 );
    const_tuple_str_plain_template_str_plain_names_str_plain_with_context_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_template_str_plain_names_str_plain_with_context_tuple, 0, const_str_plain_template ); Py_INCREF( const_str_plain_template );
    PyTuple_SET_ITEM( const_tuple_str_plain_template_str_plain_names_str_plain_with_context_tuple, 1, const_str_plain_names ); Py_INCREF( const_str_plain_names );
    PyTuple_SET_ITEM( const_tuple_str_plain_template_str_plain_names_str_plain_with_context_tuple, 2, const_str_plain_with_context ); Py_INCREF( const_str_plain_with_context );
    const_str_digest_0670adee5187015bcb491127cf260b75 = UNSTREAM_STRING( &constant_bin[ 1513795 ], 20, 0 );
    const_str_digest_080725e57cfe09bac83bef042d6ec2c0 = UNSTREAM_STRING( &constant_bin[ 1513815 ], 222, 0 );
    const_tuple_str_plain_left_str_plain_right_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_left_str_plain_right_tuple, 0, const_str_plain_left ); Py_INCREF( const_str_plain_left );
    PyTuple_SET_ITEM( const_tuple_str_plain_left_str_plain_right_tuple, 1, const_str_plain_right ); Py_INCREF( const_str_plain_right );
    const_str_digest_fc365cf01d2591bedc22470a116c9165 = UNSTREAM_STRING( &constant_bin[ 1514037 ], 90, 0 );
    const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple, 1, const_str_plain_exclude ); Py_INCREF( const_str_plain_exclude );
    PyTuple_SET_ITEM( const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple, 2, const_str_plain_only ); Py_INCREF( const_str_plain_only );
    PyTuple_SET_ITEM( const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple, 3, const_str_plain_field ); Py_INCREF( const_str_plain_field );
    PyTuple_SET_ITEM( const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple, 4, const_str_plain_item ); Py_INCREF( const_str_plain_item );
    PyTuple_SET_ITEM( const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple, 5, const_str_plain_n ); Py_INCREF( const_str_plain_n );
    const_tuple_str_plain_lineno_str_plain_environment_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_lineno_str_plain_environment_tuple, 0, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_str_plain_lineno_str_plain_environment_tuple, 1, const_str_plain_environment ); Py_INCREF( const_str_plain_environment );
    const_tuple_str_plain_targets_str_plain_values_str_plain_body_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_targets_str_plain_values_str_plain_body_tuple, 0, const_str_plain_targets ); Py_INCREF( const_str_plain_targets );
    PyTuple_SET_ITEM( const_tuple_str_plain_targets_str_plain_values_str_plain_body_tuple, 1, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    PyTuple_SET_ITEM( const_tuple_str_plain_targets_str_plain_values_str_plain_body_tuple, 2, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    const_tuple_str_plain_items_str_plain_ctx_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_items_str_plain_ctx_tuple, 0, const_str_plain_items ); Py_INCREF( const_str_plain_items );
    PyTuple_SET_ITEM( const_tuple_str_plain_items_str_plain_ctx_tuple, 1, const_str_plain_ctx ); Py_INCREF( const_str_plain_ctx );
    const_str_digest_ad78917dee59b8ced41dc4b5c9d574b3 = UNSTREAM_STRING( &constant_bin[ 1514127 ], 32, 0 );
    const_str_digest_9e185a50d3143e0445910a9a8c2d40e9 = UNSTREAM_STRING( &constant_bin[ 1514159 ], 14, 0 );
    const_str_digest_25694a9685cc0ed9447ef898495eaf5c = UNSTREAM_STRING( &constant_bin[ 1514173 ], 150, 0 );
    const_str_digest_a5be934f62deb29c722cd2af54ba0d8b = UNSTREAM_STRING( &constant_bin[ 1514323 ], 176, 0 );
    const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple, 0, const_str_plain_true ); Py_INCREF( const_str_plain_true );
    PyTuple_SET_ITEM( const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple, 1, const_str_plain_false ); Py_INCREF( const_str_plain_false );
    PyTuple_SET_ITEM( const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple, 2, const_str_plain_none ); Py_INCREF( const_str_plain_none );
    PyTuple_SET_ITEM( const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple, 3, const_str_plain_True ); Py_INCREF( const_str_plain_True );
    PyTuple_SET_ITEM( const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple, 4, const_str_plain_False ); Py_INCREF( const_str_plain_False );
    PyTuple_SET_ITEM( const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple, 5, const_str_plain_None ); Py_INCREF( const_str_plain_None );
    const_str_digest_1db01a7e1949a287f12cf968128329d7 = UNSTREAM_STRING( &constant_bin[ 1514499 ], 12, 0 );
    const_tuple_str_plain_name_str_plain_ctx_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_name_str_plain_ctx_tuple, 0, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_str_plain_name_str_plain_ctx_tuple, 1, const_str_plain_ctx ); Py_INCREF( const_str_plain_ctx );
    const_str_digest_86d45a7144233bec976d910632daef95 = UNSTREAM_STRING( &constant_bin[ 1514511 ], 135, 0 );
    const_tuple_1d7bd8276cb9da372482cb578e1e0d10_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_1d7bd8276cb9da372482cb578e1e0d10_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_1d7bd8276cb9da372482cb578e1e0d10_tuple, 1, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_1d7bd8276cb9da372482cb578e1e0d10_tuple, 2, const_str_plain_override ); Py_INCREF( const_str_plain_override );
    PyTuple_SET_ITEM( const_tuple_1d7bd8276cb9da372482cb578e1e0d10_tuple, 3, const_str_plain_todo ); Py_INCREF( const_str_plain_todo );
    PyTuple_SET_ITEM( const_tuple_1d7bd8276cb9da372482cb578e1e0d10_tuple, 4, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    const_str_plain_not = UNSTREAM_STRING( &constant_bin[ 124 ], 3, 1 );
    const_tuple_str_plain_node_str_plain_ctx_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_str_plain_ctx_tuple, 0, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_str_plain_ctx_tuple, 1, const_str_plain_ctx ); Py_INCREF( const_str_plain_ctx );
    const_tuple_c393dd118778570338b62cd408509935_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_c393dd118778570338b62cd408509935_tuple, 0, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_c393dd118778570338b62cd408509935_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_c393dd118778570338b62cd408509935_tuple, 2, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_c393dd118778570338b62cd408509935_tuple, 3, const_str_plain_dyn_args ); Py_INCREF( const_str_plain_dyn_args );
    PyTuple_SET_ITEM( const_tuple_c393dd118778570338b62cd408509935_tuple, 4, const_str_plain_dyn_kwargs ); Py_INCREF( const_str_plain_dyn_kwargs );
    const_str_digest_40f6322b8c54e2a631a22f0cad68bbc1 = UNSTREAM_STRING( &constant_bin[ 1514127 ], 13, 0 );
    const_str_digest_8362f750add64e017837c7197fbbdddc = UNSTREAM_STRING( &constant_bin[ 1514646 ], 17, 0 );
    const_str_plain_ContextReference = UNSTREAM_STRING( &constant_bin[ 1434955 ], 16, 1 );
    const_str_digest_797433fccfc787066be93fb6493d73ad = UNSTREAM_STRING( &constant_bin[ 1514663 ], 101, 0 );
    const_str_digest_0b23597c9aa01e7b47caefef002eca86 = UNSTREAM_STRING( &constant_bin[ 1514764 ], 56, 0 );
    const_str_digest_60efb76ccf12c2b2d02ba86e5583e718 = UNSTREAM_STRING( &constant_bin[ 1514820 ], 346, 0 );
    const_str_digest_90117f16312294e8b31ad692ca74733e = UNSTREAM_STRING( &constant_bin[ 1515166 ], 13, 0 );
    const_str_plain__cmpop_to_func = UNSTREAM_STRING( &constant_bin[ 1515179 ], 14, 1 );
    const_str_digest_3740cc5eeb1f2781cbc1ef396ea8675f = UNSTREAM_STRING( &constant_bin[ 1515193 ], 38, 0 );
    const_tuple_str_plain_fields_str_plain_attributes_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_fields_str_plain_attributes_tuple, 0, const_str_plain_fields ); Py_INCREF( const_str_plain_fields );
    PyTuple_SET_ITEM( const_tuple_str_plain_fields_str_plain_attributes_tuple, 1, const_str_plain_attributes ); Py_INCREF( const_str_plain_attributes );
    const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple, 0, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple, 1, const_str_plain_idx ); Py_INCREF( const_str_plain_idx );
    PyTuple_SET_ITEM( const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple, 2, const_str_plain_field ); Py_INCREF( const_str_plain_field );
    PyTuple_SET_ITEM( const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple, 4, const_str_plain_item ); Py_INCREF( const_str_plain_item );
    PyTuple_SET_ITEM( const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple, 5, const_str_plain_buf ); Py_INCREF( const_str_plain_buf );
    PyTuple_SET_ITEM( const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple, 6, const_str_plain__dump ); Py_INCREF( const_str_plain__dump );
    const_str_plain_ExtensionAttribute = UNSTREAM_STRING( &constant_bin[ 1437357 ], 18, 1 );
    const_tuple_8d404e7ebddaf61fb74081e691842b19_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_8d404e7ebddaf61fb74081e691842b19_tuple, 0, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_8d404e7ebddaf61fb74081e691842b19_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    PyTuple_SET_ITEM( const_tuple_8d404e7ebddaf61fb74081e691842b19_tuple, 2, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_8d404e7ebddaf61fb74081e691842b19_tuple, 3, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_tuple_c11ac06eac59c9675cae026ca38f9276_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_c11ac06eac59c9675cae026ca38f9276_tuple, 0, const_str_plain_template ); Py_INCREF( const_str_plain_template );
    PyTuple_SET_ITEM( const_tuple_c11ac06eac59c9675cae026ca38f9276_tuple, 1, const_str_plain_with_context ); Py_INCREF( const_str_plain_with_context );
    PyTuple_SET_ITEM( const_tuple_c11ac06eac59c9675cae026ca38f9276_tuple, 2, const_str_plain_ignore_missing ); Py_INCREF( const_str_plain_ignore_missing );
    const_tuple_e2332645ce854f293f4caeff0a011386_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_e2332645ce854f293f4caeff0a011386_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_e2332645ce854f293f4caeff0a011386_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_e2332645ce854f293f4caeff0a011386_tuple, 2, const_str_plain_bases ); Py_INCREF( const_str_plain_bases );
    PyTuple_SET_ITEM( const_tuple_e2332645ce854f293f4caeff0a011386_tuple, 3, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_e2332645ce854f293f4caeff0a011386_tuple, 4, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    PyTuple_SET_ITEM( const_tuple_e2332645ce854f293f4caeff0a011386_tuple, 5, const_str_plain_storage ); Py_INCREF( const_str_plain_storage );
    const_str_digest_96fde943d01e256398bbf1b6ca455873 = UNSTREAM_STRING( &constant_bin[ 1515231 ], 39, 0 );
    const_str_digest_d7d129e7ee6a5579b086ac1210e32f6d = UNSTREAM_STRING( &constant_bin[ 1515270 ], 56, 0 );
    const_str_digest_e592c4a2ffca3524958806f6a552fc64 = UNSTREAM_STRING( &constant_bin[ 1515326 ], 16, 0 );
    const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_const_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_const_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_const_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_const_tuple, 2, const_str_plain_const ); Py_INCREF( const_str_plain_const );
    const_str_plain_Break = UNSTREAM_STRING( &constant_bin[ 1437463 ], 5, 1 );
    const_tuple_str_plain_importname_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_importname_tuple, 0, const_str_plain_importname ); Py_INCREF( const_str_plain_importname );
    const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple, 1, const_str_plain_fields ); Py_INCREF( const_str_plain_fields );
    PyTuple_SET_ITEM( const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple, 2, const_str_plain_attributes ); Py_INCREF( const_str_plain_attributes );
    PyTuple_SET_ITEM( const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple, 3, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple, 4, const_str_plain_arg ); Py_INCREF( const_str_plain_arg );
    PyTuple_SET_ITEM( const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple, 5, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    const_tuple_8d76ad4efeb101f584d904b2a92105db_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_8d76ad4efeb101f584d904b2a92105db_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8d76ad4efeb101f584d904b2a92105db_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    PyTuple_SET_ITEM( const_tuple_8d76ad4efeb101f584d904b2a92105db_tuple, 2, const_str_plain_filter_ ); Py_INCREF( const_str_plain_filter_ );
    PyTuple_SET_ITEM( const_tuple_8d76ad4efeb101f584d904b2a92105db_tuple, 3, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_8d76ad4efeb101f584d904b2a92105db_tuple, 4, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_str_digest_62c4af48d20ce9b09b9aba02e5a47e45 = UNSTREAM_STRING( &constant_bin[ 1515342 ], 278, 0 );
    const_str_digest_46ccee62c8ef22cb3237ef8e568829f0 = UNSTREAM_STRING( &constant_bin[ 1515620 ], 38, 0 );
    const_str_digest_1904fbcd9fa3e756c9852501a69875b5 = UNSTREAM_STRING( &constant_bin[ 1515658 ], 166, 0 );
    const_str_plain_asyncfiltervariant = UNSTREAM_STRING( &constant_bin[ 1515824 ], 18, 1 );
    const_tuple_str_plain_body_str_plain_filter_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_body_str_plain_filter_tuple, 0, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    PyTuple_SET_ITEM( const_tuple_str_plain_body_str_plain_filter_tuple, 1, const_str_plain_filter ); Py_INCREF( const_str_plain_filter );
    const_str_digest_52ffc572cc80d7fb4467e8bde7129e40 = UNSTREAM_STRING( &constant_bin[ 1515842 ], 13, 0 );
    const_tuple_str_plain_node_str_plain_arg_str_plain_ctx_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_str_plain_arg_str_plain_ctx_tuple, 0, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_str_plain_arg_str_plain_ctx_tuple, 1, const_str_plain_arg ); Py_INCREF( const_str_plain_arg );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_str_plain_arg_str_plain_ctx_tuple, 2, const_str_plain_ctx ); Py_INCREF( const_str_plain_ctx );
    const_str_digest_3d7284bae3fb785b579b3e8164ee90a5 = UNSTREAM_STRING( &constant_bin[ 1515855 ], 27, 0 );
    const_tuple_str_plain_context_str_plain_body_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_body_tuple, 0, const_str_plain_context ); Py_INCREF( const_str_plain_context );
    PyTuple_SET_ITEM( const_tuple_str_plain_context_str_plain_body_tuple, 1, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    const_str_digest_42312d483ec942858c3736c314adc1d9 = UNSTREAM_STRING( &constant_bin[ 1515882 ], 56, 0 );
    const_str_plain_EvalContextModifier = UNSTREAM_STRING( &constant_bin[ 1433260 ], 19, 1 );
    const_str_digest_41496a23db1a51655852694516177510 = UNSTREAM_STRING( &constant_bin[ 1515938 ], 30, 0 );
    const_str_digest_1b51e54a79422c06d441fd9d629f0442 = UNSTREAM_STRING( &constant_bin[ 1515968 ], 12, 0 );
    const_str_digest_7ce06fe189898c976a03a3c14041aa56 = UNSTREAM_STRING( &constant_bin[ 1515980 ], 75, 0 );
    const_str_digest_f8070aff6952c87b12859e25ef90bca2 = UNSTREAM_STRING( &constant_bin[ 1516055 ], 192, 0 );
    const_str_digest_5a3a854b390024a6f292bfb3854773ef = UNSTREAM_STRING( &constant_bin[ 1516247 ], 28, 0 );
    const_str_digest_e3a4c823e1ef10e127881c4bbabde90e = UNSTREAM_STRING( &constant_bin[ 1516275 ], 132, 0 );
    const_tuple_str_plain_expr_str_plain_ops_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_expr_str_plain_ops_tuple, 0, const_str_plain_expr ); Py_INCREF( const_str_plain_expr );
    PyTuple_SET_ITEM( const_tuple_str_plain_expr_str_plain_ops_tuple, 1, const_str_plain_ops ); Py_INCREF( const_str_plain_ops );
    const_tuple_str_plain_identifier_str_plain_name_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_identifier_str_plain_name_tuple, 0, const_str_plain_identifier ); Py_INCREF( const_str_plain_identifier );
    PyTuple_SET_ITEM( const_tuple_str_plain_identifier_str_plain_name_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_str_digest_95b57a0cd069bd281c67fb07a21e72fd = UNSTREAM_STRING( &constant_bin[ 1516407 ], 31, 0 );
    const_str_digest_ce1a7c91f9f5083b68e2a321a008fae9 = UNSTREAM_STRING( &constant_bin[ 1516438 ], 35, 0 );
    const_str_plain_get_eval_context = UNSTREAM_STRING( &constant_bin[ 1516473 ], 16, 1 );
    const_str_plain_ExprStmt = UNSTREAM_STRING( &constant_bin[ 1432792 ], 8, 1 );
    const_str_digest_223828ec3f21802d35392672e806dae6 = UNSTREAM_STRING( &constant_bin[ 1516489 ], 99, 0 );
    const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_expr_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_expr_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_expr_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_expr_tuple, 2, const_str_plain_expr ); Py_INCREF( const_str_plain_expr );
    const_str_plain_Continue = UNSTREAM_STRING( &constant_bin[ 1432778 ], 8, 1 );
    const_str_digest_35defc2dd8b3963f08b644ee8f7ab4a9 = UNSTREAM_STRING( &constant_bin[ 1516588 ], 52, 0 );
    const_str_digest_bf5875428d198777337f11f950de50d2 = UNSTREAM_STRING( &constant_bin[ 1516640 ], 200, 0 );
    const_str_digest_078fffba1ab83fa8ba0083a9c3d74edf = UNSTREAM_STRING( &constant_bin[ 1516840 ], 282, 0 );
    const_tuple_str_plain_test_str_plain_expr1_str_plain_expr2_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_test_str_plain_expr1_str_plain_expr2_tuple, 0, const_str_plain_test ); Py_INCREF( const_str_plain_test );
    PyTuple_SET_ITEM( const_tuple_str_plain_test_str_plain_expr1_str_plain_expr2_tuple, 1, const_str_plain_expr1 ); Py_INCREF( const_str_plain_expr1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_test_str_plain_expr1_str_plain_expr2_tuple, 2, const_str_plain_expr2 ); Py_INCREF( const_str_plain_expr2 );
    const_str_digest_31aac5220761c2bcb9b9206343d3b20f = UNSTREAM_STRING( &constant_bin[ 1517122 ], 18, 0 );
    const_str_digest_b5d186439a50b4d992ca35e19b3d8bd0 = UNSTREAM_STRING( &constant_bin[ 1517140 ], 27, 0 );
    const_str_digest_5cdce82ded47fc54bb0da62bafae233b = UNSTREAM_STRING( &constant_bin[ 1517167 ], 20, 0 );
    const_str_digest_8b995823d5fc8c89069764d298740c71 = UNSTREAM_STRING( &constant_bin[ 1517187 ], 105, 0 );
    const_str_plain__failing_new = UNSTREAM_STRING( &constant_bin[ 1517292 ], 12, 1 );
    const_str_digest_01de7be6f170be43c661981511ba219f = UNSTREAM_STRING( &constant_bin[ 1517304 ], 28, 0 );
    const_tuple_str_plain_target_str_plain_node_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_target_str_plain_node_tuple, 0, const_str_plain_target ); Py_INCREF( const_str_plain_target );
    PyTuple_SET_ITEM( const_tuple_str_plain_target_str_plain_node_tuple, 1, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    const_tuple_str_plain_self_str_plain__dump_str_plain_buf_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain__dump_str_plain_buf_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain__dump_str_plain_buf_tuple, 1, const_str_plain__dump ); Py_INCREF( const_str_plain__dump );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain__dump_str_plain_buf_tuple, 2, const_str_plain_buf ); Py_INCREF( const_str_plain_buf );
    const_str_plain_args_as_const = UNSTREAM_STRING( &constant_bin[ 1511707 ], 13, 1 );
    const_tuple_str_plain_self_str_plain_ctx_str_plain_todo_str_plain_node_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ctx_str_plain_todo_str_plain_node_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ctx_str_plain_todo_str_plain_node_tuple, 1, const_str_plain_ctx ); Py_INCREF( const_str_plain_ctx );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ctx_str_plain_todo_str_plain_node_tuple, 2, const_str_plain_todo ); Py_INCREF( const_str_plain_todo );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ctx_str_plain_todo_str_plain_node_tuple, 3, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    const_str_digest_7827295ccf1d1a35c3b8d70c52b35a4e = UNSTREAM_STRING( &constant_bin[ 1517332 ], 21, 0 );
    const_str_digest_23b07bf9c2508cc2c03f2b524e053e48 = UNSTREAM_STRING( &constant_bin[ 1517353 ], 423, 0 );
    const_str_digest_2155a363578f790ff076e2fb4ba00f28 = UNSTREAM_STRING( &constant_bin[ 1517776 ], 21, 0 );
    const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple, 0, const_str_plain_target ); Py_INCREF( const_str_plain_target );
    PyTuple_SET_ITEM( const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple, 1, const_str_plain_iter ); Py_INCREF( const_str_plain_iter );
    PyTuple_SET_ITEM( const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple, 2, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    PyTuple_SET_ITEM( const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple, 3, const_str_plain_else_ ); Py_INCREF( const_str_plain_else_ );
    PyTuple_SET_ITEM( const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple, 4, const_str_plain_test ); Py_INCREF( const_str_plain_test );
    PyTuple_SET_ITEM( const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple, 5, const_str_plain_recursive ); Py_INCREF( const_str_plain_recursive );
    const_str_plain_BinExpr = UNSTREAM_STRING( &constant_bin[ 1517797 ], 7, 1 );
    const_str_digest_23d59ecd28baf66326d8bffa4a30f963 = UNSTREAM_STRING( &constant_bin[ 1517804 ], 16, 0 );
    const_tuple_str_plain_self_str_plain_eval_ctx_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    const_str_digest_3e0434cc2aa434e9921390a6eae9a8c4 = UNSTREAM_STRING( &constant_bin[ 1517820 ], 32, 0 );
    const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple, 1, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple, 2, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    const_str_digest_8d386ed28e6d3cbb9633c4e8c974cc26 = UNSTREAM_STRING( &constant_bin[ 1517852 ], 16, 0 );
    const_str_digest_82ad5b90956fdb9d776a160d5f2abbe8 = UNSTREAM_STRING( &constant_bin[ 1517868 ], 128, 0 );
    const_str_digest_462f18509bc45590e3052f7f9d4dcf9d = UNSTREAM_STRING( &constant_bin[ 1517996 ], 11, 0 );
    const_tuple_str_digest_a0b2657cd503cb2bd14fe47bed993185_tuple = PyTuple_New( 1 );
    const_str_digest_a0b2657cd503cb2bd14fe47bed993185 = UNSTREAM_STRING( &constant_bin[ 1518007 ], 15, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_a0b2657cd503cb2bd14fe47bed993185_tuple, 0, const_str_digest_a0b2657cd503cb2bd14fe47bed993185 ); Py_INCREF( const_str_digest_a0b2657cd503cb2bd14fe47bed993185 );
    const_str_digest_1807f11488188858b85bbff1207951d9 = UNSTREAM_STRING( &constant_bin[ 1518022 ], 266, 0 );
    const_str_digest_59f1961dfcfd5f1dc5b41c0848075be8 = UNSTREAM_STRING( &constant_bin[ 1518288 ], 27, 0 );
    const_str_digest_2cebed3d292fcb9f12e9f1f991056630 = UNSTREAM_STRING( &constant_bin[ 1518315 ], 18, 0 );
    const_str_digest_e797672dfeb66e79776047224f876ffc = UNSTREAM_STRING( &constant_bin[ 1518333 ], 11, 0 );
    const_str_digest_35cbbaa2a2bafa645a059a9fc1ad3117 = UNSTREAM_STRING( &constant_bin[ 1518344 ], 105, 0 );
    const_str_digest_f01a271dd9e266380ecd5270d1ea6d65 = UNSTREAM_STRING( &constant_bin[ 1518449 ], 29, 0 );
    const_str_digest_747f6d8e7ff5bcadb3c43747302ef158 = UNSTREAM_STRING( &constant_bin[ 1518478 ], 31, 0 );
    const_str_digest_472796dcef6b45d0473d8b520f22289a = UNSTREAM_STRING( &constant_bin[ 1518509 ], 36, 0 );
    const_tuple_0ca6dcd1bce525c38567b7c3b00b508e_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_0ca6dcd1bce525c38567b7c3b00b508e_tuple, 0, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_0ca6dcd1bce525c38567b7c3b00b508e_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_0ca6dcd1bce525c38567b7c3b00b508e_tuple, 2, const_str_plain_defaults ); Py_INCREF( const_str_plain_defaults );
    PyTuple_SET_ITEM( const_tuple_0ca6dcd1bce525c38567b7c3b00b508e_tuple, 3, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    const_str_digest_8f6598f348110ec82837ebe097590a72 = UNSTREAM_STRING( &constant_bin[ 1518545 ], 303, 0 );
    const_tuple_str_plain_op_str_plain_expr_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_op_str_plain_expr_tuple, 0, const_str_plain_op ); Py_INCREF( const_str_plain_op );
    PyTuple_SET_ITEM( const_tuple_str_plain_op_str_plain_expr_tuple, 1, const_str_plain_expr ); Py_INCREF( const_str_plain_expr );
    const_str_digest_6f8723fa6e9b819ccdb2cdd550a2f1fd = UNSTREAM_STRING( &constant_bin[ 1518848 ], 15, 0 );
    const_str_digest_b18e2494f37a01ed6b4aec008b396c1a = UNSTREAM_STRING( &constant_bin[ 1518863 ], 16, 0 );
    const_str_digest_fdcbd20fae004c3283c3ee2fb4fdf02b = UNSTREAM_STRING( &constant_bin[ 1518879 ], 110, 0 );
    const_str_digest_ef06d2ead7eefbc0776d3df6754b814c = UNSTREAM_STRING( &constant_bin[ 1518989 ], 33, 0 );
    const_str_digest_5d380c03eda83b830a98dd20cbb95ea6 = UNSTREAM_STRING( &constant_bin[ 1519022 ], 34, 0 );
    const_str_digest_e66d5d90f3cfbb6f1c300980eaa064f2 = UNSTREAM_STRING( &constant_bin[ 1519056 ], 16, 0 );
    const_str_digest_aff0abde118742498abcfb37daca5cf1 = UNSTREAM_STRING( &constant_bin[ 1510423 ], 13, 0 );
    const_str_digest_e54b1298a4b28d18c201d20b74e5663f = UNSTREAM_STRING( &constant_bin[ 1519072 ], 129, 0 );
    const_str_plain_Helper = UNSTREAM_STRING( &constant_bin[ 57702 ], 6, 1 );
    const_str_digest_a2d4d3c49cf679dedd19d5ac5757ad39 = UNSTREAM_STRING( &constant_bin[ 1519201 ], 168, 0 );
    const_str_digest_c85072b41b83fc5131ebdc308d14ed1b = UNSTREAM_STRING( &constant_bin[ 1519369 ], 46, 0 );
    const_str_digest_7bba61511efd1ca2924d85e5500f1ad8 = UNSTREAM_STRING( &constant_bin[ 1519415 ], 32, 0 );
    const_str_digest_0f246d429226ee7f6d2b0fc496946ce6 = UNSTREAM_STRING( &constant_bin[ 1519447 ], 20, 0 );
    const_str_digest_1ef543176b23d2e7a74fa9a1713c8954 = UNSTREAM_STRING( &constant_bin[ 1519467 ], 30, 0 );
    const_tuple_str_plain_name_str_plain_body_str_plain_scoped_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_name_str_plain_body_str_plain_scoped_tuple, 0, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_str_plain_name_str_plain_body_str_plain_scoped_tuple, 1, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    PyTuple_SET_ITEM( const_tuple_str_plain_name_str_plain_body_str_plain_scoped_tuple, 2, const_str_plain_scoped ); Py_INCREF( const_str_plain_scoped );
    const_str_plain_EnvironmentAttribute = UNSTREAM_STRING( &constant_bin[ 1433354 ], 20, 1 );
    const_str_digest_4dc97139913cc5dbab53325e16cd937c = UNSTREAM_STRING( &constant_bin[ 1519497 ], 29, 0 );
    const_str_digest_ee48227349a09fdbcf1c4ba79c558779 = UNSTREAM_STRING( &constant_bin[ 1518989 ], 14, 0 );
    const_tuple_a41f5783090772997ee8835f153e0557_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_a41f5783090772997ee8835f153e0557_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_a41f5783090772997ee8835f153e0557_tuple, 1, const_str_plain_exclude ); Py_INCREF( const_str_plain_exclude );
    PyTuple_SET_ITEM( const_tuple_a41f5783090772997ee8835f153e0557_tuple, 2, const_str_plain_only ); Py_INCREF( const_str_plain_only );
    PyTuple_SET_ITEM( const_tuple_a41f5783090772997ee8835f153e0557_tuple, 3, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_str_digest_bfa32c8e54fe979968d4c0c2597e4cd9 = UNSTREAM_STRING( &constant_bin[ 1519526 ], 21, 0 );
    const_tuple_str_plain_self_str_plain_environment_str_plain_template_name_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_environment_str_plain_template_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_environment_str_plain_template_name_tuple, 1, const_str_plain_environment ); Py_INCREF( const_str_plain_environment );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_environment_str_plain_template_name_tuple, 2, const_str_plain_template_name ); Py_INCREF( const_str_plain_template_name );
    const_str_digest_f24f0d2d61a12ffb7f933692c0769883 = UNSTREAM_STRING( &constant_bin[ 1427600 ], 6, 0 );
    const_tuple_str_plain_self_str_plain_old_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_old_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_old_tuple, 1, const_str_plain_old ); Py_INCREF( const_str_plain_old );
    const_tuple_str_plain_self_str_plain_node_type_str_plain_result_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_node_type_str_plain_result_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_node_type_str_plain_result_tuple, 1, const_str_plain_node_type ); Py_INCREF( const_str_plain_node_type );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_node_type_str_plain_result_tuple, 2, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_str_digest_d7de95db12f1e5c1e6c3d2e6f2bd93a5 = UNSTREAM_STRING( &constant_bin[ 1519547 ], 35, 0 );
    const_str_digest_9d26efa9da46a7c6988525f4bf1dc363 = UNSTREAM_STRING( &constant_bin[ 1519582 ], 16, 0 );
    const_tuple_str_plain_name_str_plain_attr_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_name_str_plain_attr_tuple, 0, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_str_plain_name_str_plain_attr_tuple, 1, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    const_str_digest_606764ad10f6285ee83574a80dfe9a10 = UNSTREAM_STRING( &constant_bin[ 1519598 ], 106, 0 );
    const_str_digest_0d8a36e587d6d1fce4f00da44d86934e = UNSTREAM_STRING( &constant_bin[ 1519704 ], 44, 0 );
    const_str_digest_179bd4451cd6c7cae43bb732032e8fe2 = UNSTREAM_STRING( &constant_bin[ 1519748 ], 18, 0 );
    const_str_plain_UnaryExpr = UNSTREAM_STRING( &constant_bin[ 1519748 ], 9, 1 );
    const_tuple_75062d804f125afdc8d9e83beb2e809e_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_75062d804f125afdc8d9e83beb2e809e_tuple, 0, const_str_plain_call ); Py_INCREF( const_str_plain_call );
    PyTuple_SET_ITEM( const_tuple_75062d804f125afdc8d9e83beb2e809e_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_75062d804f125afdc8d9e83beb2e809e_tuple, 2, const_str_plain_defaults ); Py_INCREF( const_str_plain_defaults );
    PyTuple_SET_ITEM( const_tuple_75062d804f125afdc8d9e83beb2e809e_tuple, 3, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_rv_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_rv_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_rv_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_rv_tuple, 2, const_str_plain_rv ); Py_INCREF( const_str_plain_rv );
    const_tuple_str_plain_x_str_plain_self_str_plain_eval_ctx_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_self_str_plain_eval_ctx_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_self_str_plain_eval_ctx_tuple, 1, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_self_str_plain_eval_ctx_tuple, 2, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    const_str_digest_c51e93720396e16a1ba7164571da2985 = UNSTREAM_STRING( &constant_bin[ 1519766 ], 376, 0 );
    const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple, 0, const_str_plain___class__ ); Py_INCREF( const_str_plain___class__ );
    PyTuple_SET_ITEM( const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple, 1, const_str_plain___qualname__ ); Py_INCREF( const_str_plain___qualname__ );
    PyTuple_SET_ITEM( const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple, 2, const_str_plain___module__ ); Py_INCREF( const_str_plain___module__ );
    PyTuple_SET_ITEM( const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple, 3, const_str_plain___doc__ ); Py_INCREF( const_str_plain___doc__ );
    PyTuple_SET_ITEM( const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple, 4, const_str_plain_fields ); Py_INCREF( const_str_plain_fields );
    PyTuple_SET_ITEM( const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple, 5, const_str_plain_as_const ); Py_INCREF( const_str_plain_as_const );
    PyTuple_SET_ITEM( const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple, 6, const_str_plain_from_untrusted ); Py_INCREF( const_str_plain_from_untrusted );
    const_tuple_str_plain_x_str_plain_node_str_plain_eval_ctx_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_node_str_plain_eval_ctx_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_node_str_plain_eval_ctx_tuple, 1, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_node_str_plain_eval_ctx_tuple, 2, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    const_str_digest_513ebb5465cc1f66ac24870fa7fd35b3 = UNSTREAM_STRING( &constant_bin[ 1520142 ], 29, 0 );
    const_str_digest_e1f7043972de37584b4f7cffc6aa47a6 = UNSTREAM_STRING( &constant_bin[ 1520171 ], 366, 0 );
    const_str_plain_Literal = UNSTREAM_STRING( &constant_bin[ 1520537 ], 7, 1 );
    const_tuple_str_plain_has_safe_repr_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_has_safe_repr_tuple, 0, const_str_plain_has_safe_repr ); Py_INCREF( const_str_plain_has_safe_repr );
    const_tuple_165ce5f2b400e959de3c730e4adb7681_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_165ce5f2b400e959de3c730e4adb7681_tuple, 0, const_str_plain_test ); Py_INCREF( const_str_plain_test );
    PyTuple_SET_ITEM( const_tuple_165ce5f2b400e959de3c730e4adb7681_tuple, 1, const_str_plain_body ); Py_INCREF( const_str_plain_body );
    PyTuple_SET_ITEM( const_tuple_165ce5f2b400e959de3c730e4adb7681_tuple, 2, const_str_plain_elif_ ); Py_INCREF( const_str_plain_elif_ );
    PyTuple_SET_ITEM( const_tuple_165ce5f2b400e959de3c730e4adb7681_tuple, 3, const_str_plain_else_ ); Py_INCREF( const_str_plain_else_ );
    const_tuple_str_plain_abstract_false_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_abstract_false_tuple, 0, const_str_plain_abstract ); Py_INCREF( const_str_plain_abstract );
    PyTuple_SET_ITEM( const_tuple_str_plain_abstract_false_tuple, 1, Py_False ); Py_INCREF( Py_False );
    const_str_digest_179b8dbc1002cf52620d347c505f88a7 = UNSTREAM_STRING( &constant_bin[ 1520544 ], 34, 0 );
    const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple, 0, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple, 2, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple, 3, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple, 4, const_str_plain_dyn_args ); Py_INCREF( const_str_plain_dyn_args );
    PyTuple_SET_ITEM( const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple, 5, const_str_plain_dyn_kwargs ); Py_INCREF( const_str_plain_dyn_kwargs );
    const_str_plain_OverlayScope = UNSTREAM_STRING( &constant_bin[ 1436052 ], 12, 1 );
    const_str_digest_bc7983e79634e0b23326239af8a9407e = UNSTREAM_STRING( &constant_bin[ 1520578 ], 37, 0 );
    const_str_digest_bbeb099f42d8fe01e00dfc907ed7f617 = UNSTREAM_STRING( &constant_bin[ 1518449 ], 14, 0 );
    const_tuple_str_plain_obj_str_plain_eval_ctx_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_obj_str_plain_eval_ctx_tuple, 0, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_str_plain_obj_str_plain_eval_ctx_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    const_str_digest_79ea6dec54e21b3bfa6b7035b4beebe1 = UNSTREAM_STRING( &constant_bin[ 1520615 ], 19, 0 );
    const_str_digest_aa123e7d99689cc7b3ce83e139c6d754 = UNSTREAM_STRING( &constant_bin[ 1520544 ], 15, 0 );
    const_str_digest_cca0fd94d05de45173845d1fabb7ddfc = UNSTREAM_STRING( &constant_bin[ 1520634 ], 65, 0 );
    const_str_digest_9ad06085bb539d3c8b5f9e8dc4ddbcd1 = UNSTREAM_STRING( &constant_bin[ 1520699 ], 20, 0 );
    const_str_plain_NodeType = UNSTREAM_STRING( &constant_bin[ 1519056 ], 8, 1 );
    const_str_digest_a7615ef201e97f33738f0841b1a755b3 = UNSTREAM_STRING( &constant_bin[ 1520719 ], 20, 0 );
    const_tuple_be9a87c3e90dadcc17dd16be0249d5f6_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_be9a87c3e90dadcc17dd16be0249d5f6_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_be9a87c3e90dadcc17dd16be0249d5f6_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_be9a87c3e90dadcc17dd16be0249d5f6_tuple, 2, const_str_plain_lineno ); Py_INCREF( const_str_plain_lineno );
    PyTuple_SET_ITEM( const_tuple_be9a87c3e90dadcc17dd16be0249d5f6_tuple, 3, const_str_plain_environment ); Py_INCREF( const_str_plain_environment );
    PyTuple_SET_ITEM( const_tuple_be9a87c3e90dadcc17dd16be0249d5f6_tuple, 4, const_str_plain_has_safe_repr ); Py_INCREF( const_str_plain_has_safe_repr );
    const_str_digest_93e1278a5a7c6d8f54966c2ae018b500 = UNSTREAM_STRING( &constant_bin[ 1520739 ], 36, 0 );
    const_tuple_str_plain_node_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_tuple, 0, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    const_str_digest_a88490ebb1db53c83dfe84f0dc94fbb0 = UNSTREAM_STRING( &constant_bin[ 1520775 ], 58, 0 );
    const_str_digest_7bfa80dceef25576d6c9e691b5921d73 = UNSTREAM_STRING( &constant_bin[ 1520833 ], 24, 0 );
    const_str_plain__binop_to_func = UNSTREAM_STRING( &constant_bin[ 1520857 ], 14, 1 );
    const_str_digest_5e47309bb0f9637116c5091ee5e8b4ca = UNSTREAM_STRING( &constant_bin[ 1520871 ], 88, 0 );
    const_tuple_str_plain_node_str_plain_attr_str_plain_ctx_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_str_plain_attr_str_plain_ctx_tuple, 0, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_str_plain_attr_str_plain_ctx_tuple, 1, const_str_plain_attr ); Py_INCREF( const_str_plain_attr );
    PyTuple_SET_ITEM( const_tuple_str_plain_node_str_plain_attr_str_plain_ctx_tuple, 2, const_str_plain_ctx ); Py_INCREF( const_str_plain_ctx );
    const_str_digest_121b76e75f90f7452a3893653c098859 = UNSTREAM_STRING( &constant_bin[ 1520959 ], 13, 0 );
    const_tuple_600df8892939241348208cee2ee6cb5b_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_600df8892939241348208cee2ee6cb5b_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_600df8892939241348208cee2ee6cb5b_tuple, 1, const_str_plain_node_type ); Py_INCREF( const_str_plain_node_type );
    PyTuple_SET_ITEM( const_tuple_600df8892939241348208cee2ee6cb5b_tuple, 2, const_str_plain_child ); Py_INCREF( const_str_plain_child );
    PyTuple_SET_ITEM( const_tuple_600df8892939241348208cee2ee6cb5b_tuple, 3, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_str_plain__uaop_to_func = UNSTREAM_STRING( &constant_bin[ 1520972 ], 13, 1 );
    const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_f_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_f_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_f_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_f_tuple, 2, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    const_tuple_8e4e93cbef34e74fbf5b7192e2fa5d58_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_8e4e93cbef34e74fbf5b7192e2fa5d58_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8e4e93cbef34e74fbf5b7192e2fa5d58_tuple, 1, const_str_plain_environment ); Py_INCREF( const_str_plain_environment );
    PyTuple_SET_ITEM( const_tuple_8e4e93cbef34e74fbf5b7192e2fa5d58_tuple, 2, const_str_plain_todo ); Py_INCREF( const_str_plain_todo );
    PyTuple_SET_ITEM( const_tuple_8e4e93cbef34e74fbf5b7192e2fa5d58_tuple, 3, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    const_tuple_8307349a2b2f15223b59b888a4574046_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_8307349a2b2f15223b59b888a4574046_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_8307349a2b2f15223b59b888a4574046_tuple, 1, const_str_plain_arg ); Py_INCREF( const_str_plain_arg );
    PyTuple_SET_ITEM( const_tuple_8307349a2b2f15223b59b888a4574046_tuple, 2, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_truediv = UNSTREAM_STRING( &constant_bin[ 91549 ], 7, 1 );
    const_tuple_9f9c32bb876e06977dc745e18980f310_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_9f9c32bb876e06977dc745e18980f310_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_9f9c32bb876e06977dc745e18980f310_tuple, 1, const_str_plain_eval_ctx ); Py_INCREF( const_str_plain_eval_ctx );
    PyTuple_SET_ITEM( const_tuple_9f9c32bb876e06977dc745e18980f310_tuple, 2, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    PyTuple_SET_ITEM( const_tuple_9f9c32bb876e06977dc745e18980f310_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_9f9c32bb876e06977dc745e18980f310_tuple, 4, const_str_plain_op ); Py_INCREF( const_str_plain_op );
    PyTuple_SET_ITEM( const_tuple_9f9c32bb876e06977dc745e18980f310_tuple, 5, const_str_plain_new_value ); Py_INCREF( const_str_plain_new_value );
    const_str_digest_ab23fc444956a1e022e0390c9e5ee095 = UNSTREAM_STRING( &constant_bin[ 1520985 ], 18, 0 );
    const_tuple_str_digest_aa106bda900de2bd2a72d21b433949d2_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_aa106bda900de2bd2a72d21b433949d2_tuple, 0, const_str_digest_aa106bda900de2bd2a72d21b433949d2 ); Py_INCREF( const_str_digest_aa106bda900de2bd2a72d21b433949d2 );
    const_str_digest_291f6292edff092781eb7347e49d3c45 = UNSTREAM_STRING( &constant_bin[ 1521003 ], 9, 0 );
    const_str_digest_6e0c4529c205a3b336c0107d0bc630b7 = UNSTREAM_STRING( &constant_bin[ 1521012 ], 294, 0 );
    const_str_digest_04d80127de7cd6f0d2bb0f6f54a3cb79 = UNSTREAM_STRING( &constant_bin[ 1521306 ], 15, 0 );
    const_tuple_str_plain_template_str_plain_target_str_plain_with_context_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_template_str_plain_target_str_plain_with_context_tuple, 0, const_str_plain_template ); Py_INCREF( const_str_plain_template );
    PyTuple_SET_ITEM( const_tuple_str_plain_template_str_plain_target_str_plain_with_context_tuple, 1, const_str_plain_target ); Py_INCREF( const_str_plain_target );
    PyTuple_SET_ITEM( const_tuple_str_plain_template_str_plain_target_str_plain_with_context_tuple, 2, const_str_plain_with_context ); Py_INCREF( const_str_plain_with_context );

    constants_created = true;
}

#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_jinja2$nodes( void )
{
    // The module may not have been used at all.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_1da0c5d5b48a583b807b58478e618581;
static PyCodeObject *codeobj_6db6f7637d10f38c339b29435652d88d;
static PyCodeObject *codeobj_4a076e00ab34546c1155c30f1cf924a9;
static PyCodeObject *codeobj_0f1cab40e7adf08bb45a5980000311b8;
static PyCodeObject *codeobj_b9d1b1737c9725adfb4149be4d4ba085;
static PyCodeObject *codeobj_f95dd93b7501cf3b285dffef18fa9e57;
static PyCodeObject *codeobj_f2084a0075117ee259352ac476f52780;
static PyCodeObject *codeobj_533267860c0e3679f785a661171590b2;
static PyCodeObject *codeobj_e6e4ec5f9a16fe0ffb4f86a9a83a54b8;
static PyCodeObject *codeobj_3f0b104774a14b607a875a1d27285319;
static PyCodeObject *codeobj_fb7531f558ad846443a9ac117976cb24;
static PyCodeObject *codeobj_d1a3ca5fa1d79bc2de1c830e07e219b4;
static PyCodeObject *codeobj_5dba849f260b1ecd14ce0c144086a48f;
static PyCodeObject *codeobj_99b9ee7838f452579afa5c4e394e882a;
static PyCodeObject *codeobj_f00a477a2acb370ec058c09e4e0980bd;
static PyCodeObject *codeobj_1448c8a5a6f6deef8f94156dd2b3eda1;
static PyCodeObject *codeobj_29ad3f2c35fee39dc5b7dd66d5d27315;
static PyCodeObject *codeobj_9d52e02e050a9e575027edeaccc56245;
static PyCodeObject *codeobj_8fb5b450ba8c53f4343ad96236cef1a3;
static PyCodeObject *codeobj_278e4e59db527df69a98b98ba89b48a5;
static PyCodeObject *codeobj_102a01e0a48de28d5efc599f2a39ea85;
static PyCodeObject *codeobj_e44d23bfe7f61a0c79e9edc4aa040ac1;
static PyCodeObject *codeobj_62e7b186ed6fb9ab7cb52536ebb130aa;
static PyCodeObject *codeobj_d7dc66b75f8d3a98e35720c2691735ea;
static PyCodeObject *codeobj_d9737828a17fcde3b57f6d40b2fbad0b;
static PyCodeObject *codeobj_f5ff27e2ea1f2aa503eacc0fecfa0d47;
static PyCodeObject *codeobj_bf39e0dc8420d92cc8aad1f03d26f179;
static PyCodeObject *codeobj_bea24df8701d1d802de59ad0c7cdf4b3;
static PyCodeObject *codeobj_780c9e49ae131fc4ee0d381e967b53a9;
static PyCodeObject *codeobj_e4d03815e1415a6436703e3dcdd6a026;
static PyCodeObject *codeobj_862898d8aca0bda2ef86bf89fdd56abe;
static PyCodeObject *codeobj_7a2ecb36cfdd4783c9a22ef0d7e265b1;
static PyCodeObject *codeobj_4b67baec8b1fba840791cfca1fa852a0;
static PyCodeObject *codeobj_9477f0c9c32c14c35b9205d2b4a4e0ae;
static PyCodeObject *codeobj_2aa1f4319600a61dff1150ee998bcb4f;
static PyCodeObject *codeobj_543dce0aaebbad3afc9fe9a73e540ccc;
static PyCodeObject *codeobj_8f0d619d320e9573d2b55229dc3a58ff;
static PyCodeObject *codeobj_67d639c3786e507c69de01480973c34d;
static PyCodeObject *codeobj_1f8bf388eb3290039659cd9beceb5eaa;
static PyCodeObject *codeobj_d7575262369a5ba6708de1069e7e6096;
static PyCodeObject *codeobj_b940fb0a3f5d2693ea508b9a6f8abb63;
static PyCodeObject *codeobj_705aee819612e8b5c0fc0b3a6656b9a5;
static PyCodeObject *codeobj_e179244e0084b1b4277f4caf265cd432;
static PyCodeObject *codeobj_f56a18120b5a9a2cf4e25929a30357a2;
static PyCodeObject *codeobj_4f7d2bac1b6f8901aac5836ae9d8f6a4;
static PyCodeObject *codeobj_3142b51d5e5825541b831b22f5a9dfae;
static PyCodeObject *codeobj_58561bdffed2ee816405185f93aa0666;
static PyCodeObject *codeobj_ac795912c01e9e0b91fcd1ecffa504e1;
static PyCodeObject *codeobj_d12f2f72ff9b47a0d0dafe7fc1d1989f;
static PyCodeObject *codeobj_ffad158b70c73458b92539fa1aec417b;
static PyCodeObject *codeobj_d84a952992c3e05cba23996714ebb5eb;
static PyCodeObject *codeobj_d7eb6128479dde4ed49ff7186d8ca696;
static PyCodeObject *codeobj_51e431057bf26b7e22d55b1f3a800e20;
static PyCodeObject *codeobj_b1226f368853cb2b9944568040ccfeba;
static PyCodeObject *codeobj_23c72015dc97b7d37e07927b829f71ef;
static PyCodeObject *codeobj_854ad9d2aec1b8cc8462728eeea7120f;
static PyCodeObject *codeobj_6552d6edbde27a46c1cc51f0aaad601a;
static PyCodeObject *codeobj_f822cdb4add7475dab19a608d124b318;
static PyCodeObject *codeobj_807a626cdf816099591efb57c5ec52a8;
static PyCodeObject *codeobj_8ee3a7db93606454f73f584dc34b097a;
static PyCodeObject *codeobj_6cedafff24958868f1a65ddd6b887dba;
static PyCodeObject *codeobj_89d921f056eaad4ab7942f34e757335d;
static PyCodeObject *codeobj_b3ddd603e8455ad39086b0cb84e6820d;
static PyCodeObject *codeobj_dc322f8ad2d8817bbadbbfe5b664b6f7;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_8099e76318d48de2044c72bc69e26d62 );
    codeobj_1da0c5d5b48a583b807b58478e618581 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 241, const_tuple_8307349a2b2f15223b59b888a4574046_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6db6f7637d10f38c339b29435652d88d = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 537, const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4a076e00ab34546c1155c30f1cf924a9 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 563, const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0f1cab40e7adf08bb45a5980000311b8 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 604, const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b9d1b1737c9725adfb4149be4d4ba085 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 763, const_tuple_40812942c7125218d5d532c2aa2f1cb3_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f95dd93b7501cf3b285dffef18fa9e57 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 791, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_x_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f2084a0075117ee259352ac476f52780 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 50, const_tuple_str_plain_a_str_plain_b_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_533267860c0e3679f785a661171590b2 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 51, const_tuple_str_plain_a_str_plain_b_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e6e4ec5f9a16fe0ffb4f86a9a83a54b8 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcontraction, 552, const_tuple_str_plain_x_str_plain_self_str_plain_eval_ctx_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3f0b104774a14b607a875a1d27285319 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcontraction, 603, const_tuple_str_plain_x_str_plain_node_str_plain_eval_ctx_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_fb7531f558ad846443a9ac117976cb24 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_835ac4b829346a2256d258bdb290afe3, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_d1a3ca5fa1d79bc2de1c830e07e219b4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Const, 485, const_tuple_30276c4d0353227a5d39f9a2025d4c3f_tuple, 0, 0, CO_NOFREE );
    codeobj_5dba849f260b1ecd14ce0c144086a48f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_NodeType, 59, const_tuple_3543ea77468a4b5e783701587e871300_tuple, 0, 0, CO_NOFREE );
    codeobj_99b9ee7838f452579afa5c4e394e882a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___eq__, 228, const_tuple_str_plain_self_str_plain_other_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f00a477a2acb370ec058c09e4e0980bd = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 81, const_tuple_str_plain_self_str_plain_environment_str_plain_template_name_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1448c8a5a6f6deef8f94156dd2b3eda1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 127, const_tuple_6ce2f564ed0c1eb04ada62d23e501e4b_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_29ad3f2c35fee39dc5b7dd66d5d27315 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 903, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9d52e02e050a9e575027edeaccc56245 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___ne__, 232, const_tuple_str_plain_self_str_plain_other_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8fb5b450ba8c53f4343ad96236cef1a3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___new__, 64, const_tuple_e2332645ce854f293f4caeff0a011386_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_278e4e59db527df69a98b98ba89b48a5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 238, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_102a01e0a48de28d5efc599f2a39ea85 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__dump, 246, const_tuple_054ca5e2bdae815a5316dac41e3acc10_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_e44d23bfe7f61a0c79e9edc4aa040ac1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__failing_new, 997, const_tuple_str_plain_args_str_plain_kwargs_tuple, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_62e7b186ed6fb9ab7cb52536ebb130aa = MAKE_CODEOBJ( module_filename_obj, const_str_plain_args_as_const, 602, const_tuple_8d404e7ebddaf61fb74081e691842b19_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d7dc66b75f8d3a98e35720c2691735ea = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 397, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d9737828a17fcde3b57f6d40b2fbad0b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 421, const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_f_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f5ff27e2ea1f2aa503eacc0fecfa0d47 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 440, const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_f_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bf39e0dc8420d92cc8aad1f03d26f179 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 493, const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_rv_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bea24df8701d1d802de59ad0c7cdf4b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 519, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_780c9e49ae131fc4ee0d381e967b53a9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 535, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e4d03815e1415a6436703e3dcdd6a026 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 550, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_862898d8aca0bda2ef86bf89fdd56abe = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 561, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7a2ecb36cfdd4783c9a22ef0d7e265b1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 570, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4b67baec8b1fba840791cfca1fa852a0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 579, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9477f0c9c32c14c35b9205d2b4a4e0ae = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 590, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2aa1f4319600a61dff1150ee998bcb4f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 631, const_tuple_8d76ad4efeb101f584d904b2a92105db_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_543dce0aaebbad3afc9fe9a73e540ccc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 676, const_tuple_59e37e622c2598ebb986b4a2056ed9a9_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8f0d619d320e9573d2b55229dc3a58ff = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 706, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_67d639c3786e507c69de01480973c34d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 726, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1f8bf388eb3290039659cd9beceb5eaa = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 746, const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_const_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d7575262369a5ba6708de1069e7e6096 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 761, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b940fb0a3f5d2693ea508b9a6f8abb63 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 772, const_tuple_9f9c32bb876e06977dc745e18980f310_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_705aee819612e8b5c0fc0b3a6656b9a5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 836, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e179244e0084b1b4277f4caf265cd432 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 845, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f56a18120b5a9a2cf4e25929a30357a2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 912, const_tuple_str_plain_self_str_plain_eval_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4f7d2bac1b6f8901aac5836ae9d8f6a4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_as_const, 925, const_tuple_str_plain_self_str_plain_eval_ctx_str_plain_expr_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3142b51d5e5825541b831b22f5a9dfae = MAKE_CODEOBJ( module_filename_obj, const_str_plain_can_assign, 410, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_58561bdffed2ee816405185f93aa0666 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_can_assign, 463, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ac795912c01e9e0b91fcd1ecffa504e1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_can_assign, 472, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d12f2f72ff9b47a0d0dafe7fc1d1989f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_can_assign, 539, const_tuple_str_plain_self_str_plain_item_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ffad158b70c73458b92539fa1aec417b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_can_assign, 716, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d84a952992c3e05cba23996714ebb5eb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_can_assign, 736, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d7eb6128479dde4ed49ff7186d8ca696 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_const, 748, const_tuple_str_plain_obj_str_plain_eval_ctx_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_51e431057bf26b7e22d55b1f3a800e20 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_dump, 245, const_tuple_str_plain_self_str_plain__dump_str_plain_buf_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b1226f368853cb2b9944568040ccfeba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_find, 177, const_tuple_str_plain_self_str_plain_node_type_str_plain_result_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_23c72015dc97b7d37e07927b829f71ef = MAKE_CODEOBJ( module_filename_obj, const_str_plain_find_all, 184, const_tuple_600df8892939241348208cee2ee6cb5b_tuple, 2, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_854ad9d2aec1b8cc8462728eeea7120f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_from_untrusted, 503, const_tuple_be9a87c3e90dadcc17dd16be0249d5f6_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6552d6edbde27a46c1cc51f0aaad601a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_eval_context, 97, const_tuple_str_plain_node_str_plain_ctx_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f822cdb4add7475dab19a608d124b318 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iter_child_nodes, 164, const_tuple_d8d1cddca9f7abe64ab9f15181d5ec8e_tuple, 3, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_807a626cdf816099591efb57c5ec52a8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_iter_fields, 148, const_tuple_a41f5783090772997ee8835f153e0557_tuple, 3, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8ee3a7db93606454f73f584dc34b097a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_revert, 92, const_tuple_str_plain_self_str_plain_old_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6cedafff24958868f1a65ddd6b887dba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_save, 89, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_89d921f056eaad4ab7942f34e757335d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_set_ctx, 194, const_tuple_str_plain_self_str_plain_ctx_str_plain_todo_str_plain_node_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b3ddd603e8455ad39086b0cb84e6820d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_set_environment, 219, const_tuple_8e4e93cbef34e74fbf5b7192e2fa5d58_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_dc322f8ad2d8817bbadbbfe5b664b6f7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_set_lineno, 208, const_tuple_1d7bd8276cb9da372482cb578e1e0d10_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_10_iter_child_nodes$$$genobj_1_iter_child_nodes_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$function_10_iter_child_nodes$$$genobj_1_iter_child_nodes_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_12_find_all$$$genobj_1_find_all_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$function_12_find_all$$$genobj_1_find_all_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_18___repr__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$function_18___repr__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_29_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$function_29_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_32_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$function_32_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_36_args_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$function_36_args_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_44_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$function_44_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value );
#else
static void jinja2$nodes$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator );
#endif


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_7_complex_call_helper_star_list_star_dict( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_10_iter_child_nodes( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_11_find(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_12_find_all(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_13_set_ctx(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_14_set_lineno( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_15_set_environment(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_16___eq__(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_17___ne__(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_18___repr__(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_19_dump(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_19_dump$$$function_1__dump( struct Nuitka_CellObject *closure__dump, struct Nuitka_CellObject *closure_buf );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_20_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_21_can_assign(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_22_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_23_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_24_can_assign(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_25_can_assign(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_26_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_27_from_untrusted( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_28_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_29_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_2_lambda(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_30_can_assign(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_31_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_32_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_33_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_34_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_35_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_36_args_as_const(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_37_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_38_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_39_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_3___new__(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_40_can_assign(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_41_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_42_can_assign(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_43_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_43_as_const$$$function_1_const( struct Nuitka_CellObject *closure_eval_ctx );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_44_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_45_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_46_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_47_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_48___init__(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_49_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_4___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_50_as_const( PyObject *defaults );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_51__failing_new(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_5_save(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_6_revert(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_7_get_eval_context(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_8___init__(  );


static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_9_iter_fields( PyObject *defaults );


// The module function definitions.
static PyObject *impl_jinja2$nodes$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_b = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_f2084a0075117ee259352ac476f52780 = NULL;

    struct Nuitka_FrameObject *frame_f2084a0075117ee259352ac476f52780;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f2084a0075117ee259352ac476f52780, codeobj_f2084a0075117ee259352ac476f52780, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_f2084a0075117ee259352ac476f52780 = cache_frame_f2084a0075117ee259352ac476f52780;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f2084a0075117ee259352ac476f52780 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f2084a0075117ee259352ac476f52780 ) == 2 ); // Frame stack

    // Framed code:
    tmp_compexpr_left_1 = par_a;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_compexpr_right_1 = par_b;

    CHECK_OBJECT( tmp_compexpr_right_1 );
    tmp_return_value = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 50;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2084a0075117ee259352ac476f52780 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2084a0075117ee259352ac476f52780 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2084a0075117ee259352ac476f52780 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f2084a0075117ee259352ac476f52780, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f2084a0075117ee259352ac476f52780->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f2084a0075117ee259352ac476f52780, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f2084a0075117ee259352ac476f52780,
        type_description_1,
        par_a,
        par_b
    );


    // Release cached frame.
    if ( frame_f2084a0075117ee259352ac476f52780 == cache_frame_f2084a0075117ee259352ac476f52780 )
    {
        Py_DECREF( frame_f2084a0075117ee259352ac476f52780 );
    }
    cache_frame_f2084a0075117ee259352ac476f52780 = NULL;

    assertFrameObject( frame_f2084a0075117ee259352ac476f52780 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_a );
    par_a = NULL;

    Py_XDECREF( par_b );
    par_b = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_a );
    par_a = NULL;

    Py_XDECREF( par_b );
    par_b = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_2_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_b = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_return_value;
    static struct Nuitka_FrameObject *cache_frame_533267860c0e3679f785a661171590b2 = NULL;

    struct Nuitka_FrameObject *frame_533267860c0e3679f785a661171590b2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_533267860c0e3679f785a661171590b2, codeobj_533267860c0e3679f785a661171590b2, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_533267860c0e3679f785a661171590b2 = cache_frame_533267860c0e3679f785a661171590b2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_533267860c0e3679f785a661171590b2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_533267860c0e3679f785a661171590b2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_compexpr_left_1 = par_a;

    CHECK_OBJECT( tmp_compexpr_left_1 );
    tmp_compexpr_right_1 = par_b;

    CHECK_OBJECT( tmp_compexpr_right_1 );
    tmp_return_value = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 51;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_533267860c0e3679f785a661171590b2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_533267860c0e3679f785a661171590b2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_533267860c0e3679f785a661171590b2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_533267860c0e3679f785a661171590b2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_533267860c0e3679f785a661171590b2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_533267860c0e3679f785a661171590b2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_533267860c0e3679f785a661171590b2,
        type_description_1,
        par_a,
        par_b
    );


    // Release cached frame.
    if ( frame_533267860c0e3679f785a661171590b2 == cache_frame_533267860c0e3679f785a661171590b2 )
    {
        Py_DECREF( frame_533267860c0e3679f785a661171590b2 );
    }
    cache_frame_533267860c0e3679f785a661171590b2 = NULL;

    assertFrameObject( frame_533267860c0e3679f785a661171590b2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_2_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_a );
    par_a = NULL;

    Py_XDECREF( par_b );
    par_b = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_a );
    par_a = NULL;

    Py_XDECREF( par_b );
    par_b = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_2_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_3___new__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_bases = python_pars[ 2 ];
    PyObject *par_d = python_pars[ 3 ];
    PyObject *var_attr = NULL;
    PyObject *var_storage = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_ass_subscribed_1;
    PyObject *tmp_ass_subscript_1;
    PyObject *tmp_ass_subvalue_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    int tmp_cmp_Eq_1;
    int tmp_cmp_Eq_2;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_next_source_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_value_1;
    PyObject *tmp_raise_value_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_set_arg_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_tuple_arg_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_8fb5b450ba8c53f4343ad96236cef1a3 = NULL;

    struct Nuitka_FrameObject *frame_8fb5b450ba8c53f4343ad96236cef1a3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_iter_arg_1 = const_tuple_str_plain_fields_str_plain_attributes_tuple;
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    assert( tmp_assign_source_1 != NULL );
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8fb5b450ba8c53f4343ad96236cef1a3, codeobj_8fb5b450ba8c53f4343ad96236cef1a3, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_8fb5b450ba8c53f4343ad96236cef1a3 = cache_frame_8fb5b450ba8c53f4343ad96236cef1a3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8fb5b450ba8c53f4343ad96236cef1a3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8fb5b450ba8c53f4343ad96236cef1a3 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooo";
            exception_lineno = 65;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_attr;
        var_attr = tmp_assign_source_3;
        Py_INCREF( var_attr );
        Py_XDECREF( old );
    }

    tmp_assign_source_4 = PyList_New( 0 );
    {
        PyObject *old = var_storage;
        var_storage = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_source_name_1 = var_storage;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_extend );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 67;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_subscribed_name_1 = par_bases;

    if ( tmp_subscribed_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bases" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 67;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_subscript_name_1 = const_int_0;
    tmp_getattr_target_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_getattr_target_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 67;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_getattr_attr_1 = var_attr;

    if ( tmp_getattr_attr_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_getattr_target_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "attr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 67;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_getattr_default_1 = const_tuple_empty;
    tmp_args_element_name_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
    Py_DECREF( tmp_getattr_target_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 67;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    frame_8fb5b450ba8c53f4343ad96236cef1a3->m_frame.f_lineno = 67;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 67;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_2 = var_storage;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "storage" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 68;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_extend );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 68;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_source_name_3 = par_d;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "d" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 68;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_get );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 68;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_3 = var_attr;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "attr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 68;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_4 = const_tuple_empty;
    frame_8fb5b450ba8c53f4343ad96236cef1a3->m_frame.f_lineno = 68;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_args_element_name_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 68;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    frame_8fb5b450ba8c53f4343ad96236cef1a3->m_frame.f_lineno = 68;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 68;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_len_arg_1 = par_bases;

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bases" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 69;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_compare_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 69;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_compare_right_1 = const_int_pos_1;
    tmp_cmp_Eq_1 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_Eq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 69;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_Eq_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_raise_type_1 = PyExc_AssertionError;
    tmp_raise_value_1 = const_tuple_str_digest_aa106bda900de2bd2a72d21b433949d2_tuple;
    exception_type = tmp_raise_type_1;
    Py_INCREF( tmp_raise_type_1 );
    exception_value = tmp_raise_value_1;
    Py_INCREF( tmp_raise_value_1 );
    exception_lineno = 69;
    RAISE_EXCEPTION_WITH_VALUE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto try_except_handler_2;
    branch_no_1:;
    tmp_len_arg_2 = var_storage;

    if ( tmp_len_arg_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "storage" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 70;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_compare_left_2 = BUILTIN_LEN( tmp_len_arg_2 );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 70;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_set_arg_1 = var_storage;

    if ( tmp_set_arg_1 == NULL )
    {
        Py_DECREF( tmp_compare_left_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "storage" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 70;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_len_arg_3 = PySet_New( tmp_set_arg_1 );
    if ( tmp_len_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 70;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_compare_right_2 = BUILTIN_LEN( tmp_len_arg_3 );
    Py_DECREF( tmp_len_arg_3 );
    if ( tmp_compare_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );

        exception_lineno = 70;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_cmp_Eq_2 = RICH_COMPARE_BOOL_EQ( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_2 );
        Py_DECREF( tmp_compare_right_2 );

        exception_lineno = 70;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_compare_left_2 );
    Py_DECREF( tmp_compare_right_2 );
    if ( tmp_cmp_Eq_2 == 1 )
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_raise_type_2 = PyExc_AssertionError;
    tmp_raise_value_2 = const_tuple_str_digest_a0b2657cd503cb2bd14fe47bed993185_tuple;
    exception_type = tmp_raise_type_2;
    Py_INCREF( tmp_raise_type_2 );
    exception_value = tmp_raise_value_2;
    Py_INCREF( tmp_raise_value_2 );
    exception_lineno = 70;
    RAISE_EXCEPTION_WITH_VALUE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto try_except_handler_2;
    branch_no_2:;
    tmp_tuple_arg_1 = var_storage;

    if ( tmp_tuple_arg_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "storage" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 71;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_ass_subvalue_1 = PySequence_Tuple( tmp_tuple_arg_1 );
    if ( tmp_ass_subvalue_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 71;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_ass_subscribed_1 = par_d;

    if ( tmp_ass_subscribed_1 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "d" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 71;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_ass_subscript_1 = var_attr;

    if ( tmp_ass_subscript_1 == NULL )
    {
        Py_DECREF( tmp_ass_subvalue_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "attr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 71;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
    Py_DECREF( tmp_ass_subvalue_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 71;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 65;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_called_instance_1 = par_d;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "d" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 72;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    frame_8fb5b450ba8c53f4343ad96236cef1a3->m_frame.f_lineno = 72;
    tmp_unused = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_setdefault, &PyTuple_GET_ITEM( const_tuple_str_plain_abstract_false_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 72;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_4 = (PyObject *)&PyType_Type;
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___new__ );
    assert( tmp_called_name_4 != NULL );
    tmp_args_element_name_5 = par_cls;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "cls" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 73;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_6 = par_name;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 73;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_7 = par_bases;

    if ( tmp_args_element_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bases" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 73;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_8 = par_d;

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "d" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 73;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    frame_8fb5b450ba8c53f4343ad96236cef1a3->m_frame.f_lineno = 73;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 73;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8fb5b450ba8c53f4343ad96236cef1a3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8fb5b450ba8c53f4343ad96236cef1a3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8fb5b450ba8c53f4343ad96236cef1a3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8fb5b450ba8c53f4343ad96236cef1a3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8fb5b450ba8c53f4343ad96236cef1a3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8fb5b450ba8c53f4343ad96236cef1a3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8fb5b450ba8c53f4343ad96236cef1a3,
        type_description_1,
        par_cls,
        par_name,
        par_bases,
        par_d,
        var_attr,
        var_storage
    );


    // Release cached frame.
    if ( frame_8fb5b450ba8c53f4343ad96236cef1a3 == cache_frame_8fb5b450ba8c53f4343ad96236cef1a3 )
    {
        Py_DECREF( frame_8fb5b450ba8c53f4343ad96236cef1a3 );
    }
    cache_frame_8fb5b450ba8c53f4343ad96236cef1a3 = NULL;

    assertFrameObject( frame_8fb5b450ba8c53f4343ad96236cef1a3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_3___new__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_cls );
    par_cls = NULL;

    Py_XDECREF( par_name );
    par_name = NULL;

    Py_XDECREF( par_bases );
    par_bases = NULL;

    Py_XDECREF( par_d );
    par_d = NULL;

    Py_XDECREF( var_attr );
    var_attr = NULL;

    Py_XDECREF( var_storage );
    var_storage = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_cls );
    par_cls = NULL;

    Py_XDECREF( par_name );
    par_name = NULL;

    Py_XDECREF( par_bases );
    par_bases = NULL;

    Py_XDECREF( par_d );
    par_d = NULL;

    Py_XDECREF( var_attr );
    var_attr = NULL;

    Py_XDECREF( var_storage );
    var_storage = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_3___new__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_4___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_environment = python_pars[ 1 ];
    PyObject *par_template_name = python_pars[ 2 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_name_3;
    PyObject *tmp_assattr_name_4;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assattr_target_3;
    PyObject *tmp_assattr_target_4;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    static struct Nuitka_FrameObject *cache_frame_f00a477a2acb370ec058c09e4e0980bd = NULL;

    struct Nuitka_FrameObject *frame_f00a477a2acb370ec058c09e4e0980bd;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f00a477a2acb370ec058c09e4e0980bd, codeobj_f00a477a2acb370ec058c09e4e0980bd, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f00a477a2acb370ec058c09e4e0980bd = cache_frame_f00a477a2acb370ec058c09e4e0980bd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f00a477a2acb370ec058c09e4e0980bd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f00a477a2acb370ec058c09e4e0980bd ) == 2 ); // Frame stack

    // Framed code:
    tmp_assattr_name_1 = par_environment;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = par_self;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_environment, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 82;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_callable );
    assert( tmp_called_name_1 != NULL );
    tmp_source_name_1 = par_environment;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "environment" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 83;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_autoescape );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    frame_f00a477a2acb370ec058c09e4e0980bd->m_frame.f_lineno = 83;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 83;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 83;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_2 = par_environment;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "environment" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 84;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_autoescape );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_template_name;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "template_name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 84;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_f00a477a2acb370ec058c09e4e0980bd->m_frame.f_lineno = 84;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_assattr_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assattr_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 84;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_2 = par_self;

    if ( tmp_assattr_target_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 84;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_autoescape, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 84;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    goto branch_end_1;
    branch_no_1:;
    tmp_source_name_3 = par_environment;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "environment" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 86;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_autoescape );
    if ( tmp_assattr_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 86;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assattr_target_3 = par_self;

    if ( tmp_assattr_target_3 == NULL )
    {
        Py_DECREF( tmp_assattr_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 86;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_autoescape, tmp_assattr_name_3 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_3 );

        exception_lineno = 86;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_3 );
    branch_end_1:;
    tmp_assattr_name_4 = Py_False;
    tmp_assattr_target_4 = par_self;

    if ( tmp_assattr_target_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 87;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_volatile, tmp_assattr_name_4 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 87;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f00a477a2acb370ec058c09e4e0980bd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f00a477a2acb370ec058c09e4e0980bd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f00a477a2acb370ec058c09e4e0980bd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f00a477a2acb370ec058c09e4e0980bd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f00a477a2acb370ec058c09e4e0980bd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f00a477a2acb370ec058c09e4e0980bd,
        type_description_1,
        par_self,
        par_environment,
        par_template_name
    );


    // Release cached frame.
    if ( frame_f00a477a2acb370ec058c09e4e0980bd == cache_frame_f00a477a2acb370ec058c09e4e0980bd )
    {
        Py_DECREF( frame_f00a477a2acb370ec058c09e4e0980bd );
    }
    cache_frame_f00a477a2acb370ec058c09e4e0980bd = NULL;

    assertFrameObject( frame_f00a477a2acb370ec058c09e4e0980bd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_4___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_environment );
    par_environment = NULL;

    Py_XDECREF( par_template_name );
    par_template_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_environment );
    par_environment = NULL;

    Py_XDECREF( par_template_name );
    par_template_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_4___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_5_save( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_6cedafff24958868f1a65ddd6b887dba = NULL;

    struct Nuitka_FrameObject *frame_6cedafff24958868f1a65ddd6b887dba;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6cedafff24958868f1a65ddd6b887dba, codeobj_6cedafff24958868f1a65ddd6b887dba, module_jinja2$nodes, sizeof(void *) );
    frame_6cedafff24958868f1a65ddd6b887dba = cache_frame_6cedafff24958868f1a65ddd6b887dba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6cedafff24958868f1a65ddd6b887dba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6cedafff24958868f1a65ddd6b887dba ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 90;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    frame_6cedafff24958868f1a65ddd6b887dba->m_frame.f_lineno = 90;
    tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_copy );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 90;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6cedafff24958868f1a65ddd6b887dba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6cedafff24958868f1a65ddd6b887dba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6cedafff24958868f1a65ddd6b887dba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6cedafff24958868f1a65ddd6b887dba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6cedafff24958868f1a65ddd6b887dba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6cedafff24958868f1a65ddd6b887dba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6cedafff24958868f1a65ddd6b887dba,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_6cedafff24958868f1a65ddd6b887dba == cache_frame_6cedafff24958868f1a65ddd6b887dba )
    {
        Py_DECREF( frame_6cedafff24958868f1a65ddd6b887dba );
    }
    cache_frame_6cedafff24958868f1a65ddd6b887dba = NULL;

    assertFrameObject( frame_6cedafff24958868f1a65ddd6b887dba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_5_save );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_5_save );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_6_revert( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_old = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_8ee3a7db93606454f73f584dc34b097a = NULL;

    struct Nuitka_FrameObject *frame_8ee3a7db93606454f73f584dc34b097a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8ee3a7db93606454f73f584dc34b097a, codeobj_8ee3a7db93606454f73f584dc34b097a, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_8ee3a7db93606454f73f584dc34b097a = cache_frame_8ee3a7db93606454f73f584dc34b097a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8ee3a7db93606454f73f584dc34b097a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8ee3a7db93606454f73f584dc34b097a ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_instance_1 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_1 );
    if ( tmp_called_instance_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_8ee3a7db93606454f73f584dc34b097a->m_frame.f_lineno = 93;
    tmp_unused = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_clear );
    Py_DECREF( tmp_called_instance_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 93;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 94;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE_DICT_SLOT( tmp_source_name_3 );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_update );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_old;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "old" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 94;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_8ee3a7db93606454f73f584dc34b097a->m_frame.f_lineno = 94;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 94;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8ee3a7db93606454f73f584dc34b097a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8ee3a7db93606454f73f584dc34b097a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8ee3a7db93606454f73f584dc34b097a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8ee3a7db93606454f73f584dc34b097a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8ee3a7db93606454f73f584dc34b097a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8ee3a7db93606454f73f584dc34b097a,
        type_description_1,
        par_self,
        par_old
    );


    // Release cached frame.
    if ( frame_8ee3a7db93606454f73f584dc34b097a == cache_frame_8ee3a7db93606454f73f584dc34b097a )
    {
        Py_DECREF( frame_8ee3a7db93606454f73f584dc34b097a );
    }
    cache_frame_8ee3a7db93606454f73f584dc34b097a = NULL;

    assertFrameObject( frame_8ee3a7db93606454f73f584dc34b097a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_6_revert );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_old );
    par_old = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_old );
    par_old = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_6_revert );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_7_get_eval_context( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_node = python_pars[ 0 ];
    PyObject *par_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    bool tmp_is_1;
    bool tmp_is_2;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_6552d6edbde27a46c1cc51f0aaad601a = NULL;

    struct Nuitka_FrameObject *frame_6552d6edbde27a46c1cc51f0aaad601a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6552d6edbde27a46c1cc51f0aaad601a, codeobj_6552d6edbde27a46c1cc51f0aaad601a, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_6552d6edbde27a46c1cc51f0aaad601a = cache_frame_6552d6edbde27a46c1cc51f0aaad601a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6552d6edbde27a46c1cc51f0aaad601a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6552d6edbde27a46c1cc51f0aaad601a ) == 2 ); // Frame stack

    // Framed code:
    tmp_compare_left_1 = par_ctx;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_1 = par_node;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 99;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_compare_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_environment );
    if ( tmp_compare_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 99;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_2 = Py_None;
    tmp_is_2 = ( tmp_compare_left_2 == tmp_compare_right_2 );
    Py_DECREF( tmp_compare_left_2 );
    if ( tmp_is_2 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_make_exception_arg_1 = const_str_digest_ba4414296584bed63dbbbf1abebe04f2;
    frame_6552d6edbde27a46c1cc51f0aaad601a->m_frame.f_lineno = 100;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 100;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_EvalContext );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_EvalContext );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "EvalContext" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 103;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = par_node;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 103;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_environment );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_6552d6edbde27a46c1cc51f0aaad601a->m_frame.f_lineno = 103;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 103;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_return_value = par_ctx;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 104;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6552d6edbde27a46c1cc51f0aaad601a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6552d6edbde27a46c1cc51f0aaad601a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6552d6edbde27a46c1cc51f0aaad601a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6552d6edbde27a46c1cc51f0aaad601a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6552d6edbde27a46c1cc51f0aaad601a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6552d6edbde27a46c1cc51f0aaad601a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6552d6edbde27a46c1cc51f0aaad601a,
        type_description_1,
        par_node,
        par_ctx
    );


    // Release cached frame.
    if ( frame_6552d6edbde27a46c1cc51f0aaad601a == cache_frame_6552d6edbde27a46c1cc51f0aaad601a )
    {
        Py_DECREF( frame_6552d6edbde27a46c1cc51f0aaad601a );
    }
    cache_frame_6552d6edbde27a46c1cc51f0aaad601a = NULL;

    assertFrameObject( frame_6552d6edbde27a46c1cc51f0aaad601a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_7_get_eval_context );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_node );
    par_node = NULL;

    Py_XDECREF( par_ctx );
    par_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_node );
    par_node = NULL;

    Py_XDECREF( par_ctx );
    par_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_7_get_eval_context );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_8___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fields = python_pars[ 1 ];
    PyObject *par_attributes = python_pars[ 2 ];
    PyObject *var_name = NULL;
    PyObject *var_arg = NULL;
    PyObject *var_attr = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_len_arg_1;
    PyObject *tmp_len_arg_2;
    PyObject *tmp_len_arg_3;
    PyObject *tmp_len_arg_4;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_make_exception_arg_2;
    PyObject *tmp_make_exception_arg_3;
    PyObject *tmp_make_exception_arg_4;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_setattr_attr_1;
    PyObject *tmp_setattr_attr_2;
    PyObject *tmp_setattr_target_1;
    PyObject *tmp_setattr_target_2;
    PyObject *tmp_setattr_value_1;
    PyObject *tmp_setattr_value_2;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    PyObject *tmp_value_name_1;
    static struct Nuitka_FrameObject *cache_frame_1448c8a5a6f6deef8f94156dd2b3eda1 = NULL;

    struct Nuitka_FrameObject *frame_1448c8a5a6f6deef8f94156dd2b3eda1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1448c8a5a6f6deef8f94156dd2b3eda1, codeobj_1448c8a5a6f6deef8f94156dd2b3eda1, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1448c8a5a6f6deef8f94156dd2b3eda1 = cache_frame_1448c8a5a6f6deef8f94156dd2b3eda1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1448c8a5a6f6deef8f94156dd2b3eda1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1448c8a5a6f6deef8f94156dd2b3eda1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_abstract );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 128;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 128;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_make_exception_arg_1 = const_str_digest_d7de95db12f1e5c1e6c3d2e6f2bd93a5;
    frame_1448c8a5a6f6deef8f94156dd2b3eda1->m_frame.f_lineno = 129;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 129;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_cond_value_2 = par_fields;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fields" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 130;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 130;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_len_arg_1 = par_fields;

    if ( tmp_len_arg_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fields" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 131;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 131;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_compare_left_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 131;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_len_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_fields );
    if ( tmp_len_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 131;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = BUILTIN_LEN( tmp_len_arg_2 );
    Py_DECREF( tmp_len_arg_2 );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 131;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );
        Py_DECREF( tmp_compare_right_1 );

        exception_lineno = 131;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 132;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_fields );
    if ( tmp_cond_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 132;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 132;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_no_4;
    }
    else
    {
        goto branch_yes_4;
    }
    branch_yes_4:;
    tmp_left_name_1 = const_str_digest_0f246d429226ee7f6d2b0fc496946ce6;
    tmp_source_name_5 = par_self;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 134;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_5 );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___name__ );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 134;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_make_exception_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 133;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_1448c8a5a6f6deef8f94156dd2b3eda1->m_frame.f_lineno = 133;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_2 };
        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_2 );
    assert( tmp_raise_type_2 != NULL );
    exception_type = tmp_raise_type_2;
    exception_lineno = 133;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto frame_exception_exit_1;
    branch_no_4:;
    tmp_left_name_2 = const_str_digest_59f1961dfcfd5f1dc5b41c0848075be8;
    tmp_right_name_2 = PyTuple_New( 3 );
    tmp_source_name_7 = par_self;

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_right_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 136;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_7 );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );

        exception_lineno = 136;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain___name__ );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );

        exception_lineno = 136;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_1 );
    tmp_source_name_8 = par_self;

    if ( tmp_source_name_8 == NULL )
    {
        Py_DECREF( tmp_right_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 137;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_len_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_fields );
    if ( tmp_len_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );

        exception_lineno = 137;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = BUILTIN_LEN( tmp_len_arg_3 );
    Py_DECREF( tmp_len_arg_3 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );

        exception_lineno = 137;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_1 );
    tmp_source_name_9 = par_self;

    if ( tmp_source_name_9 == NULL )
    {
        Py_DECREF( tmp_right_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 138;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_len_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_fields );
    if ( tmp_len_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );

        exception_lineno = 138;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_left_1 = BUILTIN_LEN( tmp_len_arg_4 );
    Py_DECREF( tmp_len_arg_4 );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );

        exception_lineno = 138;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = const_int_pos_1;
    tmp_and_left_value_1 = RICH_COMPARE_NE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );

        exception_lineno = 138;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 138;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_and_right_value_1 = const_str_plain_s;
    Py_INCREF( tmp_and_right_value_1 );
    tmp_or_left_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_or_left_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_2 );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 138;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_or_right_value_1 = const_str_empty;
    Py_INCREF( tmp_or_right_value_1 );
    tmp_tuple_element_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_tuple_element_1 = tmp_or_left_value_1;
    or_end_1:;
    PyTuple_SET_ITEM( tmp_right_name_2, 2, tmp_tuple_element_1 );
    tmp_make_exception_arg_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_make_exception_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 135;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_1448c8a5a6f6deef8f94156dd2b3eda1->m_frame.f_lineno = 135;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_3 };
        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_3 );
    assert( tmp_raise_type_3 != NULL );
    exception_type = tmp_raise_type_3;
    exception_lineno = 135;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto frame_exception_exit_1;
    branch_no_3:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_izip );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_izip );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "izip" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 140;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_10 = par_self;

    if ( tmp_source_name_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 140;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_fields );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = par_fields;

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_args_element_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fields" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 140;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    frame_1448c8a5a6f6deef8f94156dd2b3eda1->m_frame.f_lineno = 140;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooo";
            exception_lineno = 140;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        type_description_1 = "oooooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooo";
        exception_lineno = 140;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooo";
        exception_lineno = 140;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooo";
                exception_lineno = 140;
                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "oooooo";
        exception_lineno = 140;
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = var_name;
        var_name = tmp_assign_source_6;
        Py_INCREF( var_name );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = var_arg;
        var_arg = tmp_assign_source_7;
        Py_INCREF( var_arg );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_setattr_target_1 = par_self;

    if ( tmp_setattr_target_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 141;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_setattr_attr_1 = var_name;

    if ( tmp_setattr_attr_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 141;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_setattr_value_1 = var_arg;

    if ( tmp_setattr_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "arg" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 141;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 141;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 140;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    branch_no_2:;
    tmp_source_name_11 = par_self;

    if ( tmp_source_name_11 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 142;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_attributes );
    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_2__for_iterator == NULL );
    tmp_for_loop_2__for_iterator = tmp_assign_source_8;

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooo";
            exception_lineno = 142;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_assign_source_10 );
    {
        PyObject *old = var_attr;
        var_attr = tmp_assign_source_10;
        Py_INCREF( var_attr );
        Py_XDECREF( old );
    }

    tmp_setattr_target_2 = par_self;

    if ( tmp_setattr_target_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 143;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }

    tmp_setattr_attr_2 = var_attr;

    CHECK_OBJECT( tmp_setattr_attr_2 );
    tmp_source_name_12 = par_attributes;

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "attributes" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 143;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_pop );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    tmp_args_element_name_3 = var_attr;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "attr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 143;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }

    tmp_args_element_name_4 = Py_None;
    frame_1448c8a5a6f6deef8f94156dd2b3eda1->m_frame.f_lineno = 143;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_setattr_value_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_setattr_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    tmp_unused = BUILTIN_SETATTR( tmp_setattr_target_2, tmp_setattr_attr_2, tmp_setattr_value_2 );
    Py_DECREF( tmp_setattr_value_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 143;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 142;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_cond_value_4 = par_attributes;

    if ( tmp_cond_value_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "attributes" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 144;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 144;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_left_name_3 = const_str_digest_50e5135d9fc0d9c505da14632777f939;
    tmp_iter_arg_4 = par_attributes;

    if ( tmp_iter_arg_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "attributes" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 146;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_value_name_1 = MAKE_ITERATOR( tmp_iter_arg_4 );
    if ( tmp_value_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 146;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    tmp_right_name_3 = ITERATOR_NEXT( tmp_value_name_1 );
    Py_DECREF( tmp_value_name_1 );
    if ( tmp_right_name_3 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "oooooo";
        exception_lineno = 146;
        goto frame_exception_exit_1;
    }
    tmp_make_exception_arg_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
    Py_DECREF( tmp_right_name_3 );
    if ( tmp_make_exception_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 145;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    frame_1448c8a5a6f6deef8f94156dd2b3eda1->m_frame.f_lineno = 145;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_4 };
        tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    Py_DECREF( tmp_make_exception_arg_4 );
    assert( tmp_raise_type_4 != NULL );
    exception_type = tmp_raise_type_4;
    exception_lineno = 145;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto frame_exception_exit_1;
    branch_no_5:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1448c8a5a6f6deef8f94156dd2b3eda1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1448c8a5a6f6deef8f94156dd2b3eda1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1448c8a5a6f6deef8f94156dd2b3eda1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1448c8a5a6f6deef8f94156dd2b3eda1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1448c8a5a6f6deef8f94156dd2b3eda1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1448c8a5a6f6deef8f94156dd2b3eda1,
        type_description_1,
        par_self,
        par_fields,
        par_attributes,
        var_name,
        var_arg,
        var_attr
    );


    // Release cached frame.
    if ( frame_1448c8a5a6f6deef8f94156dd2b3eda1 == cache_frame_1448c8a5a6f6deef8f94156dd2b3eda1 )
    {
        Py_DECREF( frame_1448c8a5a6f6deef8f94156dd2b3eda1 );
    }
    cache_frame_1448c8a5a6f6deef8f94156dd2b3eda1 = NULL;

    assertFrameObject( frame_1448c8a5a6f6deef8f94156dd2b3eda1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_8___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_fields );
    par_fields = NULL;

    Py_XDECREF( par_attributes );
    par_attributes = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_attr );
    var_attr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_fields );
    par_fields = NULL;

    Py_XDECREF( par_attributes );
    par_attributes = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_attr );
    var_attr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_8___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_9_iter_fields( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_CellObject *par_exclude = PyCell_NEW1( python_pars[ 1 ] );
    struct Nuitka_CellObject *par_only = PyCell_NEW1( python_pars[ 2 ] );
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = Nuitka_Generator_New(
        jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields_context,
        module_jinja2$nodes,
        const_str_plain_iter_fields,
#if PYTHON_VERSION >= 350
        const_str_digest_5e05da3af0295c94257c0204d091460a,
#endif
        codeobj_807a626cdf816099591efb57c5ec52a8,
        3
    );

    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] = par_exclude;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] );
    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[1] = par_only;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[1] );
    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[2] = par_self;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[2] );
    assert( Py_SIZE( tmp_return_value ) >= 3 ); 


    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_9_iter_fields );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exclude );
    Py_DECREF( par_exclude );
    par_exclude = NULL;

    CHECK_OBJECT( (PyObject *)par_only );
    Py_DECREF( par_only );
    par_only = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exclude );
    Py_DECREF( par_exclude );
    par_exclude = NULL;

    CHECK_OBJECT( (PyObject *)par_only );
    Py_DECREF( par_only );
    par_only = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_9_iter_fields );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields_locals {
    PyObject *var_name
    PyObject *tmp_comparison_chain_1__comparison_result
    PyObject *tmp_comparison_chain_1__operand_2
    PyObject *tmp_for_loop_1__for_iterator
    PyObject *tmp_for_loop_1__iter_value
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_outline_return_value_1;
    bool tmp_result;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    char const *type_description_1
    tmp_outline_return_value_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_name = NULL;
    PyObject *tmp_comparison_chain_1__comparison_result = NULL;
    PyObject *tmp_comparison_chain_1__operand_2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_left_3;
    PyObject *tmp_compexpr_left_4;
    PyObject *tmp_compexpr_left_5;
    PyObject *tmp_compexpr_left_6;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_compexpr_right_3;
    PyObject *tmp_compexpr_right_4;
    PyObject *tmp_compexpr_right_5;
    PyObject *tmp_compexpr_right_6;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_outline_return_value_1;
    bool tmp_result;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_outline_return_value_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_807a626cdf816099591efb57c5ec52a8, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    if ( generator->m_closure[2] == NULL )
    {
        tmp_source_name_1 = NULL;
    }
    else
    {
        tmp_source_name_1 = PyCell_GET( generator->m_closure[2] );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 155;
        type_description_1 = "ccco";
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_fields );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 155;
        type_description_1 = "ccco";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 155;
        type_description_1 = "ccco";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ccco";
            exception_lineno = 155;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_name;
        var_name = tmp_assign_source_3;
        Py_INCREF( var_name );
        Py_XDECREF( old );
    }

    // Tried code:
    if ( generator->m_closure[1] == NULL )
    {
        tmp_assign_source_4 = NULL;
    }
    else
    {
        tmp_assign_source_4 = PyCell_GET( generator->m_closure[1] );
    }

    if ( tmp_assign_source_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "only" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 156;
        type_description_1 = "ccco";
        goto try_except_handler_3;
    }

    {
        PyObject *old = tmp_comparison_chain_1__operand_2;
        tmp_comparison_chain_1__operand_2 = tmp_assign_source_4;
        Py_INCREF( tmp_comparison_chain_1__operand_2 );
        Py_XDECREF( old );
    }

    if ( generator->m_closure[0] == NULL )
    {
        tmp_compexpr_left_1 = NULL;
    }
    else
    {
        tmp_compexpr_left_1 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_compexpr_left_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "exclude" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 156;
        type_description_1 = "ccco";
        goto try_except_handler_3;
    }

    tmp_compexpr_right_1 = tmp_comparison_chain_1__operand_2;

    CHECK_OBJECT( tmp_compexpr_right_1 );
    tmp_assign_source_5 = BOOL_FROM( tmp_compexpr_left_1 == tmp_compexpr_right_1 );
    {
        PyObject *old = tmp_comparison_chain_1__comparison_result;
        tmp_comparison_chain_1__comparison_result = tmp_assign_source_5;
        Py_INCREF( tmp_comparison_chain_1__comparison_result );
        Py_XDECREF( old );
    }

    tmp_cond_value_2 = tmp_comparison_chain_1__comparison_result;

    CHECK_OBJECT( tmp_cond_value_2 );
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 156;
        type_description_1 = "ccco";
        goto try_except_handler_3;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_outline_return_value_1 = tmp_comparison_chain_1__comparison_result;

    CHECK_OBJECT( tmp_outline_return_value_1 );
    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_3;
    branch_no_2:;
    tmp_compexpr_left_2 = tmp_comparison_chain_1__operand_2;

    CHECK_OBJECT( tmp_compexpr_left_2 );
    tmp_compexpr_right_2 = Py_None;
    tmp_outline_return_value_1 = BOOL_FROM( tmp_compexpr_left_2 == tmp_compexpr_right_2 );
    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_3;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields );
    return;
    // Return handler code:
    try_return_handler_3:;
    Py_XDECREF( tmp_comparison_chain_1__operand_2 );
    tmp_comparison_chain_1__operand_2 = NULL;

    Py_XDECREF( tmp_comparison_chain_1__comparison_result );
    tmp_comparison_chain_1__comparison_result = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_comparison_chain_1__operand_2 );
    tmp_comparison_chain_1__operand_2 = NULL;

    Py_XDECREF( tmp_comparison_chain_1__comparison_result );
    tmp_comparison_chain_1__comparison_result = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields );
    return;
    outline_result_1:;
    tmp_or_left_value_1 = tmp_outline_return_value_1;
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 158;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    if ( generator->m_closure[0] == NULL )
    {
        tmp_compexpr_left_3 = NULL;
    }
    else
    {
        tmp_compexpr_left_3 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_compexpr_left_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "exclude" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 157;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }

    tmp_compexpr_right_3 = Py_None;
    tmp_and_left_value_1 = BOOL_FROM( tmp_compexpr_left_3 != tmp_compexpr_right_3 );
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_compexpr_left_4 = var_name;

    if ( tmp_compexpr_left_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 157;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }

    if ( generator->m_closure[0] == NULL )
    {
        tmp_compexpr_right_4 = NULL;
    }
    else
    {
        tmp_compexpr_right_4 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_compexpr_right_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "exclude" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 157;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }

    tmp_and_right_value_1 = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 157;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }
    tmp_or_left_value_2 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_or_left_value_2 = tmp_and_left_value_1;
    and_end_1:;
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    assert( !(tmp_or_left_truth_2 == -1) );
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    if ( generator->m_closure[1] == NULL )
    {
        tmp_compexpr_left_5 = NULL;
    }
    else
    {
        tmp_compexpr_left_5 = PyCell_GET( generator->m_closure[1] );
    }

    if ( tmp_compexpr_left_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "only" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 158;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }

    tmp_compexpr_right_5 = Py_None;
    tmp_and_left_value_2 = BOOL_FROM( tmp_compexpr_left_5 != tmp_compexpr_right_5 );
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_compexpr_left_6 = var_name;

    if ( tmp_compexpr_left_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 158;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }

    if ( generator->m_closure[1] == NULL )
    {
        tmp_compexpr_right_6 = NULL;
    }
    else
    {
        tmp_compexpr_right_6 = PyCell_GET( generator->m_closure[1] );
    }

    if ( tmp_compexpr_right_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "only" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 158;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }

    tmp_and_right_value_2 = SEQUENCE_CONTAINS( tmp_compexpr_left_6, tmp_compexpr_right_6 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 158;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }
    tmp_or_right_value_2 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    tmp_or_right_value_2 = tmp_and_left_value_2;
    and_end_2:;
    tmp_or_right_value_1 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    tmp_or_right_value_1 = tmp_or_left_value_2;
    or_end_2:;
    Py_INCREF( tmp_or_right_value_1 );
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 158;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code:
    tmp_expression_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_name;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_expression_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 160;
        type_description_1 = "ccco";
        goto try_except_handler_4;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_expression_name_1, 0, tmp_tuple_element_1 );
    if ( generator->m_closure[2] == NULL )
    {
        tmp_getattr_target_1 = NULL;
    }
    else
    {
        tmp_getattr_target_1 = PyCell_GET( generator->m_closure[2] );
    }

    if ( tmp_getattr_target_1 == NULL )
    {
        Py_DECREF( tmp_expression_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 160;
        type_description_1 = "ccco";
        goto try_except_handler_4;
    }

    tmp_getattr_attr_1 = var_name;

    if ( tmp_getattr_attr_1 == NULL )
    {
        Py_DECREF( tmp_expression_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 160;
        type_description_1 = "ccco";
        goto try_except_handler_4;
    }

    tmp_tuple_element_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_expression_name_1 );

        exception_lineno = 160;
        type_description_1 = "ccco";
        goto try_except_handler_4;
    }
    PyTuple_SET_ITEM( tmp_expression_name_1, 1, tmp_tuple_element_1 );
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 160;
        type_description_1 = "ccco";
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( generator->m_frame, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != 0 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, generator->m_frame, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PyException_SetTraceback( exception_keeper_value_2, (PyObject *)exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    // Tried code:
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_AttributeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 161;
        type_description_1 = "ccco";
        goto try_except_handler_5;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_no_3;
    }
    else
    {
        goto branch_yes_3;
    }
    branch_yes_3:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 159;
    }

    if (exception_tb && exception_tb->tb_frame == &generator->m_frame->m_frame) generator->m_frame->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ccco";
    goto try_except_handler_5;
    branch_no_3:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_9_iter_fields$$$genobj_1_iter_fields );
    return;
    // End of try:
    try_end_1:;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 155;
        type_description_1 = "ccco";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            generator->m_closure[2],
            generator->m_closure[0],
            generator->m_closure[1],
            var_name
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_4;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_name );
    var_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_10_iter_child_nodes( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_CellObject *par_exclude = PyCell_NEW1( python_pars[ 1 ] );
    struct Nuitka_CellObject *par_only = PyCell_NEW1( python_pars[ 2 ] );
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = Nuitka_Generator_New(
        jinja2$nodes$$$function_10_iter_child_nodes$$$genobj_1_iter_child_nodes_context,
        module_jinja2$nodes,
        const_str_plain_iter_child_nodes,
#if PYTHON_VERSION >= 350
        const_str_digest_7827295ccf1d1a35c3b8d70c52b35a4e,
#endif
        codeobj_f822cdb4add7475dab19a608d124b318,
        3
    );

    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] = par_exclude;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] );
    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[1] = par_only;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[1] );
    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[2] = par_self;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[2] );
    assert( Py_SIZE( tmp_return_value ) >= 3 ); 


    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_10_iter_child_nodes );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exclude );
    Py_DECREF( par_exclude );
    par_exclude = NULL;

    CHECK_OBJECT( (PyObject *)par_only );
    Py_DECREF( par_only );
    par_only = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exclude );
    Py_DECREF( par_exclude );
    par_exclude = NULL;

    CHECK_OBJECT( (PyObject *)par_only );
    Py_DECREF( par_only );
    par_only = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_10_iter_child_nodes );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$function_10_iter_child_nodes$$$genobj_1_iter_child_nodes_locals {
    PyObject *var_field
    PyObject *var_item
    PyObject *var_n
    PyObject *tmp_for_loop_1__for_iterator
    PyObject *tmp_for_loop_1__iter_value
    PyObject *tmp_for_loop_2__for_iterator
    PyObject *tmp_for_loop_2__iter_value
    PyObject *tmp_tuple_unpack_1__element_1
    PyObject *tmp_tuple_unpack_1__element_2
    PyObject *tmp_tuple_unpack_1__source_iter
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    int exception_keeper_lineno_5;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_expression_name_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    int tmp_res;
    PyObject *tmp_source_name_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_10_iter_child_nodes$$$genobj_1_iter_child_nodes_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$function_10_iter_child_nodes$$$genobj_1_iter_child_nodes_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_field = NULL;
    PyObject *var_item = NULL;
    PyObject *var_n = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_expression_name_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_cls_3;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_isinstance_inst_3;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    int tmp_res;
    PyObject *tmp_source_name_1;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_f822cdb4add7475dab19a608d124b318, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    if ( generator->m_closure[2] == NULL )
    {
        tmp_source_name_1 = NULL;
    }
    else
    {
        tmp_source_name_1 = PyCell_GET( generator->m_closure[2] );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 169;
        type_description_1 = "cccooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_iter_fields );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        type_description_1 = "cccooo";
        goto frame_exception_exit_1;
    }
    if ( generator->m_closure[0] == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "exclude" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 169;
        type_description_1 = "cccooo";
        goto frame_exception_exit_1;
    }

    if ( generator->m_closure[1] == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( generator->m_closure[1] );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "only" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 169;
        type_description_1 = "cccooo";
        goto frame_exception_exit_1;
    }

    generator->m_frame->m_frame.f_lineno = 169;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        type_description_1 = "cccooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        type_description_1 = "cccooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "cccooo";
            exception_lineno = 169;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        type_description_1 = "cccooo";
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "cccooo";
        exception_lineno = 169;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "cccooo";
        exception_lineno = 169;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "cccooo";
                exception_lineno = 169;
                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "cccooo";
        exception_lineno = 169;
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = var_field;
        var_field = tmp_assign_source_6;
        Py_INCREF( var_field );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = var_item;
        var_item = tmp_assign_source_7;
        Py_INCREF( var_item );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_isinstance_inst_1 = var_item;

    if ( tmp_isinstance_inst_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "item" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 170;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }

    tmp_isinstance_cls_1 = (PyObject *)&PyList_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 170;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_iter_arg_3 = var_item;

    if ( tmp_iter_arg_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "item" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 171;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }

    tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_3 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 171;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_9 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "cccooo";
            exception_lineno = 171;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_assign_source_10 );
    {
        PyObject *old = var_n;
        var_n = tmp_assign_source_10;
        Py_INCREF( var_n );
        Py_XDECREF( old );
    }

    tmp_isinstance_inst_2 = var_n;

    CHECK_OBJECT( tmp_isinstance_inst_2 );
    tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Node );

    if (unlikely( tmp_isinstance_cls_2 == NULL ))
    {
        tmp_isinstance_cls_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Node );
    }

    if ( tmp_isinstance_cls_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 172;
        type_description_1 = "cccooo";
        goto try_except_handler_5;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 172;
        type_description_1 = "cccooo";
        goto try_except_handler_5;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_expression_name_1 = var_n;

    CHECK_OBJECT( tmp_expression_name_1 );
    Py_INCREF( tmp_expression_name_1 );
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 173;
        type_description_1 = "cccooo";
        goto try_except_handler_5;
    }
    branch_no_2:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 171;
        type_description_1 = "cccooo";
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    goto branch_end_1;
    branch_no_1:;
    tmp_isinstance_inst_3 = var_item;

    if ( tmp_isinstance_inst_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "item" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 174;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }

    tmp_isinstance_cls_3 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Node );

    if (unlikely( tmp_isinstance_cls_3 == NULL ))
    {
        tmp_isinstance_cls_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Node );
    }

    if ( tmp_isinstance_cls_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 174;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 174;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_expression_name_2 = var_item;

    if ( tmp_expression_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "item" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 175;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }

    Py_INCREF( tmp_expression_name_2 );
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 175;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }
    branch_no_3:;
    branch_end_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 169;
        type_description_1 = "cccooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            generator->m_closure[2],
            generator->m_closure[0],
            generator->m_closure[1],
            var_field,
            var_item,
            var_n
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_5;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_field );
    var_field = NULL;

    Py_XDECREF( var_item );
    var_item = NULL;

    Py_XDECREF( var_n );
    var_n = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    Py_XDECREF( var_field );
    var_field = NULL;

    Py_XDECREF( var_item );
    var_item = NULL;

    Py_XDECREF( var_n );
    var_n = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_11_find( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_node_type = python_pars[ 1 ];
    PyObject *var_result = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_name_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_b1226f368853cb2b9944568040ccfeba = NULL;

    struct Nuitka_FrameObject *frame_b1226f368853cb2b9944568040ccfeba;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b1226f368853cb2b9944568040ccfeba, codeobj_b1226f368853cb2b9944568040ccfeba, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b1226f368853cb2b9944568040ccfeba = cache_frame_b1226f368853cb2b9944568040ccfeba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b1226f368853cb2b9944568040ccfeba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b1226f368853cb2b9944568040ccfeba ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_find_all );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 181;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_node_type;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 181;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_b1226f368853cb2b9944568040ccfeba->m_frame.f_lineno = 181;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 181;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 181;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            exception_lineno = 181;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    assert( var_result == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_result = tmp_assign_source_3;

    tmp_return_value = var_result;

    CHECK_OBJECT( tmp_return_value );
    Py_INCREF( tmp_return_value );
    goto try_return_handler_2;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 181;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__iter_value );
    Py_DECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b1226f368853cb2b9944568040ccfeba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b1226f368853cb2b9944568040ccfeba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b1226f368853cb2b9944568040ccfeba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b1226f368853cb2b9944568040ccfeba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b1226f368853cb2b9944568040ccfeba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b1226f368853cb2b9944568040ccfeba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b1226f368853cb2b9944568040ccfeba,
        type_description_1,
        par_self,
        par_node_type,
        var_result
    );


    // Release cached frame.
    if ( frame_b1226f368853cb2b9944568040ccfeba == cache_frame_b1226f368853cb2b9944568040ccfeba )
    {
        Py_DECREF( frame_b1226f368853cb2b9944568040ccfeba );
    }
    cache_frame_b1226f368853cb2b9944568040ccfeba = NULL;

    assertFrameObject( frame_b1226f368853cb2b9944568040ccfeba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_11_find );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_node_type );
    par_node_type = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_node_type );
    par_node_type = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_11_find );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_12_find_all( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_CellObject *par_node_type = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = Nuitka_Generator_New(
        jinja2$nodes$$$function_12_find_all$$$genobj_1_find_all_context,
        module_jinja2$nodes,
        const_str_plain_find_all,
#if PYTHON_VERSION >= 350
        const_str_digest_a66f482eac6a31b80de103ecefcb560b,
#endif
        codeobj_23c72015dc97b7d37e07927b829f71ef,
        2
    );

    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] = par_node_type;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] );
    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[1] = par_self;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[1] );
    assert( Py_SIZE( tmp_return_value ) >= 2 ); 


    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_12_find_all );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_node_type );
    Py_DECREF( par_node_type );
    par_node_type = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_node_type );
    Py_DECREF( par_node_type );
    par_node_type = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_12_find_all );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$function_12_find_all$$$genobj_1_find_all_locals {
    PyObject *var_child
    PyObject *var_result
    PyObject *tmp_for_loop_1__for_iterator
    PyObject *tmp_for_loop_1__iter_value
    PyObject *tmp_for_loop_2__for_iterator
    PyObject *tmp_for_loop_2__iter_value
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_expression_name_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    int tmp_res;
    PyObject *tmp_source_name_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_12_find_all$$$genobj_1_find_all_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$function_12_find_all$$$genobj_1_find_all_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_child = NULL;
    PyObject *var_result = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_expression_name_2;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    int tmp_res;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_23c72015dc97b7d37e07927b829f71ef, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    if ( generator->m_closure[1] == NULL )
    {
        tmp_called_instance_1 = NULL;
    }
    else
    {
        tmp_called_instance_1 = PyCell_GET( generator->m_closure[1] );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 188;
        type_description_1 = "ccoo";
        goto frame_exception_exit_1;
    }

    generator->m_frame->m_frame.f_lineno = 188;
    tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_iter_child_nodes );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 188;
        type_description_1 = "ccoo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 188;
        type_description_1 = "ccoo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ccoo";
            exception_lineno = 188;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_child;
        var_child = tmp_assign_source_3;
        Py_INCREF( var_child );
        Py_XDECREF( old );
    }

    tmp_isinstance_inst_1 = var_child;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    if ( generator->m_closure[0] == NULL )
    {
        tmp_isinstance_cls_1 = NULL;
    }
    else
    {
        tmp_isinstance_cls_1 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "node_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 189;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 189;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_expression_name_1 = var_child;

    CHECK_OBJECT( tmp_expression_name_1 );
    Py_INCREF( tmp_expression_name_1 );
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 190;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }
    branch_no_1:;
    tmp_source_name_1 = var_child;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "child" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 191;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_find_all );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }
    if ( generator->m_closure[0] == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "node_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 191;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }

    generator->m_frame->m_frame.f_lineno = 191;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }
    tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ccoo";
            exception_lineno = 191;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_assign_source_6 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = var_result;
        var_result = tmp_assign_source_6;
        Py_INCREF( var_result );
        Py_XDECREF( old );
    }

    tmp_expression_name_2 = var_result;

    CHECK_OBJECT( tmp_expression_name_2 );
    Py_INCREF( tmp_expression_name_2 );
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 192;
        type_description_1 = "ccoo";
        goto try_except_handler_3;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 191;
        type_description_1 = "ccoo";
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 188;
        type_description_1 = "ccoo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            generator->m_closure[1],
            generator->m_closure[0],
            var_child,
            var_result
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_3;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_child );
    var_child = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    Py_XDECREF( var_child );
    var_child = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_13_set_ctx( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_ctx = python_pars[ 1 ];
    PyObject *var_todo = NULL;
    PyObject *var_node = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_list_element_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_89d921f056eaad4ab7942f34e757335d = NULL;

    struct Nuitka_FrameObject *frame_89d921f056eaad4ab7942f34e757335d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_89d921f056eaad4ab7942f34e757335d, codeobj_89d921f056eaad4ab7942f34e757335d, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_89d921f056eaad4ab7942f34e757335d = cache_frame_89d921f056eaad4ab7942f34e757335d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_89d921f056eaad4ab7942f34e757335d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_89d921f056eaad4ab7942f34e757335d ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_deque );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_deque );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "deque" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 200;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = PyList_New( 1 );
    tmp_list_element_1 = par_self;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_args_element_name_1, 0, tmp_list_element_1 );
    frame_89d921f056eaad4ab7942f34e757335d->m_frame.f_lineno = 200;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 200;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_todo == NULL );
    var_todo = tmp_assign_source_1;

    loop_start_1:;
    tmp_cond_value_1 = var_todo;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    tmp_called_instance_1 = var_todo;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "todo" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 202;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    frame_89d921f056eaad4ab7942f34e757335d->m_frame.f_lineno = 202;
    tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_popleft );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 202;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_node;
        var_node = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_compare_left_1 = const_str_plain_ctx;
    tmp_source_name_1 = var_node;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_fields );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 203;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_assattr_name_1 = par_ctx;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 204;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = var_node;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 204;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_ctx, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 204;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;
    tmp_source_name_2 = var_todo;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "todo" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 205;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_extend );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 205;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_2 = var_node;

    if ( tmp_called_instance_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 205;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    frame_89d921f056eaad4ab7942f34e757335d->m_frame.f_lineno = 205;
    tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_iter_child_nodes );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 205;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_89d921f056eaad4ab7942f34e757335d->m_frame.f_lineno = 205;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 205;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 201;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_return_value = par_self;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 206;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_89d921f056eaad4ab7942f34e757335d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_89d921f056eaad4ab7942f34e757335d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_89d921f056eaad4ab7942f34e757335d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_89d921f056eaad4ab7942f34e757335d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_89d921f056eaad4ab7942f34e757335d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_89d921f056eaad4ab7942f34e757335d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_89d921f056eaad4ab7942f34e757335d,
        type_description_1,
        par_self,
        par_ctx,
        var_todo,
        var_node
    );


    // Release cached frame.
    if ( frame_89d921f056eaad4ab7942f34e757335d == cache_frame_89d921f056eaad4ab7942f34e757335d )
    {
        Py_DECREF( frame_89d921f056eaad4ab7942f34e757335d );
    }
    cache_frame_89d921f056eaad4ab7942f34e757335d = NULL;

    assertFrameObject( frame_89d921f056eaad4ab7942f34e757335d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_13_set_ctx );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_ctx );
    par_ctx = NULL;

    Py_XDECREF( var_todo );
    var_todo = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_ctx );
    par_ctx = NULL;

    Py_XDECREF( var_todo );
    var_todo = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_13_set_ctx );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_14_set_lineno( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_lineno = python_pars[ 1 ];
    PyObject *par_override = python_pars[ 2 ];
    PyObject *var_todo = NULL;
    PyObject *var_node = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cmp_In_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_list_element_1;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_dc322f8ad2d8817bbadbbfe5b664b6f7 = NULL;

    struct Nuitka_FrameObject *frame_dc322f8ad2d8817bbadbbfe5b664b6f7;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dc322f8ad2d8817bbadbbfe5b664b6f7, codeobj_dc322f8ad2d8817bbadbbfe5b664b6f7, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_dc322f8ad2d8817bbadbbfe5b664b6f7 = cache_frame_dc322f8ad2d8817bbadbbfe5b664b6f7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dc322f8ad2d8817bbadbbfe5b664b6f7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dc322f8ad2d8817bbadbbfe5b664b6f7 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_deque );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_deque );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "deque" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 210;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = PyList_New( 1 );
    tmp_list_element_1 = par_self;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_args_element_name_1, 0, tmp_list_element_1 );
    frame_dc322f8ad2d8817bbadbbfe5b664b6f7->m_frame.f_lineno = 210;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 210;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_todo == NULL );
    var_todo = tmp_assign_source_1;

    loop_start_1:;
    tmp_cond_value_1 = var_todo;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 211;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    tmp_called_instance_1 = var_todo;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "todo" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 212;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_dc322f8ad2d8817bbadbbfe5b664b6f7->m_frame.f_lineno = 212;
    tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_popleft );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 212;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_node;
        var_node = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_compare_left_1 = const_str_plain_lineno;
    tmp_source_name_1 = var_node;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_attributes );
    if ( tmp_compare_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 213;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    Py_DECREF( tmp_compare_right_1 );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_source_name_2 = var_node;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 214;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_lineno );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 214;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = Py_None;
    tmp_or_left_value_1 = BOOL_FROM( tmp_compexpr_left_1 == tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    assert( !(tmp_or_left_truth_1 == -1) );
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    tmp_or_right_value_1 = par_override;

    if ( tmp_or_right_value_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "override" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 214;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_value_2 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_2 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 214;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_assattr_name_1 = par_lineno;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "lineno" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 215;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = var_node;

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 215;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_lineno, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 215;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    branch_no_3:;
    branch_no_2:;
    tmp_source_name_3 = var_todo;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "todo" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 216;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_extend );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 216;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_2 = var_node;

    if ( tmp_called_instance_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 216;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_dc322f8ad2d8817bbadbbfe5b664b6f7->m_frame.f_lineno = 216;
    tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_iter_child_nodes );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 216;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_dc322f8ad2d8817bbadbbfe5b664b6f7->m_frame.f_lineno = 216;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 216;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 211;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_return_value = par_self;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 217;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dc322f8ad2d8817bbadbbfe5b664b6f7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_dc322f8ad2d8817bbadbbfe5b664b6f7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dc322f8ad2d8817bbadbbfe5b664b6f7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dc322f8ad2d8817bbadbbfe5b664b6f7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dc322f8ad2d8817bbadbbfe5b664b6f7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dc322f8ad2d8817bbadbbfe5b664b6f7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dc322f8ad2d8817bbadbbfe5b664b6f7,
        type_description_1,
        par_self,
        par_lineno,
        par_override,
        var_todo,
        var_node
    );


    // Release cached frame.
    if ( frame_dc322f8ad2d8817bbadbbfe5b664b6f7 == cache_frame_dc322f8ad2d8817bbadbbfe5b664b6f7 )
    {
        Py_DECREF( frame_dc322f8ad2d8817bbadbbfe5b664b6f7 );
    }
    cache_frame_dc322f8ad2d8817bbadbbfe5b664b6f7 = NULL;

    assertFrameObject( frame_dc322f8ad2d8817bbadbbfe5b664b6f7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_14_set_lineno );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_lineno );
    par_lineno = NULL;

    Py_XDECREF( par_override );
    par_override = NULL;

    Py_XDECREF( var_todo );
    var_todo = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_lineno );
    par_lineno = NULL;

    Py_XDECREF( par_override );
    par_override = NULL;

    Py_XDECREF( var_todo );
    var_todo = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_14_set_lineno );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_15_set_environment( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_environment = python_pars[ 1 ];
    PyObject *var_todo = NULL;
    PyObject *var_node = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_list_element_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_b3ddd603e8455ad39086b0cb84e6820d = NULL;

    struct Nuitka_FrameObject *frame_b3ddd603e8455ad39086b0cb84e6820d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b3ddd603e8455ad39086b0cb84e6820d, codeobj_b3ddd603e8455ad39086b0cb84e6820d, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b3ddd603e8455ad39086b0cb84e6820d = cache_frame_b3ddd603e8455ad39086b0cb84e6820d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b3ddd603e8455ad39086b0cb84e6820d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b3ddd603e8455ad39086b0cb84e6820d ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_deque );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_deque );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "deque" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 221;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = PyList_New( 1 );
    tmp_list_element_1 = par_self;

    CHECK_OBJECT( tmp_list_element_1 );
    Py_INCREF( tmp_list_element_1 );
    PyList_SET_ITEM( tmp_args_element_name_1, 0, tmp_list_element_1 );
    frame_b3ddd603e8455ad39086b0cb84e6820d->m_frame.f_lineno = 221;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 221;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    assert( var_todo == NULL );
    var_todo = tmp_assign_source_1;

    loop_start_1:;
    tmp_cond_value_1 = var_todo;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 222;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    tmp_called_instance_1 = var_todo;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "todo" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 223;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    frame_b3ddd603e8455ad39086b0cb84e6820d->m_frame.f_lineno = 223;
    tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_popleft );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 223;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = var_node;
        var_node = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assattr_name_1 = par_environment;

    if ( tmp_assattr_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "environment" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 224;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_assattr_target_1 = var_node;

    CHECK_OBJECT( tmp_assattr_target_1 );
    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_environment, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 224;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = var_todo;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "todo" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 225;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_extend );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 225;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_2 = var_node;

    if ( tmp_called_instance_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 225;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    frame_b3ddd603e8455ad39086b0cb84e6820d->m_frame.f_lineno = 225;
    tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_iter_child_nodes );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 225;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    frame_b3ddd603e8455ad39086b0cb84e6820d->m_frame.f_lineno = 225;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 225;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 222;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_return_value = par_self;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 226;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b3ddd603e8455ad39086b0cb84e6820d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b3ddd603e8455ad39086b0cb84e6820d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b3ddd603e8455ad39086b0cb84e6820d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b3ddd603e8455ad39086b0cb84e6820d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b3ddd603e8455ad39086b0cb84e6820d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b3ddd603e8455ad39086b0cb84e6820d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b3ddd603e8455ad39086b0cb84e6820d,
        type_description_1,
        par_self,
        par_environment,
        var_todo,
        var_node
    );


    // Release cached frame.
    if ( frame_b3ddd603e8455ad39086b0cb84e6820d == cache_frame_b3ddd603e8455ad39086b0cb84e6820d )
    {
        Py_DECREF( frame_b3ddd603e8455ad39086b0cb84e6820d );
    }
    cache_frame_b3ddd603e8455ad39086b0cb84e6820d = NULL;

    assertFrameObject( frame_b3ddd603e8455ad39086b0cb84e6820d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_15_set_environment );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_environment );
    par_environment = NULL;

    Py_XDECREF( var_todo );
    var_todo = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_environment );
    par_environment = NULL;

    Py_XDECREF( var_todo );
    var_todo = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_15_set_environment );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_16___eq__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_arg_1;
    PyObject *tmp_tuple_arg_2;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_type_arg_2;
    static struct Nuitka_FrameObject *cache_frame_99b9ee7838f452579afa5c4e394e882a = NULL;

    struct Nuitka_FrameObject *frame_99b9ee7838f452579afa5c4e394e882a;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_99b9ee7838f452579afa5c4e394e882a, codeobj_99b9ee7838f452579afa5c4e394e882a, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_99b9ee7838f452579afa5c4e394e882a = cache_frame_99b9ee7838f452579afa5c4e394e882a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_99b9ee7838f452579afa5c4e394e882a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_99b9ee7838f452579afa5c4e394e882a ) == 2 ); // Frame stack

    // Framed code:
    tmp_type_arg_1 = par_self;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_compexpr_left_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_compexpr_left_1 != NULL );
    tmp_type_arg_2 = par_other;

    CHECK_OBJECT( tmp_type_arg_2 );
    tmp_compexpr_right_1 = BUILTIN_TYPE1( tmp_type_arg_2 );
    assert( tmp_compexpr_right_1 != NULL );
    tmp_and_left_value_1 = BOOL_FROM( tmp_compexpr_left_1 == tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    assert( !(tmp_and_left_truth_1 == -1) );
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_called_instance_1 = par_self;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 230;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_99b9ee7838f452579afa5c4e394e882a->m_frame.f_lineno = 230;
    tmp_tuple_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_iter_fields );
    if ( tmp_tuple_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 230;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_left_2 = PySequence_Tuple( tmp_tuple_arg_1 );
    Py_DECREF( tmp_tuple_arg_1 );
    if ( tmp_compexpr_left_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 230;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_instance_2 = par_other;

    if ( tmp_called_instance_2 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "other" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 230;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_99b9ee7838f452579afa5c4e394e882a->m_frame.f_lineno = 230;
    tmp_tuple_arg_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_iter_fields );
    if ( tmp_tuple_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_2 );

        exception_lineno = 230;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_2 = PySequence_Tuple( tmp_tuple_arg_2 );
    Py_DECREF( tmp_tuple_arg_2 );
    if ( tmp_compexpr_right_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_2 );

        exception_lineno = 230;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_1 = RICH_COMPARE_EQ( tmp_compexpr_left_2, tmp_compexpr_right_2 );
    Py_DECREF( tmp_compexpr_left_2 );
    Py_DECREF( tmp_compexpr_right_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 230;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    Py_INCREF( tmp_and_left_value_1 );
    tmp_return_value = tmp_and_left_value_1;
    and_end_1:;
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_99b9ee7838f452579afa5c4e394e882a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_99b9ee7838f452579afa5c4e394e882a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_99b9ee7838f452579afa5c4e394e882a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_99b9ee7838f452579afa5c4e394e882a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_99b9ee7838f452579afa5c4e394e882a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_99b9ee7838f452579afa5c4e394e882a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_99b9ee7838f452579afa5c4e394e882a,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_99b9ee7838f452579afa5c4e394e882a == cache_frame_99b9ee7838f452579afa5c4e394e882a )
    {
        Py_DECREF( frame_99b9ee7838f452579afa5c4e394e882a );
    }
    cache_frame_99b9ee7838f452579afa5c4e394e882a = NULL;

    assertFrameObject( frame_99b9ee7838f452579afa5c4e394e882a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_16___eq__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_16___eq__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_17___ne__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_operand_name_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_9d52e02e050a9e575027edeaccc56245 = NULL;

    struct Nuitka_FrameObject *frame_9d52e02e050a9e575027edeaccc56245;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9d52e02e050a9e575027edeaccc56245, codeobj_9d52e02e050a9e575027edeaccc56245, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_9d52e02e050a9e575027edeaccc56245 = cache_frame_9d52e02e050a9e575027edeaccc56245;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9d52e02e050a9e575027edeaccc56245 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9d52e02e050a9e575027edeaccc56245 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___eq__ );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 233;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = par_other;

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "other" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 233;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_9d52e02e050a9e575027edeaccc56245->m_frame.f_lineno = 233;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_operand_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 233;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = UNARY_OPERATION( UNARY_NOT, tmp_operand_name_1 );
    Py_DECREF( tmp_operand_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 233;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9d52e02e050a9e575027edeaccc56245 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9d52e02e050a9e575027edeaccc56245 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9d52e02e050a9e575027edeaccc56245 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9d52e02e050a9e575027edeaccc56245, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9d52e02e050a9e575027edeaccc56245->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9d52e02e050a9e575027edeaccc56245, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9d52e02e050a9e575027edeaccc56245,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_9d52e02e050a9e575027edeaccc56245 == cache_frame_9d52e02e050a9e575027edeaccc56245 )
    {
        Py_DECREF( frame_9d52e02e050a9e575027edeaccc56245 );
    }
    cache_frame_9d52e02e050a9e575027edeaccc56245 = NULL;

    assertFrameObject( frame_9d52e02e050a9e575027edeaccc56245 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_17___ne__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_17___ne__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_18___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_278e4e59db527df69a98b98ba89b48a5 = NULL;

    struct Nuitka_FrameObject *frame_278e4e59db527df69a98b98ba89b48a5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_278e4e59db527df69a98b98ba89b48a5, codeobj_278e4e59db527df69a98b98ba89b48a5, module_jinja2$nodes, sizeof(void *) );
    frame_278e4e59db527df69a98b98ba89b48a5 = cache_frame_278e4e59db527df69a98b98ba89b48a5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_278e4e59db527df69a98b98ba89b48a5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_278e4e59db527df69a98b98ba89b48a5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_left_name_1 = const_str_digest_a7636f57d1f8f80548278378b7bf84e2;
    tmp_right_name_1 = PyTuple_New( 2 );
    if ( par_self == NULL )
    {
        tmp_source_name_2 = NULL;
    }
    else
    {
        tmp_source_name_2 = PyCell_GET( par_self );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_right_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 240;
        type_description_1 = "c";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 240;
        type_description_1 = "c";
        goto frame_exception_exit_1;
    }
    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___name__ );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 240;
        type_description_1 = "c";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    tmp_source_name_3 = const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_join );
    assert( tmp_called_name_1 != NULL );
    if ( par_self == NULL )
    {
        tmp_source_name_4 = NULL;
    }
    else
    {
        tmp_source_name_4 = PyCell_GET( par_self );
    }

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 242;
        type_description_1 = "c";
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_fields );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 242;
        type_description_1 = "c";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        type_description_1 = "c";
        goto frame_exception_exit_1;
    }
    assert( tmp_genexpr_1__$0 == NULL );
    tmp_genexpr_1__$0 = tmp_assign_source_1;

    // Tried code:
    tmp_outline_return_value_1 = Nuitka_Generator_New(
        jinja2$nodes$$$function_18___repr__$$$genexpr_1_genexpr_context,
        module_jinja2$nodes,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_7bba61511efd1ca2924d85e5500f1ad8,
#endif
        codeobj_1da0c5d5b48a583b807b58478e618581,
        2
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[1] = par_self;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[1] );
    assert( Py_SIZE( tmp_outline_return_value_1 ) >= 2 ); 


    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_18___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_18___repr__ );
    return NULL;
    outline_result_1:;
    tmp_args_element_name_1 = tmp_outline_return_value_1;
    frame_278e4e59db527df69a98b98ba89b48a5->m_frame.f_lineno = 241;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 241;
        type_description_1 = "c";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
    tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 239;
        type_description_1 = "c";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_278e4e59db527df69a98b98ba89b48a5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_278e4e59db527df69a98b98ba89b48a5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_278e4e59db527df69a98b98ba89b48a5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_278e4e59db527df69a98b98ba89b48a5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_278e4e59db527df69a98b98ba89b48a5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_278e4e59db527df69a98b98ba89b48a5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_278e4e59db527df69a98b98ba89b48a5,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_278e4e59db527df69a98b98ba89b48a5 == cache_frame_278e4e59db527df69a98b98ba89b48a5 )
    {
        Py_DECREF( frame_278e4e59db527df69a98b98ba89b48a5 );
    }
    cache_frame_278e4e59db527df69a98b98ba89b48a5 = NULL;

    assertFrameObject( frame_278e4e59db527df69a98b98ba89b48a5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_18___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_18___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$function_18___repr__$$$genexpr_1_genexpr_locals {
    PyObject *var_arg
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_right_name_1;
    PyObject *tmp_tuple_element_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_18___repr__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$function_18___repr__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_arg = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_right_name_1;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_1da0c5d5b48a583b807b58478e618581, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[0] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "Noc";
            exception_lineno = 241;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_arg;
        var_arg = tmp_assign_source_2;
        Py_INCREF( var_arg );
        Py_XDECREF( old );
    }

    tmp_left_name_1 = const_str_digest_69b6ecec1ddb0b99fd2288f02d4834e9;
    tmp_right_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_arg;

    CHECK_OBJECT( tmp_tuple_element_1 );
    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
    if ( generator->m_closure[1] == NULL )
    {
        tmp_getattr_target_1 = NULL;
    }
    else
    {
        tmp_getattr_target_1 = PyCell_GET( generator->m_closure[1] );
    }

    if ( tmp_getattr_target_1 == NULL )
    {
        Py_DECREF( tmp_right_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 241;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }

    tmp_getattr_attr_1 = var_arg;

    CHECK_OBJECT( tmp_getattr_attr_1 );
    tmp_getattr_default_1 = Py_None;
    tmp_tuple_element_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_right_name_1 );

        exception_lineno = 241;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
    tmp_expression_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 241;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_arg,
            generator->m_closure[1]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_19_dump( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_CellObject *var__dump = PyCell_EMPTY();
    struct Nuitka_CellObject *var_buf = PyCell_EMPTY();
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_51e431057bf26b7e22d55b1f3a800e20 = NULL;

    struct Nuitka_FrameObject *frame_51e431057bf26b7e22d55b1f3a800e20;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    tmp_assign_source_1 = MAKE_FUNCTION_jinja2$nodes$$$function_19_dump$$$function_1__dump( var__dump, var_buf );
    {
        PyObject *old = PyCell_GET( var__dump );
        PyCell_SET( var__dump, tmp_assign_source_1 );
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = PyList_New( 0 );
    {
        PyObject *old = PyCell_GET( var_buf );
        PyCell_SET( var_buf, tmp_assign_source_2 );
        Py_XDECREF( old );
    }

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_51e431057bf26b7e22d55b1f3a800e20, codeobj_51e431057bf26b7e22d55b1f3a800e20, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_51e431057bf26b7e22d55b1f3a800e20 = cache_frame_51e431057bf26b7e22d55b1f3a800e20;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_51e431057bf26b7e22d55b1f3a800e20 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_51e431057bf26b7e22d55b1f3a800e20 ) == 2 ); // Frame stack

    // Framed code:
    if ( var__dump == NULL )
    {
        tmp_called_name_1 = NULL;
    }
    else
    {
        tmp_called_name_1 = PyCell_GET( var__dump );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "_dump" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 270;
        type_description_1 = "occ";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    frame_51e431057bf26b7e22d55b1f3a800e20->m_frame.f_lineno = 270;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 270;
        type_description_1 = "occ";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_1 = const_str_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    if ( var_buf == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( var_buf );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 271;
        type_description_1 = "occ";
        goto frame_exception_exit_1;
    }

    frame_51e431057bf26b7e22d55b1f3a800e20->m_frame.f_lineno = 271;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 271;
        type_description_1 = "occ";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_51e431057bf26b7e22d55b1f3a800e20 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_51e431057bf26b7e22d55b1f3a800e20 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_51e431057bf26b7e22d55b1f3a800e20 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_51e431057bf26b7e22d55b1f3a800e20, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_51e431057bf26b7e22d55b1f3a800e20->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_51e431057bf26b7e22d55b1f3a800e20, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_51e431057bf26b7e22d55b1f3a800e20,
        type_description_1,
        par_self,
        var__dump,
        var_buf
    );


    // Release cached frame.
    if ( frame_51e431057bf26b7e22d55b1f3a800e20 == cache_frame_51e431057bf26b7e22d55b1f3a800e20 )
    {
        Py_DECREF( frame_51e431057bf26b7e22d55b1f3a800e20 );
    }
    cache_frame_51e431057bf26b7e22d55b1f3a800e20 = NULL;

    assertFrameObject( frame_51e431057bf26b7e22d55b1f3a800e20 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_19_dump );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var__dump );
    Py_DECREF( var__dump );
    var__dump = NULL;

    CHECK_OBJECT( (PyObject *)var_buf );
    Py_DECREF( var_buf );
    var_buf = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var__dump );
    Py_DECREF( var__dump );
    var__dump = NULL;

    CHECK_OBJECT( (PyObject *)var_buf );
    Py_DECREF( var_buf );
    var_buf = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_19_dump );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_19_dump$$$function_1__dump( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_node = python_pars[ 0 ];
    PyObject *var_idx = NULL;
    PyObject *var_field = NULL;
    PyObject *var_value = NULL;
    PyObject *var_item = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_called_instance_2;
    PyObject *tmp_called_instance_3;
    PyObject *tmp_called_instance_4;
    PyObject *tmp_called_instance_5;
    PyObject *tmp_called_instance_6;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_isinstance_cls_1;
    PyObject *tmp_isinstance_cls_2;
    PyObject *tmp_isinstance_inst_1;
    PyObject *tmp_isinstance_inst_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_iter_arg_3;
    PyObject *tmp_iter_arg_4;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_iterator_name_2;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_next_source_2;
    PyObject *tmp_operand_name_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_right_name_1;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    PyObject *tmp_unpack_3;
    PyObject *tmp_unpack_4;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_102a01e0a48de28d5efc599f2a39ea85 = NULL;

    struct Nuitka_FrameObject *frame_102a01e0a48de28d5efc599f2a39ea85;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_102a01e0a48de28d5efc599f2a39ea85, codeobj_102a01e0a48de28d5efc599f2a39ea85, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_102a01e0a48de28d5efc599f2a39ea85 = cache_frame_102a01e0a48de28d5efc599f2a39ea85;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_102a01e0a48de28d5efc599f2a39ea85 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_102a01e0a48de28d5efc599f2a39ea85 ) == 2 ); // Frame stack

    // Framed code:
    tmp_isinstance_inst_1 = par_node;

    CHECK_OBJECT( tmp_isinstance_inst_1 );
    tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Node );

    if (unlikely( tmp_isinstance_cls_1 == NULL ))
    {
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Node );
    }

    if ( tmp_isinstance_cls_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 247;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 247;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    if ( tmp_res == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    if ( self->m_closure[1] == NULL )
    {
        tmp_source_name_1 = NULL;
    }
    else
    {
        tmp_source_name_1 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 248;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 248;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    tmp_operand_name_1 = par_node;

    if ( tmp_operand_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 248;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 248;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 248;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 248;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_1:;
    if ( self->m_closure[1] == NULL )
    {
        tmp_source_name_2 = NULL;
    }
    else
    {
        tmp_source_name_2 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 251;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_append );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 251;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    tmp_left_name_1 = const_str_digest_291f6292edff092781eb7347e49d3c45;
    tmp_source_name_4 = par_node;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 251;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_4 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 251;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___name__ );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 251;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 251;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 251;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 251;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_source_name_5 = par_node;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 252;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_fields );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 252;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 252;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    if ( self->m_closure[1] == NULL )
    {
        tmp_called_instance_1 = NULL;
    }
    else
    {
        tmp_called_instance_1 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 253;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 253;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_chr_41_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 253;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;
    branch_no_2:;
    tmp_called_name_3 = (PyObject *)&PyEnum_Type;
    tmp_source_name_6 = par_node;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 255;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_fields );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 255;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 255;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 255;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 255;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooocc";
            exception_lineno = 255;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_2 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_iter_arg_2 );
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_2 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 255;
        type_description_1 = "ooooocc";
        goto try_except_handler_3;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__source_iter;
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooocc";
        exception_lineno = 255;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_1;
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooocc";
        exception_lineno = 255;
        goto try_except_handler_4;
    }
    {
        PyObject *old = tmp_tuple_unpack_1__element_2;
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
        Py_XDECREF( old );
    }

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooocc";
                exception_lineno = 255;
                goto try_except_handler_4;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooocc";
        exception_lineno = 255;
        goto try_except_handler_4;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_6 );
    {
        PyObject *old = var_idx;
        var_idx = tmp_assign_source_6;
        Py_INCREF( var_idx );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = var_field;
        var_field = tmp_assign_source_7;
        Py_INCREF( var_field );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_cond_value_2 = var_idx;

    if ( tmp_cond_value_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "idx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 256;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }

    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 256;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    if ( self->m_closure[1] == NULL )
    {
        tmp_called_instance_2 = NULL;
    }
    else
    {
        tmp_called_instance_2 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_called_instance_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 257;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }

    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 257;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 257;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_no_3:;
    tmp_getattr_target_1 = par_node;

    if ( tmp_getattr_target_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 258;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }

    tmp_getattr_attr_1 = var_field;

    if ( tmp_getattr_attr_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "field" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 258;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }

    tmp_assign_source_8 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 258;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_value;
        var_value = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_isinstance_inst_2 = var_value;

    CHECK_OBJECT( tmp_isinstance_inst_2 );
    tmp_isinstance_cls_2 = (PyObject *)&PyList_Type;
    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 259;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    if ( self->m_closure[1] == NULL )
    {
        tmp_called_instance_3 = NULL;
    }
    else
    {
        tmp_called_instance_3 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_called_instance_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 260;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }

    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 260;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_chr_91_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 260;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    tmp_called_name_4 = (PyObject *)&PyEnum_Type;
    tmp_args_element_name_4 = var_value;

    if ( tmp_args_element_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 261;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }

    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 261;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_iter_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_3 );
    Py_DECREF( tmp_iter_arg_3 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    {
        PyObject *old = tmp_for_loop_2__for_iterator;
        tmp_for_loop_2__for_iterator = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    // Tried code:
    loop_start_2:;
    tmp_next_source_2 = tmp_for_loop_2__for_iterator;

    CHECK_OBJECT( tmp_next_source_2 );
    tmp_assign_source_10 = ITERATOR_NEXT( tmp_next_source_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_2;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooocc";
            exception_lineno = 261;
            goto try_except_handler_5;
        }
    }

    {
        PyObject *old = tmp_for_loop_2__iter_value;
        tmp_for_loop_2__iter_value = tmp_assign_source_10;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_iter_arg_4 = tmp_for_loop_2__iter_value;

    CHECK_OBJECT( tmp_iter_arg_4 );
    tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_4 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        type_description_1 = "ooooocc";
        goto try_except_handler_6;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__source_iter;
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_11;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_unpack_3 );
    tmp_assign_source_12 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
    if ( tmp_assign_source_12 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooocc";
        exception_lineno = 261;
        goto try_except_handler_7;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_1;
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_12;
        Py_XDECREF( old );
    }

    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_unpack_4 );
    tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
    if ( tmp_assign_source_13 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooocc";
        exception_lineno = 261;
        goto try_except_handler_7;
    }
    {
        PyObject *old = tmp_tuple_unpack_2__element_2;
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_13;
        Py_XDECREF( old );
    }

    tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;

    CHECK_OBJECT( tmp_iterator_name_2 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooocc";
                exception_lineno = 261;
                goto try_except_handler_7;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooocc";
        exception_lineno = 261;
        goto try_except_handler_7;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_6;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_5;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    tmp_assign_source_14 = tmp_tuple_unpack_2__element_1;

    CHECK_OBJECT( tmp_assign_source_14 );
    {
        PyObject *old = var_idx;
        var_idx = tmp_assign_source_14;
        Py_INCREF( var_idx );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    tmp_assign_source_15 = tmp_tuple_unpack_2__element_2;

    CHECK_OBJECT( tmp_assign_source_15 );
    {
        PyObject *old = var_item;
        var_item = tmp_assign_source_15;
        Py_INCREF( var_item );
        Py_XDECREF( old );
    }

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    tmp_cond_value_3 = var_idx;

    if ( tmp_cond_value_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "idx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 262;
        type_description_1 = "ooooocc";
        goto try_except_handler_5;
    }

    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        type_description_1 = "ooooocc";
        goto try_except_handler_5;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    if ( self->m_closure[1] == NULL )
    {
        tmp_called_instance_4 = NULL;
    }
    else
    {
        tmp_called_instance_4 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_called_instance_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 263;
        type_description_1 = "ooooocc";
        goto try_except_handler_5;
    }

    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 263;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 263;
        type_description_1 = "ooooocc";
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_unused );
    branch_no_5:;
    if ( self->m_closure[0] == NULL )
    {
        tmp_called_name_5 = NULL;
    }
    else
    {
        tmp_called_name_5 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "_dump" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 264;
        type_description_1 = "ooooocc";
        goto try_except_handler_5;
    }

    tmp_args_element_name_5 = var_item;

    if ( tmp_args_element_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "item" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 264;
        type_description_1 = "ooooocc";
        goto try_except_handler_5;
    }

    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 264;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 264;
        type_description_1 = "ooooocc";
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_unused );
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 261;
        type_description_1 = "ooooocc";
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_2;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( self->m_closure[1] == NULL )
    {
        tmp_called_instance_5 = NULL;
    }
    else
    {
        tmp_called_instance_5 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_called_instance_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 265;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }

    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 265;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_chr_93_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 265;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_4;
    branch_no_4:;
    if ( self->m_closure[0] == NULL )
    {
        tmp_called_name_6 = NULL;
    }
    else
    {
        tmp_called_name_6 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "_dump" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 267;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }

    tmp_args_element_name_6 = var_value;

    CHECK_OBJECT( tmp_args_element_name_6 );
    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 267;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 267;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_unused );
    branch_end_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 255;
        type_description_1 = "ooooocc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    if ( self->m_closure[1] == NULL )
    {
        tmp_called_instance_6 = NULL;
    }
    else
    {
        tmp_called_instance_6 = PyCell_GET( self->m_closure[1] );
    }

    if ( tmp_called_instance_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "buf" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 268;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }

    frame_102a01e0a48de28d5efc599f2a39ea85->m_frame.f_lineno = 268;
    tmp_unused = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_chr_41_tuple, 0 ) );

    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 268;
        type_description_1 = "ooooocc";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );

#if 0
    RESTORE_FRAME_EXCEPTION( frame_102a01e0a48de28d5efc599f2a39ea85 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_102a01e0a48de28d5efc599f2a39ea85 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_102a01e0a48de28d5efc599f2a39ea85 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_102a01e0a48de28d5efc599f2a39ea85, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_102a01e0a48de28d5efc599f2a39ea85->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_102a01e0a48de28d5efc599f2a39ea85, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_102a01e0a48de28d5efc599f2a39ea85,
        type_description_1,
        par_node,
        var_idx,
        var_field,
        var_value,
        var_item,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_102a01e0a48de28d5efc599f2a39ea85 == cache_frame_102a01e0a48de28d5efc599f2a39ea85 )
    {
        Py_DECREF( frame_102a01e0a48de28d5efc599f2a39ea85 );
    }
    cache_frame_102a01e0a48de28d5efc599f2a39ea85 = NULL;

    assertFrameObject( frame_102a01e0a48de28d5efc599f2a39ea85 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_19_dump$$$function_1__dump );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_node );
    par_node = NULL;

    Py_XDECREF( var_idx );
    var_idx = NULL;

    Py_XDECREF( var_field );
    var_field = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_item );
    var_item = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_node );
    par_node = NULL;

    Py_XDECREF( var_idx );
    var_idx = NULL;

    Py_XDECREF( var_field );
    var_field = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_item );
    var_item = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_19_dump$$$function_1__dump );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_20_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_raise_type_1;
    static struct Nuitka_FrameObject *cache_frame_d7dc66b75f8d3a98e35720c2691735ea = NULL;

    struct Nuitka_FrameObject *frame_d7dc66b75f8d3a98e35720c2691735ea;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d7dc66b75f8d3a98e35720c2691735ea, codeobj_d7dc66b75f8d3a98e35720c2691735ea, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_d7dc66b75f8d3a98e35720c2691735ea = cache_frame_d7dc66b75f8d3a98e35720c2691735ea;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d7dc66b75f8d3a98e35720c2691735ea );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d7dc66b75f8d3a98e35720c2691735ea ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 408;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_d7dc66b75f8d3a98e35720c2691735ea->m_frame.f_lineno = 408;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 408;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 408;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7dc66b75f8d3a98e35720c2691735ea );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7dc66b75f8d3a98e35720c2691735ea );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d7dc66b75f8d3a98e35720c2691735ea, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d7dc66b75f8d3a98e35720c2691735ea->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d7dc66b75f8d3a98e35720c2691735ea, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d7dc66b75f8d3a98e35720c2691735ea,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_d7dc66b75f8d3a98e35720c2691735ea == cache_frame_d7dc66b75f8d3a98e35720c2691735ea )
    {
        Py_DECREF( frame_d7dc66b75f8d3a98e35720c2691735ea );
    }
    cache_frame_d7dc66b75f8d3a98e35720c2691735ea = NULL;

    assertFrameObject( frame_d7dc66b75f8d3a98e35720c2691735ea );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_20_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_20_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

}


static PyObject *impl_jinja2$nodes$$$function_21_can_assign( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_21_can_assign );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_21_can_assign );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_22_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *var_f = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_d9737828a17fcde3b57f6d40b2fbad0b = NULL;

    struct Nuitka_FrameObject *frame_d9737828a17fcde3b57f6d40b2fbad0b;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d9737828a17fcde3b57f6d40b2fbad0b, codeobj_d9737828a17fcde3b57f6d40b2fbad0b, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d9737828a17fcde3b57f6d40b2fbad0b = cache_frame_d9737828a17fcde3b57f6d40b2fbad0b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d9737828a17fcde3b57f6d40b2fbad0b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d9737828a17fcde3b57f6d40b2fbad0b ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 422;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame.f_lineno = 422;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 422;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 424;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_environment );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 424;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_sandboxed );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 424;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_operator );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = par_self;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_environment );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_intercepted_binops );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_and_right_value_1 );
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 425;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 426;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame.f_lineno = 426;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 426;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 426;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_subscribed_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__binop_to_func );

    if (unlikely( tmp_subscribed_name_1 == NULL ))
    {
        tmp_subscribed_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__binop_to_func );
    }

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_binop_to_func" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 427;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = par_self;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 427;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_operator );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 427;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 427;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_f == NULL );
    var_f = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_3 = var_f;

    CHECK_OBJECT( tmp_called_name_3 );
    tmp_source_name_8 = par_self;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_left );
    if ( tmp_source_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_7 );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame.f_lineno = 429;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_source_name_10 = par_self;

    if ( tmp_source_name_10 == NULL )
    {
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    tmp_source_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_right );
    if ( tmp_source_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_9 );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_6 = par_eval_ctx;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_args_element_name_3 );
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame.f_lineno = 429;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame.f_lineno = 429;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 429;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_22_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_d9737828a17fcde3b57f6d40b2fbad0b, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_d9737828a17fcde3b57f6d40b2fbad0b, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_Exception;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 430;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 431;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }

    frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame.f_lineno = 431;
    tmp_raise_type_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 431;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 431;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto try_except_handler_3;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 428;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame) frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_3;
    branch_end_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_22_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_d9737828a17fcde3b57f6d40b2fbad0b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_d9737828a17fcde3b57f6d40b2fbad0b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_d9737828a17fcde3b57f6d40b2fbad0b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d9737828a17fcde3b57f6d40b2fbad0b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d9737828a17fcde3b57f6d40b2fbad0b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d9737828a17fcde3b57f6d40b2fbad0b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d9737828a17fcde3b57f6d40b2fbad0b,
        type_description_1,
        par_self,
        par_eval_ctx,
        var_f
    );


    // Release cached frame.
    if ( frame_d9737828a17fcde3b57f6d40b2fbad0b == cache_frame_d9737828a17fcde3b57f6d40b2fbad0b )
    {
        Py_DECREF( frame_d9737828a17fcde3b57f6d40b2fbad0b );
    }
    cache_frame_d9737828a17fcde3b57f6d40b2fbad0b = NULL;

    assertFrameObject( frame_d9737828a17fcde3b57f6d40b2fbad0b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_22_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_22_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_23_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *var_f = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 = NULL;

    struct Nuitka_FrameObject *frame_f5ff27e2ea1f2aa503eacc0fecfa0d47;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f5ff27e2ea1f2aa503eacc0fecfa0d47, codeobj_f5ff27e2ea1f2aa503eacc0fecfa0d47, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 = cache_frame_f5ff27e2ea1f2aa503eacc0fecfa0d47;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 441;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_f5ff27e2ea1f2aa503eacc0fecfa0d47->m_frame.f_lineno = 441;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 441;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 443;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_environment );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 443;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_sandboxed );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 443;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 444;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 444;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_operator );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 444;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_5 = par_self;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 444;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_environment );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 444;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_intercepted_unops );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_compexpr_right_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compexpr_left_1 );

        exception_lineno = 444;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_1 = SEQUENCE_CONTAINS( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_DECREF( tmp_compexpr_right_1 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 444;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_and_right_value_1 );
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 444;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 445;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_f5ff27e2ea1f2aa503eacc0fecfa0d47->m_frame.f_lineno = 445;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 445;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 445;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_subscribed_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__uaop_to_func );

    if (unlikely( tmp_subscribed_name_1 == NULL ))
    {
        tmp_subscribed_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__uaop_to_func );
    }

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_uaop_to_func" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 446;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = par_self;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 446;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_operator );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 446;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 446;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_f == NULL );
    var_f = tmp_assign_source_2;

    // Tried code:
    tmp_called_name_3 = var_f;

    CHECK_OBJECT( tmp_called_name_3 );
    tmp_source_name_8 = par_self;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 448;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_node );
    if ( tmp_source_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 448;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_7 );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 448;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 448;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    frame_f5ff27e2ea1f2aa503eacc0fecfa0d47->m_frame.f_lineno = 448;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 448;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    frame_f5ff27e2ea1f2aa503eacc0fecfa0d47->m_frame.f_lineno = 448;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 448;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_23_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_f5ff27e2ea1f2aa503eacc0fecfa0d47, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_Exception;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 449;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 450;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }

    frame_f5ff27e2ea1f2aa503eacc0fecfa0d47->m_frame.f_lineno = 450;
    tmp_raise_type_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 450;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto try_except_handler_3;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 447;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f5ff27e2ea1f2aa503eacc0fecfa0d47->m_frame) frame_f5ff27e2ea1f2aa503eacc0fecfa0d47->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_3;
    branch_end_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_23_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f5ff27e2ea1f2aa503eacc0fecfa0d47->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f5ff27e2ea1f2aa503eacc0fecfa0d47, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f5ff27e2ea1f2aa503eacc0fecfa0d47,
        type_description_1,
        par_self,
        par_eval_ctx,
        var_f
    );


    // Release cached frame.
    if ( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 == cache_frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 )
    {
        Py_DECREF( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 );
    }
    cache_frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 = NULL;

    assertFrameObject( frame_f5ff27e2ea1f2aa503eacc0fecfa0d47 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_23_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_23_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_24_can_assign( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_58561bdffed2ee816405185f93aa0666 = NULL;

    struct Nuitka_FrameObject *frame_58561bdffed2ee816405185f93aa0666;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_58561bdffed2ee816405185f93aa0666, codeobj_58561bdffed2ee816405185f93aa0666, module_jinja2$nodes, sizeof(void *) );
    frame_58561bdffed2ee816405185f93aa0666 = cache_frame_58561bdffed2ee816405185f93aa0666;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_58561bdffed2ee816405185f93aa0666 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_58561bdffed2ee816405185f93aa0666 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 464;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = const_tuple_1bbf15ea3600826722a6802de7dbc55f_tuple;
    tmp_return_value = SEQUENCE_CONTAINS_NOT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 464;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_58561bdffed2ee816405185f93aa0666 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_58561bdffed2ee816405185f93aa0666 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_58561bdffed2ee816405185f93aa0666 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_58561bdffed2ee816405185f93aa0666, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_58561bdffed2ee816405185f93aa0666->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_58561bdffed2ee816405185f93aa0666, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_58561bdffed2ee816405185f93aa0666,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_58561bdffed2ee816405185f93aa0666 == cache_frame_58561bdffed2ee816405185f93aa0666 )
    {
        Py_DECREF( frame_58561bdffed2ee816405185f93aa0666 );
    }
    cache_frame_58561bdffed2ee816405185f93aa0666 = NULL;

    assertFrameObject( frame_58561bdffed2ee816405185f93aa0666 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_24_can_assign );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_24_can_assign );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_25_can_assign( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = Py_True;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_25_can_assign );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_25_can_assign );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_26_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *var_rv = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_and_left_truth_1;
    int tmp_and_left_truth_2;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_left_value_2;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_and_right_value_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_instance_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    int tmp_exc_match_exception_match_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_type_arg_1;
    static struct Nuitka_FrameObject *cache_frame_bf39e0dc8420d92cc8aad1f03d26f179 = NULL;

    struct Nuitka_FrameObject *frame_bf39e0dc8420d92cc8aad1f03d26f179;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bf39e0dc8420d92cc8aad1f03d26f179, codeobj_bf39e0dc8420d92cc8aad1f03d26f179, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_bf39e0dc8420d92cc8aad1f03d26f179 = cache_frame_bf39e0dc8420d92cc8aad1f03d26f179;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bf39e0dc8420d92cc8aad1f03d26f179 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bf39e0dc8420d92cc8aad1f03d26f179 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_value );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 494;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_rv == NULL );
    var_rv = tmp_assign_source_1;

    tmp_and_left_value_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_PY2 );

    if (unlikely( tmp_and_left_value_1 == NULL ))
    {
        tmp_and_left_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PY2 );
    }

    if ( tmp_and_left_value_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PY2" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 495;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    tmp_type_arg_1 = var_rv;

    CHECK_OBJECT( tmp_type_arg_1 );
    tmp_compexpr_left_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    assert( tmp_compexpr_left_1 != NULL );
    tmp_compexpr_right_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_text_type );

    if (unlikely( tmp_compexpr_right_1 == NULL ))
    {
        tmp_compexpr_right_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_text_type );
    }

    if ( tmp_compexpr_right_1 == NULL )
    {
        Py_DECREF( tmp_compexpr_left_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "text_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 495;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_and_left_value_2 = BOOL_FROM( tmp_compexpr_left_1 == tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
    assert( !(tmp_and_left_truth_2 == -1) );
    if ( tmp_and_left_truth_2 == 1 )
    {
        goto and_right_2;
    }
    else
    {
        goto and_left_2;
    }
    and_right_2:;
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 496;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_environment );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_policies );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_subscribed_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_subscript_name_1 = const_str_digest_29db59be4b58f9ee91a4a5c877028c0e;
    tmp_and_right_value_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscribed_name_1 );
    if ( tmp_and_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 496;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_and_right_value_1 = tmp_and_right_value_2;
    goto and_end_2;
    and_left_2:;
    Py_INCREF( tmp_and_left_value_2 );
    tmp_and_right_value_1 = tmp_and_left_value_2;
    and_end_2:;
    tmp_cond_value_1 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    Py_INCREF( tmp_and_left_value_1 );
    tmp_cond_value_1 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 496;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code:
    tmp_called_instance_1 = var_rv;

    if ( tmp_called_instance_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 498;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }

    frame_bf39e0dc8420d92cc8aad1f03d26f179->m_frame.f_lineno = 498;
    tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_tuple, 0 ) );

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 498;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = var_rv;
        var_rv = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_bf39e0dc8420d92cc8aad1f03d26f179, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_bf39e0dc8420d92cc8aad1f03d26f179, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_UnicodeError;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 499;
        type_description_1 = "ooo";
        goto try_except_handler_3;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_no_2;
    }
    else
    {
        goto branch_yes_2;
    }
    branch_yes_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 497;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_bf39e0dc8420d92cc8aad1f03d26f179->m_frame) frame_bf39e0dc8420d92cc8aad1f03d26f179->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_3;
    branch_no_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_26_as_const );
    return NULL;
    // End of try:
    try_end_1:;
    branch_no_1:;
    tmp_return_value = var_rv;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rv" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 501;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_bf39e0dc8420d92cc8aad1f03d26f179 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_bf39e0dc8420d92cc8aad1f03d26f179 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_bf39e0dc8420d92cc8aad1f03d26f179 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bf39e0dc8420d92cc8aad1f03d26f179, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bf39e0dc8420d92cc8aad1f03d26f179->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bf39e0dc8420d92cc8aad1f03d26f179, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bf39e0dc8420d92cc8aad1f03d26f179,
        type_description_1,
        par_self,
        par_eval_ctx,
        var_rv
    );


    // Release cached frame.
    if ( frame_bf39e0dc8420d92cc8aad1f03d26f179 == cache_frame_bf39e0dc8420d92cc8aad1f03d26f179 )
    {
        Py_DECREF( frame_bf39e0dc8420d92cc8aad1f03d26f179 );
    }
    cache_frame_bf39e0dc8420d92cc8aad1f03d26f179 = NULL;

    assertFrameObject( frame_bf39e0dc8420d92cc8aad1f03d26f179 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_26_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_rv );
    var_rv = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_26_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_27_from_untrusted( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *par_lineno = python_pars[ 2 ];
    PyObject *par_environment = python_pars[ 3 ];
    PyObject *var_has_safe_repr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_fromlist_name_1;
    PyObject *tmp_globals_name_1;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_level_name_1;
    PyObject *tmp_locals_name_1;
    PyObject *tmp_name_name_1;
    PyObject *tmp_raise_type_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_854ad9d2aec1b8cc8462728eeea7120f = NULL;

    struct Nuitka_FrameObject *frame_854ad9d2aec1b8cc8462728eeea7120f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_854ad9d2aec1b8cc8462728eeea7120f, codeobj_854ad9d2aec1b8cc8462728eeea7120f, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_854ad9d2aec1b8cc8462728eeea7120f = cache_frame_854ad9d2aec1b8cc8462728eeea7120f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_854ad9d2aec1b8cc8462728eeea7120f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_854ad9d2aec1b8cc8462728eeea7120f ) == 2 ); // Frame stack

    // Framed code:
    tmp_name_name_1 = const_str_plain_compiler;
    tmp_globals_name_1 = (PyObject *)moduledict_jinja2$nodes;
    tmp_locals_name_1 = Py_None;
    tmp_fromlist_name_1 = const_tuple_str_plain_has_safe_repr_tuple;
    tmp_level_name_1 = const_int_pos_1;
    frame_854ad9d2aec1b8cc8462728eeea7120f->m_frame.f_lineno = 509;
    tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 509;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_has_safe_repr );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 509;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_has_safe_repr == NULL );
    var_has_safe_repr = tmp_assign_source_1;

    tmp_called_name_1 = var_has_safe_repr;

    CHECK_OBJECT( tmp_called_name_1 );
    tmp_args_element_name_1 = par_value;

    if ( tmp_args_element_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 510;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_854ad9d2aec1b8cc8462728eeea7120f->m_frame.f_lineno = 510;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 510;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 510;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 511;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_854ad9d2aec1b8cc8462728eeea7120f->m_frame.f_lineno = 511;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 511;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 511;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_called_name_3 = par_cls;

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "cls" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 512;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_name_1 = PyTuple_New( 1 );
    tmp_tuple_element_1 = par_value;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 512;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
    tmp_kw_name_1 = _PyDict_NewPresized( 2 );
    tmp_dict_key_1 = const_str_plain_lineno;
    tmp_dict_value_1 = par_lineno;

    if ( tmp_dict_value_1 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "lineno" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 512;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_plain_environment;
    tmp_dict_value_2 = par_environment;

    if ( tmp_dict_value_2 == NULL )
    {
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "environment" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 512;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    frame_854ad9d2aec1b8cc8462728eeea7120f->m_frame.f_lineno = 512;
    tmp_return_value = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_args_name_1 );
    Py_DECREF( tmp_kw_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 512;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_854ad9d2aec1b8cc8462728eeea7120f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_854ad9d2aec1b8cc8462728eeea7120f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_854ad9d2aec1b8cc8462728eeea7120f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_854ad9d2aec1b8cc8462728eeea7120f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_854ad9d2aec1b8cc8462728eeea7120f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_854ad9d2aec1b8cc8462728eeea7120f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_854ad9d2aec1b8cc8462728eeea7120f,
        type_description_1,
        par_cls,
        par_value,
        par_lineno,
        par_environment,
        var_has_safe_repr
    );


    // Release cached frame.
    if ( frame_854ad9d2aec1b8cc8462728eeea7120f == cache_frame_854ad9d2aec1b8cc8462728eeea7120f )
    {
        Py_DECREF( frame_854ad9d2aec1b8cc8462728eeea7120f );
    }
    cache_frame_854ad9d2aec1b8cc8462728eeea7120f = NULL;

    assertFrameObject( frame_854ad9d2aec1b8cc8462728eeea7120f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_27_from_untrusted );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_cls );
    par_cls = NULL;

    Py_XDECREF( par_value );
    par_value = NULL;

    Py_XDECREF( par_lineno );
    par_lineno = NULL;

    Py_XDECREF( par_environment );
    par_environment = NULL;

    Py_XDECREF( var_has_safe_repr );
    var_has_safe_repr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_cls );
    par_cls = NULL;

    Py_XDECREF( par_value );
    par_value = NULL;

    Py_XDECREF( par_lineno );
    par_lineno = NULL;

    Py_XDECREF( par_environment );
    par_environment = NULL;

    Py_XDECREF( var_has_safe_repr );
    var_has_safe_repr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_27_from_untrusted );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_28_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    static struct Nuitka_FrameObject *cache_frame_bea24df8701d1d802de59ad0c7cdf4b3 = NULL;

    struct Nuitka_FrameObject *frame_bea24df8701d1d802de59ad0c7cdf4b3;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bea24df8701d1d802de59ad0c7cdf4b3, codeobj_bea24df8701d1d802de59ad0c7cdf4b3, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_bea24df8701d1d802de59ad0c7cdf4b3 = cache_frame_bea24df8701d1d802de59ad0c7cdf4b3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bea24df8701d1d802de59ad0c7cdf4b3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bea24df8701d1d802de59ad0c7cdf4b3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 520;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_bea24df8701d1d802de59ad0c7cdf4b3->m_frame.f_lineno = 520;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 520;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_1 = par_eval_ctx;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_volatile );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 521;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 521;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 522;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_bea24df8701d1d802de59ad0c7cdf4b3->m_frame.f_lineno = 522;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 522;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 522;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_source_name_2 = par_eval_ctx;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 523;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_cond_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_autoescape );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 523;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 523;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Markup );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Markup );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Markup" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 524;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 524;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_data );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 524;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_bea24df8701d1d802de59ad0c7cdf4b3->m_frame.f_lineno = 524;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 524;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_2:;
    tmp_source_name_4 = par_self;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 525;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_data );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 525;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bea24df8701d1d802de59ad0c7cdf4b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bea24df8701d1d802de59ad0c7cdf4b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bea24df8701d1d802de59ad0c7cdf4b3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bea24df8701d1d802de59ad0c7cdf4b3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bea24df8701d1d802de59ad0c7cdf4b3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bea24df8701d1d802de59ad0c7cdf4b3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bea24df8701d1d802de59ad0c7cdf4b3,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_bea24df8701d1d802de59ad0c7cdf4b3 == cache_frame_bea24df8701d1d802de59ad0c7cdf4b3 )
    {
        Py_DECREF( frame_bea24df8701d1d802de59ad0c7cdf4b3 );
    }
    cache_frame_bea24df8701d1d802de59ad0c7cdf4b3 = NULL;

    assertFrameObject( frame_bea24df8701d1d802de59ad0c7cdf4b3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_28_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_28_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_29_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_CellObject *par_eval_ctx = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_tuple_arg_1;
    static struct Nuitka_FrameObject *cache_frame_780c9e49ae131fc4ee0d381e967b53a9 = NULL;

    struct Nuitka_FrameObject *frame_780c9e49ae131fc4ee0d381e967b53a9;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_780c9e49ae131fc4ee0d381e967b53a9, codeobj_780c9e49ae131fc4ee0d381e967b53a9, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_780c9e49ae131fc4ee0d381e967b53a9 = cache_frame_780c9e49ae131fc4ee0d381e967b53a9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_780c9e49ae131fc4ee0d381e967b53a9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_780c9e49ae131fc4ee0d381e967b53a9 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 536;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    if ( par_eval_ctx == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( par_eval_ctx );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 536;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    frame_780c9e49ae131fc4ee0d381e967b53a9->m_frame.f_lineno = 536;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 536;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = PyCell_GET( par_eval_ctx );
        PyCell_SET( par_eval_ctx, tmp_assign_source_1 );
        Py_XDECREF( old );
    }

    tmp_source_name_1 = par_self;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 537;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 537;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 537;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    assert( tmp_genexpr_1__$0 == NULL );
    tmp_genexpr_1__$0 = tmp_assign_source_2;

    // Tried code:
    tmp_outline_return_value_1 = Nuitka_Generator_New(
        jinja2$nodes$$$function_29_as_const$$$genexpr_1_genexpr_context,
        module_jinja2$nodes,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ef06d2ead7eefbc0776d3df6754b814c,
#endif
        codeobj_6db6f7637d10f38c339b29435652d88d,
        2
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] = par_eval_ctx;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] );
    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );
    assert( Py_SIZE( tmp_outline_return_value_1 ) >= 2 ); 


    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_29_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_29_as_const );
    return NULL;
    outline_result_1:;
    tmp_tuple_arg_1 = tmp_outline_return_value_1;
    tmp_return_value = PySequence_Tuple( tmp_tuple_arg_1 );
    Py_DECREF( tmp_tuple_arg_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 537;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_780c9e49ae131fc4ee0d381e967b53a9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_780c9e49ae131fc4ee0d381e967b53a9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_780c9e49ae131fc4ee0d381e967b53a9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_780c9e49ae131fc4ee0d381e967b53a9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_780c9e49ae131fc4ee0d381e967b53a9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_780c9e49ae131fc4ee0d381e967b53a9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_780c9e49ae131fc4ee0d381e967b53a9,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_780c9e49ae131fc4ee0d381e967b53a9 == cache_frame_780c9e49ae131fc4ee0d381e967b53a9 )
    {
        Py_DECREF( frame_780c9e49ae131fc4ee0d381e967b53a9 );
    }
    cache_frame_780c9e49ae131fc4ee0d381e967b53a9 = NULL;

    assertFrameObject( frame_780c9e49ae131fc4ee0d381e967b53a9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_29_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_29_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$function_29_as_const$$$genexpr_1_genexpr_locals {
    PyObject *var_x
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_29_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$function_29_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_x = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_6db6f7637d10f38c339b29435652d88d, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[1] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "Noc";
            exception_lineno = 537;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_x;
        var_x = tmp_assign_source_2;
        Py_INCREF( var_x );
        Py_XDECREF( old );
    }

    tmp_source_name_1 = var_x;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 537;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( generator->m_closure[0] == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 537;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }

    generator->m_frame->m_frame.f_lineno = 537;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 537;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 537;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 537;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_x,
            generator->m_closure[0]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_x );
    var_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_30_can_assign( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_item = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_called_instance_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_d12f2f72ff9b47a0d0dafe7fc1d1989f = NULL;

    struct Nuitka_FrameObject *frame_d12f2f72ff9b47a0d0dafe7fc1d1989f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d12f2f72ff9b47a0d0dafe7fc1d1989f, codeobj_d12f2f72ff9b47a0d0dafe7fc1d1989f, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_d12f2f72ff9b47a0d0dafe7fc1d1989f = cache_frame_d12f2f72ff9b47a0d0dafe7fc1d1989f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 540;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 540;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_1;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            exception_lineno = 540;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    tmp_assign_source_3 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_3 );
    {
        PyObject *old = var_item;
        var_item = tmp_assign_source_3;
        Py_INCREF( var_item );
        Py_XDECREF( old );
    }

    tmp_called_instance_1 = var_item;

    CHECK_OBJECT( tmp_called_instance_1 );
    frame_d12f2f72ff9b47a0d0dafe7fc1d1989f->m_frame.f_lineno = 541;
    tmp_cond_value_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_can_assign );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 541;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 541;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_no_1;
    }
    else
    {
        goto branch_yes_1;
    }
    branch_yes_1:;
    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_2;
    branch_no_1:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 540;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d12f2f72ff9b47a0d0dafe7fc1d1989f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d12f2f72ff9b47a0d0dafe7fc1d1989f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d12f2f72ff9b47a0d0dafe7fc1d1989f,
        type_description_1,
        par_self,
        var_item
    );


    // Release cached frame.
    if ( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f == cache_frame_d12f2f72ff9b47a0d0dafe7fc1d1989f )
    {
        Py_DECREF( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f );
    }
    cache_frame_d12f2f72ff9b47a0d0dafe7fc1d1989f = NULL;

    assertFrameObject( frame_d12f2f72ff9b47a0d0dafe7fc1d1989f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_True;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_30_can_assign );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_item );
    var_item = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_item );
    var_item = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_30_can_assign );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_31_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *outline_0_var_x = NULL;
    PyObject *tmp_listcontraction_1__$0 = NULL;
    PyObject *tmp_listcontraction_1__contraction = NULL;
    PyObject *tmp_listcontraction_1__iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_append_list_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_outline_return_value_1;
    int tmp_res;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 = NULL;

    struct Nuitka_FrameObject *frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2;

    static struct Nuitka_FrameObject *cache_frame_e4d03815e1415a6436703e3dcdd6a026 = NULL;

    struct Nuitka_FrameObject *frame_e4d03815e1415a6436703e3dcdd6a026;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e4d03815e1415a6436703e3dcdd6a026, codeobj_e4d03815e1415a6436703e3dcdd6a026, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_e4d03815e1415a6436703e3dcdd6a026 = cache_frame_e4d03815e1415a6436703e3dcdd6a026;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e4d03815e1415a6436703e3dcdd6a026 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e4d03815e1415a6436703e3dcdd6a026 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 551;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_e4d03815e1415a6436703e3dcdd6a026->m_frame.f_lineno = 551;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 551;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_source_name_1 = par_self;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 552;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 552;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 552;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    assert( tmp_listcontraction_1__$0 == NULL );
    tmp_listcontraction_1__$0 = tmp_assign_source_2;

    tmp_assign_source_3 = PyList_New( 0 );
    assert( tmp_listcontraction_1__contraction == NULL );
    tmp_listcontraction_1__contraction = tmp_assign_source_3;

    MAKE_OR_REUSE_FRAME( cache_frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2, codeobj_e6e4ec5f9a16fe0ffb4f86a9a83a54b8, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 = cache_frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_listcontraction_1__$0;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_2 = "ooo";
            exception_lineno = 552;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_listcontraction_1__iter_value_0;
        tmp_listcontraction_1__iter_value_0 = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_listcontraction_1__iter_value_0;

    CHECK_OBJECT( tmp_assign_source_5 );
    {
        PyObject *old = outline_0_var_x;
        outline_0_var_x = tmp_assign_source_5;
        Py_INCREF( outline_0_var_x );
        Py_XDECREF( old );
    }

    tmp_append_list_1 = tmp_listcontraction_1__contraction;

    CHECK_OBJECT( tmp_append_list_1 );
    tmp_source_name_2 = outline_0_var_x;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_as_const );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 552;
        type_description_2 = "ooo";
        goto try_except_handler_3;
    }
    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 552;
        type_description_2 = "ooo";
        goto try_except_handler_3;
    }

    frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2->m_frame.f_lineno = 552;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_append_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 552;
        type_description_2 = "ooo";
        goto try_except_handler_3;
    }
    assert( PyList_Check( tmp_append_list_1 ) );
    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 552;
        type_description_2 = "ooo";
        goto try_except_handler_3;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 552;
        type_description_2 = "ooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_outline_return_value_1 = tmp_listcontraction_1__contraction;

    CHECK_OBJECT( tmp_outline_return_value_1 );
    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_3;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_31_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    Py_XDECREF( tmp_listcontraction_1__$0 );
    tmp_listcontraction_1__$0 = NULL;

    Py_XDECREF( tmp_listcontraction_1__contraction );
    tmp_listcontraction_1__contraction = NULL;

    Py_XDECREF( tmp_listcontraction_1__iter_value_0 );
    tmp_listcontraction_1__iter_value_0 = NULL;

    goto frame_return_exit_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_listcontraction_1__$0 );
    tmp_listcontraction_1__$0 = NULL;

    Py_XDECREF( tmp_listcontraction_1__contraction );
    tmp_listcontraction_1__contraction = NULL;

    Py_XDECREF( tmp_listcontraction_1__iter_value_0 );
    tmp_listcontraction_1__iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_2;
    // End of try:

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_2:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_2;

    frame_exception_exit_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2,
        type_description_2,
        outline_0_var_x,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 == cache_frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 )
    {
        Py_DECREF( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 );
    }
    cache_frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 = NULL;

    assertFrameObject( frame_e6e4ec5f9a16fe0ffb4f86a9a83a54b8_2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_1;

    frame_no_exception_1:;

    goto skip_nested_handling_1;
    nested_frame_exit_1:;
    type_description_1 = "oo";
    goto try_except_handler_2;
    skip_nested_handling_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_31_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    Py_XDECREF( outline_0_var_x );
    outline_0_var_x = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_0_var_x );
    outline_0_var_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto outline_exception_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_31_as_const );
    return NULL;
    outline_exception_1:;
    exception_lineno = 552;
    goto frame_exception_exit_1;
    outline_result_1:;
    tmp_return_value = tmp_outline_return_value_1;
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e4d03815e1415a6436703e3dcdd6a026 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e4d03815e1415a6436703e3dcdd6a026 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e4d03815e1415a6436703e3dcdd6a026 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e4d03815e1415a6436703e3dcdd6a026, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e4d03815e1415a6436703e3dcdd6a026->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e4d03815e1415a6436703e3dcdd6a026, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e4d03815e1415a6436703e3dcdd6a026,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_e4d03815e1415a6436703e3dcdd6a026 == cache_frame_e4d03815e1415a6436703e3dcdd6a026 )
    {
        Py_DECREF( frame_e4d03815e1415a6436703e3dcdd6a026 );
    }
    cache_frame_e4d03815e1415a6436703e3dcdd6a026 = NULL;

    assertFrameObject( frame_e4d03815e1415a6436703e3dcdd6a026 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_31_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_31_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_32_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_CellObject *par_eval_ctx = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_dict_seq_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_862898d8aca0bda2ef86bf89fdd56abe = NULL;

    struct Nuitka_FrameObject *frame_862898d8aca0bda2ef86bf89fdd56abe;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_862898d8aca0bda2ef86bf89fdd56abe, codeobj_862898d8aca0bda2ef86bf89fdd56abe, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_862898d8aca0bda2ef86bf89fdd56abe = cache_frame_862898d8aca0bda2ef86bf89fdd56abe;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_862898d8aca0bda2ef86bf89fdd56abe );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_862898d8aca0bda2ef86bf89fdd56abe ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 562;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    if ( par_eval_ctx == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( par_eval_ctx );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 562;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    frame_862898d8aca0bda2ef86bf89fdd56abe->m_frame.f_lineno = 562;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 562;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = PyCell_GET( par_eval_ctx );
        PyCell_SET( par_eval_ctx, tmp_assign_source_1 );
        Py_XDECREF( old );
    }

    tmp_source_name_1 = par_self;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 563;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_items );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 563;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 563;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    assert( tmp_genexpr_1__$0 == NULL );
    tmp_genexpr_1__$0 = tmp_assign_source_2;

    // Tried code:
    tmp_outline_return_value_1 = Nuitka_Generator_New(
        jinja2$nodes$$$function_32_as_const$$$genexpr_1_genexpr_context,
        module_jinja2$nodes,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ad78917dee59b8ced41dc4b5c9d574b3,
#endif
        codeobj_4a076e00ab34546c1155c30f1cf924a9,
        2
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] = par_eval_ctx;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] );
    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );
    assert( Py_SIZE( tmp_outline_return_value_1 ) >= 2 ); 


    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_32_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_32_as_const );
    return NULL;
    outline_result_1:;
    tmp_dict_seq_1 = tmp_outline_return_value_1;
    tmp_return_value = TO_DICT( tmp_dict_seq_1, NULL );
    Py_DECREF( tmp_dict_seq_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 563;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_862898d8aca0bda2ef86bf89fdd56abe );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_862898d8aca0bda2ef86bf89fdd56abe );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_862898d8aca0bda2ef86bf89fdd56abe );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_862898d8aca0bda2ef86bf89fdd56abe, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_862898d8aca0bda2ef86bf89fdd56abe->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_862898d8aca0bda2ef86bf89fdd56abe, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_862898d8aca0bda2ef86bf89fdd56abe,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_862898d8aca0bda2ef86bf89fdd56abe == cache_frame_862898d8aca0bda2ef86bf89fdd56abe )
    {
        Py_DECREF( frame_862898d8aca0bda2ef86bf89fdd56abe );
    }
    cache_frame_862898d8aca0bda2ef86bf89fdd56abe = NULL;

    assertFrameObject( frame_862898d8aca0bda2ef86bf89fdd56abe );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_32_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_32_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$function_32_as_const$$$genexpr_1_genexpr_locals {
    PyObject *var_x
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_32_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$function_32_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_x = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_4a076e00ab34546c1155c30f1cf924a9, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[1] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "Noc";
            exception_lineno = 563;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_x;
        var_x = tmp_assign_source_2;
        Py_INCREF( var_x );
        Py_XDECREF( old );
    }

    tmp_source_name_1 = var_x;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 563;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( generator->m_closure[0] == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 563;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }

    generator->m_frame->m_frame.f_lineno = 563;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 563;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 563;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 563;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_x,
            generator->m_closure[0]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_x );
    var_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_33_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 = NULL;

    struct Nuitka_FrameObject *frame_7a2ecb36cfdd4783c9a22ef0d7e265b1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7a2ecb36cfdd4783c9a22ef0d7e265b1, codeobj_7a2ecb36cfdd4783c9a22ef0d7e265b1, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 = cache_frame_7a2ecb36cfdd4783c9a22ef0d7e265b1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 571;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_7a2ecb36cfdd4783c9a22ef0d7e265b1->m_frame.f_lineno = 571;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 571;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_return_value = PyTuple_New( 2 );
    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_key );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_7a2ecb36cfdd4783c9a22ef0d7e265b1->m_frame.f_lineno = 572;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_source_name_4 = par_self;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_value );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_7a2ecb36cfdd4783c9a22ef0d7e265b1->m_frame.f_lineno = 572;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 572;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7a2ecb36cfdd4783c9a22ef0d7e265b1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7a2ecb36cfdd4783c9a22ef0d7e265b1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7a2ecb36cfdd4783c9a22ef0d7e265b1,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 == cache_frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 )
    {
        Py_DECREF( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 );
    }
    cache_frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 = NULL;

    assertFrameObject( frame_7a2ecb36cfdd4783c9a22ef0d7e265b1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_33_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_33_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_34_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_tuple_element_1;
    static struct Nuitka_FrameObject *cache_frame_4b67baec8b1fba840791cfca1fa852a0 = NULL;

    struct Nuitka_FrameObject *frame_4b67baec8b1fba840791cfca1fa852a0;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4b67baec8b1fba840791cfca1fa852a0, codeobj_4b67baec8b1fba840791cfca1fa852a0, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_4b67baec8b1fba840791cfca1fa852a0 = cache_frame_4b67baec8b1fba840791cfca1fa852a0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4b67baec8b1fba840791cfca1fa852a0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4b67baec8b1fba840791cfca1fa852a0 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 580;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_4b67baec8b1fba840791cfca1fa852a0->m_frame.f_lineno = 580;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 580;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_return_value = PyTuple_New( 2 );
    tmp_source_name_1 = par_self;

    if ( tmp_source_name_1 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_key );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_value );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_return_value );
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_4b67baec8b1fba840791cfca1fa852a0->m_frame.f_lineno = 581;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_return_value );

        exception_lineno = 581;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4b67baec8b1fba840791cfca1fa852a0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4b67baec8b1fba840791cfca1fa852a0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4b67baec8b1fba840791cfca1fa852a0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4b67baec8b1fba840791cfca1fa852a0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4b67baec8b1fba840791cfca1fa852a0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4b67baec8b1fba840791cfca1fa852a0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4b67baec8b1fba840791cfca1fa852a0,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_4b67baec8b1fba840791cfca1fa852a0 == cache_frame_4b67baec8b1fba840791cfca1fa852a0 )
    {
        Py_DECREF( frame_4b67baec8b1fba840791cfca1fa852a0 );
    }
    cache_frame_4b67baec8b1fba840791cfca1fa852a0 = NULL;

    assertFrameObject( frame_4b67baec8b1fba840791cfca1fa852a0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_34_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_34_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_35_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_cond_truth_1;
    PyObject *tmp_cond_value_1;
    bool tmp_is_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    static struct Nuitka_FrameObject *cache_frame_9477f0c9c32c14c35b9205d2b4a4e0ae = NULL;

    struct Nuitka_FrameObject *frame_9477f0c9c32c14c35b9205d2b4a4e0ae;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9477f0c9c32c14c35b9205d2b4a4e0ae, codeobj_9477f0c9c32c14c35b9205d2b4a4e0ae, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_9477f0c9c32c14c35b9205d2b4a4e0ae = cache_frame_9477f0c9c32c14c35b9205d2b4a4e0ae;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9477f0c9c32c14c35b9205d2b4a4e0ae );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9477f0c9c32c14c35b9205d2b4a4e0ae ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 591;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_9477f0c9c32c14c35b9205d2b4a4e0ae->m_frame.f_lineno = 591;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 591;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 592;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_test );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 592;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 592;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 592;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_9477f0c9c32c14c35b9205d2b4a4e0ae->m_frame.f_lineno = 592;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_cond_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 592;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 592;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_source_name_4 = par_self;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 593;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_expr1 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 593;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_9477f0c9c32c14c35b9205d2b4a4e0ae->m_frame.f_lineno = 593;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 593;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_1:;
    tmp_source_name_5 = par_self;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 596;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_expr2 );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 596;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 597;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_9477f0c9c32c14c35b9205d2b4a4e0ae->m_frame.f_lineno = 597;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 597;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 597;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_source_name_7 = par_self;

    if ( tmp_source_name_7 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 599;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_expr2 );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_5 = par_eval_ctx;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 599;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_9477f0c9c32c14c35b9205d2b4a4e0ae->m_frame.f_lineno = 599;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 599;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9477f0c9c32c14c35b9205d2b4a4e0ae );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9477f0c9c32c14c35b9205d2b4a4e0ae );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9477f0c9c32c14c35b9205d2b4a4e0ae );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9477f0c9c32c14c35b9205d2b4a4e0ae, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9477f0c9c32c14c35b9205d2b4a4e0ae->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9477f0c9c32c14c35b9205d2b4a4e0ae, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9477f0c9c32c14c35b9205d2b4a4e0ae,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_9477f0c9c32c14c35b9205d2b4a4e0ae == cache_frame_9477f0c9c32c14c35b9205d2b4a4e0ae )
    {
        Py_DECREF( frame_9477f0c9c32c14c35b9205d2b4a4e0ae );
    }
    cache_frame_9477f0c9c32c14c35b9205d2b4a4e0ae = NULL;

    assertFrameObject( frame_9477f0c9c32c14c35b9205d2b4a4e0ae );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_35_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_35_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_36_args_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_node = python_pars[ 0 ];
    struct Nuitka_CellObject *par_eval_ctx = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *var_args = NULL;
    PyObject *var_kwargs = NULL;
    PyObject *outline_0_var_x = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_listcontraction_1__$0 = NULL;
    PyObject *tmp_listcontraction_1__contraction = NULL;
    PyObject *tmp_listcontraction_1__iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *tmp_append_list_1;
    PyObject *tmp_append_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_dict_seq_1;
    int tmp_exc_match_exception_match_1;
    int tmp_exc_match_exception_match_2;
    bool tmp_isnot_1;
    bool tmp_isnot_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iter_arg_2;
    PyObject *tmp_next_source_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_outline_return_value_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_tuple_element_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_3f0b104774a14b607a875a1d27285319_2 = NULL;

    struct Nuitka_FrameObject *frame_3f0b104774a14b607a875a1d27285319_2;

    static struct Nuitka_FrameObject *cache_frame_62e7b186ed6fb9ab7cb52536ebb130aa = NULL;

    struct Nuitka_FrameObject *frame_62e7b186ed6fb9ab7cb52536ebb130aa;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;
    tmp_outline_return_value_2 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_62e7b186ed6fb9ab7cb52536ebb130aa, codeobj_62e7b186ed6fb9ab7cb52536ebb130aa, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_62e7b186ed6fb9ab7cb52536ebb130aa = cache_frame_62e7b186ed6fb9ab7cb52536ebb130aa;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_62e7b186ed6fb9ab7cb52536ebb130aa );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_62e7b186ed6fb9ab7cb52536ebb130aa ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    tmp_source_name_1 = par_node;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_args );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 603;
        type_description_1 = "ocoo";
        goto try_except_handler_2;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 603;
        type_description_1 = "ocoo";
        goto try_except_handler_2;
    }
    assert( tmp_listcontraction_1__$0 == NULL );
    tmp_listcontraction_1__$0 = tmp_assign_source_2;

    tmp_assign_source_3 = PyList_New( 0 );
    assert( tmp_listcontraction_1__contraction == NULL );
    tmp_listcontraction_1__contraction = tmp_assign_source_3;

    MAKE_OR_REUSE_FRAME( cache_frame_3f0b104774a14b607a875a1d27285319_2, codeobj_3f0b104774a14b607a875a1d27285319, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3f0b104774a14b607a875a1d27285319_2 = cache_frame_3f0b104774a14b607a875a1d27285319_2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3f0b104774a14b607a875a1d27285319_2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3f0b104774a14b607a875a1d27285319_2 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_listcontraction_1__$0;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_2 = "ooc";
            exception_lineno = 603;
            goto try_except_handler_3;
        }
    }

    {
        PyObject *old = tmp_listcontraction_1__iter_value_0;
        tmp_listcontraction_1__iter_value_0 = tmp_assign_source_4;
        Py_XDECREF( old );
    }

    tmp_assign_source_5 = tmp_listcontraction_1__iter_value_0;

    CHECK_OBJECT( tmp_assign_source_5 );
    {
        PyObject *old = outline_0_var_x;
        outline_0_var_x = tmp_assign_source_5;
        Py_INCREF( outline_0_var_x );
        Py_XDECREF( old );
    }

    tmp_append_list_1 = tmp_listcontraction_1__contraction;

    CHECK_OBJECT( tmp_append_list_1 );
    tmp_source_name_2 = outline_0_var_x;

    CHECK_OBJECT( tmp_source_name_2 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_as_const );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 603;
        type_description_2 = "ooc";
        goto try_except_handler_3;
    }
    if ( par_eval_ctx == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( par_eval_ctx );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 603;
        type_description_2 = "ooc";
        goto try_except_handler_3;
    }

    frame_3f0b104774a14b607a875a1d27285319_2->m_frame.f_lineno = 603;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_append_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_append_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 603;
        type_description_2 = "ooc";
        goto try_except_handler_3;
    }
    assert( PyList_Check( tmp_append_list_1 ) );
    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
    Py_DECREF( tmp_append_value_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 603;
        type_description_2 = "ooc";
        goto try_except_handler_3;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 603;
        type_description_2 = "ooc";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    tmp_outline_return_value_1 = tmp_listcontraction_1__contraction;

    CHECK_OBJECT( tmp_outline_return_value_1 );
    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_3;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    Py_XDECREF( tmp_listcontraction_1__$0 );
    tmp_listcontraction_1__$0 = NULL;

    Py_XDECREF( tmp_listcontraction_1__contraction );
    tmp_listcontraction_1__contraction = NULL;

    Py_XDECREF( tmp_listcontraction_1__iter_value_0 );
    tmp_listcontraction_1__iter_value_0 = NULL;

    goto frame_return_exit_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_listcontraction_1__$0 );
    tmp_listcontraction_1__$0 = NULL;

    Py_XDECREF( tmp_listcontraction_1__contraction );
    tmp_listcontraction_1__contraction = NULL;

    Py_XDECREF( tmp_listcontraction_1__iter_value_0 );
    tmp_listcontraction_1__iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_2;
    // End of try:

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3f0b104774a14b607a875a1d27285319_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_2:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3f0b104774a14b607a875a1d27285319_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_2;

    frame_exception_exit_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3f0b104774a14b607a875a1d27285319_2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3f0b104774a14b607a875a1d27285319_2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3f0b104774a14b607a875a1d27285319_2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3f0b104774a14b607a875a1d27285319_2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3f0b104774a14b607a875a1d27285319_2,
        type_description_2,
        outline_0_var_x,
        par_node,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_3f0b104774a14b607a875a1d27285319_2 == cache_frame_3f0b104774a14b607a875a1d27285319_2 )
    {
        Py_DECREF( frame_3f0b104774a14b607a875a1d27285319_2 );
    }
    cache_frame_3f0b104774a14b607a875a1d27285319_2 = NULL;

    assertFrameObject( frame_3f0b104774a14b607a875a1d27285319_2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_1;

    frame_no_exception_1:;

    goto skip_nested_handling_1;
    nested_frame_exit_1:;
    type_description_1 = "ocoo";
    goto try_except_handler_2;
    skip_nested_handling_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    Py_XDECREF( outline_0_var_x );
    outline_0_var_x = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_0_var_x );
    outline_0_var_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto outline_exception_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;
    outline_exception_1:;
    exception_lineno = 603;
    goto frame_exception_exit_1;
    outline_result_1:;
    tmp_assign_source_1 = tmp_outline_return_value_1;
    assert( var_args == NULL );
    var_args = tmp_assign_source_1;

    tmp_source_name_3 = par_node;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 604;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_kwargs );
    if ( tmp_iter_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_2 );
    Py_DECREF( tmp_iter_arg_2 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }
    assert( tmp_genexpr_1__$0 == NULL );
    tmp_genexpr_1__$0 = tmp_assign_source_7;

    // Tried code:
    tmp_outline_return_value_2 = Nuitka_Generator_New(
        jinja2$nodes$$$function_36_args_as_const$$$genexpr_1_genexpr_context,
        module_jinja2$nodes,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_55f38441a8fad4734f80deabe4862d47,
#endif
        codeobj_0f1cab40e7adf08bb45a5980000311b8,
        2
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_2)->m_closure[0] = par_eval_ctx;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_2)->m_closure[0] );
    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_2)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );
    assert( Py_SIZE( tmp_outline_return_value_2 ) >= 2 ); 


    goto try_return_handler_4;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_4:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_2;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;
    outline_result_2:;
    tmp_dict_seq_1 = tmp_outline_return_value_2;
    tmp_assign_source_6 = TO_DICT( tmp_dict_seq_1, NULL );
    Py_DECREF( tmp_dict_seq_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }
    assert( var_kwargs == NULL );
    var_kwargs = tmp_assign_source_6;

    tmp_source_name_4 = par_node;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 606;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_dyn_args );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 606;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = Py_None;
    tmp_isnot_1 = ( tmp_compare_left_1 != tmp_compare_right_1 );
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    // Tried code:
    tmp_source_name_5 = var_args;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 608;
        type_description_1 = "ocoo";
        goto try_except_handler_5;
    }

    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_extend );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 608;
        type_description_1 = "ocoo";
        goto try_except_handler_5;
    }
    tmp_source_name_7 = par_node;

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 608;
        type_description_1 = "ocoo";
        goto try_except_handler_5;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_dyn_args );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 608;
        type_description_1 = "ocoo";
        goto try_except_handler_5;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 608;
        type_description_1 = "ocoo";
        goto try_except_handler_5;
    }
    if ( par_eval_ctx == NULL )
    {
        tmp_args_element_name_3 = NULL;
    }
    else
    {
        tmp_args_element_name_3 = PyCell_GET( par_eval_ctx );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 608;
        type_description_1 = "ocoo";
        goto try_except_handler_5;
    }

    frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame.f_lineno = 608;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_args_element_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_args_element_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_2 );

        exception_lineno = 608;
        type_description_1 = "ocoo";
        goto try_except_handler_5;
    }
    frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame.f_lineno = 608;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_2 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 608;
        type_description_1 = "ocoo";
        goto try_except_handler_5;
    }
    Py_DECREF( tmp_unused );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_62e7b186ed6fb9ab7cb52536ebb130aa, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_62e7b186ed6fb9ab7cb52536ebb130aa, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_Exception;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 609;
        type_description_1 = "ocoo";
        goto try_except_handler_6;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 610;
        type_description_1 = "ocoo";
        goto try_except_handler_6;
    }

    frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame.f_lineno = 610;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 610;
        type_description_1 = "ocoo";
        goto try_except_handler_6;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 610;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ocoo";
    goto try_except_handler_6;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 607;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame) frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ocoo";
    goto try_except_handler_6;
    branch_end_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    branch_no_1:;
    tmp_source_name_8 = par_node;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 612;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }

    tmp_compare_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_dyn_kwargs );
    if ( tmp_compare_left_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 612;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_3 = Py_None;
    tmp_isnot_2 = ( tmp_compare_left_3 != tmp_compare_right_3 );
    Py_DECREF( tmp_compare_left_3 );
    if ( tmp_isnot_2 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    // Tried code:
    tmp_source_name_9 = var_kwargs;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 614;
        type_description_1 = "ocoo";
        goto try_except_handler_7;
    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_update );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 614;
        type_description_1 = "ocoo";
        goto try_except_handler_7;
    }
    tmp_source_name_11 = par_node;

    if ( tmp_source_name_11 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 614;
        type_description_1 = "ocoo";
        goto try_except_handler_7;
    }

    tmp_source_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_dyn_kwargs );
    if ( tmp_source_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 614;
        type_description_1 = "ocoo";
        goto try_except_handler_7;
    }
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_10 );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 614;
        type_description_1 = "ocoo";
        goto try_except_handler_7;
    }
    if ( par_eval_ctx == NULL )
    {
        tmp_args_element_name_5 = NULL;
    }
    else
    {
        tmp_args_element_name_5 = PyCell_GET( par_eval_ctx );
    }

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_called_name_6 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 614;
        type_description_1 = "ocoo";
        goto try_except_handler_7;
    }

    frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame.f_lineno = 614;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 614;
        type_description_1 = "ocoo";
        goto try_except_handler_7;
    }
    frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame.f_lineno = 614;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 614;
        type_description_1 = "ocoo";
        goto try_except_handler_7;
    }
    Py_DECREF( tmp_unused );
    goto try_end_2;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_5 == NULL )
    {
        exception_keeper_tb_5 = MAKE_TRACEBACK( frame_62e7b186ed6fb9ab7cb52536ebb130aa, exception_keeper_lineno_5 );
    }
    else if ( exception_keeper_lineno_5 != 0 )
    {
        exception_keeper_tb_5 = ADD_TRACEBACK( exception_keeper_tb_5, frame_62e7b186ed6fb9ab7cb52536ebb130aa, exception_keeper_lineno_5 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    PyException_SetTraceback( exception_keeper_value_5, (PyObject *)exception_keeper_tb_5 );
    PUBLISH_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    // Tried code:
    tmp_compare_left_4 = PyThreadState_GET()->exc_type;
    tmp_compare_right_4 = PyExc_Exception;
    tmp_exc_match_exception_match_2 = EXCEPTION_MATCH_BOOL( tmp_compare_left_4, tmp_compare_right_4 );
    if ( tmp_exc_match_exception_match_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 615;
        type_description_1 = "ocoo";
        goto try_except_handler_8;
    }
    if ( tmp_exc_match_exception_match_2 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_7 == NULL ))
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 616;
        type_description_1 = "ocoo";
        goto try_except_handler_8;
    }

    frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame.f_lineno = 616;
    tmp_raise_type_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 616;
        type_description_1 = "ocoo";
        goto try_except_handler_8;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 616;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ocoo";
    goto try_except_handler_8;
    goto branch_end_4;
    branch_no_4:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 613;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame) frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ocoo";
    goto try_except_handler_8;
    branch_end_4:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_2:;
    branch_no_3:;
    tmp_return_value = PyTuple_New( 2 );
    tmp_tuple_element_1 = var_args;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 618;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
    tmp_tuple_element_1 = var_kwargs;

    if ( tmp_tuple_element_1 == NULL )
    {
        Py_DECREF( tmp_return_value );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 618;
        type_description_1 = "ocoo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_tuple_element_1 );
    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_62e7b186ed6fb9ab7cb52536ebb130aa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_62e7b186ed6fb9ab7cb52536ebb130aa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_62e7b186ed6fb9ab7cb52536ebb130aa );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_62e7b186ed6fb9ab7cb52536ebb130aa, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_62e7b186ed6fb9ab7cb52536ebb130aa->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_62e7b186ed6fb9ab7cb52536ebb130aa, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_62e7b186ed6fb9ab7cb52536ebb130aa,
        type_description_1,
        par_node,
        par_eval_ctx,
        var_args,
        var_kwargs
    );


    // Release cached frame.
    if ( frame_62e7b186ed6fb9ab7cb52536ebb130aa == cache_frame_62e7b186ed6fb9ab7cb52536ebb130aa )
    {
        Py_DECREF( frame_62e7b186ed6fb9ab7cb52536ebb130aa );
    }
    cache_frame_62e7b186ed6fb9ab7cb52536ebb130aa = NULL;

    assertFrameObject( frame_62e7b186ed6fb9ab7cb52536ebb130aa );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_node );
    par_node = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_kwargs );
    var_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_node );
    par_node = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_kwargs );
    var_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_36_args_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$function_36_args_as_const$$$genexpr_1_genexpr_locals {
    PyObject *var_x
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_36_args_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$function_36_args_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_x = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_0f1cab40e7adf08bb45a5980000311b8, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[1] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "Noc";
            exception_lineno = 604;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_x;
        var_x = tmp_assign_source_2;
        Py_INCREF( var_x );
        Py_XDECREF( old );
    }

    tmp_source_name_1 = var_x;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( generator->m_closure[0] == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 604;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }

    generator->m_frame->m_frame.f_lineno = 604;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 604;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_x,
            generator->m_closure[0]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_x );
    var_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_37_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *var_filter_ = NULL;
    PyObject *var_args = NULL;
    PyObject *var_kwargs = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_args_element_name_9;
    PyObject *tmp_args_element_name_10;
    PyObject *tmp_args_element_name_11;
    PyObject *tmp_args_element_name_12;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compexpr_left_1;
    PyObject *tmp_compexpr_left_2;
    PyObject *tmp_compexpr_right_1;
    PyObject *tmp_compexpr_right_2;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_getattr_attr_1;
    PyObject *tmp_getattr_attr_2;
    PyObject *tmp_getattr_attr_3;
    PyObject *tmp_getattr_attr_4;
    PyObject *tmp_getattr_default_1;
    PyObject *tmp_getattr_default_2;
    PyObject *tmp_getattr_default_3;
    PyObject *tmp_getattr_default_4;
    PyObject *tmp_getattr_target_1;
    PyObject *tmp_getattr_target_2;
    PyObject *tmp_getattr_target_3;
    PyObject *tmp_getattr_target_4;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    int tmp_or_left_truth_1;
    int tmp_or_left_truth_2;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_left_value_2;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_or_right_value_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    PyObject *tmp_raise_type_3;
    PyObject *tmp_raise_type_4;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_2aa1f4319600a61dff1150ee998bcb4f = NULL;

    struct Nuitka_FrameObject *frame_2aa1f4319600a61dff1150ee998bcb4f;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2aa1f4319600a61dff1150ee998bcb4f, codeobj_2aa1f4319600a61dff1150ee998bcb4f, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_2aa1f4319600a61dff1150ee998bcb4f = cache_frame_2aa1f4319600a61dff1150ee998bcb4f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2aa1f4319600a61dff1150ee998bcb4f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2aa1f4319600a61dff1150ee998bcb4f ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 632;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 632;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 632;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_1 = par_eval_ctx;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_or_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_volatile );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 634;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 634;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 634;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_node );
    if ( tmp_compexpr_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 634;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_compexpr_right_1 = Py_None;
    tmp_or_right_value_1 = BOOL_FROM( tmp_compexpr_left_1 == tmp_compexpr_right_1 );
    Py_DECREF( tmp_compexpr_left_1 );
    Py_INCREF( tmp_or_right_value_1 );
    tmp_cond_value_1 = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_cond_value_1 = tmp_or_left_value_1;
    or_end_1:;
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 634;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 635;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 635;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 635;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 635;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_source_name_5 = par_self;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 642;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_environment );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 642;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_filters );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 642;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_get );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 642;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_6 = par_self;

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 642;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_name );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 642;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 642;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 642;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_filter_ == NULL );
    var_filter_ = tmp_assign_source_2;

    tmp_compexpr_left_2 = var_filter_;

    CHECK_OBJECT( tmp_compexpr_left_2 );
    tmp_compexpr_right_2 = Py_None;
    tmp_or_left_value_2 = BOOL_FROM( tmp_compexpr_left_2 == tmp_compexpr_right_2 );
    tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
    assert( !(tmp_or_left_truth_2 == -1) );
    if ( tmp_or_left_truth_2 == 1 )
    {
        goto or_left_2;
    }
    else
    {
        goto or_right_2;
    }
    or_right_2:;
    tmp_getattr_target_1 = var_filter_;

    if ( tmp_getattr_target_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filter_" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 644;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_getattr_attr_1 = const_str_plain_contextfilter;
    tmp_getattr_default_1 = Py_False;
    tmp_or_right_value_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
    if ( tmp_or_right_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 644;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_2 = tmp_or_right_value_2;
    goto or_end_2;
    or_left_2:;
    Py_INCREF( tmp_or_left_value_2 );
    tmp_cond_value_2 = tmp_or_left_value_2;
    or_end_2:;
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 644;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 645;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 645;
    tmp_raise_type_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 645;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 645;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_2:;
    tmp_source_name_8 = par_eval_ctx;

    if ( tmp_source_name_8 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 650;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_environment );
    if ( tmp_source_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 650;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_is_async );
    Py_DECREF( tmp_source_name_7 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 650;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 651;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_getattr_target_2 = var_filter_;

    if ( tmp_getattr_target_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filter_" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 651;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_getattr_attr_2 = const_str_plain_asyncfiltervariant;
    tmp_getattr_default_2 = Py_False;
    tmp_and_right_value_1 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 651;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_value_3 = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_cond_value_3 = tmp_and_left_value_1;
    and_end_1:;
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_3 );

        exception_lineno = 651;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 653;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 653;
    tmp_raise_type_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_raise_type_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 653;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_3;
    exception_lineno = 653;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_3:;
    // Tried code:
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_args_as_const );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_args_as_const );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "args_as_const" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 655;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_4 = par_self;

    if ( tmp_args_element_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 655;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_5 = par_eval_ctx;

    if ( tmp_args_element_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 655;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }

    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 655;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
    }

    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 655;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 655;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 655;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 655;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooo";
                exception_lineno = 655;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooo";
        exception_lineno = 655;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_6 );
    assert( var_args == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_args = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_7 );
    assert( var_kwargs == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_kwargs = tmp_assign_source_7;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_9 = var_args;

    if ( tmp_source_name_9 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 656;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_insert );
    if ( tmp_called_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_int_0;
    tmp_source_name_11 = par_self;

    if ( tmp_source_name_11 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 656;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_node );
    if ( tmp_source_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 656;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_10 );
    if ( tmp_called_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 656;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = par_eval_ctx;

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_called_name_8 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 656;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 656;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
    }

    Py_DECREF( tmp_called_name_8 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_7 );

        exception_lineno = 656;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 656;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
    }

    Py_DECREF( tmp_called_name_7 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 656;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    tmp_getattr_target_3 = var_filter_;

    if ( tmp_getattr_target_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filter_" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 658;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_getattr_attr_3 = const_str_plain_evalcontextfilter;
    tmp_getattr_default_3 = Py_False;
    tmp_cond_value_4 = BUILTIN_GETATTR( tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3 );
    if ( tmp_cond_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 658;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_4 );

        exception_lineno = 658;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_source_name_12 = var_args;

    if ( tmp_source_name_12 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 659;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_insert );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 659;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_9 = const_int_0;
    tmp_args_element_name_10 = par_eval_ctx;

    if ( tmp_args_element_name_10 == NULL )
    {
        Py_DECREF( tmp_called_name_9 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 659;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 659;
    {
        PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, call_args );
    }

    Py_DECREF( tmp_called_name_9 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 659;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    goto branch_end_4;
    branch_no_4:;
    tmp_getattr_target_4 = var_filter_;

    if ( tmp_getattr_target_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filter_" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 660;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_getattr_attr_4 = const_str_plain_environmentfilter;
    tmp_getattr_default_4 = Py_False;
    tmp_cond_value_5 = BUILTIN_GETATTR( tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4 );
    if ( tmp_cond_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 660;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_5 );

        exception_lineno = 660;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_source_name_13 = var_args;

    if ( tmp_source_name_13 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 661;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_insert );
    if ( tmp_called_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 661;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_11 = const_int_0;
    tmp_source_name_14 = par_self;

    if ( tmp_source_name_14 == NULL )
    {
        Py_DECREF( tmp_called_name_10 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 661;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_environment );
    if ( tmp_args_element_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_10 );

        exception_lineno = 661;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 661;
    {
        PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, call_args );
    }

    Py_DECREF( tmp_called_name_10 );
    Py_DECREF( tmp_args_element_name_12 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 661;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    branch_no_5:;
    branch_end_4:;
    // Tried code:
    tmp_dircall_arg1_1 = var_filter_;

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "filter_" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 664;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
    }

    tmp_dircall_arg2_1 = var_args;

    if ( tmp_dircall_arg2_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 664;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
    }

    tmp_dircall_arg3_1 = var_kwargs;

    if ( tmp_dircall_arg3_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 664;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
    }

    Py_INCREF( tmp_dircall_arg1_1 );
    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_7_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 664;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_37_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_2aa1f4319600a61dff1150ee998bcb4f, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_2aa1f4319600a61dff1150ee998bcb4f, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_Exception;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 665;
        type_description_1 = "ooooo";
        goto try_except_handler_5;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_called_name_11 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_11 == NULL ))
    {
        tmp_called_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_11 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 666;
        type_description_1 = "ooooo";
        goto try_except_handler_5;
    }

    frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = 666;
    tmp_raise_type_4 = CALL_FUNCTION_NO_ARGS( tmp_called_name_11 );
    if ( tmp_raise_type_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 666;
        type_description_1 = "ooooo";
        goto try_except_handler_5;
    }
    exception_type = tmp_raise_type_4;
    exception_lineno = 666;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto try_except_handler_5;
    goto branch_end_6;
    branch_no_6:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 663;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame) frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooo";
    goto try_except_handler_5;
    branch_end_6:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_37_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_2aa1f4319600a61dff1150ee998bcb4f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_2aa1f4319600a61dff1150ee998bcb4f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_2aa1f4319600a61dff1150ee998bcb4f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2aa1f4319600a61dff1150ee998bcb4f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2aa1f4319600a61dff1150ee998bcb4f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2aa1f4319600a61dff1150ee998bcb4f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2aa1f4319600a61dff1150ee998bcb4f,
        type_description_1,
        par_self,
        par_eval_ctx,
        var_filter_,
        var_args,
        var_kwargs
    );


    // Release cached frame.
    if ( frame_2aa1f4319600a61dff1150ee998bcb4f == cache_frame_2aa1f4319600a61dff1150ee998bcb4f )
    {
        Py_DECREF( frame_2aa1f4319600a61dff1150ee998bcb4f );
    }
    cache_frame_2aa1f4319600a61dff1150ee998bcb4f = NULL;

    assertFrameObject( frame_2aa1f4319600a61dff1150ee998bcb4f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_37_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_filter_ );
    var_filter_ = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_kwargs );
    var_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_filter_ );
    var_filter_ = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_kwargs );
    var_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_37_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_38_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *var_test = NULL;
    PyObject *var_args = NULL;
    PyObject *var_kwargs = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_element_name_7;
    PyObject *tmp_args_element_name_8;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_dircall_arg1_1;
    PyObject *tmp_dircall_arg2_1;
    PyObject *tmp_dircall_arg3_1;
    int tmp_exc_match_exception_match_1;
    bool tmp_is_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_iterator_attempt;
    PyObject *tmp_iterator_name_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_unpack_1;
    PyObject *tmp_unpack_2;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_543dce0aaebbad3afc9fe9a73e540ccc = NULL;

    struct Nuitka_FrameObject *frame_543dce0aaebbad3afc9fe9a73e540ccc;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_543dce0aaebbad3afc9fe9a73e540ccc, codeobj_543dce0aaebbad3afc9fe9a73e540ccc, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_543dce0aaebbad3afc9fe9a73e540ccc = cache_frame_543dce0aaebbad3afc9fe9a73e540ccc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_543dce0aaebbad3afc9fe9a73e540ccc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_543dce0aaebbad3afc9fe9a73e540ccc ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_3 = par_self;

    CHECK_OBJECT( tmp_source_name_3 );
    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_environment );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 677;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tests );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 677;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_get );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 677;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_source_name_4 = par_self;

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 677;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_name );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_1 );

        exception_lineno = 677;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame.f_lineno = 677;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 677;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    assert( var_test == NULL );
    var_test = tmp_assign_source_1;

    tmp_compare_left_1 = var_test;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 680;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame.f_lineno = 680;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 680;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 680;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_called_name_3 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_3 == NULL ))
    {
        tmp_called_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_3 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 682;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_2 = par_self;

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 682;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 682;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame.f_lineno = 682;
    {
        PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 682;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_2;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_args_as_const );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_args_as_const );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "args_as_const" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 683;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_4 = par_self;

    if ( tmp_args_element_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 683;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_5 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_5 );
    frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame.f_lineno = 683;
    {
        PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
    }

    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 683;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 683;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    assert( tmp_tuple_unpack_1__source_iter == NULL );
    tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;

    // Tried code:
    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_1 );
    tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
    if ( tmp_assign_source_4 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 683;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_1 == NULL );
    tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;

    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_unpack_2 );
    tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
    if ( tmp_assign_source_5 == NULL )
    {
        if ( !ERROR_OCCURRED() )
        {
            exception_type = PyExc_StopIteration;
            Py_INCREF( exception_type );
            exception_value = NULL;
            exception_tb = NULL;
        }
        else
        {
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        }


        type_description_1 = "ooooo";
        exception_lineno = 683;
        goto try_except_handler_3;
    }
    assert( tmp_tuple_unpack_1__element_2 == NULL );
    tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;

    tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;

    CHECK_OBJECT( tmp_iterator_name_1 );
    // Check if iterator has left-over elements.
    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

    if (likely( tmp_iterator_attempt == NULL ))
    {
        PyObject *error = GET_ERROR_OCCURRED();

        if ( error != NULL )
        {
            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
            {
                CLEAR_ERROR_OCCURRED();
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooo";
                exception_lineno = 683;
                goto try_except_handler_3;
            }
        }
    }
    else
    {
        Py_DECREF( tmp_iterator_attempt );

        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

        type_description_1 = "ooooo";
        exception_lineno = 683;
        goto try_except_handler_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;

    CHECK_OBJECT( tmp_assign_source_6 );
    assert( var_args == NULL );
    Py_INCREF( tmp_assign_source_6 );
    var_args = tmp_assign_source_6;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;

    CHECK_OBJECT( tmp_assign_source_7 );
    assert( var_kwargs == NULL );
    Py_INCREF( tmp_assign_source_7 );
    var_kwargs = tmp_assign_source_7;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    tmp_source_name_5 = var_args;

    if ( tmp_source_name_5 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 684;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_insert );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 684;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_6 = const_int_0;
    tmp_source_name_7 = par_self;

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 684;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_node );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 684;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 684;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_8 = par_eval_ctx;

    if ( tmp_args_element_name_8 == NULL )
    {
        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_called_name_6 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 684;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }

    frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame.f_lineno = 684;
    {
        PyObject *call_args[] = { tmp_args_element_name_8 };
        tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
    }

    Py_DECREF( tmp_called_name_6 );
    if ( tmp_args_element_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_5 );

        exception_lineno = 684;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame.f_lineno = 684;
    {
        PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
        tmp_unused = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    Py_DECREF( tmp_args_element_name_7 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 684;
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_unused );
    // Tried code:
    tmp_dircall_arg1_1 = var_test;

    if ( tmp_dircall_arg1_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "test" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 687;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
    }

    tmp_dircall_arg2_1 = var_args;

    if ( tmp_dircall_arg2_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 687;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
    }

    tmp_dircall_arg3_1 = var_kwargs;

    if ( tmp_dircall_arg3_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "kwargs" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 687;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
    }

    Py_INCREF( tmp_dircall_arg1_1 );
    Py_INCREF( tmp_dircall_arg2_1 );
    Py_INCREF( tmp_dircall_arg3_1 );

    {
        PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
        tmp_return_value = impl___internal__$$$function_7_complex_call_helper_star_list_star_dict( dir_call_args );
    }
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 687;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_38_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_543dce0aaebbad3afc9fe9a73e540ccc, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_543dce0aaebbad3afc9fe9a73e540ccc, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_Exception;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 688;
        type_description_1 = "ooooo";
        goto try_except_handler_5;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_7 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_7 == NULL ))
    {
        tmp_called_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_7 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 689;
        type_description_1 = "ooooo";
        goto try_except_handler_5;
    }

    frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame.f_lineno = 689;
    tmp_raise_type_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 689;
        type_description_1 = "ooooo";
        goto try_except_handler_5;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 689;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooooo";
    goto try_except_handler_5;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 686;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame) frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooo";
    goto try_except_handler_5;
    branch_end_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_38_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_543dce0aaebbad3afc9fe9a73e540ccc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_543dce0aaebbad3afc9fe9a73e540ccc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_543dce0aaebbad3afc9fe9a73e540ccc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_543dce0aaebbad3afc9fe9a73e540ccc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_543dce0aaebbad3afc9fe9a73e540ccc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_543dce0aaebbad3afc9fe9a73e540ccc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_543dce0aaebbad3afc9fe9a73e540ccc,
        type_description_1,
        par_self,
        par_eval_ctx,
        var_test,
        var_args,
        var_kwargs
    );


    // Release cached frame.
    if ( frame_543dce0aaebbad3afc9fe9a73e540ccc == cache_frame_543dce0aaebbad3afc9fe9a73e540ccc )
    {
        Py_DECREF( frame_543dce0aaebbad3afc9fe9a73e540ccc );
    }
    cache_frame_543dce0aaebbad3afc9fe9a73e540ccc = NULL;

    assertFrameObject( frame_543dce0aaebbad3afc9fe9a73e540ccc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_38_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_test );
    var_test = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_kwargs );
    var_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_test );
    var_test = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_kwargs );
    var_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_38_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_39_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    static struct Nuitka_FrameObject *cache_frame_8f0d619d320e9573d2b55229dc3a58ff = NULL;

    struct Nuitka_FrameObject *frame_8f0d619d320e9573d2b55229dc3a58ff;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8f0d619d320e9573d2b55229dc3a58ff, codeobj_8f0d619d320e9573d2b55229dc3a58ff, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_8f0d619d320e9573d2b55229dc3a58ff = cache_frame_8f0d619d320e9573d2b55229dc3a58ff;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8f0d619d320e9573d2b55229dc3a58ff );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8f0d619d320e9573d2b55229dc3a58ff ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 707;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame.f_lineno = 707;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 707;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_1 = par_self;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 708;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_ctx );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 708;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_str_plain_load;
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 708;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 709;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame.f_lineno = 709;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 709;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 709;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;
    // Tried code:
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_environment );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_getitem );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_source_name_5 = par_self;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_node );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame.f_lineno = 711;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_source_name_7 = par_self;

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 712;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_arg );
    if ( tmp_source_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 712;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_6 );
    if ( tmp_called_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 712;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_6 = par_eval_ctx;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        Py_DECREF( tmp_called_name_5 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 712;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame.f_lineno = 712;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
    }

    Py_DECREF( tmp_called_name_5 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 712;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame.f_lineno = 711;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 711;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_39_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_8f0d619d320e9573d2b55229dc3a58ff, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_8f0d619d320e9573d2b55229dc3a58ff, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_Exception;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 713;
        type_description_1 = "oo";
        goto try_except_handler_3;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_6 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_6 == NULL ))
    {
        tmp_called_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_6 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 714;
        type_description_1 = "oo";
        goto try_except_handler_3;
    }

    frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame.f_lineno = 714;
    tmp_raise_type_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 714;
        type_description_1 = "oo";
        goto try_except_handler_3;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 714;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto try_except_handler_3;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 710;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame) frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oo";
    goto try_except_handler_3;
    branch_end_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_39_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_8f0d619d320e9573d2b55229dc3a58ff );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_8f0d619d320e9573d2b55229dc3a58ff );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_8f0d619d320e9573d2b55229dc3a58ff );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8f0d619d320e9573d2b55229dc3a58ff, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8f0d619d320e9573d2b55229dc3a58ff->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8f0d619d320e9573d2b55229dc3a58ff, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8f0d619d320e9573d2b55229dc3a58ff,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_8f0d619d320e9573d2b55229dc3a58ff == cache_frame_8f0d619d320e9573d2b55229dc3a58ff )
    {
        Py_DECREF( frame_8f0d619d320e9573d2b55229dc3a58ff );
    }
    cache_frame_8f0d619d320e9573d2b55229dc3a58ff = NULL;

    assertFrameObject( frame_8f0d619d320e9573d2b55229dc3a58ff );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_39_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_39_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_40_can_assign( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_40_can_assign );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_40_can_assign );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_41_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    int tmp_cmp_NotEq_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_raise_type_2;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    static struct Nuitka_FrameObject *cache_frame_67d639c3786e507c69de01480973c34d = NULL;

    struct Nuitka_FrameObject *frame_67d639c3786e507c69de01480973c34d;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_67d639c3786e507c69de01480973c34d, codeobj_67d639c3786e507c69de01480973c34d, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_67d639c3786e507c69de01480973c34d = cache_frame_67d639c3786e507c69de01480973c34d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_67d639c3786e507c69de01480973c34d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_67d639c3786e507c69de01480973c34d ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_self;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_compare_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_ctx );
    if ( tmp_compare_left_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 727;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_compare_right_1 = const_str_plain_load;
    tmp_cmp_NotEq_1 = RICH_COMPARE_BOOL_NE( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_cmp_NotEq_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_compare_left_1 );

        exception_lineno = 727;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_compare_left_1 );
    if ( tmp_cmp_NotEq_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 728;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_67d639c3786e507c69de01480973c34d->m_frame.f_lineno = 728;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 728;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 728;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;
    branch_no_1:;
    // Tried code:
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 730;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_1 = par_self;

    if ( tmp_args_element_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 730;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_2 = par_eval_ctx;

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 730;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    frame_67d639c3786e507c69de01480973c34d->m_frame.f_lineno = 730;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 730;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_environment );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_getattr );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_source_name_5 = par_self;

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_node );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    frame_67d639c3786e507c69de01480973c34d->m_frame.f_lineno = 731;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );

        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    tmp_source_name_6 = par_self;

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 732;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_attr );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );

        exception_lineno = 732;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    frame_67d639c3786e507c69de01480973c34d->m_frame.f_lineno = 731;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_5 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    Py_DECREF( tmp_args_element_name_3 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 731;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    goto frame_return_exit_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_41_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_67d639c3786e507c69de01480973c34d, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_67d639c3786e507c69de01480973c34d, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    tmp_compare_left_2 = PyThreadState_GET()->exc_type;
    tmp_compare_right_2 = PyExc_Exception;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_2, tmp_compare_right_2 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 733;
        type_description_1 = "oo";
        goto try_except_handler_3;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 734;
        type_description_1 = "oo";
        goto try_except_handler_3;
    }

    frame_67d639c3786e507c69de01480973c34d->m_frame.f_lineno = 734;
    tmp_raise_type_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_raise_type_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 734;
        type_description_1 = "oo";
        goto try_except_handler_3;
    }
    exception_type = tmp_raise_type_2;
    exception_lineno = 734;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto try_except_handler_3;
    goto branch_end_2;
    branch_no_2:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 729;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_67d639c3786e507c69de01480973c34d->m_frame) frame_67d639c3786e507c69de01480973c34d->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oo";
    goto try_except_handler_3;
    branch_end_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_41_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 1
    RESTORE_FRAME_EXCEPTION( frame_67d639c3786e507c69de01480973c34d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_67d639c3786e507c69de01480973c34d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_67d639c3786e507c69de01480973c34d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_67d639c3786e507c69de01480973c34d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_67d639c3786e507c69de01480973c34d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_67d639c3786e507c69de01480973c34d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_67d639c3786e507c69de01480973c34d,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_67d639c3786e507c69de01480973c34d == cache_frame_67d639c3786e507c69de01480973c34d )
    {
        Py_DECREF( frame_67d639c3786e507c69de01480973c34d );
    }
    cache_frame_67d639c3786e507c69de01480973c34d = NULL;

    assertFrameObject( frame_67d639c3786e507c69de01480973c34d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_41_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_41_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_42_can_assign( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_42_can_assign );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_42_can_assign );
    return NULL;

    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_43_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_CellObject *par_eval_ctx = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *var_const = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_start_name_1;
    PyObject *tmp_step_name_1;
    PyObject *tmp_stop_name_1;
    static struct Nuitka_FrameObject *cache_frame_1f8bf388eb3290039659cd9beceb5eaa = NULL;

    struct Nuitka_FrameObject *frame_1f8bf388eb3290039659cd9beceb5eaa;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1f8bf388eb3290039659cd9beceb5eaa, codeobj_1f8bf388eb3290039659cd9beceb5eaa, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1f8bf388eb3290039659cd9beceb5eaa = cache_frame_1f8bf388eb3290039659cd9beceb5eaa;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1f8bf388eb3290039659cd9beceb5eaa );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1f8bf388eb3290039659cd9beceb5eaa ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 747;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    if ( par_eval_ctx == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( par_eval_ctx );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 747;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }

    frame_1f8bf388eb3290039659cd9beceb5eaa->m_frame.f_lineno = 747;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 747;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = PyCell_GET( par_eval_ctx );
        PyCell_SET( par_eval_ctx, tmp_assign_source_1 );
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = MAKE_FUNCTION_jinja2$nodes$$$function_43_as_const$$$function_1_const( par_eval_ctx );
    assert( var_const == NULL );
    var_const = tmp_assign_source_2;

    tmp_called_name_2 = var_const;

    CHECK_OBJECT( tmp_called_name_2 );
    tmp_source_name_1 = par_self;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_start );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }
    frame_1f8bf388eb3290039659cd9beceb5eaa->m_frame.f_lineno = 752;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_start_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_start_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = var_const;

    if ( tmp_called_name_3 == NULL )
    {
        Py_DECREF( tmp_start_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "const" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_start_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stop );
    if ( tmp_args_element_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_start_name_1 );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }
    frame_1f8bf388eb3290039659cd9beceb5eaa->m_frame.f_lineno = 752;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_stop_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_args_element_name_4 );
    if ( tmp_stop_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_start_name_1 );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }
    tmp_called_name_4 = var_const;

    if ( tmp_called_name_4 == NULL )
    {
        Py_DECREF( tmp_start_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "const" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_start_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_step );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_start_name_1 );
        Py_DECREF( tmp_stop_name_1 );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }
    frame_1f8bf388eb3290039659cd9beceb5eaa->m_frame.f_lineno = 752;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_step_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_step_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_start_name_1 );
        Py_DECREF( tmp_stop_name_1 );

        exception_lineno = 752;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }
    tmp_return_value = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
    Py_DECREF( tmp_start_name_1 );
    Py_DECREF( tmp_stop_name_1 );
    Py_DECREF( tmp_step_name_1 );
    assert( tmp_return_value != NULL );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f8bf388eb3290039659cd9beceb5eaa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f8bf388eb3290039659cd9beceb5eaa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f8bf388eb3290039659cd9beceb5eaa );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1f8bf388eb3290039659cd9beceb5eaa, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1f8bf388eb3290039659cd9beceb5eaa->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1f8bf388eb3290039659cd9beceb5eaa, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1f8bf388eb3290039659cd9beceb5eaa,
        type_description_1,
        par_self,
        par_eval_ctx,
        var_const
    );


    // Release cached frame.
    if ( frame_1f8bf388eb3290039659cd9beceb5eaa == cache_frame_1f8bf388eb3290039659cd9beceb5eaa )
    {
        Py_DECREF( frame_1f8bf388eb3290039659cd9beceb5eaa );
    }
    cache_frame_1f8bf388eb3290039659cd9beceb5eaa = NULL;

    assertFrameObject( frame_1f8bf388eb3290039659cd9beceb5eaa );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_43_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_const );
    var_const = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_const );
    var_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_43_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_43_as_const$$$function_1_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_obj = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    bool tmp_is_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    static struct Nuitka_FrameObject *cache_frame_d7eb6128479dde4ed49ff7186d8ca696 = NULL;

    struct Nuitka_FrameObject *frame_d7eb6128479dde4ed49ff7186d8ca696;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    tmp_compare_left_1 = par_obj;

    CHECK_OBJECT( tmp_compare_left_1 );
    tmp_compare_right_1 = Py_None;
    tmp_is_1 = ( tmp_compare_left_1 == tmp_compare_right_1 );
    if ( tmp_is_1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    branch_no_1:;
    MAKE_OR_REUSE_FRAME( cache_frame_d7eb6128479dde4ed49ff7186d8ca696, codeobj_d7eb6128479dde4ed49ff7186d8ca696, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_d7eb6128479dde4ed49ff7186d8ca696 = cache_frame_d7eb6128479dde4ed49ff7186d8ca696;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d7eb6128479dde4ed49ff7186d8ca696 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d7eb6128479dde4ed49ff7186d8ca696 ) == 2 ); // Frame stack

    // Framed code:
    tmp_source_name_1 = par_obj;

    if ( tmp_source_name_1 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "obj" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 751;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 751;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    if ( self->m_closure[0] == NULL )
    {
        tmp_args_element_name_1 = NULL;
    }
    else
    {
        tmp_args_element_name_1 = PyCell_GET( self->m_closure[0] );
    }

    if ( tmp_args_element_name_1 == NULL )
    {
        Py_DECREF( tmp_called_name_1 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 751;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    frame_d7eb6128479dde4ed49ff7186d8ca696->m_frame.f_lineno = 751;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_called_name_1 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 751;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7eb6128479dde4ed49ff7186d8ca696 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7eb6128479dde4ed49ff7186d8ca696 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7eb6128479dde4ed49ff7186d8ca696 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d7eb6128479dde4ed49ff7186d8ca696, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d7eb6128479dde4ed49ff7186d8ca696->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d7eb6128479dde4ed49ff7186d8ca696, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d7eb6128479dde4ed49ff7186d8ca696,
        type_description_1,
        par_obj,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_d7eb6128479dde4ed49ff7186d8ca696 == cache_frame_d7eb6128479dde4ed49ff7186d8ca696 )
    {
        Py_DECREF( frame_d7eb6128479dde4ed49ff7186d8ca696 );
    }
    cache_frame_d7eb6128479dde4ed49ff7186d8ca696 = NULL;

    assertFrameObject( frame_d7eb6128479dde4ed49ff7186d8ca696 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_43_as_const$$$function_1_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_obj );
    par_obj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_obj );
    par_obj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_43_as_const$$$function_1_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_44_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_CellObject *par_eval_ctx = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_d7575262369a5ba6708de1069e7e6096 = NULL;

    struct Nuitka_FrameObject *frame_d7575262369a5ba6708de1069e7e6096;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;
    tmp_outline_return_value_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d7575262369a5ba6708de1069e7e6096, codeobj_d7575262369a5ba6708de1069e7e6096, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_d7575262369a5ba6708de1069e7e6096 = cache_frame_d7575262369a5ba6708de1069e7e6096;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d7575262369a5ba6708de1069e7e6096 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d7575262369a5ba6708de1069e7e6096 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 762;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    if ( par_eval_ctx == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( par_eval_ctx );
    }

    if ( tmp_args_element_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 762;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    frame_d7575262369a5ba6708de1069e7e6096->m_frame.f_lineno = 762;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 762;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = PyCell_GET( par_eval_ctx );
        PyCell_SET( par_eval_ctx, tmp_assign_source_1 );
        Py_XDECREF( old );
    }

    tmp_source_name_1 = const_str_empty;
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
    assert( tmp_called_name_2 != NULL );
    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 763;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_nodes );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    assert( tmp_genexpr_1__$0 == NULL );
    tmp_genexpr_1__$0 = tmp_assign_source_2;

    // Tried code:
    tmp_outline_return_value_1 = Nuitka_Generator_New(
        jinja2$nodes$$$function_44_as_const$$$genexpr_1_genexpr_context,
        module_jinja2$nodes,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_179b8dbc1002cf52620d347c505f88a7,
#endif
        codeobj_b9d1b1737c9725adfb4149be4d4ba085,
        2
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] = par_eval_ctx;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[0] );
    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_1)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );
    assert( Py_SIZE( tmp_outline_return_value_1 ) >= 2 ); 


    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_44_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_44_as_const );
    return NULL;
    outline_result_1:;
    tmp_args_element_name_3 = tmp_outline_return_value_1;
    frame_d7575262369a5ba6708de1069e7e6096->m_frame.f_lineno = 763;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        type_description_1 = "oc";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7575262369a5ba6708de1069e7e6096 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7575262369a5ba6708de1069e7e6096 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d7575262369a5ba6708de1069e7e6096 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d7575262369a5ba6708de1069e7e6096, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d7575262369a5ba6708de1069e7e6096->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d7575262369a5ba6708de1069e7e6096, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d7575262369a5ba6708de1069e7e6096,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_d7575262369a5ba6708de1069e7e6096 == cache_frame_d7575262369a5ba6708de1069e7e6096 )
    {
        Py_DECREF( frame_d7575262369a5ba6708de1069e7e6096 );
    }
    cache_frame_d7575262369a5ba6708de1069e7e6096 = NULL;

    assertFrameObject( frame_d7575262369a5ba6708de1069e7e6096 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_44_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_eval_ctx );
    Py_DECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_44_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$function_44_as_const$$$genexpr_1_genexpr_locals {
    PyObject *var_x
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$function_44_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$function_44_as_const$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_x = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_source_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_b9d1b1737c9725adfb4149be4d4ba085, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[1] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "Noc";
            exception_lineno = 763;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_x;
        var_x = tmp_assign_source_2;
        Py_INCREF( var_x );
        Py_XDECREF( old );
    }

    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_text_type );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_text_type );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "text_type" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 763;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }

    tmp_source_name_1 = var_x;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( generator->m_closure[0] == NULL )
    {
        tmp_args_element_name_2 = NULL;
    }
    else
    {
        tmp_args_element_name_2 = PyCell_GET( generator->m_closure[0] );
    }

    if ( tmp_args_element_name_2 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 763;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }

    generator->m_frame->m_frame.f_lineno = 763;
    {
        PyObject *call_args[] = { tmp_args_element_name_2 };
        tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_args_element_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    generator->m_frame->m_frame.f_lineno = 763;
    {
        PyObject *call_args[] = { tmp_args_element_name_1 };
        tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
    }

    Py_DECREF( tmp_args_element_name_1 );
    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 763;
        type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_x,
            generator->m_closure[0]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_x );
    var_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_45_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *var_result = NULL;
    PyObject *var_value = NULL;
    PyObject *var_op = NULL;
    PyObject *var_new_value = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_right_1;
    int tmp_exc_match_exception_match_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_raise_type_1;
    bool tmp_result;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscript_name_1;
    static struct Nuitka_FrameObject *cache_frame_b940fb0a3f5d2693ea508b9a6f8abb63 = NULL;

    struct Nuitka_FrameObject *frame_b940fb0a3f5d2693ea508b9a6f8abb63;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b940fb0a3f5d2693ea508b9a6f8abb63, codeobj_b940fb0a3f5d2693ea508b9a6f8abb63, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b940fb0a3f5d2693ea508b9a6f8abb63 = cache_frame_b940fb0a3f5d2693ea508b9a6f8abb63;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b940fb0a3f5d2693ea508b9a6f8abb63 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b940fb0a3f5d2693ea508b9a6f8abb63 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 773;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_b940fb0a3f5d2693ea508b9a6f8abb63->m_frame.f_lineno = 773;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 773;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    // Tried code:
    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 774;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_expr );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 774;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 774;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 774;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }

    frame_b940fb0a3f5d2693ea508b9a6f8abb63->m_frame.f_lineno = 774;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 774;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    assert( tmp_assign_unpack_1__assign_source == NULL );
    tmp_assign_unpack_1__assign_source = tmp_assign_source_2;

    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    tmp_assign_source_3 = tmp_assign_unpack_1__assign_source;

    CHECK_OBJECT( tmp_assign_source_3 );
    assert( var_result == NULL );
    Py_INCREF( tmp_assign_source_3 );
    var_result = tmp_assign_source_3;

    tmp_assign_source_4 = tmp_assign_unpack_1__assign_source;

    CHECK_OBJECT( tmp_assign_source_4 );
    assert( var_value == NULL );
    Py_INCREF( tmp_assign_source_4 );
    var_value = tmp_assign_source_4;

    CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
    Py_DECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    // Tried code:
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 776;
        type_description_1 = "oooooo";
        goto try_except_handler_3;
    }

    tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_ops );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 776;
        type_description_1 = "oooooo";
        goto try_except_handler_3;
    }
    tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 776;
        type_description_1 = "oooooo";
        goto try_except_handler_3;
    }
    assert( tmp_for_loop_1__for_iterator == NULL );
    tmp_for_loop_1__for_iterator = tmp_assign_source_5;

    // Tried code:
    loop_start_1:;
    tmp_next_source_1 = tmp_for_loop_1__for_iterator;

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_6 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_6 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooo";
            exception_lineno = 776;
            goto try_except_handler_4;
        }
    }

    {
        PyObject *old = tmp_for_loop_1__iter_value;
        tmp_for_loop_1__iter_value = tmp_assign_source_6;
        Py_XDECREF( old );
    }

    tmp_assign_source_7 = tmp_for_loop_1__iter_value;

    CHECK_OBJECT( tmp_assign_source_7 );
    {
        PyObject *old = var_op;
        var_op = tmp_assign_source_7;
        Py_INCREF( var_op );
        Py_XDECREF( old );
    }

    tmp_source_name_5 = var_op;

    CHECK_OBJECT( tmp_source_name_5 );
    tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_expr );
    if ( tmp_source_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 777;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_4 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 777;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 777;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }

    frame_b940fb0a3f5d2693ea508b9a6f8abb63->m_frame.f_lineno = 777;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 777;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_new_value;
        var_new_value = tmp_assign_source_8;
        Py_XDECREF( old );
    }

    tmp_subscribed_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__cmpop_to_func );

    if (unlikely( tmp_subscribed_name_1 == NULL ))
    {
        tmp_subscribed_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__cmpop_to_func );
    }

    if ( tmp_subscribed_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_cmpop_to_func" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 778;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }

    tmp_source_name_6 = var_op;

    if ( tmp_source_name_6 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "op" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 778;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }

    tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_op );
    if ( tmp_subscript_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 778;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    tmp_called_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    Py_DECREF( tmp_subscript_name_1 );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 778;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    tmp_args_element_name_5 = var_value;

    if ( tmp_args_element_name_5 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "value" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 778;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }

    tmp_args_element_name_6 = var_new_value;

    if ( tmp_args_element_name_6 == NULL )
    {
        Py_DECREF( tmp_called_name_4 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "new_value" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 778;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }

    frame_b940fb0a3f5d2693ea508b9a6f8abb63->m_frame.f_lineno = 778;
    {
        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
        tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
    }

    Py_DECREF( tmp_called_name_4 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 778;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    {
        PyObject *old = var_result;
        var_result = tmp_assign_source_9;
        Py_XDECREF( old );
    }

    tmp_assign_source_10 = var_new_value;

    if ( tmp_assign_source_10 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "new_value" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 779;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }

    {
        PyObject *old = var_value;
        var_value = tmp_assign_source_10;
        Py_INCREF( var_value );
        Py_XDECREF( old );
    }

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 776;
        type_description_1 = "oooooo";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = PyThreadState_GET()->exc_type;
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = PyThreadState_GET()->exc_value;
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)PyThreadState_GET()->exc_traceback;
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_b940fb0a3f5d2693ea508b9a6f8abb63, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_b940fb0a3f5d2693ea508b9a6f8abb63, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    tmp_compare_left_1 = PyThreadState_GET()->exc_type;
    tmp_compare_right_1 = PyExc_Exception;
    tmp_exc_match_exception_match_1 = EXCEPTION_MATCH_BOOL( tmp_compare_left_1, tmp_compare_right_1 );
    if ( tmp_exc_match_exception_match_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 780;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    if ( tmp_exc_match_exception_match_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_5 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_5 == NULL ))
    {
        tmp_called_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_5 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 781;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }

    frame_b940fb0a3f5d2693ea508b9a6f8abb63->m_frame.f_lineno = 781;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 781;
        type_description_1 = "oooooo";
        goto try_except_handler_5;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 781;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oooooo";
    goto try_except_handler_5;
    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 775;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_b940fb0a3f5d2693ea508b9a6f8abb63->m_frame) frame_b940fb0a3f5d2693ea508b9a6f8abb63->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooo";
    goto try_except_handler_5;
    branch_end_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_45_as_const );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    Py_XDECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = var_result;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "result" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 782;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_b940fb0a3f5d2693ea508b9a6f8abb63 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 1
    RESTORE_FRAME_EXCEPTION( frame_b940fb0a3f5d2693ea508b9a6f8abb63 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION( frame_b940fb0a3f5d2693ea508b9a6f8abb63 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b940fb0a3f5d2693ea508b9a6f8abb63, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b940fb0a3f5d2693ea508b9a6f8abb63->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b940fb0a3f5d2693ea508b9a6f8abb63, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b940fb0a3f5d2693ea508b9a6f8abb63,
        type_description_1,
        par_self,
        par_eval_ctx,
        var_result,
        var_value,
        var_op,
        var_new_value
    );


    // Release cached frame.
    if ( frame_b940fb0a3f5d2693ea508b9a6f8abb63 == cache_frame_b940fb0a3f5d2693ea508b9a6f8abb63 )
    {
        Py_DECREF( frame_b940fb0a3f5d2693ea508b9a6f8abb63 );
    }
    cache_frame_b940fb0a3f5d2693ea508b9a6f8abb63 = NULL;

    assertFrameObject( frame_b940fb0a3f5d2693ea508b9a6f8abb63 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_45_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_op );
    var_op = NULL;

    Py_XDECREF( var_new_value );
    var_new_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_op );
    var_op = NULL;

    Py_XDECREF( var_new_value );
    var_new_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_45_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}



#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
struct jinja2$nodes$$$genexpr_1_genexpr_locals {
    PyObject *var_x
    PyObject *tmp_iter_value_0
    PyObject *exception_type
    PyObject *exception_value
    PyTracebackObject *exception_tb
    int exception_lineno
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_right_name_1;
    char const *type_description_1
};
#endif

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
static PyObject *jinja2$nodes$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
#else
static void jinja2$nodes$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator )
#endif
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Local variable initialization
    PyObject *var_x = NULL;
    PyObject *tmp_iter_value_0 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_expression_name_1;
    PyObject *tmp_left_name_1;
    PyObject *tmp_next_source_1;
    PyObject *tmp_right_name_1;
    NUITKA_MAY_BE_UNUSED PyObject *tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_generator = NULL;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Dispatch to yield based on return label index:


    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_generator, codeobj_f95dd93b7501cf3b285dffef18fa9e57, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_frame_generator;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.

    PyThreadState *thread_state = PyThreadState_GET();

    generator->m_frame->m_frame.f_exc_type = thread_state->exc_type;
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = thread_state->exc_value;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = thread_state->exc_traceback;
    Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    if ( generator->m_closure[0] == NULL )
    {
        tmp_next_source_1 = NULL;
    }
    else
    {
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
    }

    CHECK_OBJECT( tmp_next_source_1 );
    tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
    if ( tmp_assign_source_1 == NULL )
    {
        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
        {

            goto loop_end_1;
        }
        else
        {

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "No";
            exception_lineno = 791;
            goto try_except_handler_2;
        }
    }

    {
        PyObject *old = tmp_iter_value_0;
        tmp_iter_value_0 = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_assign_source_2 = tmp_iter_value_0;

    CHECK_OBJECT( tmp_assign_source_2 );
    {
        PyObject *old = var_x;
        var_x = tmp_assign_source_2;
        Py_INCREF( var_x );
        Py_XDECREF( old );
    }

    tmp_left_name_1 = const_str_digest_f24f0d2d61a12ffb7f933692c0769883;
    tmp_right_name_1 = var_x;

    CHECK_OBJECT( tmp_right_name_1 );
    tmp_expression_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
    if ( tmp_expression_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    tmp_unused = GENERATOR_YIELD( generator, tmp_expression_name_1 );
    if ( tmp_unused == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;
        type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( exception_type ) )
    {
        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( generator->m_frame, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, generator->m_frame, exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            type_description_1,
            NULL,
            var_x
        );


        // Release cached frame.
        if ( generator->m_frame == cache_frame_generator )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_frame_generator = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );
    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_x );
    var_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_iter_value_0 );
    tmp_iter_value_0 = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;


#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

    function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

#if _NUITKA_EXPERIMENTAL_GENERATOR_GOTO
    return NULL;
#else
    generator->m_yielded = NULL;
    return;
#endif

}


static PyObject *impl_jinja2$nodes$$$function_46_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_and_left_truth_1;
    PyObject *tmp_and_left_value_1;
    PyObject *tmp_and_right_value_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    static struct Nuitka_FrameObject *cache_frame_705aee819612e8b5c0fc0b3a6656b9a5 = NULL;

    struct Nuitka_FrameObject *frame_705aee819612e8b5c0fc0b3a6656b9a5;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_705aee819612e8b5c0fc0b3a6656b9a5, codeobj_705aee819612e8b5c0fc0b3a6656b9a5, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_705aee819612e8b5c0fc0b3a6656b9a5 = cache_frame_705aee819612e8b5c0fc0b3a6656b9a5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_705aee819612e8b5c0fc0b3a6656b9a5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_705aee819612e8b5c0fc0b3a6656b9a5 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 837;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_705aee819612e8b5c0fc0b3a6656b9a5->m_frame.f_lineno = 837;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 837;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_left );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_705aee819612e8b5c0fc0b3a6656b9a5->m_frame.f_lineno = 838;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_and_left_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_and_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
    if ( tmp_and_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_and_left_value_1 );

        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    if ( tmp_and_left_truth_1 == 1 )
    {
        goto and_right_1;
    }
    else
    {
        goto and_left_1;
    }
    and_right_1:;
    Py_DECREF( tmp_and_left_value_1 );
    tmp_source_name_4 = par_self;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_right );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_705aee819612e8b5c0fc0b3a6656b9a5->m_frame.f_lineno = 838;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_and_right_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_and_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 838;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = tmp_and_right_value_1;
    goto and_end_1;
    and_left_1:;
    tmp_return_value = tmp_and_left_value_1;
    and_end_1:;
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_705aee819612e8b5c0fc0b3a6656b9a5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_705aee819612e8b5c0fc0b3a6656b9a5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_705aee819612e8b5c0fc0b3a6656b9a5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_705aee819612e8b5c0fc0b3a6656b9a5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_705aee819612e8b5c0fc0b3a6656b9a5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_705aee819612e8b5c0fc0b3a6656b9a5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_705aee819612e8b5c0fc0b3a6656b9a5,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_705aee819612e8b5c0fc0b3a6656b9a5 == cache_frame_705aee819612e8b5c0fc0b3a6656b9a5 )
    {
        Py_DECREF( frame_705aee819612e8b5c0fc0b3a6656b9a5 );
    }
    cache_frame_705aee819612e8b5c0fc0b3a6656b9a5 = NULL;

    assertFrameObject( frame_705aee819612e8b5c0fc0b3a6656b9a5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_46_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_46_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_47_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    int tmp_or_left_truth_1;
    PyObject *tmp_or_left_value_1;
    PyObject *tmp_or_right_value_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    static struct Nuitka_FrameObject *cache_frame_e179244e0084b1b4277f4caf265cd432 = NULL;

    struct Nuitka_FrameObject *frame_e179244e0084b1b4277f4caf265cd432;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e179244e0084b1b4277f4caf265cd432, codeobj_e179244e0084b1b4277f4caf265cd432, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_e179244e0084b1b4277f4caf265cd432 = cache_frame_e179244e0084b1b4277f4caf265cd432;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e179244e0084b1b4277f4caf265cd432 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e179244e0084b1b4277f4caf265cd432 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 846;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_e179244e0084b1b4277f4caf265cd432->m_frame.f_lineno = 846;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 846;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_left );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_2 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_e179244e0084b1b4277f4caf265cd432->m_frame.f_lineno = 847;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_or_left_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_called_name_2 );
    if ( tmp_or_left_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
    if ( tmp_or_left_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_or_left_value_1 );

        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    if ( tmp_or_left_truth_1 == 1 )
    {
        goto or_left_1;
    }
    else
    {
        goto or_right_1;
    }
    or_right_1:;
    Py_DECREF( tmp_or_left_value_1 );
    tmp_source_name_4 = par_self;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_right );
    if ( tmp_source_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_3 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_e179244e0084b1b4277f4caf265cd432->m_frame.f_lineno = 847;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_or_right_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_or_right_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 847;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_return_value = tmp_or_right_value_1;
    goto or_end_1;
    or_left_1:;
    tmp_return_value = tmp_or_left_value_1;
    or_end_1:;
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e179244e0084b1b4277f4caf265cd432 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e179244e0084b1b4277f4caf265cd432 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e179244e0084b1b4277f4caf265cd432 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e179244e0084b1b4277f4caf265cd432, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e179244e0084b1b4277f4caf265cd432->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e179244e0084b1b4277f4caf265cd432, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e179244e0084b1b4277f4caf265cd432,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_e179244e0084b1b4277f4caf265cd432 == cache_frame_e179244e0084b1b4277f4caf265cd432 )
    {
        Py_DECREF( frame_e179244e0084b1b4277f4caf265cd432 );
    }
    cache_frame_e179244e0084b1b4277f4caf265cd432 = NULL;

    assertFrameObject( frame_e179244e0084b1b4277f4caf265cd432 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_47_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_47_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_48___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    static struct Nuitka_FrameObject *cache_frame_29ad3f2c35fee39dc5b7dd66d5d27315 = NULL;

    struct Nuitka_FrameObject *frame_29ad3f2c35fee39dc5b7dd66d5d27315;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_29ad3f2c35fee39dc5b7dd66d5d27315, codeobj_29ad3f2c35fee39dc5b7dd66d5d27315, module_jinja2$nodes, sizeof(void *) );
    frame_29ad3f2c35fee39dc5b7dd66d5d27315 = cache_frame_29ad3f2c35fee39dc5b7dd66d5d27315;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_29ad3f2c35fee39dc5b7dd66d5d27315 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_29ad3f2c35fee39dc5b7dd66d5d27315 ) == 2 ); // Frame stack

    // Framed code:
    tmp_make_exception_arg_1 = const_str_digest_7ce06fe189898c976a03a3c14041aa56;
    frame_29ad3f2c35fee39dc5b7dd66d5d27315->m_frame.f_lineno = 904;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 904;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "o";
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_29ad3f2c35fee39dc5b7dd66d5d27315 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_29ad3f2c35fee39dc5b7dd66d5d27315 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_29ad3f2c35fee39dc5b7dd66d5d27315, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_29ad3f2c35fee39dc5b7dd66d5d27315->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_29ad3f2c35fee39dc5b7dd66d5d27315, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_29ad3f2c35fee39dc5b7dd66d5d27315,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_29ad3f2c35fee39dc5b7dd66d5d27315 == cache_frame_29ad3f2c35fee39dc5b7dd66d5d27315 )
    {
        Py_DECREF( frame_29ad3f2c35fee39dc5b7dd66d5d27315 );
    }
    cache_frame_29ad3f2c35fee39dc5b7dd66d5d27315 = NULL;

    assertFrameObject( frame_29ad3f2c35fee39dc5b7dd66d5d27315 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_48___init__ );
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_48___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

}


static PyObject *impl_jinja2$nodes$$$function_49_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    static struct Nuitka_FrameObject *cache_frame_f56a18120b5a9a2cf4e25929a30357a2 = NULL;

    struct Nuitka_FrameObject *frame_f56a18120b5a9a2cf4e25929a30357a2;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f56a18120b5a9a2cf4e25929a30357a2, codeobj_f56a18120b5a9a2cf4e25929a30357a2, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_f56a18120b5a9a2cf4e25929a30357a2 = cache_frame_f56a18120b5a9a2cf4e25929a30357a2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f56a18120b5a9a2cf4e25929a30357a2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f56a18120b5a9a2cf4e25929a30357a2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 913;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_f56a18120b5a9a2cf4e25929a30357a2->m_frame.f_lineno = 913;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 913;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Markup );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Markup );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Markup" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 914;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = par_self;

    if ( tmp_source_name_2 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 914;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_expr );
    if ( tmp_source_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 914;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_1 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 914;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_4 = par_eval_ctx;

    if ( tmp_args_element_name_4 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 914;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

    frame_f56a18120b5a9a2cf4e25929a30357a2->m_frame.f_lineno = 914;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_args_element_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 914;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    frame_f56a18120b5a9a2cf4e25929a30357a2->m_frame.f_lineno = 914;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
    }

    Py_DECREF( tmp_args_element_name_3 );
    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 914;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f56a18120b5a9a2cf4e25929a30357a2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f56a18120b5a9a2cf4e25929a30357a2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f56a18120b5a9a2cf4e25929a30357a2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f56a18120b5a9a2cf4e25929a30357a2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f56a18120b5a9a2cf4e25929a30357a2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f56a18120b5a9a2cf4e25929a30357a2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f56a18120b5a9a2cf4e25929a30357a2,
        type_description_1,
        par_self,
        par_eval_ctx
    );


    // Release cached frame.
    if ( frame_f56a18120b5a9a2cf4e25929a30357a2 == cache_frame_f56a18120b5a9a2cf4e25929a30357a2 )
    {
        Py_DECREF( frame_f56a18120b5a9a2cf4e25929a30357a2 );
    }
    cache_frame_f56a18120b5a9a2cf4e25929a30357a2 = NULL;

    assertFrameObject( frame_f56a18120b5a9a2cf4e25929a30357a2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_49_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_49_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_50_as_const( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_eval_ctx = python_pars[ 1 ];
    PyObject *var_expr = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_raise_type_1;
    PyObject *tmp_return_value;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    static struct Nuitka_FrameObject *cache_frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 = NULL;

    struct Nuitka_FrameObject *frame_4f7d2bac1b6f8901aac5836ae9d8f6a4;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    tmp_return_value = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4f7d2bac1b6f8901aac5836ae9d8f6a4, codeobj_4f7d2bac1b6f8901aac5836ae9d8f6a4, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 = cache_frame_4f7d2bac1b6f8901aac5836ae9d8f6a4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 ) == 2 ); // Frame stack

    // Framed code:
    tmp_called_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context );

    if (unlikely( tmp_called_name_1 == NULL ))
    {
        tmp_called_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_get_eval_context );
    }

    if ( tmp_called_name_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "get_eval_context" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 926;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_1 = par_self;

    CHECK_OBJECT( tmp_args_element_name_1 );
    tmp_args_element_name_2 = par_eval_ctx;

    CHECK_OBJECT( tmp_args_element_name_2 );
    frame_4f7d2bac1b6f8901aac5836ae9d8f6a4->m_frame.f_lineno = 926;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 926;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    {
        PyObject *old = par_eval_ctx;
        par_eval_ctx = tmp_assign_source_1;
        Py_XDECREF( old );
    }

    tmp_source_name_1 = par_eval_ctx;

    CHECK_OBJECT( tmp_source_name_1 );
    tmp_cond_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_volatile );
    if ( tmp_cond_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 927;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_1 );

        exception_lineno = 927;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_called_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible );

    if (unlikely( tmp_called_name_2 == NULL ))
    {
        tmp_called_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Impossible );
    }

    if ( tmp_called_name_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Impossible" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 928;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_4f7d2bac1b6f8901aac5836ae9d8f6a4->m_frame.f_lineno = 928;
    tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
    if ( tmp_raise_type_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 928;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    exception_type = tmp_raise_type_1;
    exception_lineno = 928;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "ooo";
    goto frame_exception_exit_1;
    branch_no_1:;
    tmp_source_name_3 = par_self;

    if ( tmp_source_name_3 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "self" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 929;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_expr );
    if ( tmp_source_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 929;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_as_const );
    Py_DECREF( tmp_source_name_2 );
    if ( tmp_called_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 929;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_args_element_name_3 = par_eval_ctx;

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_called_name_3 );
        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 929;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_4f7d2bac1b6f8901aac5836ae9d8f6a4->m_frame.f_lineno = 929;
    {
        PyObject *call_args[] = { tmp_args_element_name_3 };
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
    }

    Py_DECREF( tmp_called_name_3 );
    if ( tmp_assign_source_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 929;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    assert( var_expr == NULL );
    var_expr = tmp_assign_source_2;

    tmp_source_name_4 = par_eval_ctx;

    if ( tmp_source_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "eval_ctx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 930;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_cond_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_autoescape );
    if ( tmp_cond_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 930;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_cond_value_2 );

        exception_lineno = 930;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_called_name_4 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Markup );

    if (unlikely( tmp_called_name_4 == NULL ))
    {
        tmp_called_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Markup );
    }

    if ( tmp_called_name_4 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Markup" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 931;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_args_element_name_4 = var_expr;

    if ( tmp_args_element_name_4 == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 931;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    frame_4f7d2bac1b6f8901aac5836ae9d8f6a4->m_frame.f_lineno = 931;
    {
        PyObject *call_args[] = { tmp_args_element_name_4 };
        tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
    }

    if ( tmp_return_value == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 931;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto frame_return_exit_1;
    branch_no_2:;
    tmp_return_value = var_expr;

    if ( tmp_return_value == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 932;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4f7d2bac1b6f8901aac5836ae9d8f6a4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4f7d2bac1b6f8901aac5836ae9d8f6a4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4f7d2bac1b6f8901aac5836ae9d8f6a4,
        type_description_1,
        par_self,
        par_eval_ctx,
        var_expr
    );


    // Release cached frame.
    if ( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 == cache_frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 )
    {
        Py_DECREF( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 );
    }
    cache_frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 = NULL;

    assertFrameObject( frame_4f7d2bac1b6f8901aac5836ae9d8f6a4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_50_as_const );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_expr );
    var_expr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_eval_ctx );
    par_eval_ctx = NULL;

    Py_XDECREF( var_expr );
    var_expr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_50_as_const );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;
    function_return_exit:

    CHECK_OBJECT( tmp_return_value );
    assert( had_error || !ERROR_OCCURRED() );
    return tmp_return_value;

}


static PyObject *impl_jinja2$nodes$$$function_51__failing_new( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[ 0 ];
    PyObject *par_kwargs = python_pars[ 1 ];
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_make_exception_arg_1;
    PyObject *tmp_raise_type_1;
    static struct Nuitka_FrameObject *cache_frame_e44d23bfe7f61a0c79e9edc4aa040ac1 = NULL;

    struct Nuitka_FrameObject *frame_e44d23bfe7f61a0c79e9edc4aa040ac1;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;

    // Actual function code.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e44d23bfe7f61a0c79e9edc4aa040ac1, codeobj_e44d23bfe7f61a0c79e9edc4aa040ac1, module_jinja2$nodes, sizeof(void *)+sizeof(void *) );
    frame_e44d23bfe7f61a0c79e9edc4aa040ac1 = cache_frame_e44d23bfe7f61a0c79e9edc4aa040ac1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e44d23bfe7f61a0c79e9edc4aa040ac1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e44d23bfe7f61a0c79e9edc4aa040ac1 ) == 2 ); // Frame stack

    // Framed code:
    tmp_make_exception_arg_1 = const_str_digest_1ef543176b23d2e7a74fa9a1713c8954;
    frame_e44d23bfe7f61a0c79e9edc4aa040ac1->m_frame.f_lineno = 998;
    {
        PyObject *call_args[] = { tmp_make_exception_arg_1 };
        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
    }

    assert( tmp_raise_type_1 != NULL );
    exception_type = tmp_raise_type_1;
    exception_lineno = 998;
    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
    type_description_1 = "oo";
    goto frame_exception_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e44d23bfe7f61a0c79e9edc4aa040ac1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e44d23bfe7f61a0c79e9edc4aa040ac1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e44d23bfe7f61a0c79e9edc4aa040ac1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e44d23bfe7f61a0c79e9edc4aa040ac1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e44d23bfe7f61a0c79e9edc4aa040ac1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e44d23bfe7f61a0c79e9edc4aa040ac1,
        type_description_1,
        par_args,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_e44d23bfe7f61a0c79e9edc4aa040ac1 == cache_frame_e44d23bfe7f61a0c79e9edc4aa040ac1 )
    {
        Py_DECREF( frame_e44d23bfe7f61a0c79e9edc4aa040ac1 );
    }
    cache_frame_e44d23bfe7f61a0c79e9edc4aa040ac1 = NULL;

    assertFrameObject( frame_e44d23bfe7f61a0c79e9edc4aa040ac1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;

    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_51__failing_new );
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    Py_XDECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes$$$function_51__failing_new );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_10_iter_child_nodes( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_10_iter_child_nodes,
        const_str_plain_iter_child_nodes,
#if PYTHON_VERSION >= 330
        const_str_digest_7827295ccf1d1a35c3b8d70c52b35a4e,
#endif
        codeobj_f822cdb4add7475dab19a608d124b318,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_080725e57cfe09bac83bef042d6ec2c0,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_11_find(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_11_find,
        const_str_plain_find,
#if PYTHON_VERSION >= 330
        const_str_digest_0c85c04508f6327eca689634a71355c0,
#endif
        codeobj_b1226f368853cb2b9944568040ccfeba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_8b995823d5fc8c89069764d298740c71,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_12_find_all(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_12_find_all,
        const_str_plain_find_all,
#if PYTHON_VERSION >= 330
        const_str_digest_a66f482eac6a31b80de103ecefcb560b,
#endif
        codeobj_23c72015dc97b7d37e07927b829f71ef,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_82ad5b90956fdb9d776a160d5f2abbe8,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_13_set_ctx(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_13_set_ctx,
        const_str_plain_set_ctx,
#if PYTHON_VERSION >= 330
        const_str_digest_1db01a7e1949a287f12cf968128329d7,
#endif
        codeobj_89d921f056eaad4ab7942f34e757335d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_078fffba1ab83fa8ba0083a9c3d74edf,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_14_set_lineno( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_14_set_lineno,
        const_str_plain_set_lineno,
#if PYTHON_VERSION >= 330
        const_str_digest_04d80127de7cd6f0d2bb0f6f54a3cb79,
#endif
        codeobj_dc322f8ad2d8817bbadbbfe5b664b6f7,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_c85072b41b83fc5131ebdc308d14ed1b,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_15_set_environment(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_15_set_environment,
        const_str_plain_set_environment,
#if PYTHON_VERSION >= 330
        const_str_digest_9ad06085bb539d3c8b5f9e8dc4ddbcd1,
#endif
        codeobj_b3ddd603e8455ad39086b0cb84e6820d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_5d380c03eda83b830a98dd20cbb95ea6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_16___eq__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_16___eq__,
        const_str_plain___eq__,
#if PYTHON_VERSION >= 330
        const_str_digest_13f6f53a57732ccfbf74bec09e0ab9d8,
#endif
        codeobj_99b9ee7838f452579afa5c4e394e882a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_17___ne__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_17___ne__,
        const_str_plain___ne__,
#if PYTHON_VERSION >= 330
        const_str_digest_e797672dfeb66e79776047224f876ffc,
#endif
        codeobj_9d52e02e050a9e575027edeaccc56245,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_18___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_18___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 330
        const_str_digest_7ce947e0d12ef9f32e46c662f7408804,
#endif
        codeobj_278e4e59db527df69a98b98ba89b48a5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_19_dump(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_19_dump,
        const_str_plain_dump,
#if PYTHON_VERSION >= 330
        const_str_digest_7605151d55a47abf480956a78c7fdec8,
#endif
        codeobj_51e431057bf26b7e22d55b1f3a800e20,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_19_dump$$$function_1__dump( struct Nuitka_CellObject *closure__dump, struct Nuitka_CellObject *closure_buf )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_19_dump$$$function_1__dump,
        const_str_plain__dump,
#if PYTHON_VERSION >= 330
        const_str_digest_7bfa80dceef25576d6c9e691b5921d73,
#endif
        codeobj_102a01e0a48de28d5efc599f2a39ea85,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        2
    );

result->m_closure[0] = closure__dump;
Py_INCREF( result->m_closure[0] );
result->m_closure[1] = closure_buf;
Py_INCREF( result->m_closure[1] );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_1_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f2084a0075117ee259352ac476f52780,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_20_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_20_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_aff0abde118742498abcfb37daca5cf1,
#endif
        codeobj_d7dc66b75f8d3a98e35720c2691735ea,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_e1f7043972de37584b4f7cffc6aa47a6,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_21_can_assign(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_21_can_assign,
        const_str_plain_can_assign,
#if PYTHON_VERSION >= 330
        const_str_digest_6f8723fa6e9b819ccdb2cdd550a2f1fd,
#endif
        codeobj_3142b51d5e5825541b831b22f5a9dfae,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_d7d129e7ee6a5579b086ac1210e32f6d,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_22_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_22_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_23d59ecd28baf66326d8bffa4a30f963,
#endif
        codeobj_d9737828a17fcde3b57f6d40b2fbad0b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_23_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_23_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_179bd4451cd6c7cae43bb732032e8fe2,
#endif
        codeobj_f5ff27e2ea1f2aa503eacc0fecfa0d47,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_24_can_assign(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_24_can_assign,
        const_str_plain_can_assign,
#if PYTHON_VERSION >= 330
        const_str_digest_614dd9d449339ae9c67e653f60e76ee9,
#endif
        codeobj_58561bdffed2ee816405185f93aa0666,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_25_can_assign(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_25_can_assign,
        const_str_plain_can_assign,
#if PYTHON_VERSION >= 330
        const_str_digest_8d386ed28e6d3cbb9633c4e8c974cc26,
#endif
        codeobj_ac795912c01e9e0b91fcd1ecffa504e1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_26_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_26_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_9e185a50d3143e0445910a9a8c2d40e9,
#endif
        codeobj_bf39e0dc8420d92cc8aad1f03d26f179,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_27_from_untrusted( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_27_from_untrusted,
        const_str_plain_from_untrusted,
#if PYTHON_VERSION >= 330
        const_str_digest_437d34f877389138c34928ec1dfd0227,
#endif
        codeobj_854ad9d2aec1b8cc8462728eeea7120f,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_a2d4d3c49cf679dedd19d5ac5757ad39,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_28_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_28_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_bfa32c8e54fe979968d4c0c2597e4cd9,
#endif
        codeobj_bea24df8701d1d802de59ad0c7cdf4b3,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_29_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_29_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_ee48227349a09fdbcf1c4ba79c558779,
#endif
        codeobj_780c9e49ae131fc4ee0d381e967b53a9,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_2_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_2_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_533267860c0e3679f785a661171590b2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_30_can_assign(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_30_can_assign,
        const_str_plain_can_assign,
#if PYTHON_VERSION >= 330
        const_str_digest_9d26efa9da46a7c6988525f4bf1dc363,
#endif
        codeobj_d12f2f72ff9b47a0d0dafe7fc1d1989f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_31_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_31_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_90117f16312294e8b31ad692ca74733e,
#endif
        codeobj_e4d03815e1415a6436703e3dcdd6a026,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_32_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_32_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_40f6322b8c54e2a631a22f0cad68bbc1,
#endif
        codeobj_862898d8aca0bda2ef86bf89fdd56abe,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_33_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_33_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_52ffc572cc80d7fb4467e8bde7129e40,
#endif
        codeobj_7a2ecb36cfdd4783c9a22ef0d7e265b1,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_34_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_34_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_e3f9ba139273c154f4cf545268c54001,
#endif
        codeobj_4b67baec8b1fba840791cfca1fa852a0,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_35_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_35_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_4cd8030e215c61a4db3d457280fabf87,
#endif
        codeobj_9477f0c9c32c14c35b9205d2b4a4e0ae,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_36_args_as_const(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_36_args_as_const,
        const_str_plain_args_as_const,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_62e7b186ed6fb9ab7cb52536ebb130aa,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_37_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_37_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_25136860d008ccc67956b0ab8b23d3a3,
#endif
        codeobj_2aa1f4319600a61dff1150ee998bcb4f,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_38_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_38_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_c89b6762e2fbfd3057435d424c4947d0,
#endif
        codeobj_543dce0aaebbad3afc9fe9a73e540ccc,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_39_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_39_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_b18e2494f37a01ed6b4aec008b396c1a,
#endif
        codeobj_8f0d619d320e9573d2b55229dc3a58ff,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_3___new__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_3___new__,
        const_str_plain___new__,
#if PYTHON_VERSION >= 330
        const_str_digest_e66d5d90f3cfbb6f1c300980eaa064f2,
#endif
        codeobj_8fb5b450ba8c53f4343ad96236cef1a3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_40_can_assign(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_40_can_assign,
        const_str_plain_can_assign,
#if PYTHON_VERSION >= 330
        const_str_digest_31aac5220761c2bcb9b9206343d3b20f,
#endif
        codeobj_ffad158b70c73458b92539fa1aec417b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_41_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_41_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_e592c4a2ffca3524958806f6a552fc64,
#endif
        codeobj_67d639c3786e507c69de01480973c34d,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_42_can_assign(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_42_can_assign,
        const_str_plain_can_assign,
#if PYTHON_VERSION >= 330
        const_str_digest_2cebed3d292fcb9f12e9f1f991056630,
#endif
        codeobj_d84a952992c3e05cba23996714ebb5eb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_43_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_43_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_bbeb099f42d8fe01e00dfc907ed7f617,
#endif
        codeobj_1f8bf388eb3290039659cd9beceb5eaa,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_43_as_const$$$function_1_const( struct Nuitka_CellObject *closure_eval_ctx )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_43_as_const$$$function_1_const,
        const_str_plain_const,
#if PYTHON_VERSION >= 330
        const_str_digest_f01a271dd9e266380ecd5270d1ea6d65,
#endif
        codeobj_d7eb6128479dde4ed49ff7186d8ca696,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        1
    );

result->m_closure[0] = closure_eval_ctx;
Py_INCREF( result->m_closure[0] );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_44_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_44_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_aa123e7d99689cc7b3ce83e139c6d754,
#endif
        codeobj_d7575262369a5ba6708de1069e7e6096,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_45_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_45_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_31e7c9d9d00fdc949ed6b2a1e884129d,
#endif
        codeobj_b940fb0a3f5d2693ea508b9a6f8abb63,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_46_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_46_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_1b51e54a79422c06d441fd9d629f0442,
#endif
        codeobj_705aee819612e8b5c0fc0b3a6656b9a5,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_47_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_47_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_462f18509bc45590e3052f7f9d4dcf9d,
#endif
        codeobj_e179244e0084b1b4277f4caf265cd432,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_48___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_48___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        const_str_digest_2155a363578f790ff076e2fb4ba00f28,
#endif
        codeobj_29ad3f2c35fee39dc5b7dd66d5d27315,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_49_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_49_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_8362f750add64e017837c7197fbbdddc,
#endif
        codeobj_f56a18120b5a9a2cf4e25929a30357a2,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_4___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_4___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        const_str_digest_a7615ef201e97f33738f0841b1a755b3,
#endif
        codeobj_f00a477a2acb370ec058c09e4e0980bd,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_50_as_const( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_50_as_const,
        const_str_plain_as_const,
#if PYTHON_VERSION >= 330
        const_str_digest_4dc97139913cc5dbab53325e16cd937c,
#endif
        codeobj_4f7d2bac1b6f8901aac5836ae9d8f6a4,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_51__failing_new(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_51__failing_new,
        const_str_plain__failing_new,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e44d23bfe7f61a0c79e9edc4aa040ac1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_5_save(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_5_save,
        const_str_plain_save,
#if PYTHON_VERSION >= 330
        const_str_digest_35e49d69578b22d3ac5149339539df84,
#endif
        codeobj_6cedafff24958868f1a65ddd6b887dba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_6_revert(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_6_revert,
        const_str_plain_revert,
#if PYTHON_VERSION >= 330
        const_str_digest_ab23fc444956a1e022e0390c9e5ee095,
#endif
        codeobj_8ee3a7db93606454f73f584dc34b097a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_7_get_eval_context(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_7_get_eval_context,
        const_str_plain_get_eval_context,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6552d6edbde27a46c1cc51f0aaad601a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_8___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_8___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        const_str_digest_54a1b7987965ea2b354fce1527b089d1,
#endif
        codeobj_1448c8a5a6f6deef8f94156dd2b3eda1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        Py_None,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_jinja2$nodes$$$function_9_iter_fields( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_jinja2$nodes$$$function_9_iter_fields,
        const_str_plain_iter_fields,
#if PYTHON_VERSION >= 330
        const_str_digest_5e05da3af0295c94257c0204d091460a,
#endif
        codeobj_807a626cdf816099591efb57c5ec52a8,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        const_dict_empty,
#endif
        module_jinja2$nodes,
        const_str_digest_60efb76ccf12c2b2d02ba86e5583e718,
        0
    );


    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_jinja2$nodes =
{
    PyModuleDef_HEAD_INIT,
    "jinja2.nodes",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#if PYTHON_VERSION >= 300
extern PyObject *metapath_based_loader;
#endif
#if PYTHON_VERSION >= 330
extern PyObject *const_str_plain___loader__;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( jinja2$nodes )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_jinja2$nodes );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("jinja2.nodes: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("jinja2.nodes: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initjinja2$nodes" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_jinja2$nodes = Py_InitModule4(
        "jinja2.nodes",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_jinja2$nodes = PyModule_Create( &mdef_jinja2$nodes );
#endif

    moduledict_jinja2$nodes = MODULE_DICT( module_jinja2$nodes );

    CHECK_OBJECT( module_jinja2$nodes );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_digest_005141ca847cd8ae4dc5440e26e0c367, module_jinja2$nodes );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 330
    UPDATE_STRING_DICT0( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___loader__, metapath_based_loader );
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_0_var___qualname__ = NULL;
    PyObject *outline_0_var___module__ = NULL;
    PyObject *outline_0_var___doc__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_1_var___qualname__ = NULL;
    PyObject *outline_1_var___module__ = NULL;
    PyObject *outline_1_var___doc__ = NULL;
    PyObject *outline_1_var___new__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_2_var___qualname__ = NULL;
    PyObject *outline_2_var___module__ = NULL;
    PyObject *outline_2_var___doc__ = NULL;
    PyObject *outline_2_var___init__ = NULL;
    PyObject *outline_2_var_save = NULL;
    PyObject *outline_2_var_revert = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_3_var___qualname__ = NULL;
    PyObject *outline_3_var___module__ = NULL;
    PyObject *outline_3_var___doc__ = NULL;
    PyObject *outline_3_var_fields = NULL;
    PyObject *outline_3_var_attributes = NULL;
    PyObject *outline_3_var_abstract = NULL;
    PyObject *outline_3_var___init__ = NULL;
    PyObject *outline_3_var_iter_fields = NULL;
    PyObject *outline_3_var_iter_child_nodes = NULL;
    PyObject *outline_3_var_find = NULL;
    PyObject *outline_3_var_find_all = NULL;
    PyObject *outline_3_var_set_ctx = NULL;
    PyObject *outline_3_var_set_lineno = NULL;
    PyObject *outline_3_var_set_environment = NULL;
    PyObject *outline_3_var___eq__ = NULL;
    PyObject *outline_3_var___ne__ = NULL;
    PyObject *outline_3_var___hash__ = NULL;
    PyObject *outline_3_var___repr__ = NULL;
    PyObject *outline_3_var_dump = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_4_var___qualname__ = NULL;
    PyObject *outline_4_var___module__ = NULL;
    PyObject *outline_4_var___doc__ = NULL;
    PyObject *outline_4_var_abstract = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_5_var___qualname__ = NULL;
    PyObject *outline_5_var___module__ = NULL;
    PyObject *outline_5_var___doc__ = NULL;
    PyObject *outline_5_var_abstract = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_6_var___qualname__ = NULL;
    PyObject *outline_6_var___module__ = NULL;
    PyObject *outline_6_var___doc__ = NULL;
    PyObject *outline_6_var_fields = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_7_var___qualname__ = NULL;
    PyObject *outline_7_var___module__ = NULL;
    PyObject *outline_7_var___doc__ = NULL;
    PyObject *outline_7_var_fields = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_8_var___qualname__ = NULL;
    PyObject *outline_8_var___module__ = NULL;
    PyObject *outline_8_var___doc__ = NULL;
    PyObject *outline_8_var_fields = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_9_var___qualname__ = NULL;
    PyObject *outline_9_var___module__ = NULL;
    PyObject *outline_9_var___doc__ = NULL;
    PyObject *outline_9_var_fields = NULL;
    PyObject *outline_10_var___class__ = NULL;
    PyObject *outline_10_var___qualname__ = NULL;
    PyObject *outline_10_var___module__ = NULL;
    PyObject *outline_10_var___doc__ = NULL;
    PyObject *outline_10_var_fields = NULL;
    PyObject *outline_11_var___class__ = NULL;
    PyObject *outline_11_var___qualname__ = NULL;
    PyObject *outline_11_var___module__ = NULL;
    PyObject *outline_11_var___doc__ = NULL;
    PyObject *outline_11_var_fields = NULL;
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_12_var___qualname__ = NULL;
    PyObject *outline_12_var___module__ = NULL;
    PyObject *outline_12_var___doc__ = NULL;
    PyObject *outline_12_var_fields = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_13_var___qualname__ = NULL;
    PyObject *outline_13_var___module__ = NULL;
    PyObject *outline_13_var___doc__ = NULL;
    PyObject *outline_13_var_fields = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_14_var___qualname__ = NULL;
    PyObject *outline_14_var___module__ = NULL;
    PyObject *outline_14_var___doc__ = NULL;
    PyObject *outline_14_var_fields = NULL;
    PyObject *outline_15_var___class__ = NULL;
    PyObject *outline_15_var___qualname__ = NULL;
    PyObject *outline_15_var___module__ = NULL;
    PyObject *outline_15_var___doc__ = NULL;
    PyObject *outline_15_var_fields = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_16_var___qualname__ = NULL;
    PyObject *outline_16_var___module__ = NULL;
    PyObject *outline_16_var___doc__ = NULL;
    PyObject *outline_16_var_fields = NULL;
    PyObject *outline_17_var___class__ = NULL;
    PyObject *outline_17_var___qualname__ = NULL;
    PyObject *outline_17_var___module__ = NULL;
    PyObject *outline_17_var___doc__ = NULL;
    PyObject *outline_17_var_fields = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_18_var___qualname__ = NULL;
    PyObject *outline_18_var___module__ = NULL;
    PyObject *outline_18_var___doc__ = NULL;
    PyObject *outline_18_var_fields = NULL;
    PyObject *outline_19_var___class__ = NULL;
    PyObject *outline_19_var___qualname__ = NULL;
    PyObject *outline_19_var___module__ = NULL;
    PyObject *outline_19_var___doc__ = NULL;
    PyObject *outline_19_var_fields = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_20_var___qualname__ = NULL;
    PyObject *outline_20_var___module__ = NULL;
    PyObject *outline_20_var___doc__ = NULL;
    PyObject *outline_20_var_fields = NULL;
    PyObject *outline_21_var___class__ = NULL;
    PyObject *outline_21_var___qualname__ = NULL;
    PyObject *outline_21_var___module__ = NULL;
    PyObject *outline_21_var___doc__ = NULL;
    PyObject *outline_21_var_fields = NULL;
    PyObject *outline_22_var___class__ = NULL;
    PyObject *outline_22_var___qualname__ = NULL;
    PyObject *outline_22_var___module__ = NULL;
    PyObject *outline_22_var___doc__ = NULL;
    PyObject *outline_22_var_abstract = NULL;
    PyObject *outline_22_var_as_const = NULL;
    PyObject *outline_22_var_can_assign = NULL;
    PyObject *outline_23_var___class__ = NULL;
    PyObject *outline_23_var___qualname__ = NULL;
    PyObject *outline_23_var___module__ = NULL;
    PyObject *outline_23_var___doc__ = NULL;
    PyObject *outline_23_var_fields = NULL;
    PyObject *outline_23_var_operator = NULL;
    PyObject *outline_23_var_abstract = NULL;
    PyObject *outline_23_var_as_const = NULL;
    PyObject *outline_24_var___class__ = NULL;
    PyObject *outline_24_var___qualname__ = NULL;
    PyObject *outline_24_var___module__ = NULL;
    PyObject *outline_24_var___doc__ = NULL;
    PyObject *outline_24_var_fields = NULL;
    PyObject *outline_24_var_operator = NULL;
    PyObject *outline_24_var_abstract = NULL;
    PyObject *outline_24_var_as_const = NULL;
    PyObject *outline_25_var___class__ = NULL;
    PyObject *outline_25_var___qualname__ = NULL;
    PyObject *outline_25_var___module__ = NULL;
    PyObject *outline_25_var___doc__ = NULL;
    PyObject *outline_25_var_fields = NULL;
    PyObject *outline_25_var_can_assign = NULL;
    PyObject *outline_26_var___class__ = NULL;
    PyObject *outline_26_var___qualname__ = NULL;
    PyObject *outline_26_var___module__ = NULL;
    PyObject *outline_26_var___doc__ = NULL;
    PyObject *outline_26_var_fields = NULL;
    PyObject *outline_26_var_can_assign = NULL;
    PyObject *outline_27_var___class__ = NULL;
    PyObject *outline_27_var___qualname__ = NULL;
    PyObject *outline_27_var___module__ = NULL;
    PyObject *outline_27_var___doc__ = NULL;
    PyObject *outline_27_var_abstract = NULL;
    PyObject *outline_28_var___class__ = NULL;
    PyObject *outline_28_var___qualname__ = NULL;
    PyObject *outline_28_var___module__ = NULL;
    PyObject *outline_28_var___doc__ = NULL;
    PyObject *outline_28_var_fields = NULL;
    PyObject *outline_28_var_as_const = NULL;
    PyObject *outline_28_var_from_untrusted = NULL;
    PyObject *outline_29_var___class__ = NULL;
    PyObject *outline_29_var___qualname__ = NULL;
    PyObject *outline_29_var___module__ = NULL;
    PyObject *outline_29_var___doc__ = NULL;
    PyObject *outline_29_var_fields = NULL;
    PyObject *outline_29_var_as_const = NULL;
    PyObject *outline_30_var___class__ = NULL;
    PyObject *outline_30_var___qualname__ = NULL;
    PyObject *outline_30_var___module__ = NULL;
    PyObject *outline_30_var___doc__ = NULL;
    PyObject *outline_30_var_fields = NULL;
    PyObject *outline_30_var_as_const = NULL;
    PyObject *outline_30_var_can_assign = NULL;
    PyObject *outline_31_var___class__ = NULL;
    PyObject *outline_31_var___qualname__ = NULL;
    PyObject *outline_31_var___module__ = NULL;
    PyObject *outline_31_var___doc__ = NULL;
    PyObject *outline_31_var_fields = NULL;
    PyObject *outline_31_var_as_const = NULL;
    PyObject *outline_32_var___class__ = NULL;
    PyObject *outline_32_var___qualname__ = NULL;
    PyObject *outline_32_var___module__ = NULL;
    PyObject *outline_32_var___doc__ = NULL;
    PyObject *outline_32_var_fields = NULL;
    PyObject *outline_32_var_as_const = NULL;
    PyObject *outline_33_var___class__ = NULL;
    PyObject *outline_33_var___qualname__ = NULL;
    PyObject *outline_33_var___module__ = NULL;
    PyObject *outline_33_var___doc__ = NULL;
    PyObject *outline_33_var_fields = NULL;
    PyObject *outline_33_var_as_const = NULL;
    PyObject *outline_34_var___class__ = NULL;
    PyObject *outline_34_var___qualname__ = NULL;
    PyObject *outline_34_var___module__ = NULL;
    PyObject *outline_34_var___doc__ = NULL;
    PyObject *outline_34_var_fields = NULL;
    PyObject *outline_34_var_as_const = NULL;
    PyObject *outline_35_var___class__ = NULL;
    PyObject *outline_35_var___qualname__ = NULL;
    PyObject *outline_35_var___module__ = NULL;
    PyObject *outline_35_var___doc__ = NULL;
    PyObject *outline_35_var_fields = NULL;
    PyObject *outline_35_var_as_const = NULL;
    PyObject *outline_36_var___class__ = NULL;
    PyObject *outline_36_var___qualname__ = NULL;
    PyObject *outline_36_var___module__ = NULL;
    PyObject *outline_36_var___doc__ = NULL;
    PyObject *outline_36_var_fields = NULL;
    PyObject *outline_36_var_as_const = NULL;
    PyObject *outline_37_var___class__ = NULL;
    PyObject *outline_37_var___qualname__ = NULL;
    PyObject *outline_37_var___module__ = NULL;
    PyObject *outline_37_var___doc__ = NULL;
    PyObject *outline_37_var_fields = NULL;
    PyObject *outline_37_var_as_const = NULL;
    PyObject *outline_38_var___class__ = NULL;
    PyObject *outline_38_var___qualname__ = NULL;
    PyObject *outline_38_var___module__ = NULL;
    PyObject *outline_38_var___doc__ = NULL;
    PyObject *outline_38_var_fields = NULL;
    PyObject *outline_39_var___class__ = NULL;
    PyObject *outline_39_var___qualname__ = NULL;
    PyObject *outline_39_var___module__ = NULL;
    PyObject *outline_39_var___doc__ = NULL;
    PyObject *outline_39_var_fields = NULL;
    PyObject *outline_39_var_as_const = NULL;
    PyObject *outline_39_var_can_assign = NULL;
    PyObject *outline_40_var___class__ = NULL;
    PyObject *outline_40_var___qualname__ = NULL;
    PyObject *outline_40_var___module__ = NULL;
    PyObject *outline_40_var___doc__ = NULL;
    PyObject *outline_40_var_fields = NULL;
    PyObject *outline_40_var_as_const = NULL;
    PyObject *outline_40_var_can_assign = NULL;
    PyObject *outline_41_var___class__ = NULL;
    PyObject *outline_41_var___qualname__ = NULL;
    PyObject *outline_41_var___module__ = NULL;
    PyObject *outline_41_var___doc__ = NULL;
    PyObject *outline_41_var_fields = NULL;
    PyObject *outline_41_var_as_const = NULL;
    PyObject *outline_42_var___class__ = NULL;
    PyObject *outline_42_var___qualname__ = NULL;
    PyObject *outline_42_var___module__ = NULL;
    PyObject *outline_42_var___doc__ = NULL;
    PyObject *outline_42_var_fields = NULL;
    PyObject *outline_42_var_as_const = NULL;
    PyObject *outline_43_var___class__ = NULL;
    PyObject *outline_43_var___qualname__ = NULL;
    PyObject *outline_43_var___module__ = NULL;
    PyObject *outline_43_var___doc__ = NULL;
    PyObject *outline_43_var_fields = NULL;
    PyObject *outline_43_var_as_const = NULL;
    PyObject *outline_44_var___class__ = NULL;
    PyObject *outline_44_var___qualname__ = NULL;
    PyObject *outline_44_var___module__ = NULL;
    PyObject *outline_44_var___doc__ = NULL;
    PyObject *outline_44_var_fields = NULL;
    PyObject *outline_45_var___class__ = NULL;
    PyObject *outline_45_var___qualname__ = NULL;
    PyObject *outline_45_var___module__ = NULL;
    PyObject *outline_45_var___doc__ = NULL;
    PyObject *outline_45_var_operator = NULL;
    PyObject *outline_46_var___class__ = NULL;
    PyObject *outline_46_var___qualname__ = NULL;
    PyObject *outline_46_var___module__ = NULL;
    PyObject *outline_46_var___doc__ = NULL;
    PyObject *outline_46_var_operator = NULL;
    PyObject *outline_47_var___class__ = NULL;
    PyObject *outline_47_var___qualname__ = NULL;
    PyObject *outline_47_var___module__ = NULL;
    PyObject *outline_47_var___doc__ = NULL;
    PyObject *outline_47_var_operator = NULL;
    PyObject *outline_48_var___class__ = NULL;
    PyObject *outline_48_var___qualname__ = NULL;
    PyObject *outline_48_var___module__ = NULL;
    PyObject *outline_48_var___doc__ = NULL;
    PyObject *outline_48_var_operator = NULL;
    PyObject *outline_49_var___class__ = NULL;
    PyObject *outline_49_var___qualname__ = NULL;
    PyObject *outline_49_var___module__ = NULL;
    PyObject *outline_49_var___doc__ = NULL;
    PyObject *outline_49_var_operator = NULL;
    PyObject *outline_50_var___class__ = NULL;
    PyObject *outline_50_var___qualname__ = NULL;
    PyObject *outline_50_var___module__ = NULL;
    PyObject *outline_50_var___doc__ = NULL;
    PyObject *outline_50_var_operator = NULL;
    PyObject *outline_51_var___class__ = NULL;
    PyObject *outline_51_var___qualname__ = NULL;
    PyObject *outline_51_var___module__ = NULL;
    PyObject *outline_51_var___doc__ = NULL;
    PyObject *outline_51_var_operator = NULL;
    PyObject *outline_52_var___class__ = NULL;
    PyObject *outline_52_var___qualname__ = NULL;
    PyObject *outline_52_var___module__ = NULL;
    PyObject *outline_52_var___doc__ = NULL;
    PyObject *outline_52_var_operator = NULL;
    PyObject *outline_52_var_as_const = NULL;
    PyObject *outline_53_var___class__ = NULL;
    PyObject *outline_53_var___qualname__ = NULL;
    PyObject *outline_53_var___module__ = NULL;
    PyObject *outline_53_var___doc__ = NULL;
    PyObject *outline_53_var_operator = NULL;
    PyObject *outline_53_var_as_const = NULL;
    PyObject *outline_54_var___class__ = NULL;
    PyObject *outline_54_var___qualname__ = NULL;
    PyObject *outline_54_var___module__ = NULL;
    PyObject *outline_54_var___doc__ = NULL;
    PyObject *outline_54_var_operator = NULL;
    PyObject *outline_55_var___class__ = NULL;
    PyObject *outline_55_var___qualname__ = NULL;
    PyObject *outline_55_var___module__ = NULL;
    PyObject *outline_55_var___doc__ = NULL;
    PyObject *outline_55_var_operator = NULL;
    PyObject *outline_56_var___class__ = NULL;
    PyObject *outline_56_var___qualname__ = NULL;
    PyObject *outline_56_var___module__ = NULL;
    PyObject *outline_56_var___doc__ = NULL;
    PyObject *outline_56_var_operator = NULL;
    PyObject *outline_57_var___class__ = NULL;
    PyObject *outline_57_var___qualname__ = NULL;
    PyObject *outline_57_var___module__ = NULL;
    PyObject *outline_57_var___doc__ = NULL;
    PyObject *outline_57_var_fields = NULL;
    PyObject *outline_58_var___class__ = NULL;
    PyObject *outline_58_var___qualname__ = NULL;
    PyObject *outline_58_var___module__ = NULL;
    PyObject *outline_58_var___doc__ = NULL;
    PyObject *outline_58_var_fields = NULL;
    PyObject *outline_59_var___class__ = NULL;
    PyObject *outline_59_var___qualname__ = NULL;
    PyObject *outline_59_var___module__ = NULL;
    PyObject *outline_59_var___doc__ = NULL;
    PyObject *outline_59_var_fields = NULL;
    PyObject *outline_60_var___class__ = NULL;
    PyObject *outline_60_var___qualname__ = NULL;
    PyObject *outline_60_var___module__ = NULL;
    PyObject *outline_60_var___doc__ = NULL;
    PyObject *outline_60_var_fields = NULL;
    PyObject *outline_60_var___init__ = NULL;
    PyObject *outline_61_var___class__ = NULL;
    PyObject *outline_61_var___qualname__ = NULL;
    PyObject *outline_61_var___module__ = NULL;
    PyObject *outline_61_var___doc__ = NULL;
    PyObject *outline_61_var_fields = NULL;
    PyObject *outline_61_var_as_const = NULL;
    PyObject *outline_62_var___class__ = NULL;
    PyObject *outline_62_var___qualname__ = NULL;
    PyObject *outline_62_var___module__ = NULL;
    PyObject *outline_62_var___doc__ = NULL;
    PyObject *outline_62_var_fields = NULL;
    PyObject *outline_62_var_as_const = NULL;
    PyObject *outline_63_var___class__ = NULL;
    PyObject *outline_63_var___qualname__ = NULL;
    PyObject *outline_63_var___module__ = NULL;
    PyObject *outline_63_var___doc__ = NULL;
    PyObject *outline_64_var___class__ = NULL;
    PyObject *outline_64_var___qualname__ = NULL;
    PyObject *outline_64_var___module__ = NULL;
    PyObject *outline_64_var___doc__ = NULL;
    PyObject *outline_65_var___class__ = NULL;
    PyObject *outline_65_var___qualname__ = NULL;
    PyObject *outline_65_var___module__ = NULL;
    PyObject *outline_65_var___doc__ = NULL;
    PyObject *outline_66_var___class__ = NULL;
    PyObject *outline_66_var___qualname__ = NULL;
    PyObject *outline_66_var___module__ = NULL;
    PyObject *outline_66_var___doc__ = NULL;
    PyObject *outline_66_var_fields = NULL;
    PyObject *outline_67_var___class__ = NULL;
    PyObject *outline_67_var___qualname__ = NULL;
    PyObject *outline_67_var___module__ = NULL;
    PyObject *outline_67_var___doc__ = NULL;
    PyObject *outline_67_var_fields = NULL;
    PyObject *outline_68_var___class__ = NULL;
    PyObject *outline_68_var___qualname__ = NULL;
    PyObject *outline_68_var___module__ = NULL;
    PyObject *outline_68_var___doc__ = NULL;
    PyObject *outline_68_var_fields = NULL;
    PyObject *outline_69_var___class__ = NULL;
    PyObject *outline_69_var___qualname__ = NULL;
    PyObject *outline_69_var___module__ = NULL;
    PyObject *outline_69_var___doc__ = NULL;
    PyObject *outline_69_var_fields = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_21__bases = NULL;
    PyObject *tmp_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_class_creation_21__metaclass = NULL;
    PyObject *tmp_class_creation_21__prepared = NULL;
    PyObject *tmp_class_creation_22__bases = NULL;
    PyObject *tmp_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_class_creation_22__metaclass = NULL;
    PyObject *tmp_class_creation_22__prepared = NULL;
    PyObject *tmp_class_creation_23__bases = NULL;
    PyObject *tmp_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_class_creation_23__metaclass = NULL;
    PyObject *tmp_class_creation_23__prepared = NULL;
    PyObject *tmp_class_creation_24__bases = NULL;
    PyObject *tmp_class_creation_24__class_decl_dict = NULL;
    PyObject *tmp_class_creation_24__metaclass = NULL;
    PyObject *tmp_class_creation_24__prepared = NULL;
    PyObject *tmp_class_creation_25__bases = NULL;
    PyObject *tmp_class_creation_25__class_decl_dict = NULL;
    PyObject *tmp_class_creation_25__metaclass = NULL;
    PyObject *tmp_class_creation_25__prepared = NULL;
    PyObject *tmp_class_creation_26__bases = NULL;
    PyObject *tmp_class_creation_26__class_decl_dict = NULL;
    PyObject *tmp_class_creation_26__metaclass = NULL;
    PyObject *tmp_class_creation_26__prepared = NULL;
    PyObject *tmp_class_creation_27__bases = NULL;
    PyObject *tmp_class_creation_27__class_decl_dict = NULL;
    PyObject *tmp_class_creation_27__metaclass = NULL;
    PyObject *tmp_class_creation_27__prepared = NULL;
    PyObject *tmp_class_creation_28__bases = NULL;
    PyObject *tmp_class_creation_28__class_decl_dict = NULL;
    PyObject *tmp_class_creation_28__metaclass = NULL;
    PyObject *tmp_class_creation_28__prepared = NULL;
    PyObject *tmp_class_creation_29__bases = NULL;
    PyObject *tmp_class_creation_29__class_decl_dict = NULL;
    PyObject *tmp_class_creation_29__metaclass = NULL;
    PyObject *tmp_class_creation_29__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_30__bases = NULL;
    PyObject *tmp_class_creation_30__class_decl_dict = NULL;
    PyObject *tmp_class_creation_30__metaclass = NULL;
    PyObject *tmp_class_creation_30__prepared = NULL;
    PyObject *tmp_class_creation_31__bases = NULL;
    PyObject *tmp_class_creation_31__class_decl_dict = NULL;
    PyObject *tmp_class_creation_31__metaclass = NULL;
    PyObject *tmp_class_creation_31__prepared = NULL;
    PyObject *tmp_class_creation_32__bases = NULL;
    PyObject *tmp_class_creation_32__class_decl_dict = NULL;
    PyObject *tmp_class_creation_32__metaclass = NULL;
    PyObject *tmp_class_creation_32__prepared = NULL;
    PyObject *tmp_class_creation_33__bases = NULL;
    PyObject *tmp_class_creation_33__class_decl_dict = NULL;
    PyObject *tmp_class_creation_33__metaclass = NULL;
    PyObject *tmp_class_creation_33__prepared = NULL;
    PyObject *tmp_class_creation_34__bases = NULL;
    PyObject *tmp_class_creation_34__class_decl_dict = NULL;
    PyObject *tmp_class_creation_34__metaclass = NULL;
    PyObject *tmp_class_creation_34__prepared = NULL;
    PyObject *tmp_class_creation_35__bases = NULL;
    PyObject *tmp_class_creation_35__class_decl_dict = NULL;
    PyObject *tmp_class_creation_35__metaclass = NULL;
    PyObject *tmp_class_creation_35__prepared = NULL;
    PyObject *tmp_class_creation_36__bases = NULL;
    PyObject *tmp_class_creation_36__class_decl_dict = NULL;
    PyObject *tmp_class_creation_36__metaclass = NULL;
    PyObject *tmp_class_creation_36__prepared = NULL;
    PyObject *tmp_class_creation_37__bases = NULL;
    PyObject *tmp_class_creation_37__class_decl_dict = NULL;
    PyObject *tmp_class_creation_37__metaclass = NULL;
    PyObject *tmp_class_creation_37__prepared = NULL;
    PyObject *tmp_class_creation_38__bases = NULL;
    PyObject *tmp_class_creation_38__class_decl_dict = NULL;
    PyObject *tmp_class_creation_38__metaclass = NULL;
    PyObject *tmp_class_creation_38__prepared = NULL;
    PyObject *tmp_class_creation_39__bases = NULL;
    PyObject *tmp_class_creation_39__class_decl_dict = NULL;
    PyObject *tmp_class_creation_39__metaclass = NULL;
    PyObject *tmp_class_creation_39__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_40__bases = NULL;
    PyObject *tmp_class_creation_40__class_decl_dict = NULL;
    PyObject *tmp_class_creation_40__metaclass = NULL;
    PyObject *tmp_class_creation_40__prepared = NULL;
    PyObject *tmp_class_creation_41__bases = NULL;
    PyObject *tmp_class_creation_41__class_decl_dict = NULL;
    PyObject *tmp_class_creation_41__metaclass = NULL;
    PyObject *tmp_class_creation_41__prepared = NULL;
    PyObject *tmp_class_creation_42__bases = NULL;
    PyObject *tmp_class_creation_42__class_decl_dict = NULL;
    PyObject *tmp_class_creation_42__metaclass = NULL;
    PyObject *tmp_class_creation_42__prepared = NULL;
    PyObject *tmp_class_creation_43__bases = NULL;
    PyObject *tmp_class_creation_43__class_decl_dict = NULL;
    PyObject *tmp_class_creation_43__metaclass = NULL;
    PyObject *tmp_class_creation_43__prepared = NULL;
    PyObject *tmp_class_creation_44__bases = NULL;
    PyObject *tmp_class_creation_44__class_decl_dict = NULL;
    PyObject *tmp_class_creation_44__metaclass = NULL;
    PyObject *tmp_class_creation_44__prepared = NULL;
    PyObject *tmp_class_creation_45__bases = NULL;
    PyObject *tmp_class_creation_45__class_decl_dict = NULL;
    PyObject *tmp_class_creation_45__metaclass = NULL;
    PyObject *tmp_class_creation_45__prepared = NULL;
    PyObject *tmp_class_creation_46__bases = NULL;
    PyObject *tmp_class_creation_46__class_decl_dict = NULL;
    PyObject *tmp_class_creation_46__metaclass = NULL;
    PyObject *tmp_class_creation_46__prepared = NULL;
    PyObject *tmp_class_creation_47__bases = NULL;
    PyObject *tmp_class_creation_47__class_decl_dict = NULL;
    PyObject *tmp_class_creation_47__metaclass = NULL;
    PyObject *tmp_class_creation_47__prepared = NULL;
    PyObject *tmp_class_creation_48__bases = NULL;
    PyObject *tmp_class_creation_48__class_decl_dict = NULL;
    PyObject *tmp_class_creation_48__metaclass = NULL;
    PyObject *tmp_class_creation_48__prepared = NULL;
    PyObject *tmp_class_creation_49__bases = NULL;
    PyObject *tmp_class_creation_49__class_decl_dict = NULL;
    PyObject *tmp_class_creation_49__metaclass = NULL;
    PyObject *tmp_class_creation_49__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_50__bases = NULL;
    PyObject *tmp_class_creation_50__class_decl_dict = NULL;
    PyObject *tmp_class_creation_50__metaclass = NULL;
    PyObject *tmp_class_creation_50__prepared = NULL;
    PyObject *tmp_class_creation_51__bases = NULL;
    PyObject *tmp_class_creation_51__class_decl_dict = NULL;
    PyObject *tmp_class_creation_51__metaclass = NULL;
    PyObject *tmp_class_creation_51__prepared = NULL;
    PyObject *tmp_class_creation_52__bases = NULL;
    PyObject *tmp_class_creation_52__class_decl_dict = NULL;
    PyObject *tmp_class_creation_52__metaclass = NULL;
    PyObject *tmp_class_creation_52__prepared = NULL;
    PyObject *tmp_class_creation_53__bases = NULL;
    PyObject *tmp_class_creation_53__class_decl_dict = NULL;
    PyObject *tmp_class_creation_53__metaclass = NULL;
    PyObject *tmp_class_creation_53__prepared = NULL;
    PyObject *tmp_class_creation_54__bases = NULL;
    PyObject *tmp_class_creation_54__class_decl_dict = NULL;
    PyObject *tmp_class_creation_54__metaclass = NULL;
    PyObject *tmp_class_creation_54__prepared = NULL;
    PyObject *tmp_class_creation_55__bases = NULL;
    PyObject *tmp_class_creation_55__class_decl_dict = NULL;
    PyObject *tmp_class_creation_55__metaclass = NULL;
    PyObject *tmp_class_creation_55__prepared = NULL;
    PyObject *tmp_class_creation_56__bases = NULL;
    PyObject *tmp_class_creation_56__class_decl_dict = NULL;
    PyObject *tmp_class_creation_56__metaclass = NULL;
    PyObject *tmp_class_creation_56__prepared = NULL;
    PyObject *tmp_class_creation_57__bases = NULL;
    PyObject *tmp_class_creation_57__class_decl_dict = NULL;
    PyObject *tmp_class_creation_57__metaclass = NULL;
    PyObject *tmp_class_creation_57__prepared = NULL;
    PyObject *tmp_class_creation_58__bases = NULL;
    PyObject *tmp_class_creation_58__class_decl_dict = NULL;
    PyObject *tmp_class_creation_58__metaclass = NULL;
    PyObject *tmp_class_creation_58__prepared = NULL;
    PyObject *tmp_class_creation_59__bases = NULL;
    PyObject *tmp_class_creation_59__class_decl_dict = NULL;
    PyObject *tmp_class_creation_59__metaclass = NULL;
    PyObject *tmp_class_creation_59__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_60__bases = NULL;
    PyObject *tmp_class_creation_60__class_decl_dict = NULL;
    PyObject *tmp_class_creation_60__metaclass = NULL;
    PyObject *tmp_class_creation_60__prepared = NULL;
    PyObject *tmp_class_creation_61__bases = NULL;
    PyObject *tmp_class_creation_61__class_decl_dict = NULL;
    PyObject *tmp_class_creation_61__metaclass = NULL;
    PyObject *tmp_class_creation_61__prepared = NULL;
    PyObject *tmp_class_creation_62__bases = NULL;
    PyObject *tmp_class_creation_62__class_decl_dict = NULL;
    PyObject *tmp_class_creation_62__metaclass = NULL;
    PyObject *tmp_class_creation_62__prepared = NULL;
    PyObject *tmp_class_creation_63__bases = NULL;
    PyObject *tmp_class_creation_63__class_decl_dict = NULL;
    PyObject *tmp_class_creation_63__metaclass = NULL;
    PyObject *tmp_class_creation_63__prepared = NULL;
    PyObject *tmp_class_creation_64__bases = NULL;
    PyObject *tmp_class_creation_64__class_decl_dict = NULL;
    PyObject *tmp_class_creation_64__metaclass = NULL;
    PyObject *tmp_class_creation_64__prepared = NULL;
    PyObject *tmp_class_creation_65__bases = NULL;
    PyObject *tmp_class_creation_65__class_decl_dict = NULL;
    PyObject *tmp_class_creation_65__metaclass = NULL;
    PyObject *tmp_class_creation_65__prepared = NULL;
    PyObject *tmp_class_creation_66__bases = NULL;
    PyObject *tmp_class_creation_66__class_decl_dict = NULL;
    PyObject *tmp_class_creation_66__metaclass = NULL;
    PyObject *tmp_class_creation_66__prepared = NULL;
    PyObject *tmp_class_creation_67__bases = NULL;
    PyObject *tmp_class_creation_67__class_decl_dict = NULL;
    PyObject *tmp_class_creation_67__metaclass = NULL;
    PyObject *tmp_class_creation_67__prepared = NULL;
    PyObject *tmp_class_creation_68__bases = NULL;
    PyObject *tmp_class_creation_68__class_decl_dict = NULL;
    PyObject *tmp_class_creation_68__metaclass = NULL;
    PyObject *tmp_class_creation_68__prepared = NULL;
    PyObject *tmp_class_creation_69__bases = NULL;
    PyObject *tmp_class_creation_69__class_decl_dict = NULL;
    PyObject *tmp_class_creation_69__metaclass = NULL;
    PyObject *tmp_class_creation_69__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_70__bases = NULL;
    PyObject *tmp_class_creation_70__class_decl_dict = NULL;
    PyObject *tmp_class_creation_70__metaclass = NULL;
    PyObject *tmp_class_creation_70__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_117;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_118;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_119;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_120;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_122;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_123;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_125;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_126;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_128;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_129;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_131;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_132;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_133;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_134;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_135;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_136;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_137;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_138;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_139;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_140;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_141;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_142;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_143;
    PyObject *tmp_args_element_name_1;
    PyObject *tmp_args_element_name_2;
    PyObject *tmp_args_element_name_3;
    PyObject *tmp_args_element_name_4;
    PyObject *tmp_args_element_name_5;
    PyObject *tmp_args_element_name_6;
    PyObject *tmp_args_name_1;
    PyObject *tmp_args_name_2;
    PyObject *tmp_args_name_3;
    PyObject *tmp_args_name_4;
    PyObject *tmp_args_name_5;
    PyObject *tmp_args_name_6;
    PyObject *tmp_args_name_7;
    PyObject *tmp_args_name_8;
    PyObject *tmp_args_name_9;
    PyObject *tmp_args_name_10;
    PyObject *tmp_args_name_11;
    PyObject *tmp_args_name_12;
    PyObject *tmp_args_name_13;
    PyObject *tmp_args_name_14;
    PyObject *tmp_args_name_15;
    PyObject *tmp_args_name_16;
    PyObject *tmp_args_name_17;
    PyObject *tmp_args_name_18;
    PyObject *tmp_args_name_19;
    PyObject *tmp_args_name_20;
    PyObject *tmp_args_name_21;
    PyObject *tmp_args_name_22;
    PyObject *tmp_args_name_23;
    PyObject *tmp_args_name_24;
    PyObject *tmp_args_name_25;
    PyObject *tmp_args_name_26;
    PyObject *tmp_args_name_27;
    PyObject *tmp_args_name_28;
    PyObject *tmp_args_name_29;
    PyObject *tmp_args_name_30;
    PyObject *tmp_args_name_31;
    PyObject *tmp_args_name_32;
    PyObject *tmp_args_name_33;
    PyObject *tmp_args_name_34;
    PyObject *tmp_args_name_35;
    PyObject *tmp_args_name_36;
    PyObject *tmp_args_name_37;
    PyObject *tmp_args_name_38;
    PyObject *tmp_args_name_39;
    PyObject *tmp_args_name_40;
    PyObject *tmp_args_name_41;
    PyObject *tmp_args_name_42;
    PyObject *tmp_args_name_43;
    PyObject *tmp_args_name_44;
    PyObject *tmp_args_name_45;
    PyObject *tmp_args_name_46;
    PyObject *tmp_args_name_47;
    PyObject *tmp_args_name_48;
    PyObject *tmp_args_name_49;
    PyObject *tmp_args_name_50;
    PyObject *tmp_args_name_51;
    PyObject *tmp_args_name_52;
    PyObject *tmp_args_name_53;
    PyObject *tmp_args_name_54;
    PyObject *tmp_args_name_55;
    PyObject *tmp_args_name_56;
    PyObject *tmp_args_name_57;
    PyObject *tmp_args_name_58;
    PyObject *tmp_args_name_59;
    PyObject *tmp_args_name_60;
    PyObject *tmp_args_name_61;
    PyObject *tmp_args_name_62;
    PyObject *tmp_args_name_63;
    PyObject *tmp_args_name_64;
    PyObject *tmp_args_name_65;
    PyObject *tmp_args_name_66;
    PyObject *tmp_args_name_67;
    PyObject *tmp_args_name_68;
    PyObject *tmp_args_name_69;
    PyObject *tmp_args_name_70;
    PyObject *tmp_args_name_71;
    PyObject *tmp_args_name_72;
    PyObject *tmp_args_name_73;
    PyObject *tmp_args_name_74;
    PyObject *tmp_args_name_75;
    PyObject *tmp_args_name_76;
    PyObject *tmp_args_name_77;
    PyObject *tmp_args_name_78;
    PyObject *tmp_args_name_79;
    PyObject *tmp_args_name_80;
    PyObject *tmp_args_name_81;
    PyObject *tmp_args_name_82;
    PyObject *tmp_args_name_83;
    PyObject *tmp_args_name_84;
    PyObject *tmp_args_name_85;
    PyObject *tmp_args_name_86;
    PyObject *tmp_args_name_87;
    PyObject *tmp_args_name_88;
    PyObject *tmp_args_name_89;
    PyObject *tmp_args_name_90;
    PyObject *tmp_args_name_91;
    PyObject *tmp_args_name_92;
    PyObject *tmp_args_name_93;
    PyObject *tmp_args_name_94;
    PyObject *tmp_args_name_95;
    PyObject *tmp_args_name_96;
    PyObject *tmp_args_name_97;
    PyObject *tmp_args_name_98;
    PyObject *tmp_args_name_99;
    PyObject *tmp_args_name_100;
    PyObject *tmp_args_name_101;
    PyObject *tmp_args_name_102;
    PyObject *tmp_args_name_103;
    PyObject *tmp_args_name_104;
    PyObject *tmp_args_name_105;
    PyObject *tmp_args_name_106;
    PyObject *tmp_args_name_107;
    PyObject *tmp_args_name_108;
    PyObject *tmp_args_name_109;
    PyObject *tmp_args_name_110;
    PyObject *tmp_args_name_111;
    PyObject *tmp_args_name_112;
    PyObject *tmp_args_name_113;
    PyObject *tmp_args_name_114;
    PyObject *tmp_args_name_115;
    PyObject *tmp_args_name_116;
    PyObject *tmp_args_name_117;
    PyObject *tmp_args_name_118;
    PyObject *tmp_args_name_119;
    PyObject *tmp_args_name_120;
    PyObject *tmp_args_name_121;
    PyObject *tmp_args_name_122;
    PyObject *tmp_args_name_123;
    PyObject *tmp_args_name_124;
    PyObject *tmp_args_name_125;
    PyObject *tmp_args_name_126;
    PyObject *tmp_args_name_127;
    PyObject *tmp_args_name_128;
    PyObject *tmp_args_name_129;
    PyObject *tmp_args_name_130;
    PyObject *tmp_args_name_131;
    PyObject *tmp_args_name_132;
    PyObject *tmp_args_name_133;
    PyObject *tmp_args_name_134;
    PyObject *tmp_args_name_135;
    PyObject *tmp_args_name_136;
    PyObject *tmp_args_name_137;
    PyObject *tmp_args_name_138;
    PyObject *tmp_args_name_139;
    PyObject *tmp_args_name_140;
    PyObject *tmp_assattr_name_1;
    PyObject *tmp_assattr_name_2;
    PyObject *tmp_assattr_target_1;
    PyObject *tmp_assattr_target_2;
    PyObject *tmp_assign_source_1;
    PyObject *tmp_assign_source_2;
    PyObject *tmp_assign_source_3;
    PyObject *tmp_assign_source_4;
    PyObject *tmp_assign_source_5;
    PyObject *tmp_assign_source_6;
    PyObject *tmp_assign_source_7;
    PyObject *tmp_assign_source_8;
    PyObject *tmp_assign_source_9;
    PyObject *tmp_assign_source_10;
    PyObject *tmp_assign_source_11;
    PyObject *tmp_assign_source_12;
    PyObject *tmp_assign_source_13;
    PyObject *tmp_assign_source_14;
    PyObject *tmp_assign_source_15;
    PyObject *tmp_assign_source_16;
    PyObject *tmp_assign_source_17;
    PyObject *tmp_assign_source_18;
    PyObject *tmp_assign_source_19;
    PyObject *tmp_assign_source_20;
    PyObject *tmp_assign_source_21;
    PyObject *tmp_assign_source_22;
    PyObject *tmp_assign_source_23;
    PyObject *tmp_assign_source_24;
    PyObject *tmp_assign_source_25;
    PyObject *tmp_assign_source_26;
    PyObject *tmp_assign_source_27;
    PyObject *tmp_assign_source_28;
    PyObject *tmp_assign_source_29;
    PyObject *tmp_assign_source_30;
    PyObject *tmp_assign_source_31;
    PyObject *tmp_assign_source_32;
    PyObject *tmp_assign_source_33;
    PyObject *tmp_assign_source_34;
    PyObject *tmp_assign_source_35;
    PyObject *tmp_assign_source_36;
    PyObject *tmp_assign_source_37;
    PyObject *tmp_assign_source_38;
    PyObject *tmp_assign_source_39;
    PyObject *tmp_assign_source_40;
    PyObject *tmp_assign_source_41;
    PyObject *tmp_assign_source_42;
    PyObject *tmp_assign_source_43;
    PyObject *tmp_assign_source_44;
    PyObject *tmp_assign_source_45;
    PyObject *tmp_assign_source_46;
    PyObject *tmp_assign_source_47;
    PyObject *tmp_assign_source_48;
    PyObject *tmp_assign_source_49;
    PyObject *tmp_assign_source_50;
    PyObject *tmp_assign_source_51;
    PyObject *tmp_assign_source_52;
    PyObject *tmp_assign_source_53;
    PyObject *tmp_assign_source_54;
    PyObject *tmp_assign_source_55;
    PyObject *tmp_assign_source_56;
    PyObject *tmp_assign_source_57;
    PyObject *tmp_assign_source_58;
    PyObject *tmp_assign_source_59;
    PyObject *tmp_assign_source_60;
    PyObject *tmp_assign_source_61;
    PyObject *tmp_assign_source_62;
    PyObject *tmp_assign_source_63;
    PyObject *tmp_assign_source_64;
    PyObject *tmp_assign_source_65;
    PyObject *tmp_assign_source_66;
    PyObject *tmp_assign_source_67;
    PyObject *tmp_assign_source_68;
    PyObject *tmp_assign_source_69;
    PyObject *tmp_assign_source_70;
    PyObject *tmp_assign_source_71;
    PyObject *tmp_assign_source_72;
    PyObject *tmp_assign_source_73;
    PyObject *tmp_assign_source_74;
    PyObject *tmp_assign_source_75;
    PyObject *tmp_assign_source_76;
    PyObject *tmp_assign_source_77;
    PyObject *tmp_assign_source_78;
    PyObject *tmp_assign_source_79;
    PyObject *tmp_assign_source_80;
    PyObject *tmp_assign_source_81;
    PyObject *tmp_assign_source_82;
    PyObject *tmp_assign_source_83;
    PyObject *tmp_assign_source_84;
    PyObject *tmp_assign_source_85;
    PyObject *tmp_assign_source_86;
    PyObject *tmp_assign_source_87;
    PyObject *tmp_assign_source_88;
    PyObject *tmp_assign_source_89;
    PyObject *tmp_assign_source_90;
    PyObject *tmp_assign_source_91;
    PyObject *tmp_assign_source_92;
    PyObject *tmp_assign_source_93;
    PyObject *tmp_assign_source_94;
    PyObject *tmp_assign_source_95;
    PyObject *tmp_assign_source_96;
    PyObject *tmp_assign_source_97;
    PyObject *tmp_assign_source_98;
    PyObject *tmp_assign_source_99;
    PyObject *tmp_assign_source_100;
    PyObject *tmp_assign_source_101;
    PyObject *tmp_assign_source_102;
    PyObject *tmp_assign_source_103;
    PyObject *tmp_assign_source_104;
    PyObject *tmp_assign_source_105;
    PyObject *tmp_assign_source_106;
    PyObject *tmp_assign_source_107;
    PyObject *tmp_assign_source_108;
    PyObject *tmp_assign_source_109;
    PyObject *tmp_assign_source_110;
    PyObject *tmp_assign_source_111;
    PyObject *tmp_assign_source_112;
    PyObject *tmp_assign_source_113;
    PyObject *tmp_assign_source_114;
    PyObject *tmp_assign_source_115;
    PyObject *tmp_assign_source_116;
    PyObject *tmp_assign_source_117;
    PyObject *tmp_assign_source_118;
    PyObject *tmp_assign_source_119;
    PyObject *tmp_assign_source_120;
    PyObject *tmp_assign_source_121;
    PyObject *tmp_assign_source_122;
    PyObject *tmp_assign_source_123;
    PyObject *tmp_assign_source_124;
    PyObject *tmp_assign_source_125;
    PyObject *tmp_assign_source_126;
    PyObject *tmp_assign_source_127;
    PyObject *tmp_assign_source_128;
    PyObject *tmp_assign_source_129;
    PyObject *tmp_assign_source_130;
    PyObject *tmp_assign_source_131;
    PyObject *tmp_assign_source_132;
    PyObject *tmp_assign_source_133;
    PyObject *tmp_assign_source_134;
    PyObject *tmp_assign_source_135;
    PyObject *tmp_assign_source_136;
    PyObject *tmp_assign_source_137;
    PyObject *tmp_assign_source_138;
    PyObject *tmp_assign_source_139;
    PyObject *tmp_assign_source_140;
    PyObject *tmp_assign_source_141;
    PyObject *tmp_assign_source_142;
    PyObject *tmp_assign_source_143;
    PyObject *tmp_assign_source_144;
    PyObject *tmp_assign_source_145;
    PyObject *tmp_assign_source_146;
    PyObject *tmp_assign_source_147;
    PyObject *tmp_assign_source_148;
    PyObject *tmp_assign_source_149;
    PyObject *tmp_assign_source_150;
    PyObject *tmp_assign_source_151;
    PyObject *tmp_assign_source_152;
    PyObject *tmp_assign_source_153;
    PyObject *tmp_assign_source_154;
    PyObject *tmp_assign_source_155;
    PyObject *tmp_assign_source_156;
    PyObject *tmp_assign_source_157;
    PyObject *tmp_assign_source_158;
    PyObject *tmp_assign_source_159;
    PyObject *tmp_assign_source_160;
    PyObject *tmp_assign_source_161;
    PyObject *tmp_assign_source_162;
    PyObject *tmp_assign_source_163;
    PyObject *tmp_assign_source_164;
    PyObject *tmp_assign_source_165;
    PyObject *tmp_assign_source_166;
    PyObject *tmp_assign_source_167;
    PyObject *tmp_assign_source_168;
    PyObject *tmp_assign_source_169;
    PyObject *tmp_assign_source_170;
    PyObject *tmp_assign_source_171;
    PyObject *tmp_assign_source_172;
    PyObject *tmp_assign_source_173;
    PyObject *tmp_assign_source_174;
    PyObject *tmp_assign_source_175;
    PyObject *tmp_assign_source_176;
    PyObject *tmp_assign_source_177;
    PyObject *tmp_assign_source_178;
    PyObject *tmp_assign_source_179;
    PyObject *tmp_assign_source_180;
    PyObject *tmp_assign_source_181;
    PyObject *tmp_assign_source_182;
    PyObject *tmp_assign_source_183;
    PyObject *tmp_assign_source_184;
    PyObject *tmp_assign_source_185;
    PyObject *tmp_assign_source_186;
    PyObject *tmp_assign_source_187;
    PyObject *tmp_assign_source_188;
    PyObject *tmp_assign_source_189;
    PyObject *tmp_assign_source_190;
    PyObject *tmp_assign_source_191;
    PyObject *tmp_assign_source_192;
    PyObject *tmp_assign_source_193;
    PyObject *tmp_assign_source_194;
    PyObject *tmp_assign_source_195;
    PyObject *tmp_assign_source_196;
    PyObject *tmp_assign_source_197;
    PyObject *tmp_assign_source_198;
    PyObject *tmp_assign_source_199;
    PyObject *tmp_assign_source_200;
    PyObject *tmp_assign_source_201;
    PyObject *tmp_assign_source_202;
    PyObject *tmp_assign_source_203;
    PyObject *tmp_assign_source_204;
    PyObject *tmp_assign_source_205;
    PyObject *tmp_assign_source_206;
    PyObject *tmp_assign_source_207;
    PyObject *tmp_assign_source_208;
    PyObject *tmp_assign_source_209;
    PyObject *tmp_assign_source_210;
    PyObject *tmp_assign_source_211;
    PyObject *tmp_assign_source_212;
    PyObject *tmp_assign_source_213;
    PyObject *tmp_assign_source_214;
    PyObject *tmp_assign_source_215;
    PyObject *tmp_assign_source_216;
    PyObject *tmp_assign_source_217;
    PyObject *tmp_assign_source_218;
    PyObject *tmp_assign_source_219;
    PyObject *tmp_assign_source_220;
    PyObject *tmp_assign_source_221;
    PyObject *tmp_assign_source_222;
    PyObject *tmp_assign_source_223;
    PyObject *tmp_assign_source_224;
    PyObject *tmp_assign_source_225;
    PyObject *tmp_assign_source_226;
    PyObject *tmp_assign_source_227;
    PyObject *tmp_assign_source_228;
    PyObject *tmp_assign_source_229;
    PyObject *tmp_assign_source_230;
    PyObject *tmp_assign_source_231;
    PyObject *tmp_assign_source_232;
    PyObject *tmp_assign_source_233;
    PyObject *tmp_assign_source_234;
    PyObject *tmp_assign_source_235;
    PyObject *tmp_assign_source_236;
    PyObject *tmp_assign_source_237;
    PyObject *tmp_assign_source_238;
    PyObject *tmp_assign_source_239;
    PyObject *tmp_assign_source_240;
    PyObject *tmp_assign_source_241;
    PyObject *tmp_assign_source_242;
    PyObject *tmp_assign_source_243;
    PyObject *tmp_assign_source_244;
    PyObject *tmp_assign_source_245;
    PyObject *tmp_assign_source_246;
    PyObject *tmp_assign_source_247;
    PyObject *tmp_assign_source_248;
    PyObject *tmp_assign_source_249;
    PyObject *tmp_assign_source_250;
    PyObject *tmp_assign_source_251;
    PyObject *tmp_assign_source_252;
    PyObject *tmp_assign_source_253;
    PyObject *tmp_assign_source_254;
    PyObject *tmp_assign_source_255;
    PyObject *tmp_assign_source_256;
    PyObject *tmp_assign_source_257;
    PyObject *tmp_assign_source_258;
    PyObject *tmp_assign_source_259;
    PyObject *tmp_assign_source_260;
    PyObject *tmp_assign_source_261;
    PyObject *tmp_assign_source_262;
    PyObject *tmp_assign_source_263;
    PyObject *tmp_assign_source_264;
    PyObject *tmp_assign_source_265;
    PyObject *tmp_assign_source_266;
    PyObject *tmp_assign_source_267;
    PyObject *tmp_assign_source_268;
    PyObject *tmp_assign_source_269;
    PyObject *tmp_assign_source_270;
    PyObject *tmp_assign_source_271;
    PyObject *tmp_assign_source_272;
    PyObject *tmp_assign_source_273;
    PyObject *tmp_assign_source_274;
    PyObject *tmp_assign_source_275;
    PyObject *tmp_assign_source_276;
    PyObject *tmp_assign_source_277;
    PyObject *tmp_assign_source_278;
    PyObject *tmp_assign_source_279;
    PyObject *tmp_assign_source_280;
    PyObject *tmp_assign_source_281;
    PyObject *tmp_assign_source_282;
    PyObject *tmp_assign_source_283;
    PyObject *tmp_assign_source_284;
    PyObject *tmp_assign_source_285;
    PyObject *tmp_assign_source_286;
    PyObject *tmp_assign_source_287;
    PyObject *tmp_assign_source_288;
    PyObject *tmp_assign_source_289;
    PyObject *tmp_assign_source_290;
    PyObject *tmp_assign_source_291;
    PyObject *tmp_assign_source_292;
    PyObject *tmp_assign_source_293;
    PyObject *tmp_assign_source_294;
    PyObject *tmp_assign_source_295;
    PyObject *tmp_assign_source_296;
    PyObject *tmp_assign_source_297;
    PyObject *tmp_assign_source_298;
    PyObject *tmp_assign_source_299;
    PyObject *tmp_assign_source_300;
    PyObject *tmp_assign_source_301;
    PyObject *tmp_assign_source_302;
    PyObject *tmp_assign_source_303;
    PyObject *tmp_assign_source_304;
    PyObject *tmp_assign_source_305;
    PyObject *tmp_assign_source_306;
    PyObject *tmp_assign_source_307;
    PyObject *tmp_assign_source_308;
    PyObject *tmp_assign_source_309;
    PyObject *tmp_assign_source_310;
    PyObject *tmp_assign_source_311;
    PyObject *tmp_assign_source_312;
    PyObject *tmp_assign_source_313;
    PyObject *tmp_assign_source_314;
    PyObject *tmp_assign_source_315;
    PyObject *tmp_assign_source_316;
    PyObject *tmp_assign_source_317;
    PyObject *tmp_assign_source_318;
    PyObject *tmp_assign_source_319;
    PyObject *tmp_assign_source_320;
    PyObject *tmp_assign_source_321;
    PyObject *tmp_assign_source_322;
    PyObject *tmp_assign_source_323;
    PyObject *tmp_assign_source_324;
    PyObject *tmp_assign_source_325;
    PyObject *tmp_assign_source_326;
    PyObject *tmp_assign_source_327;
    PyObject *tmp_assign_source_328;
    PyObject *tmp_assign_source_329;
    PyObject *tmp_assign_source_330;
    PyObject *tmp_assign_source_331;
    PyObject *tmp_assign_source_332;
    PyObject *tmp_assign_source_333;
    PyObject *tmp_assign_source_334;
    PyObject *tmp_assign_source_335;
    PyObject *tmp_assign_source_336;
    PyObject *tmp_assign_source_337;
    PyObject *tmp_assign_source_338;
    PyObject *tmp_assign_source_339;
    PyObject *tmp_assign_source_340;
    PyObject *tmp_assign_source_341;
    PyObject *tmp_assign_source_342;
    PyObject *tmp_assign_source_343;
    PyObject *tmp_assign_source_344;
    PyObject *tmp_assign_source_345;
    PyObject *tmp_assign_source_346;
    PyObject *tmp_assign_source_347;
    PyObject *tmp_assign_source_348;
    PyObject *tmp_assign_source_349;
    PyObject *tmp_assign_source_350;
    PyObject *tmp_assign_source_351;
    PyObject *tmp_assign_source_352;
    PyObject *tmp_assign_source_353;
    PyObject *tmp_assign_source_354;
    PyObject *tmp_assign_source_355;
    PyObject *tmp_assign_source_356;
    PyObject *tmp_assign_source_357;
    PyObject *tmp_assign_source_358;
    PyObject *tmp_assign_source_359;
    PyObject *tmp_assign_source_360;
    PyObject *tmp_assign_source_361;
    PyObject *tmp_assign_source_362;
    PyObject *tmp_assign_source_363;
    PyObject *tmp_assign_source_364;
    PyObject *tmp_assign_source_365;
    PyObject *tmp_assign_source_366;
    PyObject *tmp_assign_source_367;
    PyObject *tmp_assign_source_368;
    PyObject *tmp_assign_source_369;
    PyObject *tmp_assign_source_370;
    PyObject *tmp_assign_source_371;
    PyObject *tmp_assign_source_372;
    PyObject *tmp_assign_source_373;
    PyObject *tmp_assign_source_374;
    PyObject *tmp_assign_source_375;
    PyObject *tmp_assign_source_376;
    PyObject *tmp_assign_source_377;
    PyObject *tmp_assign_source_378;
    PyObject *tmp_assign_source_379;
    PyObject *tmp_assign_source_380;
    PyObject *tmp_assign_source_381;
    PyObject *tmp_assign_source_382;
    PyObject *tmp_assign_source_383;
    PyObject *tmp_assign_source_384;
    PyObject *tmp_assign_source_385;
    PyObject *tmp_assign_source_386;
    PyObject *tmp_assign_source_387;
    PyObject *tmp_assign_source_388;
    PyObject *tmp_assign_source_389;
    PyObject *tmp_assign_source_390;
    PyObject *tmp_assign_source_391;
    PyObject *tmp_assign_source_392;
    PyObject *tmp_assign_source_393;
    PyObject *tmp_assign_source_394;
    PyObject *tmp_assign_source_395;
    PyObject *tmp_assign_source_396;
    PyObject *tmp_assign_source_397;
    PyObject *tmp_assign_source_398;
    PyObject *tmp_assign_source_399;
    PyObject *tmp_assign_source_400;
    PyObject *tmp_assign_source_401;
    PyObject *tmp_assign_source_402;
    PyObject *tmp_assign_source_403;
    PyObject *tmp_assign_source_404;
    PyObject *tmp_assign_source_405;
    PyObject *tmp_assign_source_406;
    PyObject *tmp_assign_source_407;
    PyObject *tmp_assign_source_408;
    PyObject *tmp_assign_source_409;
    PyObject *tmp_assign_source_410;
    PyObject *tmp_assign_source_411;
    PyObject *tmp_assign_source_412;
    PyObject *tmp_assign_source_413;
    PyObject *tmp_assign_source_414;
    PyObject *tmp_assign_source_415;
    PyObject *tmp_assign_source_416;
    PyObject *tmp_assign_source_417;
    PyObject *tmp_assign_source_418;
    PyObject *tmp_assign_source_419;
    PyObject *tmp_assign_source_420;
    PyObject *tmp_assign_source_421;
    PyObject *tmp_assign_source_422;
    PyObject *tmp_assign_source_423;
    PyObject *tmp_assign_source_424;
    PyObject *tmp_assign_source_425;
    PyObject *tmp_assign_source_426;
    PyObject *tmp_assign_source_427;
    PyObject *tmp_assign_source_428;
    PyObject *tmp_assign_source_429;
    PyObject *tmp_assign_source_430;
    PyObject *tmp_assign_source_431;
    PyObject *tmp_assign_source_432;
    PyObject *tmp_assign_source_433;
    PyObject *tmp_assign_source_434;
    PyObject *tmp_assign_source_435;
    PyObject *tmp_assign_source_436;
    PyObject *tmp_assign_source_437;
    PyObject *tmp_assign_source_438;
    PyObject *tmp_assign_source_439;
    PyObject *tmp_assign_source_440;
    PyObject *tmp_assign_source_441;
    PyObject *tmp_assign_source_442;
    PyObject *tmp_assign_source_443;
    PyObject *tmp_assign_source_444;
    PyObject *tmp_assign_source_445;
    PyObject *tmp_assign_source_446;
    PyObject *tmp_assign_source_447;
    PyObject *tmp_assign_source_448;
    PyObject *tmp_assign_source_449;
    PyObject *tmp_assign_source_450;
    PyObject *tmp_assign_source_451;
    PyObject *tmp_assign_source_452;
    PyObject *tmp_assign_source_453;
    PyObject *tmp_assign_source_454;
    PyObject *tmp_assign_source_455;
    PyObject *tmp_assign_source_456;
    PyObject *tmp_assign_source_457;
    PyObject *tmp_assign_source_458;
    PyObject *tmp_assign_source_459;
    PyObject *tmp_assign_source_460;
    PyObject *tmp_assign_source_461;
    PyObject *tmp_assign_source_462;
    PyObject *tmp_assign_source_463;
    PyObject *tmp_assign_source_464;
    PyObject *tmp_assign_source_465;
    PyObject *tmp_assign_source_466;
    PyObject *tmp_assign_source_467;
    PyObject *tmp_assign_source_468;
    PyObject *tmp_assign_source_469;
    PyObject *tmp_assign_source_470;
    PyObject *tmp_assign_source_471;
    PyObject *tmp_assign_source_472;
    PyObject *tmp_assign_source_473;
    PyObject *tmp_assign_source_474;
    PyObject *tmp_assign_source_475;
    PyObject *tmp_assign_source_476;
    PyObject *tmp_assign_source_477;
    PyObject *tmp_assign_source_478;
    PyObject *tmp_assign_source_479;
    PyObject *tmp_assign_source_480;
    PyObject *tmp_assign_source_481;
    PyObject *tmp_assign_source_482;
    PyObject *tmp_assign_source_483;
    PyObject *tmp_assign_source_484;
    PyObject *tmp_assign_source_485;
    PyObject *tmp_assign_source_486;
    PyObject *tmp_assign_source_487;
    PyObject *tmp_assign_source_488;
    PyObject *tmp_assign_source_489;
    PyObject *tmp_assign_source_490;
    PyObject *tmp_assign_source_491;
    PyObject *tmp_assign_source_492;
    PyObject *tmp_assign_source_493;
    PyObject *tmp_assign_source_494;
    PyObject *tmp_assign_source_495;
    PyObject *tmp_assign_source_496;
    PyObject *tmp_assign_source_497;
    PyObject *tmp_assign_source_498;
    PyObject *tmp_assign_source_499;
    PyObject *tmp_assign_source_500;
    PyObject *tmp_assign_source_501;
    PyObject *tmp_assign_source_502;
    PyObject *tmp_assign_source_503;
    PyObject *tmp_assign_source_504;
    PyObject *tmp_assign_source_505;
    PyObject *tmp_assign_source_506;
    PyObject *tmp_assign_source_507;
    PyObject *tmp_assign_source_508;
    PyObject *tmp_assign_source_509;
    PyObject *tmp_assign_source_510;
    PyObject *tmp_assign_source_511;
    PyObject *tmp_assign_source_512;
    PyObject *tmp_assign_source_513;
    PyObject *tmp_assign_source_514;
    PyObject *tmp_assign_source_515;
    PyObject *tmp_assign_source_516;
    PyObject *tmp_assign_source_517;
    PyObject *tmp_assign_source_518;
    PyObject *tmp_assign_source_519;
    PyObject *tmp_assign_source_520;
    PyObject *tmp_assign_source_521;
    PyObject *tmp_assign_source_522;
    PyObject *tmp_assign_source_523;
    PyObject *tmp_assign_source_524;
    PyObject *tmp_assign_source_525;
    PyObject *tmp_assign_source_526;
    PyObject *tmp_assign_source_527;
    PyObject *tmp_assign_source_528;
    PyObject *tmp_assign_source_529;
    PyObject *tmp_assign_source_530;
    PyObject *tmp_assign_source_531;
    PyObject *tmp_assign_source_532;
    PyObject *tmp_assign_source_533;
    PyObject *tmp_assign_source_534;
    PyObject *tmp_assign_source_535;
    PyObject *tmp_assign_source_536;
    PyObject *tmp_assign_source_537;
    PyObject *tmp_assign_source_538;
    PyObject *tmp_assign_source_539;
    PyObject *tmp_assign_source_540;
    PyObject *tmp_assign_source_541;
    PyObject *tmp_assign_source_542;
    PyObject *tmp_assign_source_543;
    PyObject *tmp_assign_source_544;
    PyObject *tmp_assign_source_545;
    PyObject *tmp_assign_source_546;
    PyObject *tmp_assign_source_547;
    PyObject *tmp_assign_source_548;
    PyObject *tmp_assign_source_549;
    PyObject *tmp_assign_source_550;
    PyObject *tmp_assign_source_551;
    PyObject *tmp_assign_source_552;
    PyObject *tmp_assign_source_553;
    PyObject *tmp_assign_source_554;
    PyObject *tmp_assign_source_555;
    PyObject *tmp_assign_source_556;
    PyObject *tmp_assign_source_557;
    PyObject *tmp_assign_source_558;
    PyObject *tmp_assign_source_559;
    PyObject *tmp_assign_source_560;
    PyObject *tmp_assign_source_561;
    PyObject *tmp_assign_source_562;
    PyObject *tmp_assign_source_563;
    PyObject *tmp_assign_source_564;
    PyObject *tmp_assign_source_565;
    PyObject *tmp_assign_source_566;
    PyObject *tmp_assign_source_567;
    PyObject *tmp_assign_source_568;
    PyObject *tmp_assign_source_569;
    PyObject *tmp_assign_source_570;
    PyObject *tmp_assign_source_571;
    PyObject *tmp_assign_source_572;
    PyObject *tmp_assign_source_573;
    PyObject *tmp_assign_source_574;
    PyObject *tmp_assign_source_575;
    PyObject *tmp_assign_source_576;
    PyObject *tmp_assign_source_577;
    PyObject *tmp_assign_source_578;
    PyObject *tmp_assign_source_579;
    PyObject *tmp_assign_source_580;
    PyObject *tmp_assign_source_581;
    PyObject *tmp_assign_source_582;
    PyObject *tmp_assign_source_583;
    PyObject *tmp_assign_source_584;
    PyObject *tmp_assign_source_585;
    PyObject *tmp_assign_source_586;
    PyObject *tmp_assign_source_587;
    PyObject *tmp_assign_source_588;
    PyObject *tmp_assign_source_589;
    PyObject *tmp_assign_source_590;
    PyObject *tmp_assign_source_591;
    PyObject *tmp_assign_source_592;
    PyObject *tmp_assign_source_593;
    PyObject *tmp_assign_source_594;
    PyObject *tmp_assign_source_595;
    PyObject *tmp_assign_source_596;
    PyObject *tmp_assign_source_597;
    PyObject *tmp_assign_source_598;
    PyObject *tmp_assign_source_599;
    PyObject *tmp_assign_source_600;
    PyObject *tmp_assign_source_601;
    PyObject *tmp_assign_source_602;
    PyObject *tmp_assign_source_603;
    PyObject *tmp_assign_source_604;
    PyObject *tmp_assign_source_605;
    PyObject *tmp_assign_source_606;
    PyObject *tmp_assign_source_607;
    PyObject *tmp_assign_source_608;
    PyObject *tmp_assign_source_609;
    PyObject *tmp_assign_source_610;
    PyObject *tmp_assign_source_611;
    PyObject *tmp_assign_source_612;
    PyObject *tmp_assign_source_613;
    PyObject *tmp_assign_source_614;
    PyObject *tmp_assign_source_615;
    PyObject *tmp_assign_source_616;
    PyObject *tmp_assign_source_617;
    PyObject *tmp_assign_source_618;
    PyObject *tmp_assign_source_619;
    PyObject *tmp_assign_source_620;
    PyObject *tmp_assign_source_621;
    PyObject *tmp_assign_source_622;
    PyObject *tmp_assign_source_623;
    PyObject *tmp_assign_source_624;
    PyObject *tmp_assign_source_625;
    PyObject *tmp_assign_source_626;
    PyObject *tmp_assign_source_627;
    PyObject *tmp_assign_source_628;
    PyObject *tmp_assign_source_629;
    PyObject *tmp_assign_source_630;
    PyObject *tmp_assign_source_631;
    PyObject *tmp_assign_source_632;
    PyObject *tmp_assign_source_633;
    PyObject *tmp_assign_source_634;
    PyObject *tmp_assign_source_635;
    PyObject *tmp_assign_source_636;
    PyObject *tmp_assign_source_637;
    PyObject *tmp_assign_source_638;
    PyObject *tmp_assign_source_639;
    PyObject *tmp_assign_source_640;
    PyObject *tmp_assign_source_641;
    PyObject *tmp_assign_source_642;
    PyObject *tmp_assign_source_643;
    PyObject *tmp_assign_source_644;
    PyObject *tmp_assign_source_645;
    PyObject *tmp_assign_source_646;
    PyObject *tmp_assign_source_647;
    PyObject *tmp_assign_source_648;
    PyObject *tmp_assign_source_649;
    PyObject *tmp_assign_source_650;
    PyObject *tmp_assign_source_651;
    PyObject *tmp_assign_source_652;
    PyObject *tmp_assign_source_653;
    PyObject *tmp_assign_source_654;
    PyObject *tmp_assign_source_655;
    PyObject *tmp_assign_source_656;
    PyObject *tmp_assign_source_657;
    PyObject *tmp_assign_source_658;
    PyObject *tmp_assign_source_659;
    PyObject *tmp_assign_source_660;
    PyObject *tmp_assign_source_661;
    PyObject *tmp_assign_source_662;
    PyObject *tmp_assign_source_663;
    PyObject *tmp_assign_source_664;
    PyObject *tmp_assign_source_665;
    PyObject *tmp_assign_source_666;
    PyObject *tmp_assign_source_667;
    PyObject *tmp_assign_source_668;
    PyObject *tmp_assign_source_669;
    PyObject *tmp_assign_source_670;
    PyObject *tmp_assign_source_671;
    PyObject *tmp_assign_source_672;
    PyObject *tmp_assign_source_673;
    PyObject *tmp_assign_source_674;
    PyObject *tmp_assign_source_675;
    PyObject *tmp_assign_source_676;
    PyObject *tmp_assign_source_677;
    PyObject *tmp_assign_source_678;
    PyObject *tmp_assign_source_679;
    PyObject *tmp_assign_source_680;
    PyObject *tmp_assign_source_681;
    PyObject *tmp_assign_source_682;
    PyObject *tmp_assign_source_683;
    PyObject *tmp_assign_source_684;
    PyObject *tmp_assign_source_685;
    PyObject *tmp_assign_source_686;
    PyObject *tmp_assign_source_687;
    PyObject *tmp_assign_source_688;
    PyObject *tmp_assign_source_689;
    PyObject *tmp_assign_source_690;
    PyObject *tmp_assign_source_691;
    PyObject *tmp_assign_source_692;
    PyObject *tmp_assign_source_693;
    PyObject *tmp_assign_source_694;
    PyObject *tmp_assign_source_695;
    PyObject *tmp_assign_source_696;
    PyObject *tmp_assign_source_697;
    PyObject *tmp_assign_source_698;
    PyObject *tmp_assign_source_699;
    PyObject *tmp_assign_source_700;
    PyObject *tmp_assign_source_701;
    PyObject *tmp_assign_source_702;
    PyObject *tmp_assign_source_703;
    PyObject *tmp_assign_source_704;
    PyObject *tmp_assign_source_705;
    PyObject *tmp_assign_source_706;
    PyObject *tmp_assign_source_707;
    PyObject *tmp_assign_source_708;
    PyObject *tmp_assign_source_709;
    PyObject *tmp_assign_source_710;
    PyObject *tmp_assign_source_711;
    PyObject *tmp_assign_source_712;
    PyObject *tmp_assign_source_713;
    PyObject *tmp_assign_source_714;
    PyObject *tmp_assign_source_715;
    PyObject *tmp_assign_source_716;
    PyObject *tmp_assign_source_717;
    PyObject *tmp_assign_source_718;
    PyObject *tmp_assign_source_719;
    PyObject *tmp_assign_source_720;
    PyObject *tmp_assign_source_721;
    PyObject *tmp_assign_source_722;
    PyObject *tmp_assign_source_723;
    PyObject *tmp_assign_source_724;
    PyObject *tmp_assign_source_725;
    PyObject *tmp_assign_source_726;
    PyObject *tmp_assign_source_727;
    PyObject *tmp_assign_source_728;
    PyObject *tmp_assign_source_729;
    PyObject *tmp_assign_source_730;
    PyObject *tmp_assign_source_731;
    PyObject *tmp_assign_source_732;
    PyObject *tmp_assign_source_733;
    PyObject *tmp_assign_source_734;
    PyObject *tmp_assign_source_735;
    PyObject *tmp_assign_source_736;
    PyObject *tmp_assign_source_737;
    PyObject *tmp_assign_source_738;
    PyObject *tmp_assign_source_739;
    PyObject *tmp_assign_source_740;
    PyObject *tmp_assign_source_741;
    PyObject *tmp_assign_source_742;
    PyObject *tmp_assign_source_743;
    PyObject *tmp_assign_source_744;
    PyObject *tmp_assign_source_745;
    PyObject *tmp_assign_source_746;
    PyObject *tmp_assign_source_747;
    PyObject *tmp_assign_source_748;
    PyObject *tmp_assign_source_749;
    PyObject *tmp_assign_source_750;
    PyObject *tmp_assign_source_751;
    PyObject *tmp_assign_source_752;
    PyObject *tmp_assign_source_753;
    PyObject *tmp_assign_source_754;
    PyObject *tmp_assign_source_755;
    PyObject *tmp_assign_source_756;
    PyObject *tmp_assign_source_757;
    PyObject *tmp_assign_source_758;
    PyObject *tmp_assign_source_759;
    PyObject *tmp_assign_source_760;
    PyObject *tmp_assign_source_761;
    PyObject *tmp_assign_source_762;
    PyObject *tmp_assign_source_763;
    PyObject *tmp_assign_source_764;
    PyObject *tmp_assign_source_765;
    PyObject *tmp_assign_source_766;
    PyObject *tmp_assign_source_767;
    PyObject *tmp_assign_source_768;
    PyObject *tmp_assign_source_769;
    PyObject *tmp_assign_source_770;
    PyObject *tmp_assign_source_771;
    PyObject *tmp_assign_source_772;
    PyObject *tmp_bases_name_1;
    PyObject *tmp_bases_name_2;
    PyObject *tmp_bases_name_3;
    PyObject *tmp_bases_name_4;
    PyObject *tmp_bases_name_5;
    PyObject *tmp_bases_name_6;
    PyObject *tmp_bases_name_7;
    PyObject *tmp_bases_name_8;
    PyObject *tmp_bases_name_9;
    PyObject *tmp_bases_name_10;
    PyObject *tmp_bases_name_11;
    PyObject *tmp_bases_name_12;
    PyObject *tmp_bases_name_13;
    PyObject *tmp_bases_name_14;
    PyObject *tmp_bases_name_15;
    PyObject *tmp_bases_name_16;
    PyObject *tmp_bases_name_17;
    PyObject *tmp_bases_name_18;
    PyObject *tmp_bases_name_19;
    PyObject *tmp_bases_name_20;
    PyObject *tmp_bases_name_21;
    PyObject *tmp_bases_name_22;
    PyObject *tmp_bases_name_23;
    PyObject *tmp_bases_name_24;
    PyObject *tmp_bases_name_25;
    PyObject *tmp_bases_name_26;
    PyObject *tmp_bases_name_27;
    PyObject *tmp_bases_name_28;
    PyObject *tmp_bases_name_29;
    PyObject *tmp_bases_name_30;
    PyObject *tmp_bases_name_31;
    PyObject *tmp_bases_name_32;
    PyObject *tmp_bases_name_33;
    PyObject *tmp_bases_name_34;
    PyObject *tmp_bases_name_35;
    PyObject *tmp_bases_name_36;
    PyObject *tmp_bases_name_37;
    PyObject *tmp_bases_name_38;
    PyObject *tmp_bases_name_39;
    PyObject *tmp_bases_name_40;
    PyObject *tmp_bases_name_41;
    PyObject *tmp_bases_name_42;
    PyObject *tmp_bases_name_43;
    PyObject *tmp_bases_name_44;
    PyObject *tmp_bases_name_45;
    PyObject *tmp_bases_name_46;
    PyObject *tmp_bases_name_47;
    PyObject *tmp_bases_name_48;
    PyObject *tmp_bases_name_49;
    PyObject *tmp_bases_name_50;
    PyObject *tmp_bases_name_51;
    PyObject *tmp_bases_name_52;
    PyObject *tmp_bases_name_53;
    PyObject *tmp_bases_name_54;
    PyObject *tmp_bases_name_55;
    PyObject *tmp_bases_name_56;
    PyObject *tmp_bases_name_57;
    PyObject *tmp_bases_name_58;
    PyObject *tmp_bases_name_59;
    PyObject *tmp_bases_name_60;
    PyObject *tmp_bases_name_61;
    PyObject *tmp_bases_name_62;
    PyObject *tmp_bases_name_63;
    PyObject *tmp_bases_name_64;
    PyObject *tmp_bases_name_65;
    PyObject *tmp_bases_name_66;
    PyObject *tmp_bases_name_67;
    PyObject *tmp_bases_name_68;
    PyObject *tmp_bases_name_69;
    PyObject *tmp_bases_name_70;
    PyObject *tmp_called_name_1;
    PyObject *tmp_called_name_2;
    PyObject *tmp_called_name_3;
    PyObject *tmp_called_name_4;
    PyObject *tmp_called_name_5;
    PyObject *tmp_called_name_6;
    PyObject *tmp_called_name_7;
    PyObject *tmp_called_name_8;
    PyObject *tmp_called_name_9;
    PyObject *tmp_called_name_10;
    PyObject *tmp_called_name_11;
    PyObject *tmp_called_name_12;
    PyObject *tmp_called_name_13;
    PyObject *tmp_called_name_14;
    PyObject *tmp_called_name_15;
    PyObject *tmp_called_name_16;
    PyObject *tmp_called_name_17;
    PyObject *tmp_called_name_18;
    PyObject *tmp_called_name_19;
    PyObject *tmp_called_name_20;
    PyObject *tmp_called_name_21;
    PyObject *tmp_called_name_22;
    PyObject *tmp_called_name_23;
    PyObject *tmp_called_name_24;
    PyObject *tmp_called_name_25;
    PyObject *tmp_called_name_26;
    PyObject *tmp_called_name_27;
    PyObject *tmp_called_name_28;
    PyObject *tmp_called_name_29;
    PyObject *tmp_called_name_30;
    PyObject *tmp_called_name_31;
    PyObject *tmp_called_name_32;
    PyObject *tmp_called_name_33;
    PyObject *tmp_called_name_34;
    PyObject *tmp_called_name_35;
    PyObject *tmp_called_name_36;
    PyObject *tmp_called_name_37;
    PyObject *tmp_called_name_38;
    PyObject *tmp_called_name_39;
    PyObject *tmp_called_name_40;
    PyObject *tmp_called_name_41;
    PyObject *tmp_called_name_42;
    PyObject *tmp_called_name_43;
    PyObject *tmp_called_name_44;
    PyObject *tmp_called_name_45;
    PyObject *tmp_called_name_46;
    PyObject *tmp_called_name_47;
    PyObject *tmp_called_name_48;
    PyObject *tmp_called_name_49;
    PyObject *tmp_called_name_50;
    PyObject *tmp_called_name_51;
    PyObject *tmp_called_name_52;
    PyObject *tmp_called_name_53;
    PyObject *tmp_called_name_54;
    PyObject *tmp_called_name_55;
    PyObject *tmp_called_name_56;
    PyObject *tmp_called_name_57;
    PyObject *tmp_called_name_58;
    PyObject *tmp_called_name_59;
    PyObject *tmp_called_name_60;
    PyObject *tmp_called_name_61;
    PyObject *tmp_called_name_62;
    PyObject *tmp_called_name_63;
    PyObject *tmp_called_name_64;
    PyObject *tmp_called_name_65;
    PyObject *tmp_called_name_66;
    PyObject *tmp_called_name_67;
    PyObject *tmp_called_name_68;
    PyObject *tmp_called_name_69;
    PyObject *tmp_called_name_70;
    PyObject *tmp_called_name_71;
    PyObject *tmp_called_name_72;
    PyObject *tmp_called_name_73;
    PyObject *tmp_called_name_74;
    PyObject *tmp_called_name_75;
    PyObject *tmp_called_name_76;
    PyObject *tmp_called_name_77;
    PyObject *tmp_called_name_78;
    PyObject *tmp_called_name_79;
    PyObject *tmp_called_name_80;
    PyObject *tmp_called_name_81;
    PyObject *tmp_called_name_82;
    PyObject *tmp_called_name_83;
    PyObject *tmp_called_name_84;
    PyObject *tmp_called_name_85;
    PyObject *tmp_called_name_86;
    PyObject *tmp_called_name_87;
    PyObject *tmp_called_name_88;
    PyObject *tmp_called_name_89;
    PyObject *tmp_called_name_90;
    PyObject *tmp_called_name_91;
    PyObject *tmp_called_name_92;
    PyObject *tmp_called_name_93;
    PyObject *tmp_called_name_94;
    PyObject *tmp_called_name_95;
    PyObject *tmp_called_name_96;
    PyObject *tmp_called_name_97;
    PyObject *tmp_called_name_98;
    PyObject *tmp_called_name_99;
    PyObject *tmp_called_name_100;
    PyObject *tmp_called_name_101;
    PyObject *tmp_called_name_102;
    PyObject *tmp_called_name_103;
    PyObject *tmp_called_name_104;
    PyObject *tmp_called_name_105;
    PyObject *tmp_called_name_106;
    PyObject *tmp_called_name_107;
    PyObject *tmp_called_name_108;
    PyObject *tmp_called_name_109;
    PyObject *tmp_called_name_110;
    PyObject *tmp_called_name_111;
    PyObject *tmp_called_name_112;
    PyObject *tmp_called_name_113;
    PyObject *tmp_called_name_114;
    PyObject *tmp_called_name_115;
    PyObject *tmp_called_name_116;
    PyObject *tmp_called_name_117;
    PyObject *tmp_called_name_118;
    PyObject *tmp_called_name_119;
    PyObject *tmp_called_name_120;
    PyObject *tmp_called_name_121;
    PyObject *tmp_called_name_122;
    PyObject *tmp_called_name_123;
    PyObject *tmp_called_name_124;
    PyObject *tmp_called_name_125;
    PyObject *tmp_called_name_126;
    PyObject *tmp_called_name_127;
    PyObject *tmp_called_name_128;
    PyObject *tmp_called_name_129;
    PyObject *tmp_called_name_130;
    PyObject *tmp_called_name_131;
    PyObject *tmp_called_name_132;
    PyObject *tmp_called_name_133;
    PyObject *tmp_called_name_134;
    PyObject *tmp_called_name_135;
    PyObject *tmp_called_name_136;
    PyObject *tmp_called_name_137;
    PyObject *tmp_called_name_138;
    PyObject *tmp_called_name_139;
    PyObject *tmp_called_name_140;
    PyObject *tmp_called_name_141;
    PyObject *tmp_called_name_142;
    PyObject *tmp_called_name_143;
    PyObject *tmp_called_name_144;
    PyObject *tmp_classmethod_arg_1;
    int tmp_cmp_In_1;
    int tmp_cmp_In_2;
    int tmp_cmp_In_3;
    int tmp_cmp_In_4;
    int tmp_cmp_In_5;
    int tmp_cmp_In_6;
    int tmp_cmp_In_7;
    int tmp_cmp_In_8;
    int tmp_cmp_In_9;
    int tmp_cmp_In_10;
    int tmp_cmp_In_11;
    int tmp_cmp_In_12;
    int tmp_cmp_In_13;
    int tmp_cmp_In_14;
    int tmp_cmp_In_15;
    int tmp_cmp_In_16;
    int tmp_cmp_In_17;
    int tmp_cmp_In_18;
    int tmp_cmp_In_19;
    int tmp_cmp_In_20;
    int tmp_cmp_In_21;
    int tmp_cmp_In_22;
    int tmp_cmp_In_23;
    int tmp_cmp_In_24;
    int tmp_cmp_In_25;
    int tmp_cmp_In_26;
    int tmp_cmp_In_27;
    int tmp_cmp_In_28;
    int tmp_cmp_In_29;
    int tmp_cmp_In_30;
    int tmp_cmp_In_31;
    int tmp_cmp_In_32;
    int tmp_cmp_In_33;
    int tmp_cmp_In_34;
    int tmp_cmp_In_35;
    int tmp_cmp_In_36;
    int tmp_cmp_In_37;
    int tmp_cmp_In_38;
    int tmp_cmp_In_39;
    int tmp_cmp_In_40;
    int tmp_cmp_In_41;
    int tmp_cmp_In_42;
    int tmp_cmp_In_43;
    int tmp_cmp_In_44;
    int tmp_cmp_In_45;
    int tmp_cmp_In_46;
    int tmp_cmp_In_47;
    int tmp_cmp_In_48;
    int tmp_cmp_In_49;
    int tmp_cmp_In_50;
    int tmp_cmp_In_51;
    int tmp_cmp_In_52;
    int tmp_cmp_In_53;
    int tmp_cmp_In_54;
    int tmp_cmp_In_55;
    int tmp_cmp_In_56;
    int tmp_cmp_In_57;
    int tmp_cmp_In_58;
    int tmp_cmp_In_59;
    int tmp_cmp_In_60;
    int tmp_cmp_In_61;
    int tmp_cmp_In_62;
    int tmp_cmp_In_63;
    int tmp_cmp_In_64;
    int tmp_cmp_In_65;
    int tmp_cmp_In_66;
    int tmp_cmp_In_67;
    int tmp_cmp_In_68;
    int tmp_cmp_In_69;
    int tmp_cmp_In_70;
    int tmp_cmp_In_71;
    int tmp_cmp_In_72;
    int tmp_cmp_In_73;
    int tmp_cmp_In_74;
    int tmp_cmp_In_75;
    int tmp_cmp_In_76;
    int tmp_cmp_In_77;
    int tmp_cmp_In_78;
    int tmp_cmp_In_79;
    int tmp_cmp_In_80;
    int tmp_cmp_In_81;
    int tmp_cmp_In_82;
    int tmp_cmp_In_83;
    int tmp_cmp_In_84;
    int tmp_cmp_In_85;
    int tmp_cmp_In_86;
    int tmp_cmp_In_87;
    int tmp_cmp_In_88;
    int tmp_cmp_In_89;
    int tmp_cmp_In_90;
    int tmp_cmp_In_91;
    int tmp_cmp_In_92;
    int tmp_cmp_In_93;
    int tmp_cmp_In_94;
    int tmp_cmp_In_95;
    int tmp_cmp_In_96;
    int tmp_cmp_In_97;
    int tmp_cmp_In_98;
    int tmp_cmp_In_99;
    int tmp_cmp_In_100;
    int tmp_cmp_In_101;
    int tmp_cmp_In_102;
    int tmp_cmp_In_103;
    int tmp_cmp_In_104;
    int tmp_cmp_In_105;
    int tmp_cmp_In_106;
    int tmp_cmp_In_107;
    int tmp_cmp_In_108;
    int tmp_cmp_In_109;
    int tmp_cmp_In_110;
    int tmp_cmp_In_111;
    int tmp_cmp_In_112;
    int tmp_cmp_In_113;
    int tmp_cmp_In_114;
    int tmp_cmp_In_115;
    int tmp_cmp_In_116;
    int tmp_cmp_In_117;
    int tmp_cmp_In_118;
    int tmp_cmp_In_119;
    int tmp_cmp_In_120;
    int tmp_cmp_In_121;
    int tmp_cmp_In_122;
    int tmp_cmp_In_123;
    int tmp_cmp_In_124;
    int tmp_cmp_In_125;
    int tmp_cmp_In_126;
    int tmp_cmp_In_127;
    int tmp_cmp_In_128;
    int tmp_cmp_In_129;
    int tmp_cmp_In_130;
    int tmp_cmp_In_131;
    int tmp_cmp_In_132;
    int tmp_cmp_In_133;
    int tmp_cmp_In_134;
    int tmp_cmp_In_135;
    int tmp_cmp_In_136;
    int tmp_cmp_In_137;
    int tmp_cmp_In_138;
    int tmp_cmp_In_139;
    int tmp_cmp_In_140;
    PyObject *tmp_compare_left_1;
    PyObject *tmp_compare_left_2;
    PyObject *tmp_compare_left_3;
    PyObject *tmp_compare_left_4;
    PyObject *tmp_compare_left_5;
    PyObject *tmp_compare_left_6;
    PyObject *tmp_compare_left_7;
    PyObject *tmp_compare_left_8;
    PyObject *tmp_compare_left_9;
    PyObject *tmp_compare_left_10;
    PyObject *tmp_compare_left_11;
    PyObject *tmp_compare_left_12;
    PyObject *tmp_compare_left_13;
    PyObject *tmp_compare_left_14;
    PyObject *tmp_compare_left_15;
    PyObject *tmp_compare_left_16;
    PyObject *tmp_compare_left_17;
    PyObject *tmp_compare_left_18;
    PyObject *tmp_compare_left_19;
    PyObject *tmp_compare_left_20;
    PyObject *tmp_compare_left_21;
    PyObject *tmp_compare_left_22;
    PyObject *tmp_compare_left_23;
    PyObject *tmp_compare_left_24;
    PyObject *tmp_compare_left_25;
    PyObject *tmp_compare_left_26;
    PyObject *tmp_compare_left_27;
    PyObject *tmp_compare_left_28;
    PyObject *tmp_compare_left_29;
    PyObject *tmp_compare_left_30;
    PyObject *tmp_compare_left_31;
    PyObject *tmp_compare_left_32;
    PyObject *tmp_compare_left_33;
    PyObject *tmp_compare_left_34;
    PyObject *tmp_compare_left_35;
    PyObject *tmp_compare_left_36;
    PyObject *tmp_compare_left_37;
    PyObject *tmp_compare_left_38;
    PyObject *tmp_compare_left_39;
    PyObject *tmp_compare_left_40;
    PyObject *tmp_compare_left_41;
    PyObject *tmp_compare_left_42;
    PyObject *tmp_compare_left_43;
    PyObject *tmp_compare_left_44;
    PyObject *tmp_compare_left_45;
    PyObject *tmp_compare_left_46;
    PyObject *tmp_compare_left_47;
    PyObject *tmp_compare_left_48;
    PyObject *tmp_compare_left_49;
    PyObject *tmp_compare_left_50;
    PyObject *tmp_compare_left_51;
    PyObject *tmp_compare_left_52;
    PyObject *tmp_compare_left_53;
    PyObject *tmp_compare_left_54;
    PyObject *tmp_compare_left_55;
    PyObject *tmp_compare_left_56;
    PyObject *tmp_compare_left_57;
    PyObject *tmp_compare_left_58;
    PyObject *tmp_compare_left_59;
    PyObject *tmp_compare_left_60;
    PyObject *tmp_compare_left_61;
    PyObject *tmp_compare_left_62;
    PyObject *tmp_compare_left_63;
    PyObject *tmp_compare_left_64;
    PyObject *tmp_compare_left_65;
    PyObject *tmp_compare_left_66;
    PyObject *tmp_compare_left_67;
    PyObject *tmp_compare_left_68;
    PyObject *tmp_compare_left_69;
    PyObject *tmp_compare_left_70;
    PyObject *tmp_compare_left_71;
    PyObject *tmp_compare_left_72;
    PyObject *tmp_compare_left_73;
    PyObject *tmp_compare_left_74;
    PyObject *tmp_compare_left_75;
    PyObject *tmp_compare_left_76;
    PyObject *tmp_compare_left_77;
    PyObject *tmp_compare_left_78;
    PyObject *tmp_compare_left_79;
    PyObject *tmp_compare_left_80;
    PyObject *tmp_compare_left_81;
    PyObject *tmp_compare_left_82;
    PyObject *tmp_compare_left_83;
    PyObject *tmp_compare_left_84;
    PyObject *tmp_compare_left_85;
    PyObject *tmp_compare_left_86;
    PyObject *tmp_compare_left_87;
    PyObject *tmp_compare_left_88;
    PyObject *tmp_compare_left_89;
    PyObject *tmp_compare_left_90;
    PyObject *tmp_compare_left_91;
    PyObject *tmp_compare_left_92;
    PyObject *tmp_compare_left_93;
    PyObject *tmp_compare_left_94;
    PyObject *tmp_compare_left_95;
    PyObject *tmp_compare_left_96;
    PyObject *tmp_compare_left_97;
    PyObject *tmp_compare_left_98;
    PyObject *tmp_compare_left_99;
    PyObject *tmp_compare_left_100;
    PyObject *tmp_compare_left_101;
    PyObject *tmp_compare_left_102;
    PyObject *tmp_compare_left_103;
    PyObject *tmp_compare_left_104;
    PyObject *tmp_compare_left_105;
    PyObject *tmp_compare_left_106;
    PyObject *tmp_compare_left_107;
    PyObject *tmp_compare_left_108;
    PyObject *tmp_compare_left_109;
    PyObject *tmp_compare_left_110;
    PyObject *tmp_compare_left_111;
    PyObject *tmp_compare_left_112;
    PyObject *tmp_compare_left_113;
    PyObject *tmp_compare_left_114;
    PyObject *tmp_compare_left_115;
    PyObject *tmp_compare_left_116;
    PyObject *tmp_compare_left_117;
    PyObject *tmp_compare_left_118;
    PyObject *tmp_compare_left_119;
    PyObject *tmp_compare_left_120;
    PyObject *tmp_compare_left_121;
    PyObject *tmp_compare_left_122;
    PyObject *tmp_compare_left_123;
    PyObject *tmp_compare_left_124;
    PyObject *tmp_compare_left_125;
    PyObject *tmp_compare_left_126;
    PyObject *tmp_compare_left_127;
    PyObject *tmp_compare_left_128;
    PyObject *tmp_compare_left_129;
    PyObject *tmp_compare_left_130;
    PyObject *tmp_compare_left_131;
    PyObject *tmp_compare_left_132;
    PyObject *tmp_compare_left_133;
    PyObject *tmp_compare_left_134;
    PyObject *tmp_compare_left_135;
    PyObject *tmp_compare_left_136;
    PyObject *tmp_compare_left_137;
    PyObject *tmp_compare_left_138;
    PyObject *tmp_compare_left_139;
    PyObject *tmp_compare_left_140;
    PyObject *tmp_compare_left_141;
    PyObject *tmp_compare_right_1;
    PyObject *tmp_compare_right_2;
    PyObject *tmp_compare_right_3;
    PyObject *tmp_compare_right_4;
    PyObject *tmp_compare_right_5;
    PyObject *tmp_compare_right_6;
    PyObject *tmp_compare_right_7;
    PyObject *tmp_compare_right_8;
    PyObject *tmp_compare_right_9;
    PyObject *tmp_compare_right_10;
    PyObject *tmp_compare_right_11;
    PyObject *tmp_compare_right_12;
    PyObject *tmp_compare_right_13;
    PyObject *tmp_compare_right_14;
    PyObject *tmp_compare_right_15;
    PyObject *tmp_compare_right_16;
    PyObject *tmp_compare_right_17;
    PyObject *tmp_compare_right_18;
    PyObject *tmp_compare_right_19;
    PyObject *tmp_compare_right_20;
    PyObject *tmp_compare_right_21;
    PyObject *tmp_compare_right_22;
    PyObject *tmp_compare_right_23;
    PyObject *tmp_compare_right_24;
    PyObject *tmp_compare_right_25;
    PyObject *tmp_compare_right_26;
    PyObject *tmp_compare_right_27;
    PyObject *tmp_compare_right_28;
    PyObject *tmp_compare_right_29;
    PyObject *tmp_compare_right_30;
    PyObject *tmp_compare_right_31;
    PyObject *tmp_compare_right_32;
    PyObject *tmp_compare_right_33;
    PyObject *tmp_compare_right_34;
    PyObject *tmp_compare_right_35;
    PyObject *tmp_compare_right_36;
    PyObject *tmp_compare_right_37;
    PyObject *tmp_compare_right_38;
    PyObject *tmp_compare_right_39;
    PyObject *tmp_compare_right_40;
    PyObject *tmp_compare_right_41;
    PyObject *tmp_compare_right_42;
    PyObject *tmp_compare_right_43;
    PyObject *tmp_compare_right_44;
    PyObject *tmp_compare_right_45;
    PyObject *tmp_compare_right_46;
    PyObject *tmp_compare_right_47;
    PyObject *tmp_compare_right_48;
    PyObject *tmp_compare_right_49;
    PyObject *tmp_compare_right_50;
    PyObject *tmp_compare_right_51;
    PyObject *tmp_compare_right_52;
    PyObject *tmp_compare_right_53;
    PyObject *tmp_compare_right_54;
    PyObject *tmp_compare_right_55;
    PyObject *tmp_compare_right_56;
    PyObject *tmp_compare_right_57;
    PyObject *tmp_compare_right_58;
    PyObject *tmp_compare_right_59;
    PyObject *tmp_compare_right_60;
    PyObject *tmp_compare_right_61;
    PyObject *tmp_compare_right_62;
    PyObject *tmp_compare_right_63;
    PyObject *tmp_compare_right_64;
    PyObject *tmp_compare_right_65;
    PyObject *tmp_compare_right_66;
    PyObject *tmp_compare_right_67;
    PyObject *tmp_compare_right_68;
    PyObject *tmp_compare_right_69;
    PyObject *tmp_compare_right_70;
    PyObject *tmp_compare_right_71;
    PyObject *tmp_compare_right_72;
    PyObject *tmp_compare_right_73;
    PyObject *tmp_compare_right_74;
    PyObject *tmp_compare_right_75;
    PyObject *tmp_compare_right_76;
    PyObject *tmp_compare_right_77;
    PyObject *tmp_compare_right_78;
    PyObject *tmp_compare_right_79;
    PyObject *tmp_compare_right_80;
    PyObject *tmp_compare_right_81;
    PyObject *tmp_compare_right_82;
    PyObject *tmp_compare_right_83;
    PyObject *tmp_compare_right_84;
    PyObject *tmp_compare_right_85;
    PyObject *tmp_compare_right_86;
    PyObject *tmp_compare_right_87;
    PyObject *tmp_compare_right_88;
    PyObject *tmp_compare_right_89;
    PyObject *tmp_compare_right_90;
    PyObject *tmp_compare_right_91;
    PyObject *tmp_compare_right_92;
    PyObject *tmp_compare_right_93;
    PyObject *tmp_compare_right_94;
    PyObject *tmp_compare_right_95;
    PyObject *tmp_compare_right_96;
    PyObject *tmp_compare_right_97;
    PyObject *tmp_compare_right_98;
    PyObject *tmp_compare_right_99;
    PyObject *tmp_compare_right_100;
    PyObject *tmp_compare_right_101;
    PyObject *tmp_compare_right_102;
    PyObject *tmp_compare_right_103;
    PyObject *tmp_compare_right_104;
    PyObject *tmp_compare_right_105;
    PyObject *tmp_compare_right_106;
    PyObject *tmp_compare_right_107;
    PyObject *tmp_compare_right_108;
    PyObject *tmp_compare_right_109;
    PyObject *tmp_compare_right_110;
    PyObject *tmp_compare_right_111;
    PyObject *tmp_compare_right_112;
    PyObject *tmp_compare_right_113;
    PyObject *tmp_compare_right_114;
    PyObject *tmp_compare_right_115;
    PyObject *tmp_compare_right_116;
    PyObject *tmp_compare_right_117;
    PyObject *tmp_compare_right_118;
    PyObject *tmp_compare_right_119;
    PyObject *tmp_compare_right_120;
    PyObject *tmp_compare_right_121;
    PyObject *tmp_compare_right_122;
    PyObject *tmp_compare_right_123;
    PyObject *tmp_compare_right_124;
    PyObject *tmp_compare_right_125;
    PyObject *tmp_compare_right_126;
    PyObject *tmp_compare_right_127;
    PyObject *tmp_compare_right_128;
    PyObject *tmp_compare_right_129;
    PyObject *tmp_compare_right_130;
    PyObject *tmp_compare_right_131;
    PyObject *tmp_compare_right_132;
    PyObject *tmp_compare_right_133;
    PyObject *tmp_compare_right_134;
    PyObject *tmp_compare_right_135;
    PyObject *tmp_compare_right_136;
    PyObject *tmp_compare_right_137;
    PyObject *tmp_compare_right_138;
    PyObject *tmp_compare_right_139;
    PyObject *tmp_compare_right_140;
    PyObject *tmp_compare_right_141;
    int tmp_cond_truth_1;
    int tmp_cond_truth_2;
    int tmp_cond_truth_3;
    int tmp_cond_truth_4;
    int tmp_cond_truth_5;
    int tmp_cond_truth_6;
    int tmp_cond_truth_7;
    int tmp_cond_truth_8;
    int tmp_cond_truth_9;
    int tmp_cond_truth_10;
    int tmp_cond_truth_11;
    int tmp_cond_truth_12;
    int tmp_cond_truth_13;
    int tmp_cond_truth_14;
    int tmp_cond_truth_15;
    int tmp_cond_truth_16;
    int tmp_cond_truth_17;
    int tmp_cond_truth_18;
    int tmp_cond_truth_19;
    int tmp_cond_truth_20;
    int tmp_cond_truth_21;
    int tmp_cond_truth_22;
    int tmp_cond_truth_23;
    int tmp_cond_truth_24;
    int tmp_cond_truth_25;
    int tmp_cond_truth_26;
    int tmp_cond_truth_27;
    int tmp_cond_truth_28;
    int tmp_cond_truth_29;
    int tmp_cond_truth_30;
    int tmp_cond_truth_31;
    int tmp_cond_truth_32;
    int tmp_cond_truth_33;
    int tmp_cond_truth_34;
    int tmp_cond_truth_35;
    int tmp_cond_truth_36;
    int tmp_cond_truth_37;
    int tmp_cond_truth_38;
    int tmp_cond_truth_39;
    int tmp_cond_truth_40;
    int tmp_cond_truth_41;
    int tmp_cond_truth_42;
    int tmp_cond_truth_43;
    int tmp_cond_truth_44;
    int tmp_cond_truth_45;
    int tmp_cond_truth_46;
    int tmp_cond_truth_47;
    int tmp_cond_truth_48;
    int tmp_cond_truth_49;
    int tmp_cond_truth_50;
    int tmp_cond_truth_51;
    int tmp_cond_truth_52;
    int tmp_cond_truth_53;
    int tmp_cond_truth_54;
    int tmp_cond_truth_55;
    int tmp_cond_truth_56;
    int tmp_cond_truth_57;
    int tmp_cond_truth_58;
    int tmp_cond_truth_59;
    int tmp_cond_truth_60;
    int tmp_cond_truth_61;
    int tmp_cond_truth_62;
    int tmp_cond_truth_63;
    int tmp_cond_truth_64;
    int tmp_cond_truth_65;
    int tmp_cond_truth_66;
    int tmp_cond_truth_67;
    int tmp_cond_truth_68;
    int tmp_cond_truth_69;
    int tmp_cond_truth_70;
    PyObject *tmp_cond_value_1;
    PyObject *tmp_cond_value_2;
    PyObject *tmp_cond_value_3;
    PyObject *tmp_cond_value_4;
    PyObject *tmp_cond_value_5;
    PyObject *tmp_cond_value_6;
    PyObject *tmp_cond_value_7;
    PyObject *tmp_cond_value_8;
    PyObject *tmp_cond_value_9;
    PyObject *tmp_cond_value_10;
    PyObject *tmp_cond_value_11;
    PyObject *tmp_cond_value_12;
    PyObject *tmp_cond_value_13;
    PyObject *tmp_cond_value_14;
    PyObject *tmp_cond_value_15;
    PyObject *tmp_cond_value_16;
    PyObject *tmp_cond_value_17;
    PyObject *tmp_cond_value_18;
    PyObject *tmp_cond_value_19;
    PyObject *tmp_cond_value_20;
    PyObject *tmp_cond_value_21;
    PyObject *tmp_cond_value_22;
    PyObject *tmp_cond_value_23;
    PyObject *tmp_cond_value_24;
    PyObject *tmp_cond_value_25;
    PyObject *tmp_cond_value_26;
    PyObject *tmp_cond_value_27;
    PyObject *tmp_cond_value_28;
    PyObject *tmp_cond_value_29;
    PyObject *tmp_cond_value_30;
    PyObject *tmp_cond_value_31;
    PyObject *tmp_cond_value_32;
    PyObject *tmp_cond_value_33;
    PyObject *tmp_cond_value_34;
    PyObject *tmp_cond_value_35;
    PyObject *tmp_cond_value_36;
    PyObject *tmp_cond_value_37;
    PyObject *tmp_cond_value_38;
    PyObject *tmp_cond_value_39;
    PyObject *tmp_cond_value_40;
    PyObject *tmp_cond_value_41;
    PyObject *tmp_cond_value_42;
    PyObject *tmp_cond_value_43;
    PyObject *tmp_cond_value_44;
    PyObject *tmp_cond_value_45;
    PyObject *tmp_cond_value_46;
    PyObject *tmp_cond_value_47;
    PyObject *tmp_cond_value_48;
    PyObject *tmp_cond_value_49;
    PyObject *tmp_cond_value_50;
    PyObject *tmp_cond_value_51;
    PyObject *tmp_cond_value_52;
    PyObject *tmp_cond_value_53;
    PyObject *tmp_cond_value_54;
    PyObject *tmp_cond_value_55;
    PyObject *tmp_cond_value_56;
    PyObject *tmp_cond_value_57;
    PyObject *tmp_cond_value_58;
    PyObject *tmp_cond_value_59;
    PyObject *tmp_cond_value_60;
    PyObject *tmp_cond_value_61;
    PyObject *tmp_cond_value_62;
    PyObject *tmp_cond_value_63;
    PyObject *tmp_cond_value_64;
    PyObject *tmp_cond_value_65;
    PyObject *tmp_cond_value_66;
    PyObject *tmp_cond_value_67;
    PyObject *tmp_cond_value_68;
    PyObject *tmp_cond_value_69;
    PyObject *tmp_cond_value_70;
    PyObject *tmp_defaults_1;
    PyObject *tmp_defaults_2;
    PyObject *tmp_defaults_3;
    PyObject *tmp_defaults_4;
    PyObject *tmp_defaults_5;
    PyObject *tmp_defaults_6;
    PyObject *tmp_defaults_7;
    PyObject *tmp_defaults_8;
    PyObject *tmp_defaults_9;
    PyObject *tmp_defaults_10;
    PyObject *tmp_defaults_11;
    PyObject *tmp_defaults_12;
    PyObject *tmp_defaults_13;
    PyObject *tmp_defaults_14;
    PyObject *tmp_defaults_15;
    PyObject *tmp_defaults_16;
    PyObject *tmp_defaults_17;
    PyObject *tmp_defaults_18;
    PyObject *tmp_defaults_19;
    PyObject *tmp_defaults_20;
    PyObject *tmp_defaults_21;
    PyObject *tmp_defaults_22;
    PyObject *tmp_defaults_23;
    PyObject *tmp_defaults_24;
    PyObject *tmp_defaults_25;
    PyObject *tmp_defaults_26;
    PyObject *tmp_defaults_27;
    PyObject *tmp_dict_key_1;
    PyObject *tmp_dict_key_2;
    PyObject *tmp_dict_key_3;
    PyObject *tmp_dict_key_4;
    PyObject *tmp_dict_key_5;
    PyObject *tmp_dict_key_6;
    PyObject *tmp_dict_key_7;
    PyObject *tmp_dict_key_8;
    PyObject *tmp_dict_key_9;
    PyObject *tmp_dict_key_10;
    PyObject *tmp_dict_key_11;
    PyObject *tmp_dict_key_12;
    PyObject *tmp_dict_key_13;
    PyObject *tmp_dict_key_14;
    PyObject *tmp_dict_key_15;
    PyObject *tmp_dict_key_16;
    PyObject *tmp_dict_key_17;
    PyObject *tmp_dict_key_18;
    PyObject *tmp_dict_name_1;
    PyObject *tmp_dict_name_2;
    PyObject *tmp_dict_name_3;
    PyObject *tmp_dict_name_4;
    PyObject *tmp_dict_name_5;
    PyObject *tmp_dict_name_6;
    PyObject *tmp_dict_name_7;
    PyObject *tmp_dict_name_8;
    PyObject *tmp_dict_name_9;
    PyObject *tmp_dict_name_10;
    PyObject *tmp_dict_name_11;
    PyObject *tmp_dict_name_12;
    PyObject *tmp_dict_name_13;
    PyObject *tmp_dict_name_14;
    PyObject *tmp_dict_name_15;
    PyObject *tmp_dict_name_16;
    PyObject *tmp_dict_name_17;
    PyObject *tmp_dict_name_18;
    PyObject *tmp_dict_name_19;
    PyObject *tmp_dict_name_20;
    PyObject *tmp_dict_name_21;
    PyObject *tmp_dict_name_22;
    PyObject *tmp_dict_name_23;
    PyObject *tmp_dict_name_24;
    PyObject *tmp_dict_name_25;
    PyObject *tmp_dict_name_26;
    PyObject *tmp_dict_name_27;
    PyObject *tmp_dict_name_28;
    PyObject *tmp_dict_name_29;
    PyObject *tmp_dict_name_30;
    PyObject *tmp_dict_name_31;
    PyObject *tmp_dict_name_32;
    PyObject *tmp_dict_name_33;
    PyObject *tmp_dict_name_34;
    PyObject *tmp_dict_name_35;
    PyObject *tmp_dict_name_36;
    PyObject *tmp_dict_name_37;
    PyObject *tmp_dict_name_38;
    PyObject *tmp_dict_name_39;
    PyObject *tmp_dict_name_40;
    PyObject *tmp_dict_name_41;
    PyObject *tmp_dict_name_42;
    PyObject *tmp_dict_name_43;
    PyObject *tmp_dict_name_44;
    PyObject *tmp_dict_name_45;
    PyObject *tmp_dict_name_46;
    PyObject *tmp_dict_name_47;
    PyObject *tmp_dict_name_48;
    PyObject *tmp_dict_name_49;
    PyObject *tmp_dict_name_50;
    PyObject *tmp_dict_name_51;
    PyObject *tmp_dict_name_52;
    PyObject *tmp_dict_name_53;
    PyObject *tmp_dict_name_54;
    PyObject *tmp_dict_name_55;
    PyObject *tmp_dict_name_56;
    PyObject *tmp_dict_name_57;
    PyObject *tmp_dict_name_58;
    PyObject *tmp_dict_name_59;
    PyObject *tmp_dict_name_60;
    PyObject *tmp_dict_name_61;
    PyObject *tmp_dict_name_62;
    PyObject *tmp_dict_name_63;
    PyObject *tmp_dict_name_64;
    PyObject *tmp_dict_name_65;
    PyObject *tmp_dict_name_66;
    PyObject *tmp_dict_name_67;
    PyObject *tmp_dict_name_68;
    PyObject *tmp_dict_name_69;
    PyObject *tmp_dict_name_70;
    PyObject *tmp_dict_value_1;
    PyObject *tmp_dict_value_2;
    PyObject *tmp_dict_value_3;
    PyObject *tmp_dict_value_4;
    PyObject *tmp_dict_value_5;
    PyObject *tmp_dict_value_6;
    PyObject *tmp_dict_value_7;
    PyObject *tmp_dict_value_8;
    PyObject *tmp_dict_value_9;
    PyObject *tmp_dict_value_10;
    PyObject *tmp_dict_value_11;
    PyObject *tmp_dict_value_12;
    PyObject *tmp_dict_value_13;
    PyObject *tmp_dict_value_14;
    PyObject *tmp_dict_value_15;
    PyObject *tmp_dict_value_16;
    PyObject *tmp_dict_value_17;
    PyObject *tmp_dict_value_18;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *tmp_fromlist_name_1;
    PyObject *tmp_fromlist_name_2;
    PyObject *tmp_fromlist_name_3;
    PyObject *tmp_fromlist_name_4;
    PyObject *tmp_fromlist_name_5;
    PyObject *tmp_globals_name_1;
    PyObject *tmp_globals_name_2;
    PyObject *tmp_globals_name_3;
    PyObject *tmp_globals_name_4;
    PyObject *tmp_globals_name_5;
    PyObject *tmp_hasattr_attr_1;
    PyObject *tmp_hasattr_attr_2;
    PyObject *tmp_hasattr_attr_3;
    PyObject *tmp_hasattr_attr_4;
    PyObject *tmp_hasattr_attr_5;
    PyObject *tmp_hasattr_attr_6;
    PyObject *tmp_hasattr_attr_7;
    PyObject *tmp_hasattr_attr_8;
    PyObject *tmp_hasattr_attr_9;
    PyObject *tmp_hasattr_attr_10;
    PyObject *tmp_hasattr_attr_11;
    PyObject *tmp_hasattr_attr_12;
    PyObject *tmp_hasattr_attr_13;
    PyObject *tmp_hasattr_attr_14;
    PyObject *tmp_hasattr_attr_15;
    PyObject *tmp_hasattr_attr_16;
    PyObject *tmp_hasattr_attr_17;
    PyObject *tmp_hasattr_attr_18;
    PyObject *tmp_hasattr_attr_19;
    PyObject *tmp_hasattr_attr_20;
    PyObject *tmp_hasattr_attr_21;
    PyObject *tmp_hasattr_attr_22;
    PyObject *tmp_hasattr_attr_23;
    PyObject *tmp_hasattr_attr_24;
    PyObject *tmp_hasattr_attr_25;
    PyObject *tmp_hasattr_attr_26;
    PyObject *tmp_hasattr_attr_27;
    PyObject *tmp_hasattr_attr_28;
    PyObject *tmp_hasattr_attr_29;
    PyObject *tmp_hasattr_attr_30;
    PyObject *tmp_hasattr_attr_31;
    PyObject *tmp_hasattr_attr_32;
    PyObject *tmp_hasattr_attr_33;
    PyObject *tmp_hasattr_attr_34;
    PyObject *tmp_hasattr_attr_35;
    PyObject *tmp_hasattr_attr_36;
    PyObject *tmp_hasattr_attr_37;
    PyObject *tmp_hasattr_attr_38;
    PyObject *tmp_hasattr_attr_39;
    PyObject *tmp_hasattr_attr_40;
    PyObject *tmp_hasattr_attr_41;
    PyObject *tmp_hasattr_attr_42;
    PyObject *tmp_hasattr_attr_43;
    PyObject *tmp_hasattr_attr_44;
    PyObject *tmp_hasattr_attr_45;
    PyObject *tmp_hasattr_attr_46;
    PyObject *tmp_hasattr_attr_47;
    PyObject *tmp_hasattr_attr_48;
    PyObject *tmp_hasattr_attr_49;
    PyObject *tmp_hasattr_attr_50;
    PyObject *tmp_hasattr_attr_51;
    PyObject *tmp_hasattr_attr_52;
    PyObject *tmp_hasattr_attr_53;
    PyObject *tmp_hasattr_attr_54;
    PyObject *tmp_hasattr_attr_55;
    PyObject *tmp_hasattr_attr_56;
    PyObject *tmp_hasattr_attr_57;
    PyObject *tmp_hasattr_attr_58;
    PyObject *tmp_hasattr_attr_59;
    PyObject *tmp_hasattr_attr_60;
    PyObject *tmp_hasattr_attr_61;
    PyObject *tmp_hasattr_attr_62;
    PyObject *tmp_hasattr_attr_63;
    PyObject *tmp_hasattr_attr_64;
    PyObject *tmp_hasattr_attr_65;
    PyObject *tmp_hasattr_attr_66;
    PyObject *tmp_hasattr_attr_67;
    PyObject *tmp_hasattr_attr_68;
    PyObject *tmp_hasattr_attr_69;
    PyObject *tmp_hasattr_attr_70;
    PyObject *tmp_hasattr_source_1;
    PyObject *tmp_hasattr_source_2;
    PyObject *tmp_hasattr_source_3;
    PyObject *tmp_hasattr_source_4;
    PyObject *tmp_hasattr_source_5;
    PyObject *tmp_hasattr_source_6;
    PyObject *tmp_hasattr_source_7;
    PyObject *tmp_hasattr_source_8;
    PyObject *tmp_hasattr_source_9;
    PyObject *tmp_hasattr_source_10;
    PyObject *tmp_hasattr_source_11;
    PyObject *tmp_hasattr_source_12;
    PyObject *tmp_hasattr_source_13;
    PyObject *tmp_hasattr_source_14;
    PyObject *tmp_hasattr_source_15;
    PyObject *tmp_hasattr_source_16;
    PyObject *tmp_hasattr_source_17;
    PyObject *tmp_hasattr_source_18;
    PyObject *tmp_hasattr_source_19;
    PyObject *tmp_hasattr_source_20;
    PyObject *tmp_hasattr_source_21;
    PyObject *tmp_hasattr_source_22;
    PyObject *tmp_hasattr_source_23;
    PyObject *tmp_hasattr_source_24;
    PyObject *tmp_hasattr_source_25;
    PyObject *tmp_hasattr_source_26;
    PyObject *tmp_hasattr_source_27;
    PyObject *tmp_hasattr_source_28;
    PyObject *tmp_hasattr_source_29;
    PyObject *tmp_hasattr_source_30;
    PyObject *tmp_hasattr_source_31;
    PyObject *tmp_hasattr_source_32;
    PyObject *tmp_hasattr_source_33;
    PyObject *tmp_hasattr_source_34;
    PyObject *tmp_hasattr_source_35;
    PyObject *tmp_hasattr_source_36;
    PyObject *tmp_hasattr_source_37;
    PyObject *tmp_hasattr_source_38;
    PyObject *tmp_hasattr_source_39;
    PyObject *tmp_hasattr_source_40;
    PyObject *tmp_hasattr_source_41;
    PyObject *tmp_hasattr_source_42;
    PyObject *tmp_hasattr_source_43;
    PyObject *tmp_hasattr_source_44;
    PyObject *tmp_hasattr_source_45;
    PyObject *tmp_hasattr_source_46;
    PyObject *tmp_hasattr_source_47;
    PyObject *tmp_hasattr_source_48;
    PyObject *tmp_hasattr_source_49;
    PyObject *tmp_hasattr_source_50;
    PyObject *tmp_hasattr_source_51;
    PyObject *tmp_hasattr_source_52;
    PyObject *tmp_hasattr_source_53;
    PyObject *tmp_hasattr_source_54;
    PyObject *tmp_hasattr_source_55;
    PyObject *tmp_hasattr_source_56;
    PyObject *tmp_hasattr_source_57;
    PyObject *tmp_hasattr_source_58;
    PyObject *tmp_hasattr_source_59;
    PyObject *tmp_hasattr_source_60;
    PyObject *tmp_hasattr_source_61;
    PyObject *tmp_hasattr_source_62;
    PyObject *tmp_hasattr_source_63;
    PyObject *tmp_hasattr_source_64;
    PyObject *tmp_hasattr_source_65;
    PyObject *tmp_hasattr_source_66;
    PyObject *tmp_hasattr_source_67;
    PyObject *tmp_hasattr_source_68;
    PyObject *tmp_hasattr_source_69;
    PyObject *tmp_hasattr_source_70;
    PyObject *tmp_import_name_from_1;
    PyObject *tmp_import_name_from_2;
    PyObject *tmp_import_name_from_3;
    PyObject *tmp_import_name_from_4;
    PyObject *tmp_import_name_from_5;
    PyObject *tmp_import_name_from_6;
    bool tmp_isnot_1;
    PyObject *tmp_iter_arg_1;
    PyObject *tmp_key_name_1;
    PyObject *tmp_key_name_2;
    PyObject *tmp_key_name_3;
    PyObject *tmp_key_name_4;
    PyObject *tmp_key_name_5;
    PyObject *tmp_key_name_6;
    PyObject *tmp_key_name_7;
    PyObject *tmp_key_name_8;
    PyObject *tmp_key_name_9;
    PyObject *tmp_key_name_10;
    PyObject *tmp_key_name_11;
    PyObject *tmp_key_name_12;
    PyObject *tmp_key_name_13;
    PyObject *tmp_key_name_14;
    PyObject *tmp_key_name_15;
    PyObject *tmp_key_name_16;
    PyObject *tmp_key_name_17;
    PyObject *tmp_key_name_18;
    PyObject *tmp_key_name_19;
    PyObject *tmp_key_name_20;
    PyObject *tmp_key_name_21;
    PyObject *tmp_key_name_22;
    PyObject *tmp_key_name_23;
    PyObject *tmp_key_name_24;
    PyObject *tmp_key_name_25;
    PyObject *tmp_key_name_26;
    PyObject *tmp_key_name_27;
    PyObject *tmp_key_name_28;
    PyObject *tmp_key_name_29;
    PyObject *tmp_key_name_30;
    PyObject *tmp_key_name_31;
    PyObject *tmp_key_name_32;
    PyObject *tmp_key_name_33;
    PyObject *tmp_key_name_34;
    PyObject *tmp_key_name_35;
    PyObject *tmp_key_name_36;
    PyObject *tmp_key_name_37;
    PyObject *tmp_key_name_38;
    PyObject *tmp_key_name_39;
    PyObject *tmp_key_name_40;
    PyObject *tmp_key_name_41;
    PyObject *tmp_key_name_42;
    PyObject *tmp_key_name_43;
    PyObject *tmp_key_name_44;
    PyObject *tmp_key_name_45;
    PyObject *tmp_key_name_46;
    PyObject *tmp_key_name_47;
    PyObject *tmp_key_name_48;
    PyObject *tmp_key_name_49;
    PyObject *tmp_key_name_50;
    PyObject *tmp_key_name_51;
    PyObject *tmp_key_name_52;
    PyObject *tmp_key_name_53;
    PyObject *tmp_key_name_54;
    PyObject *tmp_key_name_55;
    PyObject *tmp_key_name_56;
    PyObject *tmp_key_name_57;
    PyObject *tmp_key_name_58;
    PyObject *tmp_key_name_59;
    PyObject *tmp_key_name_60;
    PyObject *tmp_key_name_61;
    PyObject *tmp_key_name_62;
    PyObject *tmp_key_name_63;
    PyObject *tmp_key_name_64;
    PyObject *tmp_key_name_65;
    PyObject *tmp_key_name_66;
    PyObject *tmp_key_name_67;
    PyObject *tmp_key_name_68;
    PyObject *tmp_key_name_69;
    PyObject *tmp_key_name_70;
    PyObject *tmp_kw_name_1;
    PyObject *tmp_kw_name_2;
    PyObject *tmp_kw_name_3;
    PyObject *tmp_kw_name_4;
    PyObject *tmp_kw_name_5;
    PyObject *tmp_kw_name_6;
    PyObject *tmp_kw_name_7;
    PyObject *tmp_kw_name_8;
    PyObject *tmp_kw_name_9;
    PyObject *tmp_kw_name_10;
    PyObject *tmp_kw_name_11;
    PyObject *tmp_kw_name_12;
    PyObject *tmp_kw_name_13;
    PyObject *tmp_kw_name_14;
    PyObject *tmp_kw_name_15;
    PyObject *tmp_kw_name_16;
    PyObject *tmp_kw_name_17;
    PyObject *tmp_kw_name_18;
    PyObject *tmp_kw_name_19;
    PyObject *tmp_kw_name_20;
    PyObject *tmp_kw_name_21;
    PyObject *tmp_kw_name_22;
    PyObject *tmp_kw_name_23;
    PyObject *tmp_kw_name_24;
    PyObject *tmp_kw_name_25;
    PyObject *tmp_kw_name_26;
    PyObject *tmp_kw_name_27;
    PyObject *tmp_kw_name_28;
    PyObject *tmp_kw_name_29;
    PyObject *tmp_kw_name_30;
    PyObject *tmp_kw_name_31;
    PyObject *tmp_kw_name_32;
    PyObject *tmp_kw_name_33;
    PyObject *tmp_kw_name_34;
    PyObject *tmp_kw_name_35;
    PyObject *tmp_kw_name_36;
    PyObject *tmp_kw_name_37;
    PyObject *tmp_kw_name_38;
    PyObject *tmp_kw_name_39;
    PyObject *tmp_kw_name_40;
    PyObject *tmp_kw_name_41;
    PyObject *tmp_kw_name_42;
    PyObject *tmp_kw_name_43;
    PyObject *tmp_kw_name_44;
    PyObject *tmp_kw_name_45;
    PyObject *tmp_kw_name_46;
    PyObject *tmp_kw_name_47;
    PyObject *tmp_kw_name_48;
    PyObject *tmp_kw_name_49;
    PyObject *tmp_kw_name_50;
    PyObject *tmp_kw_name_51;
    PyObject *tmp_kw_name_52;
    PyObject *tmp_kw_name_53;
    PyObject *tmp_kw_name_54;
    PyObject *tmp_kw_name_55;
    PyObject *tmp_kw_name_56;
    PyObject *tmp_kw_name_57;
    PyObject *tmp_kw_name_58;
    PyObject *tmp_kw_name_59;
    PyObject *tmp_kw_name_60;
    PyObject *tmp_kw_name_61;
    PyObject *tmp_kw_name_62;
    PyObject *tmp_kw_name_63;
    PyObject *tmp_kw_name_64;
    PyObject *tmp_kw_name_65;
    PyObject *tmp_kw_name_66;
    PyObject *tmp_kw_name_67;
    PyObject *tmp_kw_name_68;
    PyObject *tmp_kw_name_69;
    PyObject *tmp_kw_name_70;
    PyObject *tmp_kw_name_71;
    PyObject *tmp_kw_name_72;
    PyObject *tmp_kw_name_73;
    PyObject *tmp_kw_name_74;
    PyObject *tmp_kw_name_75;
    PyObject *tmp_kw_name_76;
    PyObject *tmp_kw_name_77;
    PyObject *tmp_kw_name_78;
    PyObject *tmp_kw_name_79;
    PyObject *tmp_kw_name_80;
    PyObject *tmp_kw_name_81;
    PyObject *tmp_kw_name_82;
    PyObject *tmp_kw_name_83;
    PyObject *tmp_kw_name_84;
    PyObject *tmp_kw_name_85;
    PyObject *tmp_kw_name_86;
    PyObject *tmp_kw_name_87;
    PyObject *tmp_kw_name_88;
    PyObject *tmp_kw_name_89;
    PyObject *tmp_kw_name_90;
    PyObject *tmp_kw_name_91;
    PyObject *tmp_kw_name_92;
    PyObject *tmp_kw_name_93;
    PyObject *tmp_kw_name_94;
    PyObject *tmp_kw_name_95;
    PyObject *tmp_kw_name_96;
    PyObject *tmp_kw_name_97;
    PyObject *tmp_kw_name_98;
    PyObject *tmp_kw_name_99;
    PyObject *tmp_kw_name_100;
    PyObject *tmp_kw_name_101;
    PyObject *tmp_kw_name_102;
    PyObject *tmp_kw_name_103;
    PyObject *tmp_kw_name_104;
    PyObject *tmp_kw_name_105;
    PyObject *tmp_kw_name_106;
    PyObject *tmp_kw_name_107;
    PyObject *tmp_kw_name_108;
    PyObject *tmp_kw_name_109;
    PyObject *tmp_kw_name_110;
    PyObject *tmp_kw_name_111;
    PyObject *tmp_kw_name_112;
    PyObject *tmp_kw_name_113;
    PyObject *tmp_kw_name_114;
    PyObject *tmp_kw_name_115;
    PyObject *tmp_kw_name_116;
    PyObject *tmp_kw_name_117;
    PyObject *tmp_kw_name_118;
    PyObject *tmp_kw_name_119;
    PyObject *tmp_kw_name_120;
    PyObject *tmp_kw_name_121;
    PyObject *tmp_kw_name_122;
    PyObject *tmp_kw_name_123;
    PyObject *tmp_kw_name_124;
    PyObject *tmp_kw_name_125;
    PyObject *tmp_kw_name_126;
    PyObject *tmp_kw_name_127;
    PyObject *tmp_kw_name_128;
    PyObject *tmp_kw_name_129;
    PyObject *tmp_kw_name_130;
    PyObject *tmp_kw_name_131;
    PyObject *tmp_kw_name_132;
    PyObject *tmp_kw_name_133;
    PyObject *tmp_kw_name_134;
    PyObject *tmp_kw_name_135;
    PyObject *tmp_kw_name_136;
    PyObject *tmp_kw_name_137;
    PyObject *tmp_kw_name_138;
    PyObject *tmp_kw_name_139;
    PyObject *tmp_kw_name_140;
    PyObject *tmp_left_name_1;
    PyObject *tmp_left_name_2;
    PyObject *tmp_left_name_3;
    PyObject *tmp_left_name_4;
    PyObject *tmp_level_name_1;
    PyObject *tmp_level_name_2;
    PyObject *tmp_level_name_3;
    PyObject *tmp_level_name_4;
    PyObject *tmp_level_name_5;
    PyObject *tmp_locals_name_1;
    PyObject *tmp_locals_name_2;
    PyObject *tmp_locals_name_3;
    PyObject *tmp_locals_name_4;
    PyObject *tmp_locals_name_5;
    PyObject *tmp_metaclass_name_1;
    PyObject *tmp_metaclass_name_2;
    PyObject *tmp_metaclass_name_3;
    PyObject *tmp_metaclass_name_4;
    PyObject *tmp_metaclass_name_5;
    PyObject *tmp_metaclass_name_6;
    PyObject *tmp_metaclass_name_7;
    PyObject *tmp_metaclass_name_8;
    PyObject *tmp_metaclass_name_9;
    PyObject *tmp_metaclass_name_10;
    PyObject *tmp_metaclass_name_11;
    PyObject *tmp_metaclass_name_12;
    PyObject *tmp_metaclass_name_13;
    PyObject *tmp_metaclass_name_14;
    PyObject *tmp_metaclass_name_15;
    PyObject *tmp_metaclass_name_16;
    PyObject *tmp_metaclass_name_17;
    PyObject *tmp_metaclass_name_18;
    PyObject *tmp_metaclass_name_19;
    PyObject *tmp_metaclass_name_20;
    PyObject *tmp_metaclass_name_21;
    PyObject *tmp_metaclass_name_22;
    PyObject *tmp_metaclass_name_23;
    PyObject *tmp_metaclass_name_24;
    PyObject *tmp_metaclass_name_25;
    PyObject *tmp_metaclass_name_26;
    PyObject *tmp_metaclass_name_27;
    PyObject *tmp_metaclass_name_28;
    PyObject *tmp_metaclass_name_29;
    PyObject *tmp_metaclass_name_30;
    PyObject *tmp_metaclass_name_31;
    PyObject *tmp_metaclass_name_32;
    PyObject *tmp_metaclass_name_33;
    PyObject *tmp_metaclass_name_34;
    PyObject *tmp_metaclass_name_35;
    PyObject *tmp_metaclass_name_36;
    PyObject *tmp_metaclass_name_37;
    PyObject *tmp_metaclass_name_38;
    PyObject *tmp_metaclass_name_39;
    PyObject *tmp_metaclass_name_40;
    PyObject *tmp_metaclass_name_41;
    PyObject *tmp_metaclass_name_42;
    PyObject *tmp_metaclass_name_43;
    PyObject *tmp_metaclass_name_44;
    PyObject *tmp_metaclass_name_45;
    PyObject *tmp_metaclass_name_46;
    PyObject *tmp_metaclass_name_47;
    PyObject *tmp_metaclass_name_48;
    PyObject *tmp_metaclass_name_49;
    PyObject *tmp_metaclass_name_50;
    PyObject *tmp_metaclass_name_51;
    PyObject *tmp_metaclass_name_52;
    PyObject *tmp_metaclass_name_53;
    PyObject *tmp_metaclass_name_54;
    PyObject *tmp_metaclass_name_55;
    PyObject *tmp_metaclass_name_56;
    PyObject *tmp_metaclass_name_57;
    PyObject *tmp_metaclass_name_58;
    PyObject *tmp_metaclass_name_59;
    PyObject *tmp_metaclass_name_60;
    PyObject *tmp_metaclass_name_61;
    PyObject *tmp_metaclass_name_62;
    PyObject *tmp_metaclass_name_63;
    PyObject *tmp_metaclass_name_64;
    PyObject *tmp_metaclass_name_65;
    PyObject *tmp_metaclass_name_66;
    PyObject *tmp_metaclass_name_67;
    PyObject *tmp_metaclass_name_68;
    PyObject *tmp_metaclass_name_69;
    PyObject *tmp_metaclass_name_70;
    PyObject *tmp_name_name_1;
    PyObject *tmp_name_name_2;
    PyObject *tmp_name_name_3;
    PyObject *tmp_name_name_4;
    PyObject *tmp_name_name_5;
    PyObject *tmp_outline_return_value_1;
    PyObject *tmp_outline_return_value_2;
    PyObject *tmp_outline_return_value_3;
    PyObject *tmp_outline_return_value_4;
    PyObject *tmp_outline_return_value_5;
    PyObject *tmp_outline_return_value_6;
    PyObject *tmp_outline_return_value_7;
    PyObject *tmp_outline_return_value_8;
    PyObject *tmp_outline_return_value_9;
    PyObject *tmp_outline_return_value_10;
    PyObject *tmp_outline_return_value_11;
    PyObject *tmp_outline_return_value_12;
    PyObject *tmp_outline_return_value_13;
    PyObject *tmp_outline_return_value_14;
    PyObject *tmp_outline_return_value_15;
    PyObject *tmp_outline_return_value_16;
    PyObject *tmp_outline_return_value_17;
    PyObject *tmp_outline_return_value_18;
    PyObject *tmp_outline_return_value_19;
    PyObject *tmp_outline_return_value_20;
    PyObject *tmp_outline_return_value_21;
    PyObject *tmp_outline_return_value_22;
    PyObject *tmp_outline_return_value_23;
    PyObject *tmp_outline_return_value_24;
    PyObject *tmp_outline_return_value_25;
    PyObject *tmp_outline_return_value_26;
    PyObject *tmp_outline_return_value_27;
    PyObject *tmp_outline_return_value_28;
    PyObject *tmp_outline_return_value_29;
    PyObject *tmp_outline_return_value_30;
    PyObject *tmp_outline_return_value_31;
    PyObject *tmp_outline_return_value_32;
    PyObject *tmp_outline_return_value_33;
    PyObject *tmp_outline_return_value_34;
    PyObject *tmp_outline_return_value_35;
    PyObject *tmp_outline_return_value_36;
    PyObject *tmp_outline_return_value_37;
    PyObject *tmp_outline_return_value_38;
    PyObject *tmp_outline_return_value_39;
    PyObject *tmp_outline_return_value_40;
    PyObject *tmp_outline_return_value_41;
    PyObject *tmp_outline_return_value_42;
    PyObject *tmp_outline_return_value_43;
    PyObject *tmp_outline_return_value_44;
    PyObject *tmp_outline_return_value_45;
    PyObject *tmp_outline_return_value_46;
    PyObject *tmp_outline_return_value_47;
    PyObject *tmp_outline_return_value_48;
    PyObject *tmp_outline_return_value_49;
    PyObject *tmp_outline_return_value_50;
    PyObject *tmp_outline_return_value_51;
    PyObject *tmp_outline_return_value_52;
    PyObject *tmp_outline_return_value_53;
    PyObject *tmp_outline_return_value_54;
    PyObject *tmp_outline_return_value_55;
    PyObject *tmp_outline_return_value_56;
    PyObject *tmp_outline_return_value_57;
    PyObject *tmp_outline_return_value_58;
    PyObject *tmp_outline_return_value_59;
    PyObject *tmp_outline_return_value_60;
    PyObject *tmp_outline_return_value_61;
    PyObject *tmp_outline_return_value_62;
    PyObject *tmp_outline_return_value_63;
    PyObject *tmp_outline_return_value_64;
    PyObject *tmp_outline_return_value_65;
    PyObject *tmp_outline_return_value_66;
    PyObject *tmp_outline_return_value_67;
    PyObject *tmp_outline_return_value_68;
    PyObject *tmp_outline_return_value_69;
    PyObject *tmp_outline_return_value_70;
    PyObject *tmp_outline_return_value_71;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_right_name_1;
    PyObject *tmp_right_name_2;
    PyObject *tmp_right_name_3;
    PyObject *tmp_right_name_4;
    PyObject *tmp_set_arg_1;
    PyObject *tmp_set_arg_2;
    PyObject *tmp_set_arg_3;
    PyObject *tmp_set_locals;
    PyObject *tmp_source_name_1;
    PyObject *tmp_source_name_2;
    PyObject *tmp_source_name_3;
    PyObject *tmp_source_name_4;
    PyObject *tmp_source_name_5;
    PyObject *tmp_source_name_6;
    PyObject *tmp_source_name_7;
    PyObject *tmp_source_name_8;
    PyObject *tmp_source_name_9;
    PyObject *tmp_source_name_10;
    PyObject *tmp_source_name_11;
    PyObject *tmp_source_name_12;
    PyObject *tmp_source_name_13;
    PyObject *tmp_source_name_14;
    PyObject *tmp_source_name_15;
    PyObject *tmp_source_name_16;
    PyObject *tmp_source_name_17;
    PyObject *tmp_source_name_18;
    PyObject *tmp_source_name_19;
    PyObject *tmp_source_name_20;
    PyObject *tmp_source_name_21;
    PyObject *tmp_source_name_22;
    PyObject *tmp_source_name_23;
    PyObject *tmp_source_name_24;
    PyObject *tmp_source_name_25;
    PyObject *tmp_source_name_26;
    PyObject *tmp_source_name_27;
    PyObject *tmp_source_name_28;
    PyObject *tmp_source_name_29;
    PyObject *tmp_source_name_30;
    PyObject *tmp_source_name_31;
    PyObject *tmp_source_name_32;
    PyObject *tmp_source_name_33;
    PyObject *tmp_source_name_34;
    PyObject *tmp_source_name_35;
    PyObject *tmp_source_name_36;
    PyObject *tmp_source_name_37;
    PyObject *tmp_source_name_38;
    PyObject *tmp_source_name_39;
    PyObject *tmp_source_name_40;
    PyObject *tmp_source_name_41;
    PyObject *tmp_source_name_42;
    PyObject *tmp_source_name_43;
    PyObject *tmp_source_name_44;
    PyObject *tmp_source_name_45;
    PyObject *tmp_source_name_46;
    PyObject *tmp_source_name_47;
    PyObject *tmp_source_name_48;
    PyObject *tmp_source_name_49;
    PyObject *tmp_source_name_50;
    PyObject *tmp_source_name_51;
    PyObject *tmp_source_name_52;
    PyObject *tmp_source_name_53;
    PyObject *tmp_source_name_54;
    PyObject *tmp_source_name_55;
    PyObject *tmp_source_name_56;
    PyObject *tmp_source_name_57;
    PyObject *tmp_source_name_58;
    PyObject *tmp_source_name_59;
    PyObject *tmp_source_name_60;
    PyObject *tmp_source_name_61;
    PyObject *tmp_source_name_62;
    PyObject *tmp_source_name_63;
    PyObject *tmp_source_name_64;
    PyObject *tmp_source_name_65;
    PyObject *tmp_source_name_66;
    PyObject *tmp_source_name_67;
    PyObject *tmp_source_name_68;
    PyObject *tmp_source_name_69;
    PyObject *tmp_source_name_70;
    PyObject *tmp_source_name_71;
    PyObject *tmp_source_name_72;
    PyObject *tmp_source_name_73;
    PyObject *tmp_source_name_74;
    PyObject *tmp_source_name_75;
    PyObject *tmp_source_name_76;
    PyObject *tmp_source_name_77;
    PyObject *tmp_source_name_78;
    PyObject *tmp_source_name_79;
    PyObject *tmp_source_name_80;
    PyObject *tmp_source_name_81;
    PyObject *tmp_source_name_82;
    PyObject *tmp_source_name_83;
    PyObject *tmp_source_name_84;
    PyObject *tmp_source_name_85;
    PyObject *tmp_source_name_86;
    PyObject *tmp_source_name_87;
    PyObject *tmp_source_name_88;
    PyObject *tmp_source_name_89;
    PyObject *tmp_source_name_90;
    PyObject *tmp_source_name_91;
    PyObject *tmp_staticmethod_arg_1;
    PyObject *tmp_staticmethod_arg_2;
    PyObject *tmp_subscribed_name_1;
    PyObject *tmp_subscribed_name_2;
    PyObject *tmp_subscribed_name_3;
    PyObject *tmp_subscribed_name_4;
    PyObject *tmp_subscribed_name_5;
    PyObject *tmp_subscribed_name_6;
    PyObject *tmp_subscribed_name_7;
    PyObject *tmp_subscribed_name_8;
    PyObject *tmp_subscribed_name_9;
    PyObject *tmp_subscribed_name_10;
    PyObject *tmp_subscribed_name_11;
    PyObject *tmp_subscribed_name_12;
    PyObject *tmp_subscribed_name_13;
    PyObject *tmp_subscribed_name_14;
    PyObject *tmp_subscribed_name_15;
    PyObject *tmp_subscribed_name_16;
    PyObject *tmp_subscribed_name_17;
    PyObject *tmp_subscribed_name_18;
    PyObject *tmp_subscribed_name_19;
    PyObject *tmp_subscribed_name_20;
    PyObject *tmp_subscribed_name_21;
    PyObject *tmp_subscribed_name_22;
    PyObject *tmp_subscribed_name_23;
    PyObject *tmp_subscribed_name_24;
    PyObject *tmp_subscribed_name_25;
    PyObject *tmp_subscribed_name_26;
    PyObject *tmp_subscribed_name_27;
    PyObject *tmp_subscribed_name_28;
    PyObject *tmp_subscribed_name_29;
    PyObject *tmp_subscribed_name_30;
    PyObject *tmp_subscribed_name_31;
    PyObject *tmp_subscribed_name_32;
    PyObject *tmp_subscribed_name_33;
    PyObject *tmp_subscribed_name_34;
    PyObject *tmp_subscribed_name_35;
    PyObject *tmp_subscribed_name_36;
    PyObject *tmp_subscribed_name_37;
    PyObject *tmp_subscribed_name_38;
    PyObject *tmp_subscribed_name_39;
    PyObject *tmp_subscribed_name_40;
    PyObject *tmp_subscribed_name_41;
    PyObject *tmp_subscribed_name_42;
    PyObject *tmp_subscribed_name_43;
    PyObject *tmp_subscribed_name_44;
    PyObject *tmp_subscribed_name_45;
    PyObject *tmp_subscribed_name_46;
    PyObject *tmp_subscribed_name_47;
    PyObject *tmp_subscribed_name_48;
    PyObject *tmp_subscribed_name_49;
    PyObject *tmp_subscribed_name_50;
    PyObject *tmp_subscribed_name_51;
    PyObject *tmp_subscribed_name_52;
    PyObject *tmp_subscribed_name_53;
    PyObject *tmp_subscribed_name_54;
    PyObject *tmp_subscribed_name_55;
    PyObject *tmp_subscribed_name_56;
    PyObject *tmp_subscribed_name_57;
    PyObject *tmp_subscribed_name_58;
    PyObject *tmp_subscribed_name_59;
    PyObject *tmp_subscribed_name_60;
    PyObject *tmp_subscribed_name_61;
    PyObject *tmp_subscribed_name_62;
    PyObject *tmp_subscribed_name_63;
    PyObject *tmp_subscribed_name_64;
    PyObject *tmp_subscribed_name_65;
    PyObject *tmp_subscribed_name_66;
    PyObject *tmp_subscribed_name_67;
    PyObject *tmp_subscribed_name_68;
    PyObject *tmp_subscribed_name_69;
    PyObject *tmp_subscribed_name_70;
    PyObject *tmp_subscript_name_1;
    PyObject *tmp_subscript_name_2;
    PyObject *tmp_subscript_name_3;
    PyObject *tmp_subscript_name_4;
    PyObject *tmp_subscript_name_5;
    PyObject *tmp_subscript_name_6;
    PyObject *tmp_subscript_name_7;
    PyObject *tmp_subscript_name_8;
    PyObject *tmp_subscript_name_9;
    PyObject *tmp_subscript_name_10;
    PyObject *tmp_subscript_name_11;
    PyObject *tmp_subscript_name_12;
    PyObject *tmp_subscript_name_13;
    PyObject *tmp_subscript_name_14;
    PyObject *tmp_subscript_name_15;
    PyObject *tmp_subscript_name_16;
    PyObject *tmp_subscript_name_17;
    PyObject *tmp_subscript_name_18;
    PyObject *tmp_subscript_name_19;
    PyObject *tmp_subscript_name_20;
    PyObject *tmp_subscript_name_21;
    PyObject *tmp_subscript_name_22;
    PyObject *tmp_subscript_name_23;
    PyObject *tmp_subscript_name_24;
    PyObject *tmp_subscript_name_25;
    PyObject *tmp_subscript_name_26;
    PyObject *tmp_subscript_name_27;
    PyObject *tmp_subscript_name_28;
    PyObject *tmp_subscript_name_29;
    PyObject *tmp_subscript_name_30;
    PyObject *tmp_subscript_name_31;
    PyObject *tmp_subscript_name_32;
    PyObject *tmp_subscript_name_33;
    PyObject *tmp_subscript_name_34;
    PyObject *tmp_subscript_name_35;
    PyObject *tmp_subscript_name_36;
    PyObject *tmp_subscript_name_37;
    PyObject *tmp_subscript_name_38;
    PyObject *tmp_subscript_name_39;
    PyObject *tmp_subscript_name_40;
    PyObject *tmp_subscript_name_41;
    PyObject *tmp_subscript_name_42;
    PyObject *tmp_subscript_name_43;
    PyObject *tmp_subscript_name_44;
    PyObject *tmp_subscript_name_45;
    PyObject *tmp_subscript_name_46;
    PyObject *tmp_subscript_name_47;
    PyObject *tmp_subscript_name_48;
    PyObject *tmp_subscript_name_49;
    PyObject *tmp_subscript_name_50;
    PyObject *tmp_subscript_name_51;
    PyObject *tmp_subscript_name_52;
    PyObject *tmp_subscript_name_53;
    PyObject *tmp_subscript_name_54;
    PyObject *tmp_subscript_name_55;
    PyObject *tmp_subscript_name_56;
    PyObject *tmp_subscript_name_57;
    PyObject *tmp_subscript_name_58;
    PyObject *tmp_subscript_name_59;
    PyObject *tmp_subscript_name_60;
    PyObject *tmp_subscript_name_61;
    PyObject *tmp_subscript_name_62;
    PyObject *tmp_subscript_name_63;
    PyObject *tmp_subscript_name_64;
    PyObject *tmp_subscript_name_65;
    PyObject *tmp_subscript_name_66;
    PyObject *tmp_subscript_name_67;
    PyObject *tmp_subscript_name_68;
    PyObject *tmp_subscript_name_69;
    PyObject *tmp_subscript_name_70;
    PyObject *tmp_tuple_element_1;
    PyObject *tmp_tuple_element_2;
    PyObject *tmp_tuple_element_3;
    PyObject *tmp_tuple_element_4;
    PyObject *tmp_tuple_element_5;
    PyObject *tmp_tuple_element_6;
    PyObject *tmp_tuple_element_7;
    PyObject *tmp_tuple_element_8;
    PyObject *tmp_tuple_element_9;
    PyObject *tmp_tuple_element_10;
    PyObject *tmp_tuple_element_11;
    PyObject *tmp_tuple_element_12;
    PyObject *tmp_tuple_element_13;
    PyObject *tmp_tuple_element_14;
    PyObject *tmp_tuple_element_15;
    PyObject *tmp_tuple_element_16;
    PyObject *tmp_tuple_element_17;
    PyObject *tmp_tuple_element_18;
    PyObject *tmp_tuple_element_19;
    PyObject *tmp_tuple_element_20;
    PyObject *tmp_tuple_element_21;
    PyObject *tmp_tuple_element_22;
    PyObject *tmp_tuple_element_23;
    PyObject *tmp_tuple_element_24;
    PyObject *tmp_tuple_element_25;
    PyObject *tmp_tuple_element_26;
    PyObject *tmp_tuple_element_27;
    PyObject *tmp_tuple_element_28;
    PyObject *tmp_tuple_element_29;
    PyObject *tmp_tuple_element_30;
    PyObject *tmp_tuple_element_31;
    PyObject *tmp_tuple_element_32;
    PyObject *tmp_tuple_element_33;
    PyObject *tmp_tuple_element_34;
    PyObject *tmp_tuple_element_35;
    PyObject *tmp_tuple_element_36;
    PyObject *tmp_tuple_element_37;
    PyObject *tmp_tuple_element_38;
    PyObject *tmp_tuple_element_39;
    PyObject *tmp_tuple_element_40;
    PyObject *tmp_tuple_element_41;
    PyObject *tmp_tuple_element_42;
    PyObject *tmp_tuple_element_43;
    PyObject *tmp_tuple_element_44;
    PyObject *tmp_tuple_element_45;
    PyObject *tmp_tuple_element_46;
    PyObject *tmp_tuple_element_47;
    PyObject *tmp_tuple_element_48;
    PyObject *tmp_tuple_element_49;
    PyObject *tmp_tuple_element_50;
    PyObject *tmp_tuple_element_51;
    PyObject *tmp_tuple_element_52;
    PyObject *tmp_tuple_element_53;
    PyObject *tmp_tuple_element_54;
    PyObject *tmp_tuple_element_55;
    PyObject *tmp_tuple_element_56;
    PyObject *tmp_tuple_element_57;
    PyObject *tmp_tuple_element_58;
    PyObject *tmp_tuple_element_59;
    PyObject *tmp_tuple_element_60;
    PyObject *tmp_tuple_element_61;
    PyObject *tmp_tuple_element_62;
    PyObject *tmp_tuple_element_63;
    PyObject *tmp_tuple_element_64;
    PyObject *tmp_tuple_element_65;
    PyObject *tmp_tuple_element_66;
    PyObject *tmp_tuple_element_67;
    PyObject *tmp_tuple_element_68;
    PyObject *tmp_tuple_element_69;
    PyObject *tmp_tuple_element_70;
    PyObject *tmp_tuple_element_71;
    PyObject *tmp_tuple_element_72;
    PyObject *tmp_tuple_element_73;
    PyObject *tmp_tuple_element_74;
    PyObject *tmp_tuple_element_75;
    PyObject *tmp_tuple_element_76;
    PyObject *tmp_tuple_element_77;
    PyObject *tmp_tuple_element_78;
    PyObject *tmp_tuple_element_79;
    PyObject *tmp_tuple_element_80;
    PyObject *tmp_tuple_element_81;
    PyObject *tmp_tuple_element_82;
    PyObject *tmp_tuple_element_83;
    PyObject *tmp_tuple_element_84;
    PyObject *tmp_tuple_element_85;
    PyObject *tmp_tuple_element_86;
    PyObject *tmp_tuple_element_87;
    PyObject *tmp_tuple_element_88;
    PyObject *tmp_tuple_element_89;
    PyObject *tmp_tuple_element_90;
    PyObject *tmp_tuple_element_91;
    PyObject *tmp_tuple_element_92;
    PyObject *tmp_tuple_element_93;
    PyObject *tmp_tuple_element_94;
    PyObject *tmp_tuple_element_95;
    PyObject *tmp_tuple_element_96;
    PyObject *tmp_tuple_element_97;
    PyObject *tmp_tuple_element_98;
    PyObject *tmp_tuple_element_99;
    PyObject *tmp_tuple_element_100;
    PyObject *tmp_tuple_element_101;
    PyObject *tmp_tuple_element_102;
    PyObject *tmp_tuple_element_103;
    PyObject *tmp_tuple_element_104;
    PyObject *tmp_tuple_element_105;
    PyObject *tmp_tuple_element_106;
    PyObject *tmp_tuple_element_107;
    PyObject *tmp_tuple_element_108;
    PyObject *tmp_tuple_element_109;
    PyObject *tmp_tuple_element_110;
    PyObject *tmp_tuple_element_111;
    PyObject *tmp_tuple_element_112;
    PyObject *tmp_tuple_element_113;
    PyObject *tmp_tuple_element_114;
    PyObject *tmp_tuple_element_115;
    PyObject *tmp_tuple_element_116;
    PyObject *tmp_tuple_element_117;
    PyObject *tmp_tuple_element_118;
    PyObject *tmp_tuple_element_119;
    PyObject *tmp_tuple_element_120;
    PyObject *tmp_tuple_element_121;
    PyObject *tmp_tuple_element_122;
    PyObject *tmp_tuple_element_123;
    PyObject *tmp_tuple_element_124;
    PyObject *tmp_tuple_element_125;
    PyObject *tmp_tuple_element_126;
    PyObject *tmp_tuple_element_127;
    PyObject *tmp_tuple_element_128;
    PyObject *tmp_tuple_element_129;
    PyObject *tmp_tuple_element_130;
    PyObject *tmp_tuple_element_131;
    PyObject *tmp_tuple_element_132;
    PyObject *tmp_tuple_element_133;
    PyObject *tmp_tuple_element_134;
    PyObject *tmp_tuple_element_135;
    PyObject *tmp_tuple_element_136;
    PyObject *tmp_tuple_element_137;
    PyObject *tmp_tuple_element_138;
    PyObject *tmp_tuple_element_139;
    PyObject *tmp_tuple_element_140;
    PyObject *tmp_tuple_element_141;
    PyObject *tmp_tuple_element_142;
    PyObject *tmp_tuple_element_143;
    PyObject *tmp_tuple_element_144;
    PyObject *tmp_tuple_element_145;
    PyObject *tmp_tuple_element_146;
    PyObject *tmp_tuple_element_147;
    PyObject *tmp_tuple_element_148;
    PyObject *tmp_tuple_element_149;
    PyObject *tmp_tuple_element_150;
    PyObject *tmp_tuple_element_151;
    PyObject *tmp_tuple_element_152;
    PyObject *tmp_tuple_element_153;
    PyObject *tmp_tuple_element_154;
    PyObject *tmp_tuple_element_155;
    PyObject *tmp_tuple_element_156;
    PyObject *tmp_tuple_element_157;
    PyObject *tmp_tuple_element_158;
    PyObject *tmp_tuple_element_159;
    PyObject *tmp_tuple_element_160;
    PyObject *tmp_tuple_element_161;
    PyObject *tmp_tuple_element_162;
    PyObject *tmp_tuple_element_163;
    PyObject *tmp_tuple_element_164;
    PyObject *tmp_tuple_element_165;
    PyObject *tmp_tuple_element_166;
    PyObject *tmp_tuple_element_167;
    PyObject *tmp_tuple_element_168;
    PyObject *tmp_tuple_element_169;
    PyObject *tmp_tuple_element_170;
    PyObject *tmp_tuple_element_171;
    PyObject *tmp_tuple_element_172;
    PyObject *tmp_tuple_element_173;
    PyObject *tmp_tuple_element_174;
    PyObject *tmp_tuple_element_175;
    PyObject *tmp_tuple_element_176;
    PyObject *tmp_tuple_element_177;
    PyObject *tmp_tuple_element_178;
    PyObject *tmp_tuple_element_179;
    PyObject *tmp_tuple_element_180;
    PyObject *tmp_tuple_element_181;
    PyObject *tmp_tuple_element_182;
    PyObject *tmp_tuple_element_183;
    PyObject *tmp_tuple_element_184;
    PyObject *tmp_tuple_element_185;
    PyObject *tmp_tuple_element_186;
    PyObject *tmp_tuple_element_187;
    PyObject *tmp_tuple_element_188;
    PyObject *tmp_tuple_element_189;
    PyObject *tmp_tuple_element_190;
    PyObject *tmp_tuple_element_191;
    PyObject *tmp_tuple_element_192;
    PyObject *tmp_tuple_element_193;
    PyObject *tmp_tuple_element_194;
    PyObject *tmp_tuple_element_195;
    PyObject *tmp_tuple_element_196;
    PyObject *tmp_tuple_element_197;
    PyObject *tmp_tuple_element_198;
    PyObject *tmp_tuple_element_199;
    PyObject *tmp_tuple_element_200;
    PyObject *tmp_tuple_element_201;
    PyObject *tmp_tuple_element_202;
    PyObject *tmp_tuple_element_203;
    PyObject *tmp_tuple_element_204;
    PyObject *tmp_tuple_element_205;
    PyObject *tmp_tuple_element_206;
    PyObject *tmp_tuple_element_207;
    PyObject *tmp_tuple_element_208;
    PyObject *tmp_tuple_element_209;
    PyObject *tmp_type_arg_1;
    PyObject *tmp_type_arg_2;
    PyObject *tmp_type_arg_3;
    PyObject *tmp_type_arg_4;
    PyObject *tmp_type_arg_5;
    PyObject *tmp_type_arg_6;
    PyObject *tmp_type_arg_7;
    PyObject *tmp_type_arg_8;
    PyObject *tmp_type_arg_9;
    PyObject *tmp_type_arg_10;
    PyObject *tmp_type_arg_11;
    PyObject *tmp_type_arg_12;
    PyObject *tmp_type_arg_13;
    PyObject *tmp_type_arg_14;
    PyObject *tmp_type_arg_15;
    PyObject *tmp_type_arg_16;
    PyObject *tmp_type_arg_17;
    PyObject *tmp_type_arg_18;
    PyObject *tmp_type_arg_19;
    PyObject *tmp_type_arg_20;
    PyObject *tmp_type_arg_21;
    PyObject *tmp_type_arg_22;
    PyObject *tmp_type_arg_23;
    PyObject *tmp_type_arg_24;
    PyObject *tmp_type_arg_25;
    PyObject *tmp_type_arg_26;
    PyObject *tmp_type_arg_27;
    PyObject *tmp_type_arg_28;
    PyObject *tmp_type_arg_29;
    PyObject *tmp_type_arg_30;
    PyObject *tmp_type_arg_31;
    PyObject *tmp_type_arg_32;
    PyObject *tmp_type_arg_33;
    PyObject *tmp_type_arg_34;
    PyObject *tmp_type_arg_35;
    PyObject *tmp_type_arg_36;
    PyObject *tmp_type_arg_37;
    PyObject *tmp_type_arg_38;
    PyObject *tmp_type_arg_39;
    PyObject *tmp_type_arg_40;
    PyObject *tmp_type_arg_41;
    PyObject *tmp_type_arg_42;
    PyObject *tmp_type_arg_43;
    PyObject *tmp_type_arg_44;
    PyObject *tmp_type_arg_45;
    PyObject *tmp_type_arg_46;
    PyObject *tmp_type_arg_47;
    PyObject *tmp_type_arg_48;
    PyObject *tmp_type_arg_49;
    PyObject *tmp_type_arg_50;
    PyObject *tmp_type_arg_51;
    PyObject *tmp_type_arg_52;
    PyObject *tmp_type_arg_53;
    PyObject *tmp_type_arg_54;
    PyObject *tmp_type_arg_55;
    PyObject *tmp_type_arg_56;
    PyObject *tmp_type_arg_57;
    PyObject *tmp_type_arg_58;
    PyObject *tmp_type_arg_59;
    PyObject *tmp_type_arg_60;
    PyObject *tmp_type_arg_61;
    PyObject *tmp_type_arg_62;
    PyObject *tmp_type_arg_63;
    PyObject *tmp_type_arg_64;
    PyObject *tmp_type_arg_65;
    PyObject *tmp_type_arg_66;
    PyObject *tmp_type_arg_67;
    PyObject *tmp_type_arg_68;
    PyObject *tmp_type_arg_69;
    PyObject *tmp_type_arg_70;
    static struct Nuitka_FrameObject *cache_frame_5dba849f260b1ecd14ce0c144086a48f_2 = NULL;

    struct Nuitka_FrameObject *frame_5dba849f260b1ecd14ce0c144086a48f_2;

    static struct Nuitka_FrameObject *cache_frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 = NULL;

    struct Nuitka_FrameObject *frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3;

    struct Nuitka_FrameObject *frame_fb7531f558ad846443a9ac117976cb24;

    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    tmp_outline_return_value_1 = NULL;
    tmp_outline_return_value_2 = NULL;
    tmp_outline_return_value_3 = NULL;
    tmp_outline_return_value_4 = NULL;
    tmp_outline_return_value_5 = NULL;
    tmp_outline_return_value_6 = NULL;
    tmp_outline_return_value_7 = NULL;
    tmp_outline_return_value_8 = NULL;
    tmp_outline_return_value_9 = NULL;
    tmp_outline_return_value_10 = NULL;
    tmp_outline_return_value_11 = NULL;
    tmp_outline_return_value_12 = NULL;
    tmp_outline_return_value_13 = NULL;
    tmp_outline_return_value_14 = NULL;
    tmp_outline_return_value_15 = NULL;
    tmp_outline_return_value_16 = NULL;
    tmp_outline_return_value_17 = NULL;
    tmp_outline_return_value_18 = NULL;
    tmp_outline_return_value_19 = NULL;
    tmp_outline_return_value_20 = NULL;
    tmp_outline_return_value_21 = NULL;
    tmp_outline_return_value_22 = NULL;
    tmp_outline_return_value_23 = NULL;
    tmp_outline_return_value_24 = NULL;
    tmp_outline_return_value_25 = NULL;
    tmp_outline_return_value_26 = NULL;
    tmp_outline_return_value_27 = NULL;
    tmp_outline_return_value_28 = NULL;
    tmp_outline_return_value_29 = NULL;
    tmp_outline_return_value_30 = NULL;
    tmp_outline_return_value_31 = NULL;
    tmp_outline_return_value_32 = NULL;
    tmp_outline_return_value_33 = NULL;
    tmp_outline_return_value_34 = NULL;
    tmp_outline_return_value_35 = NULL;
    tmp_outline_return_value_36 = NULL;
    tmp_outline_return_value_37 = NULL;
    tmp_outline_return_value_38 = NULL;
    tmp_outline_return_value_39 = NULL;
    tmp_outline_return_value_40 = NULL;
    tmp_outline_return_value_41 = NULL;
    tmp_outline_return_value_42 = NULL;
    tmp_outline_return_value_43 = NULL;
    tmp_outline_return_value_44 = NULL;
    tmp_outline_return_value_45 = NULL;
    tmp_outline_return_value_46 = NULL;
    tmp_outline_return_value_47 = NULL;
    tmp_outline_return_value_48 = NULL;
    tmp_outline_return_value_49 = NULL;
    tmp_outline_return_value_50 = NULL;
    tmp_outline_return_value_51 = NULL;
    tmp_outline_return_value_52 = NULL;
    tmp_outline_return_value_53 = NULL;
    tmp_outline_return_value_54 = NULL;
    tmp_outline_return_value_55 = NULL;
    tmp_outline_return_value_56 = NULL;
    tmp_outline_return_value_57 = NULL;
    tmp_outline_return_value_58 = NULL;
    tmp_outline_return_value_59 = NULL;
    tmp_outline_return_value_60 = NULL;
    tmp_outline_return_value_61 = NULL;
    tmp_outline_return_value_62 = NULL;
    tmp_outline_return_value_63 = NULL;
    tmp_outline_return_value_64 = NULL;
    tmp_outline_return_value_65 = NULL;
    tmp_outline_return_value_66 = NULL;
    tmp_outline_return_value_67 = NULL;
    tmp_outline_return_value_68 = NULL;
    tmp_outline_return_value_69 = NULL;
    tmp_outline_return_value_70 = NULL;
    tmp_outline_return_value_71 = NULL;
    // Locals dictionary setup.
PyObject *locals_dict_1 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_2 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_3 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_4 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_5 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_6 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_7 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_8 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_9 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_10 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_11 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_12 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_13 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_14 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_15 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_16 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_17 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_18 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_19 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_20 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_21 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_22 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_23 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_24 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_25 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_26 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_27 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_28 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_29 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_30 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_31 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_32 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_33 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_34 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_35 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_36 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_37 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_38 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_39 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_40 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_41 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_42 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_43 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_44 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_45 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_46 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_47 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_48 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_49 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_50 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_51 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_52 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_53 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_54 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_55 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_56 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_57 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_58 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_59 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_60 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_61 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_62 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_63 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_64 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_65 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_66 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_67 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_68 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_69 = PyDict_New();

    // Locals dictionary setup.
PyObject *locals_dict_70 = PyDict_New();


    // Module code.
    tmp_assign_source_1 = const_str_digest_b49472c86d89e135c19e331a4f72d626;
    UPDATE_STRING_DICT0( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    tmp_assign_source_2 = module_filename_obj;
    UPDATE_STRING_DICT0( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    tmp_assign_source_3 = metapath_based_loader;
    UPDATE_STRING_DICT0( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___loader__, tmp_assign_source_3 );
    // Frame without reuse.
    frame_fb7531f558ad846443a9ac117976cb24 = MAKE_MODULE_FRAME( codeobj_fb7531f558ad846443a9ac117976cb24, module_jinja2$nodes );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_fb7531f558ad846443a9ac117976cb24 );
    assert( Py_REFCNT( frame_fb7531f558ad846443a9ac117976cb24 ) == 2 );

    // Framed code:
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 1;
    {
        PyObject *module = PyImport_ImportModule("importlib._bootstrap");
        if (likely( module != NULL ))
        {
            tmp_called_name_1 = PyObject_GetAttr( module, const_str_plain_ModuleSpec );
        }
        else
        {
            tmp_called_name_1 = NULL;
        }
    }

    if ( tmp_called_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1;

        goto frame_exception_exit_1;
    }
    tmp_args_element_name_1 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    tmp_args_element_name_2 = metapath_based_loader;
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 1;
    {
        PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
    }

    if ( tmp_assign_source_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___spec__, tmp_assign_source_4 );
    tmp_assign_source_5 = Py_None;
    UPDATE_STRING_DICT0( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_5 );
    tmp_assign_source_6 = const_str_plain_jinja2;
    UPDATE_STRING_DICT0( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain___package__, tmp_assign_source_6 );
    tmp_name_name_1 = const_str_plain_types;
    tmp_globals_name_1 = (PyObject *)moduledict_jinja2$nodes;
    tmp_locals_name_1 = Py_None;
    tmp_fromlist_name_1 = Py_None;
    tmp_level_name_1 = const_int_0;
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 15;
    tmp_assign_source_7 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
    if ( tmp_assign_source_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 15;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_types, tmp_assign_source_7 );
    tmp_name_name_2 = const_str_plain_operator;
    tmp_globals_name_2 = (PyObject *)moduledict_jinja2$nodes;
    tmp_locals_name_2 = Py_None;
    tmp_fromlist_name_2 = Py_None;
    tmp_level_name_2 = const_int_0;
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 16;
    tmp_assign_source_8 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
    if ( tmp_assign_source_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 16;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator, tmp_assign_source_8 );
    tmp_name_name_3 = const_str_plain_collections;
    tmp_globals_name_3 = (PyObject *)moduledict_jinja2$nodes;
    tmp_locals_name_3 = Py_None;
    tmp_fromlist_name_3 = const_tuple_str_plain_deque_tuple;
    tmp_level_name_3 = const_int_0;
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 18;
    tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
    if ( tmp_import_name_from_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_9 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_deque );
    Py_DECREF( tmp_import_name_from_1 );
    if ( tmp_assign_source_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 18;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_deque, tmp_assign_source_9 );
    tmp_name_name_4 = const_str_digest_6a1b15fc617d9b2615daf846b271eabb;
    tmp_globals_name_4 = (PyObject *)moduledict_jinja2$nodes;
    tmp_locals_name_4 = Py_None;
    tmp_fromlist_name_4 = const_tuple_str_plain_Markup_tuple;
    tmp_level_name_4 = const_int_0;
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 19;
    tmp_import_name_from_2 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
    if ( tmp_import_name_from_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;

        goto frame_exception_exit_1;
    }
    tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_Markup );
    Py_DECREF( tmp_import_name_from_2 );
    if ( tmp_assign_source_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 19;

        goto frame_exception_exit_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Markup, tmp_assign_source_10 );
    tmp_name_name_5 = const_str_digest_124f1473eafa684c185fd606074efc0f;
    tmp_globals_name_5 = (PyObject *)moduledict_jinja2$nodes;
    tmp_locals_name_5 = Py_None;
    tmp_fromlist_name_5 = const_tuple_7bf4fbbdba32d9148daca07d0d9906de_tuple;
    tmp_level_name_5 = const_int_0;
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 20;
    tmp_assign_source_11 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
    if ( tmp_assign_source_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;

        goto frame_exception_exit_1;
    }
    assert( tmp_import_from_1__module == NULL );
    tmp_import_from_1__module = tmp_assign_source_11;

    // Tried code:
    tmp_import_name_from_3 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_3 );
    tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_izip );
    if ( tmp_assign_source_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_izip, tmp_assign_source_12 );
    tmp_import_name_from_4 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_4 );
    tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_with_metaclass );
    if ( tmp_assign_source_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_with_metaclass, tmp_assign_source_13 );
    tmp_import_name_from_5 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_5 );
    tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_text_type );
    if ( tmp_assign_source_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_text_type, tmp_assign_source_14 );
    tmp_import_name_from_6 = tmp_import_from_1__module;

    CHECK_OBJECT( tmp_import_name_from_6 );
    tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_PY2 );
    if ( tmp_assign_source_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 20;

        goto try_except_handler_1;
    }
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_PY2, tmp_assign_source_15 );
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    tmp_assign_source_16 = PyTuple_New( 2 );
    tmp_source_name_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_1 == NULL ))
    {
        tmp_source_name_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_1 == NULL )
    {
        Py_DECREF( tmp_assign_source_16 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 24;

        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_FunctionType );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_16 );

        exception_lineno = 24;

        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_16, 0, tmp_tuple_element_1 );
    tmp_source_name_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_types );

    if (unlikely( tmp_source_name_2 == NULL ))
    {
        tmp_source_name_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_types );
    }

    if ( tmp_source_name_2 == NULL )
    {
        Py_DECREF( tmp_assign_source_16 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "types" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 24;

        goto frame_exception_exit_1;
    }

    tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_MethodType );
    if ( tmp_tuple_element_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_16 );

        exception_lineno = 24;

        goto frame_exception_exit_1;
    }
    PyTuple_SET_ITEM( tmp_assign_source_16, 1, tmp_tuple_element_1 );
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__context_function_types, tmp_assign_source_16 );
    tmp_assign_source_17 = _PyDict_NewPresized( 7 );
    tmp_dict_key_1 = const_str_chr_42;
    tmp_source_name_3 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_3 == NULL ))
    {
        tmp_source_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 28;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_mul );
    if ( tmp_dict_value_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_17 );

        exception_lineno = 28;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_17, tmp_dict_key_1, tmp_dict_value_1 );
    Py_DECREF( tmp_dict_value_1 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_2 = const_str_chr_47;
    tmp_source_name_4 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_4 == NULL ))
    {
        tmp_source_name_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_4 == NULL )
    {
        Py_DECREF( tmp_assign_source_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 29;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_truediv );
    if ( tmp_dict_value_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_17 );

        exception_lineno = 29;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_17, tmp_dict_key_2, tmp_dict_value_2 );
    Py_DECREF( tmp_dict_value_2 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_3 = const_str_digest_13971ae58b983978540cbb4bbf3b1360;
    tmp_source_name_5 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_5 == NULL ))
    {
        tmp_source_name_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_5 == NULL )
    {
        Py_DECREF( tmp_assign_source_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 30;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_floordiv );
    if ( tmp_dict_value_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_17 );

        exception_lineno = 30;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_17, tmp_dict_key_3, tmp_dict_value_3 );
    Py_DECREF( tmp_dict_value_3 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_4 = const_str_digest_29bbf2a0ea668f7cb550eb66ebe90f9e;
    tmp_source_name_6 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_6 == NULL ))
    {
        tmp_source_name_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_6 == NULL )
    {
        Py_DECREF( tmp_assign_source_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 31;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pow );
    if ( tmp_dict_value_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_17 );

        exception_lineno = 31;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_17, tmp_dict_key_4, tmp_dict_value_4 );
    Py_DECREF( tmp_dict_value_4 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_5 = const_str_chr_37;
    tmp_source_name_7 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_7 == NULL ))
    {
        tmp_source_name_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_7 == NULL )
    {
        Py_DECREF( tmp_assign_source_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 32;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_mod );
    if ( tmp_dict_value_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_17 );

        exception_lineno = 32;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_17, tmp_dict_key_5, tmp_dict_value_5 );
    Py_DECREF( tmp_dict_value_5 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_6 = const_str_chr_43;
    tmp_source_name_8 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_8 == NULL ))
    {
        tmp_source_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 33;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_add );
    if ( tmp_dict_value_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_17 );

        exception_lineno = 33;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_17, tmp_dict_key_6, tmp_dict_value_6 );
    Py_DECREF( tmp_dict_value_6 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_7 = const_str_chr_45;
    tmp_source_name_9 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_9 == NULL ))
    {
        tmp_source_name_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_9 == NULL )
    {
        Py_DECREF( tmp_assign_source_17 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 34;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_7 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_sub );
    if ( tmp_dict_value_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_17 );

        exception_lineno = 34;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_17, tmp_dict_key_7, tmp_dict_value_7 );
    Py_DECREF( tmp_dict_value_7 );
    assert( !(tmp_res != 0) );
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__binop_to_func, tmp_assign_source_17 );
    tmp_assign_source_18 = _PyDict_NewPresized( 3 );
    tmp_dict_key_8 = const_str_plain_not;
    tmp_source_name_10 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_10 == NULL ))
    {
        tmp_source_name_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_10 == NULL )
    {
        Py_DECREF( tmp_assign_source_18 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 38;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_8 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_not_ );
    if ( tmp_dict_value_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_18 );

        exception_lineno = 38;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_18, tmp_dict_key_8, tmp_dict_value_8 );
    Py_DECREF( tmp_dict_value_8 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_9 = const_str_chr_43;
    tmp_source_name_11 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_11 == NULL ))
    {
        tmp_source_name_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_11 == NULL )
    {
        Py_DECREF( tmp_assign_source_18 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 39;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_9 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_pos );
    if ( tmp_dict_value_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_18 );

        exception_lineno = 39;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_18, tmp_dict_key_9, tmp_dict_value_9 );
    Py_DECREF( tmp_dict_value_9 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_10 = const_str_chr_45;
    tmp_source_name_12 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_12 == NULL ))
    {
        tmp_source_name_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_18 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 40;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_neg );
    if ( tmp_dict_value_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_18 );

        exception_lineno = 40;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_18, tmp_dict_key_10, tmp_dict_value_10 );
    Py_DECREF( tmp_dict_value_10 );
    assert( !(tmp_res != 0) );
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__uaop_to_func, tmp_assign_source_18 );
    tmp_assign_source_19 = _PyDict_NewPresized( 8 );
    tmp_dict_key_11 = const_str_plain_eq;
    tmp_source_name_13 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_13 == NULL ))
    {
        tmp_source_name_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_13 == NULL )
    {
        Py_DECREF( tmp_assign_source_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 44;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_eq );
    if ( tmp_dict_value_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        exception_lineno = 44;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_19, tmp_dict_key_11, tmp_dict_value_11 );
    Py_DECREF( tmp_dict_value_11 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_12 = const_str_plain_ne;
    tmp_source_name_14 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_14 == NULL ))
    {
        tmp_source_name_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_14 == NULL )
    {
        Py_DECREF( tmp_assign_source_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 45;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_12 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_ne );
    if ( tmp_dict_value_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        exception_lineno = 45;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_19, tmp_dict_key_12, tmp_dict_value_12 );
    Py_DECREF( tmp_dict_value_12 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_13 = const_str_plain_gt;
    tmp_source_name_15 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_15 == NULL ))
    {
        tmp_source_name_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 46;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_13 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_gt );
    if ( tmp_dict_value_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        exception_lineno = 46;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_19, tmp_dict_key_13, tmp_dict_value_13 );
    Py_DECREF( tmp_dict_value_13 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_14 = const_str_plain_gteq;
    tmp_source_name_16 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_16 == NULL ))
    {
        tmp_source_name_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_16 == NULL )
    {
        Py_DECREF( tmp_assign_source_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 47;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_14 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_ge );
    if ( tmp_dict_value_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        exception_lineno = 47;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_19, tmp_dict_key_14, tmp_dict_value_14 );
    Py_DECREF( tmp_dict_value_14 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_15 = const_str_plain_lt;
    tmp_source_name_17 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_17 == NULL ))
    {
        tmp_source_name_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_17 == NULL )
    {
        Py_DECREF( tmp_assign_source_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 48;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_15 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_lt );
    if ( tmp_dict_value_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        exception_lineno = 48;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_19, tmp_dict_key_15, tmp_dict_value_15 );
    Py_DECREF( tmp_dict_value_15 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_16 = const_str_plain_lteq;
    tmp_source_name_18 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_operator );

    if (unlikely( tmp_source_name_18 == NULL ))
    {
        tmp_source_name_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_operator );
    }

    if ( tmp_source_name_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_19 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "operator" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 49;

        goto frame_exception_exit_1;
    }

    tmp_dict_value_16 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_le );
    if ( tmp_dict_value_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_19 );

        exception_lineno = 49;

        goto frame_exception_exit_1;
    }
    tmp_res = PyDict_SetItem( tmp_assign_source_19, tmp_dict_key_16, tmp_dict_value_16 );
    Py_DECREF( tmp_dict_value_16 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_17 = const_str_plain_in;
    tmp_dict_value_17 = MAKE_FUNCTION_jinja2$nodes$$$function_1_lambda(  );
    tmp_res = PyDict_SetItem( tmp_assign_source_19, tmp_dict_key_17, tmp_dict_value_17 );
    Py_DECREF( tmp_dict_value_17 );
    assert( !(tmp_res != 0) );
    tmp_dict_key_18 = const_str_plain_notin;
    tmp_dict_value_18 = MAKE_FUNCTION_jinja2$nodes$$$function_2_lambda(  );
    tmp_res = PyDict_SetItem( tmp_assign_source_19, tmp_dict_key_18, tmp_dict_value_18 );
    Py_DECREF( tmp_dict_value_18 );
    assert( !(tmp_res != 0) );
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__cmpop_to_func, tmp_assign_source_19 );
    tmp_assign_source_20 = PyTuple_New( 1 );
    tmp_tuple_element_2 = PyExc_Exception;
    Py_INCREF( tmp_tuple_element_2 );
    PyTuple_SET_ITEM( tmp_assign_source_20, 0, tmp_tuple_element_2 );
    assert( tmp_class_creation_1__bases == NULL );
    tmp_class_creation_1__bases = tmp_assign_source_20;

    tmp_assign_source_21 = PyDict_New();
    assert( tmp_class_creation_1__class_decl_dict == NULL );
    tmp_class_creation_1__class_decl_dict = tmp_assign_source_21;

    // Tried code:
    tmp_compare_left_1 = const_str_plain_metaclass;
    tmp_compare_right_1 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_1 );
    tmp_cmp_In_1 = PySequence_Contains( tmp_compare_right_1, tmp_compare_left_1 );
    assert( !(tmp_cmp_In_1 == -1) );
    if ( tmp_cmp_In_1 == 1 )
    {
        goto condexpr_true_1;
    }
    else
    {
        goto condexpr_false_1;
    }
    condexpr_true_1:;
    tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_1 );
    tmp_key_name_1 = const_str_plain_metaclass;
    tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_1, tmp_key_name_1 );
    if ( tmp_metaclass_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_2;
    }
    goto condexpr_end_1;
    condexpr_false_1:;
    tmp_cond_value_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_cond_value_1 );
    tmp_cond_truth_1 = CHECK_IF_TRUE( tmp_cond_value_1 );
    if ( tmp_cond_truth_1 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_2;
    }
    if ( tmp_cond_truth_1 == 1 )
    {
        goto condexpr_true_2;
    }
    else
    {
        goto condexpr_false_2;
    }
    condexpr_true_2:;
    tmp_subscribed_name_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_subscribed_name_1 );
    tmp_subscript_name_1 = const_int_0;
    tmp_type_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
    if ( tmp_type_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_2;
    }
    tmp_metaclass_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
    Py_DECREF( tmp_type_arg_1 );
    if ( tmp_metaclass_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_2;
    }
    goto condexpr_end_2;
    condexpr_false_2:;
    tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_1 );
    condexpr_end_2:;
    condexpr_end_1:;
    tmp_bases_name_1 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_bases_name_1 );
    tmp_assign_source_22 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
    if ( tmp_assign_source_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_1 );

        exception_lineno = 55;

        goto try_except_handler_2;
    }
    Py_DECREF( tmp_metaclass_name_1 );
    assert( tmp_class_creation_1__metaclass == NULL );
    tmp_class_creation_1__metaclass = tmp_assign_source_22;

    tmp_compare_left_2 = const_str_plain_metaclass;
    tmp_compare_right_2 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_2 );
    tmp_cmp_In_2 = PySequence_Contains( tmp_compare_right_2, tmp_compare_left_2 );
    assert( !(tmp_cmp_In_2 == -1) );
    if ( tmp_cmp_In_2 == 1 )
    {
        goto branch_yes_1;
    }
    else
    {
        goto branch_no_1;
    }
    branch_yes_1:;
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_2;
    }
    branch_no_1:;
    tmp_hasattr_source_1 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_1 );
    tmp_hasattr_attr_1 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_1, tmp_hasattr_attr_1 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_2;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_3;
    }
    else
    {
        goto condexpr_false_3;
    }
    condexpr_true_3:;
    tmp_source_name_19 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_source_name_19 );
    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain___prepare__ );
    if ( tmp_called_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_2;
    }
    tmp_args_name_1 = PyTuple_New( 2 );
    tmp_tuple_element_3 = const_str_plain_Impossible;
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_3 );
    tmp_tuple_element_3 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_tuple_element_3 );
    Py_INCREF( tmp_tuple_element_3 );
    PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_3 );
    tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_1 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 55;
    tmp_assign_source_23 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
    Py_DECREF( tmp_called_name_2 );
    Py_DECREF( tmp_args_name_1 );
    if ( tmp_assign_source_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_2;
    }
    goto condexpr_end_3;
    condexpr_false_3:;
    tmp_assign_source_23 = PyDict_New();
    condexpr_end_3:;
    assert( tmp_class_creation_1__prepared == NULL );
    tmp_class_creation_1__prepared = tmp_assign_source_23;

    tmp_set_locals = tmp_class_creation_1__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_1);
    locals_dict_1 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_25 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_0_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_25 );
    outline_0_var___module__ = tmp_assign_source_25;

    tmp_assign_source_26 = const_str_digest_42312d483ec942858c3736c314adc1d9;
    assert( outline_0_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_26 );
    outline_0_var___doc__ = tmp_assign_source_26;

    tmp_assign_source_27 = const_str_plain_Impossible;
    assert( outline_0_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_27 );
    outline_0_var___qualname__ = tmp_assign_source_27;

    // Tried code:
    tmp_called_name_3 = tmp_class_creation_1__metaclass;

    CHECK_OBJECT( tmp_called_name_3 );
    tmp_args_name_2 = PyTuple_New( 3 );
    tmp_tuple_element_4 = const_str_plain_Impossible;
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_4 );
    tmp_tuple_element_4 = tmp_class_creation_1__bases;

    CHECK_OBJECT( tmp_tuple_element_4 );
    Py_INCREF( tmp_tuple_element_4 );
    PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_4 );
    tmp_tuple_element_4 = locals_dict_1;
    Py_INCREF( tmp_tuple_element_4 );
    if ( outline_0_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_4,
            const_str_plain___qualname__,
            outline_0_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_4,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_4,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_4 );

        exception_lineno = 55;

        goto try_except_handler_3;
    }
    if ( outline_0_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_4,
            const_str_plain___module__,
            outline_0_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_4,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_4,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_4 );

        exception_lineno = 55;

        goto try_except_handler_3;
    }
    if ( outline_0_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_4,
            const_str_plain___doc__,
            outline_0_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_4,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_4,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_tuple_element_4 );

        exception_lineno = 55;

        goto try_except_handler_3;
    }
    PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_4 );
    tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_2 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 55;
    tmp_assign_source_28 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_2, tmp_kw_name_2 );
    Py_DECREF( tmp_args_name_2 );
    if ( tmp_assign_source_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 55;

        goto try_except_handler_3;
    }
    assert( outline_0_var___class__ == NULL );
    outline_0_var___class__ = tmp_assign_source_28;

    tmp_outline_return_value_1 = outline_0_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_1 );
    Py_INCREF( tmp_outline_return_value_1 );
    goto try_return_handler_3;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_3:;
    CHECK_OBJECT( (PyObject *)outline_0_var___class__ );
    Py_DECREF( outline_0_var___class__ );
    outline_0_var___class__ = NULL;

    Py_XDECREF( outline_0_var___qualname__ );
    outline_0_var___qualname__ = NULL;

    Py_XDECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    Py_XDECREF( outline_0_var___doc__ );
    outline_0_var___doc__ = NULL;

    goto outline_result_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_0_var___qualname__ );
    outline_0_var___qualname__ = NULL;

    Py_XDECREF( outline_0_var___module__ );
    outline_0_var___module__ = NULL;

    Py_XDECREF( outline_0_var___doc__ );
    outline_0_var___doc__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto outline_exception_1;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_1:;
    exception_lineno = 55;
    goto try_except_handler_2;
    outline_result_1:;
    tmp_assign_source_24 = tmp_outline_return_value_1;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Impossible, tmp_assign_source_24 );
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    tmp_assign_source_29 = const_tuple_type_type_tuple;
    assert( tmp_class_creation_2__bases == NULL );
    Py_INCREF( tmp_assign_source_29 );
    tmp_class_creation_2__bases = tmp_assign_source_29;

    tmp_assign_source_30 = PyDict_New();
    assert( tmp_class_creation_2__class_decl_dict == NULL );
    tmp_class_creation_2__class_decl_dict = tmp_assign_source_30;

    // Tried code:
    tmp_compare_left_3 = const_str_plain_metaclass;
    tmp_compare_right_3 = tmp_class_creation_2__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_3 );
    tmp_cmp_In_3 = PySequence_Contains( tmp_compare_right_3, tmp_compare_left_3 );
    assert( !(tmp_cmp_In_3 == -1) );
    if ( tmp_cmp_In_3 == 1 )
    {
        goto condexpr_true_4;
    }
    else
    {
        goto condexpr_false_4;
    }
    condexpr_true_4:;
    tmp_dict_name_2 = tmp_class_creation_2__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_2 );
    tmp_key_name_2 = const_str_plain_metaclass;
    tmp_metaclass_name_2 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
    if ( tmp_metaclass_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_4;
    }
    goto condexpr_end_4;
    condexpr_false_4:;
    tmp_cond_value_2 = tmp_class_creation_2__bases;

    CHECK_OBJECT( tmp_cond_value_2 );
    tmp_cond_truth_2 = CHECK_IF_TRUE( tmp_cond_value_2 );
    if ( tmp_cond_truth_2 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_4;
    }
    if ( tmp_cond_truth_2 == 1 )
    {
        goto condexpr_true_5;
    }
    else
    {
        goto condexpr_false_5;
    }
    condexpr_true_5:;
    tmp_subscribed_name_2 = tmp_class_creation_2__bases;

    CHECK_OBJECT( tmp_subscribed_name_2 );
    tmp_subscript_name_2 = const_int_0;
    tmp_type_arg_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
    if ( tmp_type_arg_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_4;
    }
    tmp_metaclass_name_2 = BUILTIN_TYPE1( tmp_type_arg_2 );
    Py_DECREF( tmp_type_arg_2 );
    if ( tmp_metaclass_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_4;
    }
    goto condexpr_end_5;
    condexpr_false_5:;
    tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_2 );
    condexpr_end_5:;
    condexpr_end_4:;
    tmp_bases_name_2 = tmp_class_creation_2__bases;

    CHECK_OBJECT( tmp_bases_name_2 );
    tmp_assign_source_31 = SELECT_METACLASS( tmp_metaclass_name_2, tmp_bases_name_2 );
    if ( tmp_assign_source_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_2 );

        exception_lineno = 59;

        goto try_except_handler_4;
    }
    Py_DECREF( tmp_metaclass_name_2 );
    assert( tmp_class_creation_2__metaclass == NULL );
    tmp_class_creation_2__metaclass = tmp_assign_source_31;

    tmp_compare_left_4 = const_str_plain_metaclass;
    tmp_compare_right_4 = tmp_class_creation_2__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_4 );
    tmp_cmp_In_4 = PySequence_Contains( tmp_compare_right_4, tmp_compare_left_4 );
    assert( !(tmp_cmp_In_4 == -1) );
    if ( tmp_cmp_In_4 == 1 )
    {
        goto branch_yes_2;
    }
    else
    {
        goto branch_no_2;
    }
    branch_yes_2:;
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_4;
    }
    branch_no_2:;
    tmp_hasattr_source_2 = tmp_class_creation_2__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_2 );
    tmp_hasattr_attr_2 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_2, tmp_hasattr_attr_2 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_4;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_6;
    }
    else
    {
        goto condexpr_false_6;
    }
    condexpr_true_6:;
    tmp_source_name_20 = tmp_class_creation_2__metaclass;

    CHECK_OBJECT( tmp_source_name_20 );
    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain___prepare__ );
    if ( tmp_called_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_4;
    }
    tmp_args_name_3 = PyTuple_New( 2 );
    tmp_tuple_element_5 = const_str_plain_NodeType;
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_5 );
    tmp_tuple_element_5 = tmp_class_creation_2__bases;

    CHECK_OBJECT( tmp_tuple_element_5 );
    Py_INCREF( tmp_tuple_element_5 );
    PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_5 );
    tmp_kw_name_3 = tmp_class_creation_2__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_3 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 59;
    tmp_assign_source_32 = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_3, tmp_kw_name_3 );
    Py_DECREF( tmp_called_name_4 );
    Py_DECREF( tmp_args_name_3 );
    if ( tmp_assign_source_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_4;
    }
    goto condexpr_end_6;
    condexpr_false_6:;
    tmp_assign_source_32 = PyDict_New();
    condexpr_end_6:;
    assert( tmp_class_creation_2__prepared == NULL );
    tmp_class_creation_2__prepared = tmp_assign_source_32;

    tmp_set_locals = tmp_class_creation_2__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_2);
    locals_dict_2 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_34 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_1_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_34 );
    outline_1_var___module__ = tmp_assign_source_34;

    tmp_assign_source_35 = const_str_digest_1904fbcd9fa3e756c9852501a69875b5;
    assert( outline_1_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_35 );
    outline_1_var___doc__ = tmp_assign_source_35;

    tmp_assign_source_36 = const_str_plain_NodeType;
    assert( outline_1_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_36 );
    outline_1_var___qualname__ = tmp_assign_source_36;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5dba849f260b1ecd14ce0c144086a48f_2, codeobj_5dba849f260b1ecd14ce0c144086a48f, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_5dba849f260b1ecd14ce0c144086a48f_2 = cache_frame_5dba849f260b1ecd14ce0c144086a48f_2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5dba849f260b1ecd14ce0c144086a48f_2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5dba849f260b1ecd14ce0c144086a48f_2 ) == 2 ); // Frame stack

    // Framed code:
    tmp_staticmethod_arg_1 = MAKE_FUNCTION_jinja2$nodes$$$function_3___new__(  );
    tmp_assign_source_37 = BUILTIN_STATICMETHOD( tmp_staticmethod_arg_1 );
    Py_DECREF( tmp_staticmethod_arg_1 );
    if ( tmp_assign_source_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 64;
        type_description_2 = "NoooN";
        goto frame_exception_exit_2;
    }
    assert( outline_1_var___new__ == NULL );
    outline_1_var___new__ = tmp_assign_source_37;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_5dba849f260b1ecd14ce0c144086a48f_2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5dba849f260b1ecd14ce0c144086a48f_2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5dba849f260b1ecd14ce0c144086a48f_2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5dba849f260b1ecd14ce0c144086a48f_2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5dba849f260b1ecd14ce0c144086a48f_2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5dba849f260b1ecd14ce0c144086a48f_2,
        type_description_2,
        NULL,
        outline_1_var___qualname__,
        outline_1_var___module__,
        outline_1_var___doc__,
        outline_1_var___new__
    );


    // Release cached frame.
    if ( frame_5dba849f260b1ecd14ce0c144086a48f_2 == cache_frame_5dba849f260b1ecd14ce0c144086a48f_2 )
    {
        Py_DECREF( frame_5dba849f260b1ecd14ce0c144086a48f_2 );
    }
    cache_frame_5dba849f260b1ecd14ce0c144086a48f_2 = NULL;

    assertFrameObject( frame_5dba849f260b1ecd14ce0c144086a48f_2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_1;

    frame_no_exception_1:;

    goto skip_nested_handling_1;
    nested_frame_exit_1:;

    goto try_except_handler_5;
    skip_nested_handling_1:;
    tmp_called_name_5 = tmp_class_creation_2__metaclass;

    CHECK_OBJECT( tmp_called_name_5 );
    tmp_args_name_4 = PyTuple_New( 3 );
    tmp_tuple_element_6 = const_str_plain_NodeType;
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_6 );
    tmp_tuple_element_6 = tmp_class_creation_2__bases;

    CHECK_OBJECT( tmp_tuple_element_6 );
    Py_INCREF( tmp_tuple_element_6 );
    PyTuple_SET_ITEM( tmp_args_name_4, 1, tmp_tuple_element_6 );
    tmp_tuple_element_6 = locals_dict_2;
    Py_INCREF( tmp_tuple_element_6 );
    if ( outline_1_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_6,
            const_str_plain___qualname__,
            outline_1_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_6,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_6,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_4 );
        Py_DECREF( tmp_tuple_element_6 );

        exception_lineno = 59;

        goto try_except_handler_5;
    }
    if ( outline_1_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_6,
            const_str_plain___module__,
            outline_1_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_6,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_6,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_4 );
        Py_DECREF( tmp_tuple_element_6 );

        exception_lineno = 59;

        goto try_except_handler_5;
    }
    if ( outline_1_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_6,
            const_str_plain___doc__,
            outline_1_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_6,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_6,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_4 );
        Py_DECREF( tmp_tuple_element_6 );

        exception_lineno = 59;

        goto try_except_handler_5;
    }
    if ( outline_1_var___new__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_6,
            const_str_plain___new__,
            outline_1_var___new__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_6,
            const_str_plain___new__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_6,
                const_str_plain___new__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_4 );
        Py_DECREF( tmp_tuple_element_6 );

        exception_lineno = 59;

        goto try_except_handler_5;
    }
    PyTuple_SET_ITEM( tmp_args_name_4, 2, tmp_tuple_element_6 );
    tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_4 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 59;
    tmp_assign_source_38 = CALL_FUNCTION( tmp_called_name_5, tmp_args_name_4, tmp_kw_name_4 );
    Py_DECREF( tmp_args_name_4 );
    if ( tmp_assign_source_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 59;

        goto try_except_handler_5;
    }
    assert( outline_1_var___class__ == NULL );
    outline_1_var___class__ = tmp_assign_source_38;

    tmp_outline_return_value_2 = outline_1_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_2 );
    Py_INCREF( tmp_outline_return_value_2 );
    goto try_return_handler_5;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_5:;
    CHECK_OBJECT( (PyObject *)outline_1_var___class__ );
    Py_DECREF( outline_1_var___class__ );
    outline_1_var___class__ = NULL;

    Py_XDECREF( outline_1_var___qualname__ );
    outline_1_var___qualname__ = NULL;

    Py_XDECREF( outline_1_var___module__ );
    outline_1_var___module__ = NULL;

    Py_XDECREF( outline_1_var___doc__ );
    outline_1_var___doc__ = NULL;

    Py_XDECREF( outline_1_var___new__ );
    outline_1_var___new__ = NULL;

    goto outline_result_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_1_var___qualname__ );
    outline_1_var___qualname__ = NULL;

    Py_XDECREF( outline_1_var___module__ );
    outline_1_var___module__ = NULL;

    Py_XDECREF( outline_1_var___doc__ );
    outline_1_var___doc__ = NULL;

    Py_XDECREF( outline_1_var___new__ );
    outline_1_var___new__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto outline_exception_2;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_2:;
    exception_lineno = 59;
    goto try_except_handler_4;
    outline_result_2:;
    tmp_assign_source_33 = tmp_outline_return_value_2;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_NodeType, tmp_assign_source_33 );
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    tmp_assign_source_39 = const_tuple_type_object_tuple;
    assert( tmp_class_creation_3__bases == NULL );
    Py_INCREF( tmp_assign_source_39 );
    tmp_class_creation_3__bases = tmp_assign_source_39;

    tmp_assign_source_40 = PyDict_New();
    assert( tmp_class_creation_3__class_decl_dict == NULL );
    tmp_class_creation_3__class_decl_dict = tmp_assign_source_40;

    // Tried code:
    tmp_compare_left_5 = const_str_plain_metaclass;
    tmp_compare_right_5 = tmp_class_creation_3__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_5 );
    tmp_cmp_In_5 = PySequence_Contains( tmp_compare_right_5, tmp_compare_left_5 );
    assert( !(tmp_cmp_In_5 == -1) );
    if ( tmp_cmp_In_5 == 1 )
    {
        goto condexpr_true_7;
    }
    else
    {
        goto condexpr_false_7;
    }
    condexpr_true_7:;
    tmp_dict_name_3 = tmp_class_creation_3__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_3 );
    tmp_key_name_3 = const_str_plain_metaclass;
    tmp_metaclass_name_3 = DICT_GET_ITEM( tmp_dict_name_3, tmp_key_name_3 );
    if ( tmp_metaclass_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_6;
    }
    goto condexpr_end_7;
    condexpr_false_7:;
    tmp_cond_value_3 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_cond_value_3 );
    tmp_cond_truth_3 = CHECK_IF_TRUE( tmp_cond_value_3 );
    if ( tmp_cond_truth_3 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_6;
    }
    if ( tmp_cond_truth_3 == 1 )
    {
        goto condexpr_true_8;
    }
    else
    {
        goto condexpr_false_8;
    }
    condexpr_true_8:;
    tmp_subscribed_name_3 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_subscribed_name_3 );
    tmp_subscript_name_3 = const_int_0;
    tmp_type_arg_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
    if ( tmp_type_arg_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_6;
    }
    tmp_metaclass_name_3 = BUILTIN_TYPE1( tmp_type_arg_3 );
    Py_DECREF( tmp_type_arg_3 );
    if ( tmp_metaclass_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_6;
    }
    goto condexpr_end_8;
    condexpr_false_8:;
    tmp_metaclass_name_3 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_3 );
    condexpr_end_8:;
    condexpr_end_7:;
    tmp_bases_name_3 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_bases_name_3 );
    tmp_assign_source_41 = SELECT_METACLASS( tmp_metaclass_name_3, tmp_bases_name_3 );
    if ( tmp_assign_source_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_3 );

        exception_lineno = 76;

        goto try_except_handler_6;
    }
    Py_DECREF( tmp_metaclass_name_3 );
    assert( tmp_class_creation_3__metaclass == NULL );
    tmp_class_creation_3__metaclass = tmp_assign_source_41;

    tmp_compare_left_6 = const_str_plain_metaclass;
    tmp_compare_right_6 = tmp_class_creation_3__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_6 );
    tmp_cmp_In_6 = PySequence_Contains( tmp_compare_right_6, tmp_compare_left_6 );
    assert( !(tmp_cmp_In_6 == -1) );
    if ( tmp_cmp_In_6 == 1 )
    {
        goto branch_yes_3;
    }
    else
    {
        goto branch_no_3;
    }
    branch_yes_3:;
    tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_6;
    }
    branch_no_3:;
    tmp_hasattr_source_3 = tmp_class_creation_3__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_3 );
    tmp_hasattr_attr_3 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_3, tmp_hasattr_attr_3 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_6;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_9;
    }
    else
    {
        goto condexpr_false_9;
    }
    condexpr_true_9:;
    tmp_source_name_21 = tmp_class_creation_3__metaclass;

    CHECK_OBJECT( tmp_source_name_21 );
    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain___prepare__ );
    if ( tmp_called_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_6;
    }
    tmp_args_name_5 = PyTuple_New( 2 );
    tmp_tuple_element_7 = const_str_plain_EvalContext;
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_args_name_5, 0, tmp_tuple_element_7 );
    tmp_tuple_element_7 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_tuple_element_7 );
    Py_INCREF( tmp_tuple_element_7 );
    PyTuple_SET_ITEM( tmp_args_name_5, 1, tmp_tuple_element_7 );
    tmp_kw_name_5 = tmp_class_creation_3__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_5 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 76;
    tmp_assign_source_42 = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_5, tmp_kw_name_5 );
    Py_DECREF( tmp_called_name_6 );
    Py_DECREF( tmp_args_name_5 );
    if ( tmp_assign_source_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_6;
    }
    goto condexpr_end_9;
    condexpr_false_9:;
    tmp_assign_source_42 = PyDict_New();
    condexpr_end_9:;
    assert( tmp_class_creation_3__prepared == NULL );
    tmp_class_creation_3__prepared = tmp_assign_source_42;

    tmp_set_locals = tmp_class_creation_3__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_3);
    locals_dict_3 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_44 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_2_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_44 );
    outline_2_var___module__ = tmp_assign_source_44;

    tmp_assign_source_45 = const_str_digest_223828ec3f21802d35392672e806dae6;
    assert( outline_2_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_45 );
    outline_2_var___doc__ = tmp_assign_source_45;

    tmp_assign_source_46 = const_str_plain_EvalContext;
    assert( outline_2_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_46 );
    outline_2_var___qualname__ = tmp_assign_source_46;

    tmp_defaults_1 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_1 );
    tmp_assign_source_47 = MAKE_FUNCTION_jinja2$nodes$$$function_4___init__( tmp_defaults_1 );
    assert( outline_2_var___init__ == NULL );
    outline_2_var___init__ = tmp_assign_source_47;

    tmp_assign_source_48 = MAKE_FUNCTION_jinja2$nodes$$$function_5_save(  );
    assert( outline_2_var_save == NULL );
    outline_2_var_save = tmp_assign_source_48;

    tmp_assign_source_49 = MAKE_FUNCTION_jinja2$nodes$$$function_6_revert(  );
    assert( outline_2_var_revert == NULL );
    outline_2_var_revert = tmp_assign_source_49;

    // Tried code:
    tmp_called_name_7 = tmp_class_creation_3__metaclass;

    CHECK_OBJECT( tmp_called_name_7 );
    tmp_args_name_6 = PyTuple_New( 3 );
    tmp_tuple_element_8 = const_str_plain_EvalContext;
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_args_name_6, 0, tmp_tuple_element_8 );
    tmp_tuple_element_8 = tmp_class_creation_3__bases;

    CHECK_OBJECT( tmp_tuple_element_8 );
    Py_INCREF( tmp_tuple_element_8 );
    PyTuple_SET_ITEM( tmp_args_name_6, 1, tmp_tuple_element_8 );
    tmp_tuple_element_8 = locals_dict_3;
    Py_INCREF( tmp_tuple_element_8 );
    if ( outline_2_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_8,
            const_str_plain___qualname__,
            outline_2_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_8,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_8,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_6 );
        Py_DECREF( tmp_tuple_element_8 );

        exception_lineno = 76;

        goto try_except_handler_7;
    }
    if ( outline_2_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_8,
            const_str_plain___module__,
            outline_2_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_8,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_8,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_6 );
        Py_DECREF( tmp_tuple_element_8 );

        exception_lineno = 76;

        goto try_except_handler_7;
    }
    if ( outline_2_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_8,
            const_str_plain___doc__,
            outline_2_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_8,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_8,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_6 );
        Py_DECREF( tmp_tuple_element_8 );

        exception_lineno = 76;

        goto try_except_handler_7;
    }
    if ( outline_2_var___init__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_8,
            const_str_plain___init__,
            outline_2_var___init__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_8,
            const_str_plain___init__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_8,
                const_str_plain___init__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_6 );
        Py_DECREF( tmp_tuple_element_8 );

        exception_lineno = 76;

        goto try_except_handler_7;
    }
    if ( outline_2_var_save != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_8,
            const_str_plain_save,
            outline_2_var_save
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_8,
            const_str_plain_save
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_8,
                const_str_plain_save
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_6 );
        Py_DECREF( tmp_tuple_element_8 );

        exception_lineno = 76;

        goto try_except_handler_7;
    }
    if ( outline_2_var_revert != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_8,
            const_str_plain_revert,
            outline_2_var_revert
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_8,
            const_str_plain_revert
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_8,
                const_str_plain_revert
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_6 );
        Py_DECREF( tmp_tuple_element_8 );

        exception_lineno = 76;

        goto try_except_handler_7;
    }
    PyTuple_SET_ITEM( tmp_args_name_6, 2, tmp_tuple_element_8 );
    tmp_kw_name_6 = tmp_class_creation_3__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_6 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 76;
    tmp_assign_source_50 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_6, tmp_kw_name_6 );
    Py_DECREF( tmp_args_name_6 );
    if ( tmp_assign_source_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 76;

        goto try_except_handler_7;
    }
    assert( outline_2_var___class__ == NULL );
    outline_2_var___class__ = tmp_assign_source_50;

    tmp_outline_return_value_3 = outline_2_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_3 );
    Py_INCREF( tmp_outline_return_value_3 );
    goto try_return_handler_7;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_7:;
    CHECK_OBJECT( (PyObject *)outline_2_var___class__ );
    Py_DECREF( outline_2_var___class__ );
    outline_2_var___class__ = NULL;

    Py_XDECREF( outline_2_var___qualname__ );
    outline_2_var___qualname__ = NULL;

    Py_XDECREF( outline_2_var___module__ );
    outline_2_var___module__ = NULL;

    Py_XDECREF( outline_2_var___doc__ );
    outline_2_var___doc__ = NULL;

    Py_XDECREF( outline_2_var___init__ );
    outline_2_var___init__ = NULL;

    Py_XDECREF( outline_2_var_save );
    outline_2_var_save = NULL;

    Py_XDECREF( outline_2_var_revert );
    outline_2_var_revert = NULL;

    goto outline_result_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_2_var___qualname__ );
    outline_2_var___qualname__ = NULL;

    Py_XDECREF( outline_2_var___module__ );
    outline_2_var___module__ = NULL;

    Py_XDECREF( outline_2_var___doc__ );
    outline_2_var___doc__ = NULL;

    Py_XDECREF( outline_2_var___init__ );
    outline_2_var___init__ = NULL;

    Py_XDECREF( outline_2_var_save );
    outline_2_var_save = NULL;

    Py_XDECREF( outline_2_var_revert );
    outline_2_var_revert = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto outline_exception_3;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_3:;
    exception_lineno = 76;
    goto try_except_handler_6;
    outline_result_3:;
    tmp_assign_source_43 = tmp_outline_return_value_3;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_EvalContext, tmp_assign_source_43 );
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    tmp_assign_source_51 = MAKE_FUNCTION_jinja2$nodes$$$function_7_get_eval_context(  );
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_get_eval_context, tmp_assign_source_51 );
    // Tried code:
    tmp_assign_source_52 = PyTuple_New( 1 );
    tmp_called_name_8 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_with_metaclass );

    if (unlikely( tmp_called_name_8 == NULL ))
    {
        tmp_called_name_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_with_metaclass );
    }

    if ( tmp_called_name_8 == NULL )
    {
        Py_DECREF( tmp_assign_source_52 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "with_metaclass" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 107;

        goto try_except_handler_8;
    }

    tmp_args_element_name_3 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_NodeType );

    if (unlikely( tmp_args_element_name_3 == NULL ))
    {
        tmp_args_element_name_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NodeType );
    }

    if ( tmp_args_element_name_3 == NULL )
    {
        Py_DECREF( tmp_assign_source_52 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "NodeType" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 107;

        goto try_except_handler_8;
    }

    tmp_args_element_name_4 = (PyObject *)&PyBaseObject_Type;
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 107;
    {
        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
        tmp_tuple_element_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
    }

    if ( tmp_tuple_element_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assign_source_52 );

        exception_lineno = 107;

        goto try_except_handler_8;
    }
    PyTuple_SET_ITEM( tmp_assign_source_52, 0, tmp_tuple_element_9 );
    assert( tmp_class_creation_4__bases == NULL );
    tmp_class_creation_4__bases = tmp_assign_source_52;

    tmp_assign_source_53 = PyDict_New();
    assert( tmp_class_creation_4__class_decl_dict == NULL );
    tmp_class_creation_4__class_decl_dict = tmp_assign_source_53;

    tmp_compare_left_7 = const_str_plain_metaclass;
    tmp_compare_right_7 = tmp_class_creation_4__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_7 );
    tmp_cmp_In_7 = PySequence_Contains( tmp_compare_right_7, tmp_compare_left_7 );
    assert( !(tmp_cmp_In_7 == -1) );
    if ( tmp_cmp_In_7 == 1 )
    {
        goto condexpr_true_10;
    }
    else
    {
        goto condexpr_false_10;
    }
    condexpr_true_10:;
    tmp_dict_name_4 = tmp_class_creation_4__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_4 );
    tmp_key_name_4 = const_str_plain_metaclass;
    tmp_metaclass_name_4 = DICT_GET_ITEM( tmp_dict_name_4, tmp_key_name_4 );
    if ( tmp_metaclass_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_8;
    }
    goto condexpr_end_10;
    condexpr_false_10:;
    tmp_cond_value_4 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_cond_value_4 );
    tmp_cond_truth_4 = CHECK_IF_TRUE( tmp_cond_value_4 );
    if ( tmp_cond_truth_4 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_8;
    }
    if ( tmp_cond_truth_4 == 1 )
    {
        goto condexpr_true_11;
    }
    else
    {
        goto condexpr_false_11;
    }
    condexpr_true_11:;
    tmp_subscribed_name_4 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_subscribed_name_4 );
    tmp_subscript_name_4 = const_int_0;
    tmp_type_arg_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
    if ( tmp_type_arg_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_8;
    }
    tmp_metaclass_name_4 = BUILTIN_TYPE1( tmp_type_arg_4 );
    Py_DECREF( tmp_type_arg_4 );
    if ( tmp_metaclass_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_8;
    }
    goto condexpr_end_11;
    condexpr_false_11:;
    tmp_metaclass_name_4 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_4 );
    condexpr_end_11:;
    condexpr_end_10:;
    tmp_bases_name_4 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_bases_name_4 );
    tmp_assign_source_54 = SELECT_METACLASS( tmp_metaclass_name_4, tmp_bases_name_4 );
    if ( tmp_assign_source_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_4 );

        exception_lineno = 107;

        goto try_except_handler_8;
    }
    Py_DECREF( tmp_metaclass_name_4 );
    assert( tmp_class_creation_4__metaclass == NULL );
    tmp_class_creation_4__metaclass = tmp_assign_source_54;

    tmp_compare_left_8 = const_str_plain_metaclass;
    tmp_compare_right_8 = tmp_class_creation_4__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_8 );
    tmp_cmp_In_8 = PySequence_Contains( tmp_compare_right_8, tmp_compare_left_8 );
    assert( !(tmp_cmp_In_8 == -1) );
    if ( tmp_cmp_In_8 == 1 )
    {
        goto branch_yes_4;
    }
    else
    {
        goto branch_no_4;
    }
    branch_yes_4:;
    tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_8;
    }
    branch_no_4:;
    tmp_hasattr_source_4 = tmp_class_creation_4__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_4 );
    tmp_hasattr_attr_4 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_4, tmp_hasattr_attr_4 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_8;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_12;
    }
    else
    {
        goto condexpr_false_12;
    }
    condexpr_true_12:;
    tmp_source_name_22 = tmp_class_creation_4__metaclass;

    CHECK_OBJECT( tmp_source_name_22 );
    tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain___prepare__ );
    if ( tmp_called_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_8;
    }
    tmp_args_name_7 = PyTuple_New( 2 );
    tmp_tuple_element_10 = const_str_plain_Node;
    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_args_name_7, 0, tmp_tuple_element_10 );
    tmp_tuple_element_10 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_tuple_element_10 );
    Py_INCREF( tmp_tuple_element_10 );
    PyTuple_SET_ITEM( tmp_args_name_7, 1, tmp_tuple_element_10 );
    tmp_kw_name_7 = tmp_class_creation_4__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_7 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 107;
    tmp_assign_source_55 = CALL_FUNCTION( tmp_called_name_9, tmp_args_name_7, tmp_kw_name_7 );
    Py_DECREF( tmp_called_name_9 );
    Py_DECREF( tmp_args_name_7 );
    if ( tmp_assign_source_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_8;
    }
    goto condexpr_end_12;
    condexpr_false_12:;
    tmp_assign_source_55 = PyDict_New();
    condexpr_end_12:;
    assert( tmp_class_creation_4__prepared == NULL );
    tmp_class_creation_4__prepared = tmp_assign_source_55;

    tmp_set_locals = tmp_class_creation_4__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_4);
    locals_dict_4 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_57 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_3_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_57 );
    outline_3_var___module__ = tmp_assign_source_57;

    tmp_assign_source_58 = const_str_digest_74112eebfe332d831d9b921bac1fce2b;
    assert( outline_3_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_58 );
    outline_3_var___doc__ = tmp_assign_source_58;

    tmp_assign_source_59 = const_str_plain_Node;
    assert( outline_3_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_59 );
    outline_3_var___qualname__ = tmp_assign_source_59;

    tmp_assign_source_60 = const_tuple_empty;
    assert( outline_3_var_fields == NULL );
    Py_INCREF( tmp_assign_source_60 );
    outline_3_var_fields = tmp_assign_source_60;

    tmp_assign_source_61 = const_tuple_str_plain_lineno_str_plain_environment_tuple;
    assert( outline_3_var_attributes == NULL );
    Py_INCREF( tmp_assign_source_61 );
    outline_3_var_attributes = tmp_assign_source_61;

    tmp_assign_source_62 = Py_True;
    assert( outline_3_var_abstract == NULL );
    Py_INCREF( tmp_assign_source_62 );
    outline_3_var_abstract = tmp_assign_source_62;

    tmp_assign_source_63 = MAKE_FUNCTION_jinja2$nodes$$$function_8___init__(  );
    assert( outline_3_var___init__ == NULL );
    outline_3_var___init__ = tmp_assign_source_63;

    tmp_defaults_2 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_2 );
    tmp_assign_source_64 = MAKE_FUNCTION_jinja2$nodes$$$function_9_iter_fields( tmp_defaults_2 );
    assert( outline_3_var_iter_fields == NULL );
    outline_3_var_iter_fields = tmp_assign_source_64;

    tmp_defaults_3 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_3 );
    tmp_assign_source_65 = MAKE_FUNCTION_jinja2$nodes$$$function_10_iter_child_nodes( tmp_defaults_3 );
    assert( outline_3_var_iter_child_nodes == NULL );
    outline_3_var_iter_child_nodes = tmp_assign_source_65;

    tmp_assign_source_66 = MAKE_FUNCTION_jinja2$nodes$$$function_11_find(  );
    assert( outline_3_var_find == NULL );
    outline_3_var_find = tmp_assign_source_66;

    tmp_assign_source_67 = MAKE_FUNCTION_jinja2$nodes$$$function_12_find_all(  );
    assert( outline_3_var_find_all == NULL );
    outline_3_var_find_all = tmp_assign_source_67;

    tmp_assign_source_68 = MAKE_FUNCTION_jinja2$nodes$$$function_13_set_ctx(  );
    assert( outline_3_var_set_ctx == NULL );
    outline_3_var_set_ctx = tmp_assign_source_68;

    tmp_defaults_4 = const_tuple_false_tuple;
    Py_INCREF( tmp_defaults_4 );
    tmp_assign_source_69 = MAKE_FUNCTION_jinja2$nodes$$$function_14_set_lineno( tmp_defaults_4 );
    assert( outline_3_var_set_lineno == NULL );
    outline_3_var_set_lineno = tmp_assign_source_69;

    tmp_assign_source_70 = MAKE_FUNCTION_jinja2$nodes$$$function_15_set_environment(  );
    assert( outline_3_var_set_environment == NULL );
    outline_3_var_set_environment = tmp_assign_source_70;

    tmp_assign_source_71 = MAKE_FUNCTION_jinja2$nodes$$$function_16___eq__(  );
    assert( outline_3_var___eq__ == NULL );
    outline_3_var___eq__ = tmp_assign_source_71;

    tmp_assign_source_72 = MAKE_FUNCTION_jinja2$nodes$$$function_17___ne__(  );
    assert( outline_3_var___ne__ == NULL );
    outline_3_var___ne__ = tmp_assign_source_72;

    tmp_source_name_23 = (PyObject *)&PyBaseObject_Type;
    tmp_assign_source_73 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain___hash__ );
    assert( tmp_assign_source_73 != NULL );
    assert( outline_3_var___hash__ == NULL );
    outline_3_var___hash__ = tmp_assign_source_73;

    tmp_assign_source_74 = MAKE_FUNCTION_jinja2$nodes$$$function_18___repr__(  );
    assert( outline_3_var___repr__ == NULL );
    outline_3_var___repr__ = tmp_assign_source_74;

    tmp_assign_source_75 = MAKE_FUNCTION_jinja2$nodes$$$function_19_dump(  );
    assert( outline_3_var_dump == NULL );
    outline_3_var_dump = tmp_assign_source_75;

    // Tried code:
    tmp_called_name_10 = tmp_class_creation_4__metaclass;

    CHECK_OBJECT( tmp_called_name_10 );
    tmp_args_name_8 = PyTuple_New( 3 );
    tmp_tuple_element_11 = const_str_plain_Node;
    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_args_name_8, 0, tmp_tuple_element_11 );
    tmp_tuple_element_11 = tmp_class_creation_4__bases;

    CHECK_OBJECT( tmp_tuple_element_11 );
    Py_INCREF( tmp_tuple_element_11 );
    PyTuple_SET_ITEM( tmp_args_name_8, 1, tmp_tuple_element_11 );
    tmp_tuple_element_11 = locals_dict_4;
    Py_INCREF( tmp_tuple_element_11 );
    if ( outline_3_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain___qualname__,
            outline_3_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain___module__,
            outline_3_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain___doc__,
            outline_3_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_fields,
            outline_3_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_attributes != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_attributes,
            outline_3_var_attributes
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_attributes
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_attributes
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_abstract != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_abstract,
            outline_3_var_abstract
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_abstract
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_abstract
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var___init__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain___init__,
            outline_3_var___init__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain___init__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain___init__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_iter_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_iter_fields,
            outline_3_var_iter_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_iter_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_iter_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_iter_child_nodes != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_iter_child_nodes,
            outline_3_var_iter_child_nodes
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_iter_child_nodes
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_iter_child_nodes
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_find != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_find,
            outline_3_var_find
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_find
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_find
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_find_all != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_find_all,
            outline_3_var_find_all
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_find_all
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_find_all
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_set_ctx != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_set_ctx,
            outline_3_var_set_ctx
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_set_ctx
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_set_ctx
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_set_lineno != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_set_lineno,
            outline_3_var_set_lineno
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_set_lineno
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_set_lineno
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_set_environment != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_set_environment,
            outline_3_var_set_environment
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_set_environment
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_set_environment
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var___eq__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain___eq__,
            outline_3_var___eq__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain___eq__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain___eq__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var___ne__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain___ne__,
            outline_3_var___ne__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain___ne__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain___ne__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var___hash__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain___hash__,
            outline_3_var___hash__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain___hash__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain___hash__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var___repr__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain___repr__,
            outline_3_var___repr__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain___repr__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain___repr__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    if ( outline_3_var_dump != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_11,
            const_str_plain_dump,
            outline_3_var_dump
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_11,
            const_str_plain_dump
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_11,
                const_str_plain_dump
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_tuple_element_11 );

        exception_lineno = 107;

        goto try_except_handler_9;
    }
    PyTuple_SET_ITEM( tmp_args_name_8, 2, tmp_tuple_element_11 );
    tmp_kw_name_8 = tmp_class_creation_4__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_8 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 107;
    tmp_assign_source_76 = CALL_FUNCTION( tmp_called_name_10, tmp_args_name_8, tmp_kw_name_8 );
    Py_DECREF( tmp_args_name_8 );
    if ( tmp_assign_source_76 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 107;

        goto try_except_handler_9;
    }
    assert( outline_3_var___class__ == NULL );
    outline_3_var___class__ = tmp_assign_source_76;

    tmp_outline_return_value_4 = outline_3_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_4 );
    Py_INCREF( tmp_outline_return_value_4 );
    goto try_return_handler_9;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_9:;
    CHECK_OBJECT( (PyObject *)outline_3_var___class__ );
    Py_DECREF( outline_3_var___class__ );
    outline_3_var___class__ = NULL;

    Py_XDECREF( outline_3_var___qualname__ );
    outline_3_var___qualname__ = NULL;

    Py_XDECREF( outline_3_var___module__ );
    outline_3_var___module__ = NULL;

    Py_XDECREF( outline_3_var___doc__ );
    outline_3_var___doc__ = NULL;

    Py_XDECREF( outline_3_var_fields );
    outline_3_var_fields = NULL;

    Py_XDECREF( outline_3_var_attributes );
    outline_3_var_attributes = NULL;

    Py_XDECREF( outline_3_var_abstract );
    outline_3_var_abstract = NULL;

    Py_XDECREF( outline_3_var___init__ );
    outline_3_var___init__ = NULL;

    Py_XDECREF( outline_3_var_iter_fields );
    outline_3_var_iter_fields = NULL;

    Py_XDECREF( outline_3_var_iter_child_nodes );
    outline_3_var_iter_child_nodes = NULL;

    Py_XDECREF( outline_3_var_find );
    outline_3_var_find = NULL;

    Py_XDECREF( outline_3_var_find_all );
    outline_3_var_find_all = NULL;

    Py_XDECREF( outline_3_var_set_ctx );
    outline_3_var_set_ctx = NULL;

    Py_XDECREF( outline_3_var_set_lineno );
    outline_3_var_set_lineno = NULL;

    Py_XDECREF( outline_3_var_set_environment );
    outline_3_var_set_environment = NULL;

    Py_XDECREF( outline_3_var___eq__ );
    outline_3_var___eq__ = NULL;

    Py_XDECREF( outline_3_var___ne__ );
    outline_3_var___ne__ = NULL;

    Py_XDECREF( outline_3_var___hash__ );
    outline_3_var___hash__ = NULL;

    Py_XDECREF( outline_3_var___repr__ );
    outline_3_var___repr__ = NULL;

    Py_XDECREF( outline_3_var_dump );
    outline_3_var_dump = NULL;

    goto outline_result_4;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_3_var___qualname__ );
    outline_3_var___qualname__ = NULL;

    Py_XDECREF( outline_3_var___module__ );
    outline_3_var___module__ = NULL;

    Py_XDECREF( outline_3_var___doc__ );
    outline_3_var___doc__ = NULL;

    Py_XDECREF( outline_3_var_fields );
    outline_3_var_fields = NULL;

    Py_XDECREF( outline_3_var_attributes );
    outline_3_var_attributes = NULL;

    Py_XDECREF( outline_3_var_abstract );
    outline_3_var_abstract = NULL;

    Py_XDECREF( outline_3_var___init__ );
    outline_3_var___init__ = NULL;

    Py_XDECREF( outline_3_var_iter_fields );
    outline_3_var_iter_fields = NULL;

    Py_XDECREF( outline_3_var_iter_child_nodes );
    outline_3_var_iter_child_nodes = NULL;

    Py_XDECREF( outline_3_var_find );
    outline_3_var_find = NULL;

    Py_XDECREF( outline_3_var_find_all );
    outline_3_var_find_all = NULL;

    Py_XDECREF( outline_3_var_set_ctx );
    outline_3_var_set_ctx = NULL;

    Py_XDECREF( outline_3_var_set_lineno );
    outline_3_var_set_lineno = NULL;

    Py_XDECREF( outline_3_var_set_environment );
    outline_3_var_set_environment = NULL;

    Py_XDECREF( outline_3_var___eq__ );
    outline_3_var___eq__ = NULL;

    Py_XDECREF( outline_3_var___ne__ );
    outline_3_var___ne__ = NULL;

    Py_XDECREF( outline_3_var___hash__ );
    outline_3_var___hash__ = NULL;

    Py_XDECREF( outline_3_var___repr__ );
    outline_3_var___repr__ = NULL;

    Py_XDECREF( outline_3_var_dump );
    outline_3_var_dump = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto outline_exception_4;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_4:;
    exception_lineno = 107;
    goto try_except_handler_8;
    outline_result_4:;
    tmp_assign_source_56 = tmp_outline_return_value_4;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Node, tmp_assign_source_56 );
    goto try_end_5;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_decl_dict );
    tmp_class_creation_4__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_4__prepared );
    tmp_class_creation_4__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_decl_dict );
    tmp_class_creation_4__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_4__prepared );
    tmp_class_creation_4__prepared = NULL;

    // Tried code:
    tmp_assign_source_77 = PyTuple_New( 1 );
    tmp_tuple_element_12 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Node );

    if (unlikely( tmp_tuple_element_12 == NULL ))
    {
        tmp_tuple_element_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Node );
    }

    if ( tmp_tuple_element_12 == NULL )
    {
        Py_DECREF( tmp_assign_source_77 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 275;

        goto try_except_handler_10;
    }

    Py_INCREF( tmp_tuple_element_12 );
    PyTuple_SET_ITEM( tmp_assign_source_77, 0, tmp_tuple_element_12 );
    assert( tmp_class_creation_5__bases == NULL );
    tmp_class_creation_5__bases = tmp_assign_source_77;

    tmp_assign_source_78 = PyDict_New();
    assert( tmp_class_creation_5__class_decl_dict == NULL );
    tmp_class_creation_5__class_decl_dict = tmp_assign_source_78;

    tmp_compare_left_9 = const_str_plain_metaclass;
    tmp_compare_right_9 = tmp_class_creation_5__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_9 );
    tmp_cmp_In_9 = PySequence_Contains( tmp_compare_right_9, tmp_compare_left_9 );
    assert( !(tmp_cmp_In_9 == -1) );
    if ( tmp_cmp_In_9 == 1 )
    {
        goto condexpr_true_13;
    }
    else
    {
        goto condexpr_false_13;
    }
    condexpr_true_13:;
    tmp_dict_name_5 = tmp_class_creation_5__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_5 );
    tmp_key_name_5 = const_str_plain_metaclass;
    tmp_metaclass_name_5 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
    if ( tmp_metaclass_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_10;
    }
    goto condexpr_end_13;
    condexpr_false_13:;
    tmp_cond_value_5 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_cond_value_5 );
    tmp_cond_truth_5 = CHECK_IF_TRUE( tmp_cond_value_5 );
    if ( tmp_cond_truth_5 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_10;
    }
    if ( tmp_cond_truth_5 == 1 )
    {
        goto condexpr_true_14;
    }
    else
    {
        goto condexpr_false_14;
    }
    condexpr_true_14:;
    tmp_subscribed_name_5 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_subscribed_name_5 );
    tmp_subscript_name_5 = const_int_0;
    tmp_type_arg_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
    if ( tmp_type_arg_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_10;
    }
    tmp_metaclass_name_5 = BUILTIN_TYPE1( tmp_type_arg_5 );
    Py_DECREF( tmp_type_arg_5 );
    if ( tmp_metaclass_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_10;
    }
    goto condexpr_end_14;
    condexpr_false_14:;
    tmp_metaclass_name_5 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_5 );
    condexpr_end_14:;
    condexpr_end_13:;
    tmp_bases_name_5 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_bases_name_5 );
    tmp_assign_source_79 = SELECT_METACLASS( tmp_metaclass_name_5, tmp_bases_name_5 );
    if ( tmp_assign_source_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_5 );

        exception_lineno = 275;

        goto try_except_handler_10;
    }
    Py_DECREF( tmp_metaclass_name_5 );
    assert( tmp_class_creation_5__metaclass == NULL );
    tmp_class_creation_5__metaclass = tmp_assign_source_79;

    tmp_compare_left_10 = const_str_plain_metaclass;
    tmp_compare_right_10 = tmp_class_creation_5__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_10 );
    tmp_cmp_In_10 = PySequence_Contains( tmp_compare_right_10, tmp_compare_left_10 );
    assert( !(tmp_cmp_In_10 == -1) );
    if ( tmp_cmp_In_10 == 1 )
    {
        goto branch_yes_5;
    }
    else
    {
        goto branch_no_5;
    }
    branch_yes_5:;
    tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_10;
    }
    branch_no_5:;
    tmp_hasattr_source_5 = tmp_class_creation_5__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_5 );
    tmp_hasattr_attr_5 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_5, tmp_hasattr_attr_5 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_10;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_15;
    }
    else
    {
        goto condexpr_false_15;
    }
    condexpr_true_15:;
    tmp_source_name_24 = tmp_class_creation_5__metaclass;

    CHECK_OBJECT( tmp_source_name_24 );
    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain___prepare__ );
    if ( tmp_called_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_10;
    }
    tmp_args_name_9 = PyTuple_New( 2 );
    tmp_tuple_element_13 = const_str_plain_Stmt;
    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_args_name_9, 0, tmp_tuple_element_13 );
    tmp_tuple_element_13 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_tuple_element_13 );
    Py_INCREF( tmp_tuple_element_13 );
    PyTuple_SET_ITEM( tmp_args_name_9, 1, tmp_tuple_element_13 );
    tmp_kw_name_9 = tmp_class_creation_5__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_9 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 275;
    tmp_assign_source_80 = CALL_FUNCTION( tmp_called_name_11, tmp_args_name_9, tmp_kw_name_9 );
    Py_DECREF( tmp_called_name_11 );
    Py_DECREF( tmp_args_name_9 );
    if ( tmp_assign_source_80 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_10;
    }
    goto condexpr_end_15;
    condexpr_false_15:;
    tmp_assign_source_80 = PyDict_New();
    condexpr_end_15:;
    assert( tmp_class_creation_5__prepared == NULL );
    tmp_class_creation_5__prepared = tmp_assign_source_80;

    tmp_set_locals = tmp_class_creation_5__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_5);
    locals_dict_5 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_82 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_4_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_82 );
    outline_4_var___module__ = tmp_assign_source_82;

    tmp_assign_source_83 = const_str_digest_513ebb5465cc1f66ac24870fa7fd35b3;
    assert( outline_4_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_83 );
    outline_4_var___doc__ = tmp_assign_source_83;

    tmp_assign_source_84 = const_str_plain_Stmt;
    assert( outline_4_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_84 );
    outline_4_var___qualname__ = tmp_assign_source_84;

    tmp_assign_source_85 = Py_True;
    assert( outline_4_var_abstract == NULL );
    Py_INCREF( tmp_assign_source_85 );
    outline_4_var_abstract = tmp_assign_source_85;

    // Tried code:
    tmp_called_name_12 = tmp_class_creation_5__metaclass;

    CHECK_OBJECT( tmp_called_name_12 );
    tmp_args_name_10 = PyTuple_New( 3 );
    tmp_tuple_element_14 = const_str_plain_Stmt;
    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_args_name_10, 0, tmp_tuple_element_14 );
    tmp_tuple_element_14 = tmp_class_creation_5__bases;

    CHECK_OBJECT( tmp_tuple_element_14 );
    Py_INCREF( tmp_tuple_element_14 );
    PyTuple_SET_ITEM( tmp_args_name_10, 1, tmp_tuple_element_14 );
    tmp_tuple_element_14 = locals_dict_5;
    Py_INCREF( tmp_tuple_element_14 );
    if ( outline_4_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_14,
            const_str_plain___qualname__,
            outline_4_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_14,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_14,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_10 );
        Py_DECREF( tmp_tuple_element_14 );

        exception_lineno = 275;

        goto try_except_handler_11;
    }
    if ( outline_4_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_14,
            const_str_plain___module__,
            outline_4_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_14,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_14,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_10 );
        Py_DECREF( tmp_tuple_element_14 );

        exception_lineno = 275;

        goto try_except_handler_11;
    }
    if ( outline_4_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_14,
            const_str_plain___doc__,
            outline_4_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_14,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_14,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_10 );
        Py_DECREF( tmp_tuple_element_14 );

        exception_lineno = 275;

        goto try_except_handler_11;
    }
    if ( outline_4_var_abstract != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_14,
            const_str_plain_abstract,
            outline_4_var_abstract
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_14,
            const_str_plain_abstract
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_14,
                const_str_plain_abstract
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_10 );
        Py_DECREF( tmp_tuple_element_14 );

        exception_lineno = 275;

        goto try_except_handler_11;
    }
    PyTuple_SET_ITEM( tmp_args_name_10, 2, tmp_tuple_element_14 );
    tmp_kw_name_10 = tmp_class_creation_5__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_10 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 275;
    tmp_assign_source_86 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_10, tmp_kw_name_10 );
    Py_DECREF( tmp_args_name_10 );
    if ( tmp_assign_source_86 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 275;

        goto try_except_handler_11;
    }
    assert( outline_4_var___class__ == NULL );
    outline_4_var___class__ = tmp_assign_source_86;

    tmp_outline_return_value_5 = outline_4_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_5 );
    Py_INCREF( tmp_outline_return_value_5 );
    goto try_return_handler_11;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_11:;
    CHECK_OBJECT( (PyObject *)outline_4_var___class__ );
    Py_DECREF( outline_4_var___class__ );
    outline_4_var___class__ = NULL;

    Py_XDECREF( outline_4_var___qualname__ );
    outline_4_var___qualname__ = NULL;

    Py_XDECREF( outline_4_var___module__ );
    outline_4_var___module__ = NULL;

    Py_XDECREF( outline_4_var___doc__ );
    outline_4_var___doc__ = NULL;

    Py_XDECREF( outline_4_var_abstract );
    outline_4_var_abstract = NULL;

    goto outline_result_5;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_4_var___qualname__ );
    outline_4_var___qualname__ = NULL;

    Py_XDECREF( outline_4_var___module__ );
    outline_4_var___module__ = NULL;

    Py_XDECREF( outline_4_var___doc__ );
    outline_4_var___doc__ = NULL;

    Py_XDECREF( outline_4_var_abstract );
    outline_4_var_abstract = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto outline_exception_5;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_5:;
    exception_lineno = 275;
    goto try_except_handler_10;
    outline_result_5:;
    tmp_assign_source_81 = tmp_outline_return_value_5;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt, tmp_assign_source_81 );
    goto try_end_6;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_decl_dict );
    tmp_class_creation_5__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_5__prepared );
    tmp_class_creation_5__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_decl_dict );
    tmp_class_creation_5__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_5__prepared );
    tmp_class_creation_5__prepared = NULL;

    // Tried code:
    tmp_assign_source_87 = PyTuple_New( 1 );
    tmp_tuple_element_15 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Node );

    if (unlikely( tmp_tuple_element_15 == NULL ))
    {
        tmp_tuple_element_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Node );
    }

    if ( tmp_tuple_element_15 == NULL )
    {
        Py_DECREF( tmp_assign_source_87 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 280;

        goto try_except_handler_12;
    }

    Py_INCREF( tmp_tuple_element_15 );
    PyTuple_SET_ITEM( tmp_assign_source_87, 0, tmp_tuple_element_15 );
    assert( tmp_class_creation_6__bases == NULL );
    tmp_class_creation_6__bases = tmp_assign_source_87;

    tmp_assign_source_88 = PyDict_New();
    assert( tmp_class_creation_6__class_decl_dict == NULL );
    tmp_class_creation_6__class_decl_dict = tmp_assign_source_88;

    tmp_compare_left_11 = const_str_plain_metaclass;
    tmp_compare_right_11 = tmp_class_creation_6__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_11 );
    tmp_cmp_In_11 = PySequence_Contains( tmp_compare_right_11, tmp_compare_left_11 );
    assert( !(tmp_cmp_In_11 == -1) );
    if ( tmp_cmp_In_11 == 1 )
    {
        goto condexpr_true_16;
    }
    else
    {
        goto condexpr_false_16;
    }
    condexpr_true_16:;
    tmp_dict_name_6 = tmp_class_creation_6__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_6 );
    tmp_key_name_6 = const_str_plain_metaclass;
    tmp_metaclass_name_6 = DICT_GET_ITEM( tmp_dict_name_6, tmp_key_name_6 );
    if ( tmp_metaclass_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_12;
    }
    goto condexpr_end_16;
    condexpr_false_16:;
    tmp_cond_value_6 = tmp_class_creation_6__bases;

    CHECK_OBJECT( tmp_cond_value_6 );
    tmp_cond_truth_6 = CHECK_IF_TRUE( tmp_cond_value_6 );
    if ( tmp_cond_truth_6 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_12;
    }
    if ( tmp_cond_truth_6 == 1 )
    {
        goto condexpr_true_17;
    }
    else
    {
        goto condexpr_false_17;
    }
    condexpr_true_17:;
    tmp_subscribed_name_6 = tmp_class_creation_6__bases;

    CHECK_OBJECT( tmp_subscribed_name_6 );
    tmp_subscript_name_6 = const_int_0;
    tmp_type_arg_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
    if ( tmp_type_arg_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_12;
    }
    tmp_metaclass_name_6 = BUILTIN_TYPE1( tmp_type_arg_6 );
    Py_DECREF( tmp_type_arg_6 );
    if ( tmp_metaclass_name_6 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_12;
    }
    goto condexpr_end_17;
    condexpr_false_17:;
    tmp_metaclass_name_6 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_6 );
    condexpr_end_17:;
    condexpr_end_16:;
    tmp_bases_name_6 = tmp_class_creation_6__bases;

    CHECK_OBJECT( tmp_bases_name_6 );
    tmp_assign_source_89 = SELECT_METACLASS( tmp_metaclass_name_6, tmp_bases_name_6 );
    if ( tmp_assign_source_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_6 );

        exception_lineno = 280;

        goto try_except_handler_12;
    }
    Py_DECREF( tmp_metaclass_name_6 );
    assert( tmp_class_creation_6__metaclass == NULL );
    tmp_class_creation_6__metaclass = tmp_assign_source_89;

    tmp_compare_left_12 = const_str_plain_metaclass;
    tmp_compare_right_12 = tmp_class_creation_6__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_12 );
    tmp_cmp_In_12 = PySequence_Contains( tmp_compare_right_12, tmp_compare_left_12 );
    assert( !(tmp_cmp_In_12 == -1) );
    if ( tmp_cmp_In_12 == 1 )
    {
        goto branch_yes_6;
    }
    else
    {
        goto branch_no_6;
    }
    branch_yes_6:;
    tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_12;
    }
    branch_no_6:;
    tmp_hasattr_source_6 = tmp_class_creation_6__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_6 );
    tmp_hasattr_attr_6 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_6, tmp_hasattr_attr_6 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_12;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_18;
    }
    else
    {
        goto condexpr_false_18;
    }
    condexpr_true_18:;
    tmp_source_name_25 = tmp_class_creation_6__metaclass;

    CHECK_OBJECT( tmp_source_name_25 );
    tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain___prepare__ );
    if ( tmp_called_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_12;
    }
    tmp_args_name_11 = PyTuple_New( 2 );
    tmp_tuple_element_16 = const_str_plain_Helper;
    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_args_name_11, 0, tmp_tuple_element_16 );
    tmp_tuple_element_16 = tmp_class_creation_6__bases;

    CHECK_OBJECT( tmp_tuple_element_16 );
    Py_INCREF( tmp_tuple_element_16 );
    PyTuple_SET_ITEM( tmp_args_name_11, 1, tmp_tuple_element_16 );
    tmp_kw_name_11 = tmp_class_creation_6__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_11 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 280;
    tmp_assign_source_90 = CALL_FUNCTION( tmp_called_name_13, tmp_args_name_11, tmp_kw_name_11 );
    Py_DECREF( tmp_called_name_13 );
    Py_DECREF( tmp_args_name_11 );
    if ( tmp_assign_source_90 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_12;
    }
    goto condexpr_end_18;
    condexpr_false_18:;
    tmp_assign_source_90 = PyDict_New();
    condexpr_end_18:;
    assert( tmp_class_creation_6__prepared == NULL );
    tmp_class_creation_6__prepared = tmp_assign_source_90;

    tmp_set_locals = tmp_class_creation_6__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_6);
    locals_dict_6 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_92 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_5_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_92 );
    outline_5_var___module__ = tmp_assign_source_92;

    tmp_assign_source_93 = const_str_digest_0d8a36e587d6d1fce4f00da44d86934e;
    assert( outline_5_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_93 );
    outline_5_var___doc__ = tmp_assign_source_93;

    tmp_assign_source_94 = const_str_plain_Helper;
    assert( outline_5_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_94 );
    outline_5_var___qualname__ = tmp_assign_source_94;

    tmp_assign_source_95 = Py_True;
    assert( outline_5_var_abstract == NULL );
    Py_INCREF( tmp_assign_source_95 );
    outline_5_var_abstract = tmp_assign_source_95;

    // Tried code:
    tmp_called_name_14 = tmp_class_creation_6__metaclass;

    CHECK_OBJECT( tmp_called_name_14 );
    tmp_args_name_12 = PyTuple_New( 3 );
    tmp_tuple_element_17 = const_str_plain_Helper;
    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_args_name_12, 0, tmp_tuple_element_17 );
    tmp_tuple_element_17 = tmp_class_creation_6__bases;

    CHECK_OBJECT( tmp_tuple_element_17 );
    Py_INCREF( tmp_tuple_element_17 );
    PyTuple_SET_ITEM( tmp_args_name_12, 1, tmp_tuple_element_17 );
    tmp_tuple_element_17 = locals_dict_6;
    Py_INCREF( tmp_tuple_element_17 );
    if ( outline_5_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_17,
            const_str_plain___qualname__,
            outline_5_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_17,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_17,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_12 );
        Py_DECREF( tmp_tuple_element_17 );

        exception_lineno = 280;

        goto try_except_handler_13;
    }
    if ( outline_5_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_17,
            const_str_plain___module__,
            outline_5_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_17,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_17,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_12 );
        Py_DECREF( tmp_tuple_element_17 );

        exception_lineno = 280;

        goto try_except_handler_13;
    }
    if ( outline_5_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_17,
            const_str_plain___doc__,
            outline_5_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_17,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_17,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_12 );
        Py_DECREF( tmp_tuple_element_17 );

        exception_lineno = 280;

        goto try_except_handler_13;
    }
    if ( outline_5_var_abstract != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_17,
            const_str_plain_abstract,
            outline_5_var_abstract
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_17,
            const_str_plain_abstract
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_17,
                const_str_plain_abstract
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_12 );
        Py_DECREF( tmp_tuple_element_17 );

        exception_lineno = 280;

        goto try_except_handler_13;
    }
    PyTuple_SET_ITEM( tmp_args_name_12, 2, tmp_tuple_element_17 );
    tmp_kw_name_12 = tmp_class_creation_6__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_12 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 280;
    tmp_assign_source_96 = CALL_FUNCTION( tmp_called_name_14, tmp_args_name_12, tmp_kw_name_12 );
    Py_DECREF( tmp_args_name_12 );
    if ( tmp_assign_source_96 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 280;

        goto try_except_handler_13;
    }
    assert( outline_5_var___class__ == NULL );
    outline_5_var___class__ = tmp_assign_source_96;

    tmp_outline_return_value_6 = outline_5_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_6 );
    Py_INCREF( tmp_outline_return_value_6 );
    goto try_return_handler_13;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_13:;
    CHECK_OBJECT( (PyObject *)outline_5_var___class__ );
    Py_DECREF( outline_5_var___class__ );
    outline_5_var___class__ = NULL;

    Py_XDECREF( outline_5_var___qualname__ );
    outline_5_var___qualname__ = NULL;

    Py_XDECREF( outline_5_var___module__ );
    outline_5_var___module__ = NULL;

    Py_XDECREF( outline_5_var___doc__ );
    outline_5_var___doc__ = NULL;

    Py_XDECREF( outline_5_var_abstract );
    outline_5_var_abstract = NULL;

    goto outline_result_6;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_5_var___qualname__ );
    outline_5_var___qualname__ = NULL;

    Py_XDECREF( outline_5_var___module__ );
    outline_5_var___module__ = NULL;

    Py_XDECREF( outline_5_var___doc__ );
    outline_5_var___doc__ = NULL;

    Py_XDECREF( outline_5_var_abstract );
    outline_5_var_abstract = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto outline_exception_6;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_6:;
    exception_lineno = 280;
    goto try_except_handler_12;
    outline_result_6:;
    tmp_assign_source_91 = tmp_outline_return_value_6;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Helper, tmp_assign_source_91 );
    goto try_end_7;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_class_creation_6__class_decl_dict );
    tmp_class_creation_6__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_6__prepared );
    tmp_class_creation_6__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    Py_XDECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_class_creation_6__class_decl_dict );
    tmp_class_creation_6__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_6__prepared );
    tmp_class_creation_6__prepared = NULL;

    // Tried code:
    tmp_assign_source_97 = PyTuple_New( 1 );
    tmp_tuple_element_18 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Node );

    if (unlikely( tmp_tuple_element_18 == NULL ))
    {
        tmp_tuple_element_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Node );
    }

    if ( tmp_tuple_element_18 == NULL )
    {
        Py_DECREF( tmp_assign_source_97 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 285;

        goto try_except_handler_14;
    }

    Py_INCREF( tmp_tuple_element_18 );
    PyTuple_SET_ITEM( tmp_assign_source_97, 0, tmp_tuple_element_18 );
    assert( tmp_class_creation_7__bases == NULL );
    tmp_class_creation_7__bases = tmp_assign_source_97;

    tmp_assign_source_98 = PyDict_New();
    assert( tmp_class_creation_7__class_decl_dict == NULL );
    tmp_class_creation_7__class_decl_dict = tmp_assign_source_98;

    tmp_compare_left_13 = const_str_plain_metaclass;
    tmp_compare_right_13 = tmp_class_creation_7__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_13 );
    tmp_cmp_In_13 = PySequence_Contains( tmp_compare_right_13, tmp_compare_left_13 );
    assert( !(tmp_cmp_In_13 == -1) );
    if ( tmp_cmp_In_13 == 1 )
    {
        goto condexpr_true_19;
    }
    else
    {
        goto condexpr_false_19;
    }
    condexpr_true_19:;
    tmp_dict_name_7 = tmp_class_creation_7__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_7 );
    tmp_key_name_7 = const_str_plain_metaclass;
    tmp_metaclass_name_7 = DICT_GET_ITEM( tmp_dict_name_7, tmp_key_name_7 );
    if ( tmp_metaclass_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_14;
    }
    goto condexpr_end_19;
    condexpr_false_19:;
    tmp_cond_value_7 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_cond_value_7 );
    tmp_cond_truth_7 = CHECK_IF_TRUE( tmp_cond_value_7 );
    if ( tmp_cond_truth_7 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_14;
    }
    if ( tmp_cond_truth_7 == 1 )
    {
        goto condexpr_true_20;
    }
    else
    {
        goto condexpr_false_20;
    }
    condexpr_true_20:;
    tmp_subscribed_name_7 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_subscribed_name_7 );
    tmp_subscript_name_7 = const_int_0;
    tmp_type_arg_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
    if ( tmp_type_arg_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_14;
    }
    tmp_metaclass_name_7 = BUILTIN_TYPE1( tmp_type_arg_7 );
    Py_DECREF( tmp_type_arg_7 );
    if ( tmp_metaclass_name_7 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_14;
    }
    goto condexpr_end_20;
    condexpr_false_20:;
    tmp_metaclass_name_7 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_7 );
    condexpr_end_20:;
    condexpr_end_19:;
    tmp_bases_name_7 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_bases_name_7 );
    tmp_assign_source_99 = SELECT_METACLASS( tmp_metaclass_name_7, tmp_bases_name_7 );
    if ( tmp_assign_source_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_7 );

        exception_lineno = 285;

        goto try_except_handler_14;
    }
    Py_DECREF( tmp_metaclass_name_7 );
    assert( tmp_class_creation_7__metaclass == NULL );
    tmp_class_creation_7__metaclass = tmp_assign_source_99;

    tmp_compare_left_14 = const_str_plain_metaclass;
    tmp_compare_right_14 = tmp_class_creation_7__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_14 );
    tmp_cmp_In_14 = PySequence_Contains( tmp_compare_right_14, tmp_compare_left_14 );
    assert( !(tmp_cmp_In_14 == -1) );
    if ( tmp_cmp_In_14 == 1 )
    {
        goto branch_yes_7;
    }
    else
    {
        goto branch_no_7;
    }
    branch_yes_7:;
    tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_14;
    }
    branch_no_7:;
    tmp_hasattr_source_7 = tmp_class_creation_7__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_7 );
    tmp_hasattr_attr_7 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_7, tmp_hasattr_attr_7 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_14;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_21;
    }
    else
    {
        goto condexpr_false_21;
    }
    condexpr_true_21:;
    tmp_source_name_26 = tmp_class_creation_7__metaclass;

    CHECK_OBJECT( tmp_source_name_26 );
    tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain___prepare__ );
    if ( tmp_called_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_14;
    }
    tmp_args_name_13 = PyTuple_New( 2 );
    tmp_tuple_element_19 = const_str_plain_Template;
    Py_INCREF( tmp_tuple_element_19 );
    PyTuple_SET_ITEM( tmp_args_name_13, 0, tmp_tuple_element_19 );
    tmp_tuple_element_19 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_tuple_element_19 );
    Py_INCREF( tmp_tuple_element_19 );
    PyTuple_SET_ITEM( tmp_args_name_13, 1, tmp_tuple_element_19 );
    tmp_kw_name_13 = tmp_class_creation_7__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_13 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 285;
    tmp_assign_source_100 = CALL_FUNCTION( tmp_called_name_15, tmp_args_name_13, tmp_kw_name_13 );
    Py_DECREF( tmp_called_name_15 );
    Py_DECREF( tmp_args_name_13 );
    if ( tmp_assign_source_100 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_14;
    }
    goto condexpr_end_21;
    condexpr_false_21:;
    tmp_assign_source_100 = PyDict_New();
    condexpr_end_21:;
    assert( tmp_class_creation_7__prepared == NULL );
    tmp_class_creation_7__prepared = tmp_assign_source_100;

    tmp_set_locals = tmp_class_creation_7__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_7);
    locals_dict_7 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_102 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_6_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_102 );
    outline_6_var___module__ = tmp_assign_source_102;

    tmp_assign_source_103 = const_str_digest_e603c715dadcbbeeda4b1a748ae3e14c;
    assert( outline_6_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_103 );
    outline_6_var___doc__ = tmp_assign_source_103;

    tmp_assign_source_104 = const_str_plain_Template;
    assert( outline_6_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_104 );
    outline_6_var___qualname__ = tmp_assign_source_104;

    tmp_assign_source_105 = const_tuple_str_plain_body_tuple;
    assert( outline_6_var_fields == NULL );
    Py_INCREF( tmp_assign_source_105 );
    outline_6_var_fields = tmp_assign_source_105;

    // Tried code:
    tmp_called_name_16 = tmp_class_creation_7__metaclass;

    CHECK_OBJECT( tmp_called_name_16 );
    tmp_args_name_14 = PyTuple_New( 3 );
    tmp_tuple_element_20 = const_str_plain_Template;
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_args_name_14, 0, tmp_tuple_element_20 );
    tmp_tuple_element_20 = tmp_class_creation_7__bases;

    CHECK_OBJECT( tmp_tuple_element_20 );
    Py_INCREF( tmp_tuple_element_20 );
    PyTuple_SET_ITEM( tmp_args_name_14, 1, tmp_tuple_element_20 );
    tmp_tuple_element_20 = locals_dict_7;
    Py_INCREF( tmp_tuple_element_20 );
    if ( outline_6_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_20,
            const_str_plain___qualname__,
            outline_6_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_20,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_20,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_14 );
        Py_DECREF( tmp_tuple_element_20 );

        exception_lineno = 285;

        goto try_except_handler_15;
    }
    if ( outline_6_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_20,
            const_str_plain___module__,
            outline_6_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_20,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_20,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_14 );
        Py_DECREF( tmp_tuple_element_20 );

        exception_lineno = 285;

        goto try_except_handler_15;
    }
    if ( outline_6_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_20,
            const_str_plain___doc__,
            outline_6_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_20,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_20,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_14 );
        Py_DECREF( tmp_tuple_element_20 );

        exception_lineno = 285;

        goto try_except_handler_15;
    }
    if ( outline_6_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_20,
            const_str_plain_fields,
            outline_6_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_20,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_20,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_14 );
        Py_DECREF( tmp_tuple_element_20 );

        exception_lineno = 285;

        goto try_except_handler_15;
    }
    PyTuple_SET_ITEM( tmp_args_name_14, 2, tmp_tuple_element_20 );
    tmp_kw_name_14 = tmp_class_creation_7__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_14 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 285;
    tmp_assign_source_106 = CALL_FUNCTION( tmp_called_name_16, tmp_args_name_14, tmp_kw_name_14 );
    Py_DECREF( tmp_args_name_14 );
    if ( tmp_assign_source_106 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 285;

        goto try_except_handler_15;
    }
    assert( outline_6_var___class__ == NULL );
    outline_6_var___class__ = tmp_assign_source_106;

    tmp_outline_return_value_7 = outline_6_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_7 );
    Py_INCREF( tmp_outline_return_value_7 );
    goto try_return_handler_15;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_15:;
    CHECK_OBJECT( (PyObject *)outline_6_var___class__ );
    Py_DECREF( outline_6_var___class__ );
    outline_6_var___class__ = NULL;

    Py_XDECREF( outline_6_var___qualname__ );
    outline_6_var___qualname__ = NULL;

    Py_XDECREF( outline_6_var___module__ );
    outline_6_var___module__ = NULL;

    Py_XDECREF( outline_6_var___doc__ );
    outline_6_var___doc__ = NULL;

    Py_XDECREF( outline_6_var_fields );
    outline_6_var_fields = NULL;

    goto outline_result_7;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_6_var___qualname__ );
    outline_6_var___qualname__ = NULL;

    Py_XDECREF( outline_6_var___module__ );
    outline_6_var___module__ = NULL;

    Py_XDECREF( outline_6_var___doc__ );
    outline_6_var___doc__ = NULL;

    Py_XDECREF( outline_6_var_fields );
    outline_6_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto outline_exception_7;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_7:;
    exception_lineno = 285;
    goto try_except_handler_14;
    outline_result_7:;
    tmp_assign_source_101 = tmp_outline_return_value_7;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Template, tmp_assign_source_101 );
    goto try_end_8;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_decl_dict );
    tmp_class_creation_7__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_7__prepared );
    tmp_class_creation_7__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_decl_dict );
    tmp_class_creation_7__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_7__prepared );
    tmp_class_creation_7__prepared = NULL;

    // Tried code:
    tmp_assign_source_107 = PyTuple_New( 1 );
    tmp_tuple_element_21 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_21 == NULL ))
    {
        tmp_tuple_element_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_21 == NULL )
    {
        Py_DECREF( tmp_assign_source_107 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 292;

        goto try_except_handler_16;
    }

    Py_INCREF( tmp_tuple_element_21 );
    PyTuple_SET_ITEM( tmp_assign_source_107, 0, tmp_tuple_element_21 );
    assert( tmp_class_creation_8__bases == NULL );
    tmp_class_creation_8__bases = tmp_assign_source_107;

    tmp_assign_source_108 = PyDict_New();
    assert( tmp_class_creation_8__class_decl_dict == NULL );
    tmp_class_creation_8__class_decl_dict = tmp_assign_source_108;

    tmp_compare_left_15 = const_str_plain_metaclass;
    tmp_compare_right_15 = tmp_class_creation_8__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_15 );
    tmp_cmp_In_15 = PySequence_Contains( tmp_compare_right_15, tmp_compare_left_15 );
    assert( !(tmp_cmp_In_15 == -1) );
    if ( tmp_cmp_In_15 == 1 )
    {
        goto condexpr_true_22;
    }
    else
    {
        goto condexpr_false_22;
    }
    condexpr_true_22:;
    tmp_dict_name_8 = tmp_class_creation_8__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_8 );
    tmp_key_name_8 = const_str_plain_metaclass;
    tmp_metaclass_name_8 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
    if ( tmp_metaclass_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_16;
    }
    goto condexpr_end_22;
    condexpr_false_22:;
    tmp_cond_value_8 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_cond_value_8 );
    tmp_cond_truth_8 = CHECK_IF_TRUE( tmp_cond_value_8 );
    if ( tmp_cond_truth_8 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_16;
    }
    if ( tmp_cond_truth_8 == 1 )
    {
        goto condexpr_true_23;
    }
    else
    {
        goto condexpr_false_23;
    }
    condexpr_true_23:;
    tmp_subscribed_name_8 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_subscribed_name_8 );
    tmp_subscript_name_8 = const_int_0;
    tmp_type_arg_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
    if ( tmp_type_arg_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_16;
    }
    tmp_metaclass_name_8 = BUILTIN_TYPE1( tmp_type_arg_8 );
    Py_DECREF( tmp_type_arg_8 );
    if ( tmp_metaclass_name_8 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_16;
    }
    goto condexpr_end_23;
    condexpr_false_23:;
    tmp_metaclass_name_8 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_8 );
    condexpr_end_23:;
    condexpr_end_22:;
    tmp_bases_name_8 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_bases_name_8 );
    tmp_assign_source_109 = SELECT_METACLASS( tmp_metaclass_name_8, tmp_bases_name_8 );
    if ( tmp_assign_source_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_8 );

        exception_lineno = 292;

        goto try_except_handler_16;
    }
    Py_DECREF( tmp_metaclass_name_8 );
    assert( tmp_class_creation_8__metaclass == NULL );
    tmp_class_creation_8__metaclass = tmp_assign_source_109;

    tmp_compare_left_16 = const_str_plain_metaclass;
    tmp_compare_right_16 = tmp_class_creation_8__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_16 );
    tmp_cmp_In_16 = PySequence_Contains( tmp_compare_right_16, tmp_compare_left_16 );
    assert( !(tmp_cmp_In_16 == -1) );
    if ( tmp_cmp_In_16 == 1 )
    {
        goto branch_yes_8;
    }
    else
    {
        goto branch_no_8;
    }
    branch_yes_8:;
    tmp_dictdel_dict = tmp_class_creation_8__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_16;
    }
    branch_no_8:;
    tmp_hasattr_source_8 = tmp_class_creation_8__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_8 );
    tmp_hasattr_attr_8 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_8, tmp_hasattr_attr_8 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_16;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_24;
    }
    else
    {
        goto condexpr_false_24;
    }
    condexpr_true_24:;
    tmp_source_name_27 = tmp_class_creation_8__metaclass;

    CHECK_OBJECT( tmp_source_name_27 );
    tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain___prepare__ );
    if ( tmp_called_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_16;
    }
    tmp_args_name_15 = PyTuple_New( 2 );
    tmp_tuple_element_22 = const_str_plain_Output;
    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_args_name_15, 0, tmp_tuple_element_22 );
    tmp_tuple_element_22 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_tuple_element_22 );
    Py_INCREF( tmp_tuple_element_22 );
    PyTuple_SET_ITEM( tmp_args_name_15, 1, tmp_tuple_element_22 );
    tmp_kw_name_15 = tmp_class_creation_8__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_15 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 292;
    tmp_assign_source_110 = CALL_FUNCTION( tmp_called_name_17, tmp_args_name_15, tmp_kw_name_15 );
    Py_DECREF( tmp_called_name_17 );
    Py_DECREF( tmp_args_name_15 );
    if ( tmp_assign_source_110 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_16;
    }
    goto condexpr_end_24;
    condexpr_false_24:;
    tmp_assign_source_110 = PyDict_New();
    condexpr_end_24:;
    assert( tmp_class_creation_8__prepared == NULL );
    tmp_class_creation_8__prepared = tmp_assign_source_110;

    tmp_set_locals = tmp_class_creation_8__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_8);
    locals_dict_8 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_112 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_7_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_112 );
    outline_7_var___module__ = tmp_assign_source_112;

    tmp_assign_source_113 = const_str_digest_25694a9685cc0ed9447ef898495eaf5c;
    assert( outline_7_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_113 );
    outline_7_var___doc__ = tmp_assign_source_113;

    tmp_assign_source_114 = const_str_plain_Output;
    assert( outline_7_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_114 );
    outline_7_var___qualname__ = tmp_assign_source_114;

    tmp_assign_source_115 = const_tuple_str_plain_nodes_tuple;
    assert( outline_7_var_fields == NULL );
    Py_INCREF( tmp_assign_source_115 );
    outline_7_var_fields = tmp_assign_source_115;

    // Tried code:
    tmp_called_name_18 = tmp_class_creation_8__metaclass;

    CHECK_OBJECT( tmp_called_name_18 );
    tmp_args_name_16 = PyTuple_New( 3 );
    tmp_tuple_element_23 = const_str_plain_Output;
    Py_INCREF( tmp_tuple_element_23 );
    PyTuple_SET_ITEM( tmp_args_name_16, 0, tmp_tuple_element_23 );
    tmp_tuple_element_23 = tmp_class_creation_8__bases;

    CHECK_OBJECT( tmp_tuple_element_23 );
    Py_INCREF( tmp_tuple_element_23 );
    PyTuple_SET_ITEM( tmp_args_name_16, 1, tmp_tuple_element_23 );
    tmp_tuple_element_23 = locals_dict_8;
    Py_INCREF( tmp_tuple_element_23 );
    if ( outline_7_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_23,
            const_str_plain___qualname__,
            outline_7_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_23,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_23,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_16 );
        Py_DECREF( tmp_tuple_element_23 );

        exception_lineno = 292;

        goto try_except_handler_17;
    }
    if ( outline_7_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_23,
            const_str_plain___module__,
            outline_7_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_23,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_23,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_16 );
        Py_DECREF( tmp_tuple_element_23 );

        exception_lineno = 292;

        goto try_except_handler_17;
    }
    if ( outline_7_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_23,
            const_str_plain___doc__,
            outline_7_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_23,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_23,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_16 );
        Py_DECREF( tmp_tuple_element_23 );

        exception_lineno = 292;

        goto try_except_handler_17;
    }
    if ( outline_7_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_23,
            const_str_plain_fields,
            outline_7_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_23,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_23,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_16 );
        Py_DECREF( tmp_tuple_element_23 );

        exception_lineno = 292;

        goto try_except_handler_17;
    }
    PyTuple_SET_ITEM( tmp_args_name_16, 2, tmp_tuple_element_23 );
    tmp_kw_name_16 = tmp_class_creation_8__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_16 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 292;
    tmp_assign_source_116 = CALL_FUNCTION( tmp_called_name_18, tmp_args_name_16, tmp_kw_name_16 );
    Py_DECREF( tmp_args_name_16 );
    if ( tmp_assign_source_116 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 292;

        goto try_except_handler_17;
    }
    assert( outline_7_var___class__ == NULL );
    outline_7_var___class__ = tmp_assign_source_116;

    tmp_outline_return_value_8 = outline_7_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_8 );
    Py_INCREF( tmp_outline_return_value_8 );
    goto try_return_handler_17;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_17:;
    CHECK_OBJECT( (PyObject *)outline_7_var___class__ );
    Py_DECREF( outline_7_var___class__ );
    outline_7_var___class__ = NULL;

    Py_XDECREF( outline_7_var___qualname__ );
    outline_7_var___qualname__ = NULL;

    Py_XDECREF( outline_7_var___module__ );
    outline_7_var___module__ = NULL;

    Py_XDECREF( outline_7_var___doc__ );
    outline_7_var___doc__ = NULL;

    Py_XDECREF( outline_7_var_fields );
    outline_7_var_fields = NULL;

    goto outline_result_8;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_7_var___qualname__ );
    outline_7_var___qualname__ = NULL;

    Py_XDECREF( outline_7_var___module__ );
    outline_7_var___module__ = NULL;

    Py_XDECREF( outline_7_var___doc__ );
    outline_7_var___doc__ = NULL;

    Py_XDECREF( outline_7_var_fields );
    outline_7_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto outline_exception_8;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_8:;
    exception_lineno = 292;
    goto try_except_handler_16;
    outline_result_8:;
    tmp_assign_source_111 = tmp_outline_return_value_8;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Output, tmp_assign_source_111 );
    goto try_end_9;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_class_creation_8__class_decl_dict );
    tmp_class_creation_8__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_8__prepared );
    tmp_class_creation_8__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    Py_XDECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_class_creation_8__class_decl_dict );
    tmp_class_creation_8__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_8__prepared );
    tmp_class_creation_8__prepared = NULL;

    // Tried code:
    tmp_assign_source_117 = PyTuple_New( 1 );
    tmp_tuple_element_24 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_24 == NULL ))
    {
        tmp_tuple_element_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_24 == NULL )
    {
        Py_DECREF( tmp_assign_source_117 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 299;

        goto try_except_handler_18;
    }

    Py_INCREF( tmp_tuple_element_24 );
    PyTuple_SET_ITEM( tmp_assign_source_117, 0, tmp_tuple_element_24 );
    assert( tmp_class_creation_9__bases == NULL );
    tmp_class_creation_9__bases = tmp_assign_source_117;

    tmp_assign_source_118 = PyDict_New();
    assert( tmp_class_creation_9__class_decl_dict == NULL );
    tmp_class_creation_9__class_decl_dict = tmp_assign_source_118;

    tmp_compare_left_17 = const_str_plain_metaclass;
    tmp_compare_right_17 = tmp_class_creation_9__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_17 );
    tmp_cmp_In_17 = PySequence_Contains( tmp_compare_right_17, tmp_compare_left_17 );
    assert( !(tmp_cmp_In_17 == -1) );
    if ( tmp_cmp_In_17 == 1 )
    {
        goto condexpr_true_25;
    }
    else
    {
        goto condexpr_false_25;
    }
    condexpr_true_25:;
    tmp_dict_name_9 = tmp_class_creation_9__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_9 );
    tmp_key_name_9 = const_str_plain_metaclass;
    tmp_metaclass_name_9 = DICT_GET_ITEM( tmp_dict_name_9, tmp_key_name_9 );
    if ( tmp_metaclass_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_18;
    }
    goto condexpr_end_25;
    condexpr_false_25:;
    tmp_cond_value_9 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_cond_value_9 );
    tmp_cond_truth_9 = CHECK_IF_TRUE( tmp_cond_value_9 );
    if ( tmp_cond_truth_9 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_18;
    }
    if ( tmp_cond_truth_9 == 1 )
    {
        goto condexpr_true_26;
    }
    else
    {
        goto condexpr_false_26;
    }
    condexpr_true_26:;
    tmp_subscribed_name_9 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_subscribed_name_9 );
    tmp_subscript_name_9 = const_int_0;
    tmp_type_arg_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
    if ( tmp_type_arg_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_18;
    }
    tmp_metaclass_name_9 = BUILTIN_TYPE1( tmp_type_arg_9 );
    Py_DECREF( tmp_type_arg_9 );
    if ( tmp_metaclass_name_9 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_18;
    }
    goto condexpr_end_26;
    condexpr_false_26:;
    tmp_metaclass_name_9 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_9 );
    condexpr_end_26:;
    condexpr_end_25:;
    tmp_bases_name_9 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_bases_name_9 );
    tmp_assign_source_119 = SELECT_METACLASS( tmp_metaclass_name_9, tmp_bases_name_9 );
    if ( tmp_assign_source_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_9 );

        exception_lineno = 299;

        goto try_except_handler_18;
    }
    Py_DECREF( tmp_metaclass_name_9 );
    assert( tmp_class_creation_9__metaclass == NULL );
    tmp_class_creation_9__metaclass = tmp_assign_source_119;

    tmp_compare_left_18 = const_str_plain_metaclass;
    tmp_compare_right_18 = tmp_class_creation_9__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_18 );
    tmp_cmp_In_18 = PySequence_Contains( tmp_compare_right_18, tmp_compare_left_18 );
    assert( !(tmp_cmp_In_18 == -1) );
    if ( tmp_cmp_In_18 == 1 )
    {
        goto branch_yes_9;
    }
    else
    {
        goto branch_no_9;
    }
    branch_yes_9:;
    tmp_dictdel_dict = tmp_class_creation_9__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_18;
    }
    branch_no_9:;
    tmp_hasattr_source_9 = tmp_class_creation_9__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_9 );
    tmp_hasattr_attr_9 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_9, tmp_hasattr_attr_9 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_18;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_27;
    }
    else
    {
        goto condexpr_false_27;
    }
    condexpr_true_27:;
    tmp_source_name_28 = tmp_class_creation_9__metaclass;

    CHECK_OBJECT( tmp_source_name_28 );
    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain___prepare__ );
    if ( tmp_called_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_18;
    }
    tmp_args_name_17 = PyTuple_New( 2 );
    tmp_tuple_element_25 = const_str_plain_Extends;
    Py_INCREF( tmp_tuple_element_25 );
    PyTuple_SET_ITEM( tmp_args_name_17, 0, tmp_tuple_element_25 );
    tmp_tuple_element_25 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_tuple_element_25 );
    Py_INCREF( tmp_tuple_element_25 );
    PyTuple_SET_ITEM( tmp_args_name_17, 1, tmp_tuple_element_25 );
    tmp_kw_name_17 = tmp_class_creation_9__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_17 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 299;
    tmp_assign_source_120 = CALL_FUNCTION( tmp_called_name_19, tmp_args_name_17, tmp_kw_name_17 );
    Py_DECREF( tmp_called_name_19 );
    Py_DECREF( tmp_args_name_17 );
    if ( tmp_assign_source_120 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_18;
    }
    goto condexpr_end_27;
    condexpr_false_27:;
    tmp_assign_source_120 = PyDict_New();
    condexpr_end_27:;
    assert( tmp_class_creation_9__prepared == NULL );
    tmp_class_creation_9__prepared = tmp_assign_source_120;

    tmp_set_locals = tmp_class_creation_9__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_9);
    locals_dict_9 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_122 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_8_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_122 );
    outline_8_var___module__ = tmp_assign_source_122;

    tmp_assign_source_123 = const_str_digest_3e0434cc2aa434e9921390a6eae9a8c4;
    assert( outline_8_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_123 );
    outline_8_var___doc__ = tmp_assign_source_123;

    tmp_assign_source_124 = const_str_plain_Extends;
    assert( outline_8_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_124 );
    outline_8_var___qualname__ = tmp_assign_source_124;

    tmp_assign_source_125 = const_tuple_str_plain_template_tuple;
    assert( outline_8_var_fields == NULL );
    Py_INCREF( tmp_assign_source_125 );
    outline_8_var_fields = tmp_assign_source_125;

    // Tried code:
    tmp_called_name_20 = tmp_class_creation_9__metaclass;

    CHECK_OBJECT( tmp_called_name_20 );
    tmp_args_name_18 = PyTuple_New( 3 );
    tmp_tuple_element_26 = const_str_plain_Extends;
    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_args_name_18, 0, tmp_tuple_element_26 );
    tmp_tuple_element_26 = tmp_class_creation_9__bases;

    CHECK_OBJECT( tmp_tuple_element_26 );
    Py_INCREF( tmp_tuple_element_26 );
    PyTuple_SET_ITEM( tmp_args_name_18, 1, tmp_tuple_element_26 );
    tmp_tuple_element_26 = locals_dict_9;
    Py_INCREF( tmp_tuple_element_26 );
    if ( outline_8_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_26,
            const_str_plain___qualname__,
            outline_8_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_26,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_26,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_18 );
        Py_DECREF( tmp_tuple_element_26 );

        exception_lineno = 299;

        goto try_except_handler_19;
    }
    if ( outline_8_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_26,
            const_str_plain___module__,
            outline_8_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_26,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_26,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_18 );
        Py_DECREF( tmp_tuple_element_26 );

        exception_lineno = 299;

        goto try_except_handler_19;
    }
    if ( outline_8_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_26,
            const_str_plain___doc__,
            outline_8_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_26,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_26,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_18 );
        Py_DECREF( tmp_tuple_element_26 );

        exception_lineno = 299;

        goto try_except_handler_19;
    }
    if ( outline_8_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_26,
            const_str_plain_fields,
            outline_8_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_26,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_26,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_18 );
        Py_DECREF( tmp_tuple_element_26 );

        exception_lineno = 299;

        goto try_except_handler_19;
    }
    PyTuple_SET_ITEM( tmp_args_name_18, 2, tmp_tuple_element_26 );
    tmp_kw_name_18 = tmp_class_creation_9__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_18 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 299;
    tmp_assign_source_126 = CALL_FUNCTION( tmp_called_name_20, tmp_args_name_18, tmp_kw_name_18 );
    Py_DECREF( tmp_args_name_18 );
    if ( tmp_assign_source_126 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 299;

        goto try_except_handler_19;
    }
    assert( outline_8_var___class__ == NULL );
    outline_8_var___class__ = tmp_assign_source_126;

    tmp_outline_return_value_9 = outline_8_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_9 );
    Py_INCREF( tmp_outline_return_value_9 );
    goto try_return_handler_19;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_19:;
    CHECK_OBJECT( (PyObject *)outline_8_var___class__ );
    Py_DECREF( outline_8_var___class__ );
    outline_8_var___class__ = NULL;

    Py_XDECREF( outline_8_var___qualname__ );
    outline_8_var___qualname__ = NULL;

    Py_XDECREF( outline_8_var___module__ );
    outline_8_var___module__ = NULL;

    Py_XDECREF( outline_8_var___doc__ );
    outline_8_var___doc__ = NULL;

    Py_XDECREF( outline_8_var_fields );
    outline_8_var_fields = NULL;

    goto outline_result_9;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_8_var___qualname__ );
    outline_8_var___qualname__ = NULL;

    Py_XDECREF( outline_8_var___module__ );
    outline_8_var___module__ = NULL;

    Py_XDECREF( outline_8_var___doc__ );
    outline_8_var___doc__ = NULL;

    Py_XDECREF( outline_8_var_fields );
    outline_8_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto outline_exception_9;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_9:;
    exception_lineno = 299;
    goto try_except_handler_18;
    outline_result_9:;
    tmp_assign_source_121 = tmp_outline_return_value_9;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Extends, tmp_assign_source_121 );
    goto try_end_10;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_class_creation_9__class_decl_dict );
    tmp_class_creation_9__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_9__prepared );
    tmp_class_creation_9__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_class_creation_9__class_decl_dict );
    tmp_class_creation_9__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_9__prepared );
    tmp_class_creation_9__prepared = NULL;

    // Tried code:
    tmp_assign_source_127 = PyTuple_New( 1 );
    tmp_tuple_element_27 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_27 == NULL ))
    {
        tmp_tuple_element_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_27 == NULL )
    {
        Py_DECREF( tmp_assign_source_127 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 304;

        goto try_except_handler_20;
    }

    Py_INCREF( tmp_tuple_element_27 );
    PyTuple_SET_ITEM( tmp_assign_source_127, 0, tmp_tuple_element_27 );
    assert( tmp_class_creation_10__bases == NULL );
    tmp_class_creation_10__bases = tmp_assign_source_127;

    tmp_assign_source_128 = PyDict_New();
    assert( tmp_class_creation_10__class_decl_dict == NULL );
    tmp_class_creation_10__class_decl_dict = tmp_assign_source_128;

    tmp_compare_left_19 = const_str_plain_metaclass;
    tmp_compare_right_19 = tmp_class_creation_10__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_19 );
    tmp_cmp_In_19 = PySequence_Contains( tmp_compare_right_19, tmp_compare_left_19 );
    assert( !(tmp_cmp_In_19 == -1) );
    if ( tmp_cmp_In_19 == 1 )
    {
        goto condexpr_true_28;
    }
    else
    {
        goto condexpr_false_28;
    }
    condexpr_true_28:;
    tmp_dict_name_10 = tmp_class_creation_10__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_10 );
    tmp_key_name_10 = const_str_plain_metaclass;
    tmp_metaclass_name_10 = DICT_GET_ITEM( tmp_dict_name_10, tmp_key_name_10 );
    if ( tmp_metaclass_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_20;
    }
    goto condexpr_end_28;
    condexpr_false_28:;
    tmp_cond_value_10 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_cond_value_10 );
    tmp_cond_truth_10 = CHECK_IF_TRUE( tmp_cond_value_10 );
    if ( tmp_cond_truth_10 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_20;
    }
    if ( tmp_cond_truth_10 == 1 )
    {
        goto condexpr_true_29;
    }
    else
    {
        goto condexpr_false_29;
    }
    condexpr_true_29:;
    tmp_subscribed_name_10 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_subscribed_name_10 );
    tmp_subscript_name_10 = const_int_0;
    tmp_type_arg_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
    if ( tmp_type_arg_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_20;
    }
    tmp_metaclass_name_10 = BUILTIN_TYPE1( tmp_type_arg_10 );
    Py_DECREF( tmp_type_arg_10 );
    if ( tmp_metaclass_name_10 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_20;
    }
    goto condexpr_end_29;
    condexpr_false_29:;
    tmp_metaclass_name_10 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_10 );
    condexpr_end_29:;
    condexpr_end_28:;
    tmp_bases_name_10 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_bases_name_10 );
    tmp_assign_source_129 = SELECT_METACLASS( tmp_metaclass_name_10, tmp_bases_name_10 );
    if ( tmp_assign_source_129 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_10 );

        exception_lineno = 304;

        goto try_except_handler_20;
    }
    Py_DECREF( tmp_metaclass_name_10 );
    assert( tmp_class_creation_10__metaclass == NULL );
    tmp_class_creation_10__metaclass = tmp_assign_source_129;

    tmp_compare_left_20 = const_str_plain_metaclass;
    tmp_compare_right_20 = tmp_class_creation_10__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_20 );
    tmp_cmp_In_20 = PySequence_Contains( tmp_compare_right_20, tmp_compare_left_20 );
    assert( !(tmp_cmp_In_20 == -1) );
    if ( tmp_cmp_In_20 == 1 )
    {
        goto branch_yes_10;
    }
    else
    {
        goto branch_no_10;
    }
    branch_yes_10:;
    tmp_dictdel_dict = tmp_class_creation_10__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_20;
    }
    branch_no_10:;
    tmp_hasattr_source_10 = tmp_class_creation_10__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_10 );
    tmp_hasattr_attr_10 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_10, tmp_hasattr_attr_10 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_20;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_30;
    }
    else
    {
        goto condexpr_false_30;
    }
    condexpr_true_30:;
    tmp_source_name_29 = tmp_class_creation_10__metaclass;

    CHECK_OBJECT( tmp_source_name_29 );
    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain___prepare__ );
    if ( tmp_called_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_20;
    }
    tmp_args_name_19 = PyTuple_New( 2 );
    tmp_tuple_element_28 = const_str_plain_For;
    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_args_name_19, 0, tmp_tuple_element_28 );
    tmp_tuple_element_28 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_tuple_element_28 );
    Py_INCREF( tmp_tuple_element_28 );
    PyTuple_SET_ITEM( tmp_args_name_19, 1, tmp_tuple_element_28 );
    tmp_kw_name_19 = tmp_class_creation_10__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_19 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 304;
    tmp_assign_source_130 = CALL_FUNCTION( tmp_called_name_21, tmp_args_name_19, tmp_kw_name_19 );
    Py_DECREF( tmp_called_name_21 );
    Py_DECREF( tmp_args_name_19 );
    if ( tmp_assign_source_130 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_20;
    }
    goto condexpr_end_30;
    condexpr_false_30:;
    tmp_assign_source_130 = PyDict_New();
    condexpr_end_30:;
    assert( tmp_class_creation_10__prepared == NULL );
    tmp_class_creation_10__prepared = tmp_assign_source_130;

    tmp_set_locals = tmp_class_creation_10__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_10);
    locals_dict_10 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_132 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_9_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_132 );
    outline_9_var___module__ = tmp_assign_source_132;

    tmp_assign_source_133 = const_str_digest_c51e93720396e16a1ba7164571da2985;
    assert( outline_9_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_133 );
    outline_9_var___doc__ = tmp_assign_source_133;

    tmp_assign_source_134 = const_str_plain_For;
    assert( outline_9_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_134 );
    outline_9_var___qualname__ = tmp_assign_source_134;

    tmp_assign_source_135 = const_tuple_122702cf19c5ebe61037dadb0798d4de_tuple;
    assert( outline_9_var_fields == NULL );
    Py_INCREF( tmp_assign_source_135 );
    outline_9_var_fields = tmp_assign_source_135;

    // Tried code:
    tmp_called_name_22 = tmp_class_creation_10__metaclass;

    CHECK_OBJECT( tmp_called_name_22 );
    tmp_args_name_20 = PyTuple_New( 3 );
    tmp_tuple_element_29 = const_str_plain_For;
    Py_INCREF( tmp_tuple_element_29 );
    PyTuple_SET_ITEM( tmp_args_name_20, 0, tmp_tuple_element_29 );
    tmp_tuple_element_29 = tmp_class_creation_10__bases;

    CHECK_OBJECT( tmp_tuple_element_29 );
    Py_INCREF( tmp_tuple_element_29 );
    PyTuple_SET_ITEM( tmp_args_name_20, 1, tmp_tuple_element_29 );
    tmp_tuple_element_29 = locals_dict_10;
    Py_INCREF( tmp_tuple_element_29 );
    if ( outline_9_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_29,
            const_str_plain___qualname__,
            outline_9_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_29,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_29,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_20 );
        Py_DECREF( tmp_tuple_element_29 );

        exception_lineno = 304;

        goto try_except_handler_21;
    }
    if ( outline_9_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_29,
            const_str_plain___module__,
            outline_9_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_29,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_29,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_20 );
        Py_DECREF( tmp_tuple_element_29 );

        exception_lineno = 304;

        goto try_except_handler_21;
    }
    if ( outline_9_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_29,
            const_str_plain___doc__,
            outline_9_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_29,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_29,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_20 );
        Py_DECREF( tmp_tuple_element_29 );

        exception_lineno = 304;

        goto try_except_handler_21;
    }
    if ( outline_9_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_29,
            const_str_plain_fields,
            outline_9_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_29,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_29,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_20 );
        Py_DECREF( tmp_tuple_element_29 );

        exception_lineno = 304;

        goto try_except_handler_21;
    }
    PyTuple_SET_ITEM( tmp_args_name_20, 2, tmp_tuple_element_29 );
    tmp_kw_name_20 = tmp_class_creation_10__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_20 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 304;
    tmp_assign_source_136 = CALL_FUNCTION( tmp_called_name_22, tmp_args_name_20, tmp_kw_name_20 );
    Py_DECREF( tmp_args_name_20 );
    if ( tmp_assign_source_136 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 304;

        goto try_except_handler_21;
    }
    assert( outline_9_var___class__ == NULL );
    outline_9_var___class__ = tmp_assign_source_136;

    tmp_outline_return_value_10 = outline_9_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_10 );
    Py_INCREF( tmp_outline_return_value_10 );
    goto try_return_handler_21;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_21:;
    CHECK_OBJECT( (PyObject *)outline_9_var___class__ );
    Py_DECREF( outline_9_var___class__ );
    outline_9_var___class__ = NULL;

    Py_XDECREF( outline_9_var___qualname__ );
    outline_9_var___qualname__ = NULL;

    Py_XDECREF( outline_9_var___module__ );
    outline_9_var___module__ = NULL;

    Py_XDECREF( outline_9_var___doc__ );
    outline_9_var___doc__ = NULL;

    Py_XDECREF( outline_9_var_fields );
    outline_9_var_fields = NULL;

    goto outline_result_10;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_9_var___qualname__ );
    outline_9_var___qualname__ = NULL;

    Py_XDECREF( outline_9_var___module__ );
    outline_9_var___module__ = NULL;

    Py_XDECREF( outline_9_var___doc__ );
    outline_9_var___doc__ = NULL;

    Py_XDECREF( outline_9_var_fields );
    outline_9_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto outline_exception_10;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_10:;
    exception_lineno = 304;
    goto try_except_handler_20;
    outline_result_10:;
    tmp_assign_source_131 = tmp_outline_return_value_10;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_For, tmp_assign_source_131 );
    goto try_end_11;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_class_creation_10__class_decl_dict );
    tmp_class_creation_10__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_10__prepared );
    tmp_class_creation_10__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    Py_XDECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_class_creation_10__class_decl_dict );
    tmp_class_creation_10__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_10__prepared );
    tmp_class_creation_10__prepared = NULL;

    // Tried code:
    tmp_assign_source_137 = PyTuple_New( 1 );
    tmp_tuple_element_30 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_30 == NULL ))
    {
        tmp_tuple_element_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_30 == NULL )
    {
        Py_DECREF( tmp_assign_source_137 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 315;

        goto try_except_handler_22;
    }

    Py_INCREF( tmp_tuple_element_30 );
    PyTuple_SET_ITEM( tmp_assign_source_137, 0, tmp_tuple_element_30 );
    assert( tmp_class_creation_11__bases == NULL );
    tmp_class_creation_11__bases = tmp_assign_source_137;

    tmp_assign_source_138 = PyDict_New();
    assert( tmp_class_creation_11__class_decl_dict == NULL );
    tmp_class_creation_11__class_decl_dict = tmp_assign_source_138;

    tmp_compare_left_21 = const_str_plain_metaclass;
    tmp_compare_right_21 = tmp_class_creation_11__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_21 );
    tmp_cmp_In_21 = PySequence_Contains( tmp_compare_right_21, tmp_compare_left_21 );
    assert( !(tmp_cmp_In_21 == -1) );
    if ( tmp_cmp_In_21 == 1 )
    {
        goto condexpr_true_31;
    }
    else
    {
        goto condexpr_false_31;
    }
    condexpr_true_31:;
    tmp_dict_name_11 = tmp_class_creation_11__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_11 );
    tmp_key_name_11 = const_str_plain_metaclass;
    tmp_metaclass_name_11 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
    if ( tmp_metaclass_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_22;
    }
    goto condexpr_end_31;
    condexpr_false_31:;
    tmp_cond_value_11 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_cond_value_11 );
    tmp_cond_truth_11 = CHECK_IF_TRUE( tmp_cond_value_11 );
    if ( tmp_cond_truth_11 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_22;
    }
    if ( tmp_cond_truth_11 == 1 )
    {
        goto condexpr_true_32;
    }
    else
    {
        goto condexpr_false_32;
    }
    condexpr_true_32:;
    tmp_subscribed_name_11 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_subscribed_name_11 );
    tmp_subscript_name_11 = const_int_0;
    tmp_type_arg_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
    if ( tmp_type_arg_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_22;
    }
    tmp_metaclass_name_11 = BUILTIN_TYPE1( tmp_type_arg_11 );
    Py_DECREF( tmp_type_arg_11 );
    if ( tmp_metaclass_name_11 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_22;
    }
    goto condexpr_end_32;
    condexpr_false_32:;
    tmp_metaclass_name_11 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_11 );
    condexpr_end_32:;
    condexpr_end_31:;
    tmp_bases_name_11 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_bases_name_11 );
    tmp_assign_source_139 = SELECT_METACLASS( tmp_metaclass_name_11, tmp_bases_name_11 );
    if ( tmp_assign_source_139 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_11 );

        exception_lineno = 315;

        goto try_except_handler_22;
    }
    Py_DECREF( tmp_metaclass_name_11 );
    assert( tmp_class_creation_11__metaclass == NULL );
    tmp_class_creation_11__metaclass = tmp_assign_source_139;

    tmp_compare_left_22 = const_str_plain_metaclass;
    tmp_compare_right_22 = tmp_class_creation_11__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_22 );
    tmp_cmp_In_22 = PySequence_Contains( tmp_compare_right_22, tmp_compare_left_22 );
    assert( !(tmp_cmp_In_22 == -1) );
    if ( tmp_cmp_In_22 == 1 )
    {
        goto branch_yes_11;
    }
    else
    {
        goto branch_no_11;
    }
    branch_yes_11:;
    tmp_dictdel_dict = tmp_class_creation_11__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_22;
    }
    branch_no_11:;
    tmp_hasattr_source_11 = tmp_class_creation_11__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_11 );
    tmp_hasattr_attr_11 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_11, tmp_hasattr_attr_11 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_22;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_33;
    }
    else
    {
        goto condexpr_false_33;
    }
    condexpr_true_33:;
    tmp_source_name_30 = tmp_class_creation_11__metaclass;

    CHECK_OBJECT( tmp_source_name_30 );
    tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain___prepare__ );
    if ( tmp_called_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_22;
    }
    tmp_args_name_21 = PyTuple_New( 2 );
    tmp_tuple_element_31 = const_str_plain_If;
    Py_INCREF( tmp_tuple_element_31 );
    PyTuple_SET_ITEM( tmp_args_name_21, 0, tmp_tuple_element_31 );
    tmp_tuple_element_31 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_tuple_element_31 );
    Py_INCREF( tmp_tuple_element_31 );
    PyTuple_SET_ITEM( tmp_args_name_21, 1, tmp_tuple_element_31 );
    tmp_kw_name_21 = tmp_class_creation_11__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_21 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 315;
    tmp_assign_source_140 = CALL_FUNCTION( tmp_called_name_23, tmp_args_name_21, tmp_kw_name_21 );
    Py_DECREF( tmp_called_name_23 );
    Py_DECREF( tmp_args_name_21 );
    if ( tmp_assign_source_140 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_22;
    }
    goto condexpr_end_33;
    condexpr_false_33:;
    tmp_assign_source_140 = PyDict_New();
    condexpr_end_33:;
    assert( tmp_class_creation_11__prepared == NULL );
    tmp_class_creation_11__prepared = tmp_assign_source_140;

    tmp_set_locals = tmp_class_creation_11__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_11);
    locals_dict_11 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_142 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_10_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_142 );
    outline_10_var___module__ = tmp_assign_source_142;

    tmp_assign_source_143 = const_str_digest_35defc2dd8b3963f08b644ee8f7ab4a9;
    assert( outline_10_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_143 );
    outline_10_var___doc__ = tmp_assign_source_143;

    tmp_assign_source_144 = const_str_plain_If;
    assert( outline_10_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_144 );
    outline_10_var___qualname__ = tmp_assign_source_144;

    tmp_assign_source_145 = const_tuple_165ce5f2b400e959de3c730e4adb7681_tuple;
    assert( outline_10_var_fields == NULL );
    Py_INCREF( tmp_assign_source_145 );
    outline_10_var_fields = tmp_assign_source_145;

    // Tried code:
    tmp_called_name_24 = tmp_class_creation_11__metaclass;

    CHECK_OBJECT( tmp_called_name_24 );
    tmp_args_name_22 = PyTuple_New( 3 );
    tmp_tuple_element_32 = const_str_plain_If;
    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_args_name_22, 0, tmp_tuple_element_32 );
    tmp_tuple_element_32 = tmp_class_creation_11__bases;

    CHECK_OBJECT( tmp_tuple_element_32 );
    Py_INCREF( tmp_tuple_element_32 );
    PyTuple_SET_ITEM( tmp_args_name_22, 1, tmp_tuple_element_32 );
    tmp_tuple_element_32 = locals_dict_11;
    Py_INCREF( tmp_tuple_element_32 );
    if ( outline_10_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_32,
            const_str_plain___qualname__,
            outline_10_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_32,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_32,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_22 );
        Py_DECREF( tmp_tuple_element_32 );

        exception_lineno = 315;

        goto try_except_handler_23;
    }
    if ( outline_10_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_32,
            const_str_plain___module__,
            outline_10_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_32,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_32,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_22 );
        Py_DECREF( tmp_tuple_element_32 );

        exception_lineno = 315;

        goto try_except_handler_23;
    }
    if ( outline_10_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_32,
            const_str_plain___doc__,
            outline_10_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_32,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_32,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_22 );
        Py_DECREF( tmp_tuple_element_32 );

        exception_lineno = 315;

        goto try_except_handler_23;
    }
    if ( outline_10_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_32,
            const_str_plain_fields,
            outline_10_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_32,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_32,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_22 );
        Py_DECREF( tmp_tuple_element_32 );

        exception_lineno = 315;

        goto try_except_handler_23;
    }
    PyTuple_SET_ITEM( tmp_args_name_22, 2, tmp_tuple_element_32 );
    tmp_kw_name_22 = tmp_class_creation_11__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_22 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 315;
    tmp_assign_source_146 = CALL_FUNCTION( tmp_called_name_24, tmp_args_name_22, tmp_kw_name_22 );
    Py_DECREF( tmp_args_name_22 );
    if ( tmp_assign_source_146 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 315;

        goto try_except_handler_23;
    }
    assert( outline_10_var___class__ == NULL );
    outline_10_var___class__ = tmp_assign_source_146;

    tmp_outline_return_value_11 = outline_10_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_11 );
    Py_INCREF( tmp_outline_return_value_11 );
    goto try_return_handler_23;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_23:;
    CHECK_OBJECT( (PyObject *)outline_10_var___class__ );
    Py_DECREF( outline_10_var___class__ );
    outline_10_var___class__ = NULL;

    Py_XDECREF( outline_10_var___qualname__ );
    outline_10_var___qualname__ = NULL;

    Py_XDECREF( outline_10_var___module__ );
    outline_10_var___module__ = NULL;

    Py_XDECREF( outline_10_var___doc__ );
    outline_10_var___doc__ = NULL;

    Py_XDECREF( outline_10_var_fields );
    outline_10_var_fields = NULL;

    goto outline_result_11;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_10_var___qualname__ );
    outline_10_var___qualname__ = NULL;

    Py_XDECREF( outline_10_var___module__ );
    outline_10_var___module__ = NULL;

    Py_XDECREF( outline_10_var___doc__ );
    outline_10_var___doc__ = NULL;

    Py_XDECREF( outline_10_var_fields );
    outline_10_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_22;
    exception_value = exception_keeper_value_22;
    exception_tb = exception_keeper_tb_22;
    exception_lineno = exception_keeper_lineno_22;

    goto outline_exception_11;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_11:;
    exception_lineno = 315;
    goto try_except_handler_22;
    outline_result_11:;
    tmp_assign_source_141 = tmp_outline_return_value_11;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_If, tmp_assign_source_141 );
    goto try_end_12;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_class_creation_11__class_decl_dict );
    tmp_class_creation_11__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_11__prepared );
    tmp_class_creation_11__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_23;
    exception_value = exception_keeper_value_23;
    exception_tb = exception_keeper_tb_23;
    exception_lineno = exception_keeper_lineno_23;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    Py_XDECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_class_creation_11__class_decl_dict );
    tmp_class_creation_11__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_11__prepared );
    tmp_class_creation_11__prepared = NULL;

    // Tried code:
    tmp_assign_source_147 = PyTuple_New( 1 );
    tmp_tuple_element_33 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_33 == NULL ))
    {
        tmp_tuple_element_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_33 == NULL )
    {
        Py_DECREF( tmp_assign_source_147 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 320;

        goto try_except_handler_24;
    }

    Py_INCREF( tmp_tuple_element_33 );
    PyTuple_SET_ITEM( tmp_assign_source_147, 0, tmp_tuple_element_33 );
    assert( tmp_class_creation_12__bases == NULL );
    tmp_class_creation_12__bases = tmp_assign_source_147;

    tmp_assign_source_148 = PyDict_New();
    assert( tmp_class_creation_12__class_decl_dict == NULL );
    tmp_class_creation_12__class_decl_dict = tmp_assign_source_148;

    tmp_compare_left_23 = const_str_plain_metaclass;
    tmp_compare_right_23 = tmp_class_creation_12__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_23 );
    tmp_cmp_In_23 = PySequence_Contains( tmp_compare_right_23, tmp_compare_left_23 );
    assert( !(tmp_cmp_In_23 == -1) );
    if ( tmp_cmp_In_23 == 1 )
    {
        goto condexpr_true_34;
    }
    else
    {
        goto condexpr_false_34;
    }
    condexpr_true_34:;
    tmp_dict_name_12 = tmp_class_creation_12__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_12 );
    tmp_key_name_12 = const_str_plain_metaclass;
    tmp_metaclass_name_12 = DICT_GET_ITEM( tmp_dict_name_12, tmp_key_name_12 );
    if ( tmp_metaclass_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_24;
    }
    goto condexpr_end_34;
    condexpr_false_34:;
    tmp_cond_value_12 = tmp_class_creation_12__bases;

    CHECK_OBJECT( tmp_cond_value_12 );
    tmp_cond_truth_12 = CHECK_IF_TRUE( tmp_cond_value_12 );
    if ( tmp_cond_truth_12 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_24;
    }
    if ( tmp_cond_truth_12 == 1 )
    {
        goto condexpr_true_35;
    }
    else
    {
        goto condexpr_false_35;
    }
    condexpr_true_35:;
    tmp_subscribed_name_12 = tmp_class_creation_12__bases;

    CHECK_OBJECT( tmp_subscribed_name_12 );
    tmp_subscript_name_12 = const_int_0;
    tmp_type_arg_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
    if ( tmp_type_arg_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_24;
    }
    tmp_metaclass_name_12 = BUILTIN_TYPE1( tmp_type_arg_12 );
    Py_DECREF( tmp_type_arg_12 );
    if ( tmp_metaclass_name_12 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_24;
    }
    goto condexpr_end_35;
    condexpr_false_35:;
    tmp_metaclass_name_12 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_12 );
    condexpr_end_35:;
    condexpr_end_34:;
    tmp_bases_name_12 = tmp_class_creation_12__bases;

    CHECK_OBJECT( tmp_bases_name_12 );
    tmp_assign_source_149 = SELECT_METACLASS( tmp_metaclass_name_12, tmp_bases_name_12 );
    if ( tmp_assign_source_149 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_12 );

        exception_lineno = 320;

        goto try_except_handler_24;
    }
    Py_DECREF( tmp_metaclass_name_12 );
    assert( tmp_class_creation_12__metaclass == NULL );
    tmp_class_creation_12__metaclass = tmp_assign_source_149;

    tmp_compare_left_24 = const_str_plain_metaclass;
    tmp_compare_right_24 = tmp_class_creation_12__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_24 );
    tmp_cmp_In_24 = PySequence_Contains( tmp_compare_right_24, tmp_compare_left_24 );
    assert( !(tmp_cmp_In_24 == -1) );
    if ( tmp_cmp_In_24 == 1 )
    {
        goto branch_yes_12;
    }
    else
    {
        goto branch_no_12;
    }
    branch_yes_12:;
    tmp_dictdel_dict = tmp_class_creation_12__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_24;
    }
    branch_no_12:;
    tmp_hasattr_source_12 = tmp_class_creation_12__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_12 );
    tmp_hasattr_attr_12 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_12, tmp_hasattr_attr_12 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_24;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_36;
    }
    else
    {
        goto condexpr_false_36;
    }
    condexpr_true_36:;
    tmp_source_name_31 = tmp_class_creation_12__metaclass;

    CHECK_OBJECT( tmp_source_name_31 );
    tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain___prepare__ );
    if ( tmp_called_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_24;
    }
    tmp_args_name_23 = PyTuple_New( 2 );
    tmp_tuple_element_34 = const_str_plain_Macro;
    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_args_name_23, 0, tmp_tuple_element_34 );
    tmp_tuple_element_34 = tmp_class_creation_12__bases;

    CHECK_OBJECT( tmp_tuple_element_34 );
    Py_INCREF( tmp_tuple_element_34 );
    PyTuple_SET_ITEM( tmp_args_name_23, 1, tmp_tuple_element_34 );
    tmp_kw_name_23 = tmp_class_creation_12__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_23 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 320;
    tmp_assign_source_150 = CALL_FUNCTION( tmp_called_name_25, tmp_args_name_23, tmp_kw_name_23 );
    Py_DECREF( tmp_called_name_25 );
    Py_DECREF( tmp_args_name_23 );
    if ( tmp_assign_source_150 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_24;
    }
    goto condexpr_end_36;
    condexpr_false_36:;
    tmp_assign_source_150 = PyDict_New();
    condexpr_end_36:;
    assert( tmp_class_creation_12__prepared == NULL );
    tmp_class_creation_12__prepared = tmp_assign_source_150;

    tmp_set_locals = tmp_class_creation_12__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_12);
    locals_dict_12 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_152 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_11_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_152 );
    outline_11_var___module__ = tmp_assign_source_152;

    tmp_assign_source_153 = const_str_digest_f8070aff6952c87b12859e25ef90bca2;
    assert( outline_11_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_153 );
    outline_11_var___doc__ = tmp_assign_source_153;

    tmp_assign_source_154 = const_str_plain_Macro;
    assert( outline_11_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_154 );
    outline_11_var___qualname__ = tmp_assign_source_154;

    tmp_assign_source_155 = const_tuple_0ca6dcd1bce525c38567b7c3b00b508e_tuple;
    assert( outline_11_var_fields == NULL );
    Py_INCREF( tmp_assign_source_155 );
    outline_11_var_fields = tmp_assign_source_155;

    // Tried code:
    tmp_called_name_26 = tmp_class_creation_12__metaclass;

    CHECK_OBJECT( tmp_called_name_26 );
    tmp_args_name_24 = PyTuple_New( 3 );
    tmp_tuple_element_35 = const_str_plain_Macro;
    Py_INCREF( tmp_tuple_element_35 );
    PyTuple_SET_ITEM( tmp_args_name_24, 0, tmp_tuple_element_35 );
    tmp_tuple_element_35 = tmp_class_creation_12__bases;

    CHECK_OBJECT( tmp_tuple_element_35 );
    Py_INCREF( tmp_tuple_element_35 );
    PyTuple_SET_ITEM( tmp_args_name_24, 1, tmp_tuple_element_35 );
    tmp_tuple_element_35 = locals_dict_12;
    Py_INCREF( tmp_tuple_element_35 );
    if ( outline_11_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_35,
            const_str_plain___qualname__,
            outline_11_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_35,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_35,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_24 );
        Py_DECREF( tmp_tuple_element_35 );

        exception_lineno = 320;

        goto try_except_handler_25;
    }
    if ( outline_11_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_35,
            const_str_plain___module__,
            outline_11_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_35,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_35,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_24 );
        Py_DECREF( tmp_tuple_element_35 );

        exception_lineno = 320;

        goto try_except_handler_25;
    }
    if ( outline_11_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_35,
            const_str_plain___doc__,
            outline_11_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_35,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_35,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_24 );
        Py_DECREF( tmp_tuple_element_35 );

        exception_lineno = 320;

        goto try_except_handler_25;
    }
    if ( outline_11_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_35,
            const_str_plain_fields,
            outline_11_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_35,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_35,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_24 );
        Py_DECREF( tmp_tuple_element_35 );

        exception_lineno = 320;

        goto try_except_handler_25;
    }
    PyTuple_SET_ITEM( tmp_args_name_24, 2, tmp_tuple_element_35 );
    tmp_kw_name_24 = tmp_class_creation_12__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_24 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 320;
    tmp_assign_source_156 = CALL_FUNCTION( tmp_called_name_26, tmp_args_name_24, tmp_kw_name_24 );
    Py_DECREF( tmp_args_name_24 );
    if ( tmp_assign_source_156 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 320;

        goto try_except_handler_25;
    }
    assert( outline_11_var___class__ == NULL );
    outline_11_var___class__ = tmp_assign_source_156;

    tmp_outline_return_value_12 = outline_11_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_12 );
    Py_INCREF( tmp_outline_return_value_12 );
    goto try_return_handler_25;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_25:;
    CHECK_OBJECT( (PyObject *)outline_11_var___class__ );
    Py_DECREF( outline_11_var___class__ );
    outline_11_var___class__ = NULL;

    Py_XDECREF( outline_11_var___qualname__ );
    outline_11_var___qualname__ = NULL;

    Py_XDECREF( outline_11_var___module__ );
    outline_11_var___module__ = NULL;

    Py_XDECREF( outline_11_var___doc__ );
    outline_11_var___doc__ = NULL;

    Py_XDECREF( outline_11_var_fields );
    outline_11_var_fields = NULL;

    goto outline_result_12;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_11_var___qualname__ );
    outline_11_var___qualname__ = NULL;

    Py_XDECREF( outline_11_var___module__ );
    outline_11_var___module__ = NULL;

    Py_XDECREF( outline_11_var___doc__ );
    outline_11_var___doc__ = NULL;

    Py_XDECREF( outline_11_var_fields );
    outline_11_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto outline_exception_12;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_12:;
    exception_lineno = 320;
    goto try_except_handler_24;
    outline_result_12:;
    tmp_assign_source_151 = tmp_outline_return_value_12;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Macro, tmp_assign_source_151 );
    goto try_end_13;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    Py_XDECREF( tmp_class_creation_12__class_decl_dict );
    tmp_class_creation_12__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_12__prepared );
    tmp_class_creation_12__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    Py_XDECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    Py_XDECREF( tmp_class_creation_12__class_decl_dict );
    tmp_class_creation_12__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_12__prepared );
    tmp_class_creation_12__prepared = NULL;

    // Tried code:
    tmp_assign_source_157 = PyTuple_New( 1 );
    tmp_tuple_element_36 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_36 == NULL ))
    {
        tmp_tuple_element_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_36 == NULL )
    {
        Py_DECREF( tmp_assign_source_157 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 328;

        goto try_except_handler_26;
    }

    Py_INCREF( tmp_tuple_element_36 );
    PyTuple_SET_ITEM( tmp_assign_source_157, 0, tmp_tuple_element_36 );
    assert( tmp_class_creation_13__bases == NULL );
    tmp_class_creation_13__bases = tmp_assign_source_157;

    tmp_assign_source_158 = PyDict_New();
    assert( tmp_class_creation_13__class_decl_dict == NULL );
    tmp_class_creation_13__class_decl_dict = tmp_assign_source_158;

    tmp_compare_left_25 = const_str_plain_metaclass;
    tmp_compare_right_25 = tmp_class_creation_13__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_25 );
    tmp_cmp_In_25 = PySequence_Contains( tmp_compare_right_25, tmp_compare_left_25 );
    assert( !(tmp_cmp_In_25 == -1) );
    if ( tmp_cmp_In_25 == 1 )
    {
        goto condexpr_true_37;
    }
    else
    {
        goto condexpr_false_37;
    }
    condexpr_true_37:;
    tmp_dict_name_13 = tmp_class_creation_13__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_13 );
    tmp_key_name_13 = const_str_plain_metaclass;
    tmp_metaclass_name_13 = DICT_GET_ITEM( tmp_dict_name_13, tmp_key_name_13 );
    if ( tmp_metaclass_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_26;
    }
    goto condexpr_end_37;
    condexpr_false_37:;
    tmp_cond_value_13 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_cond_value_13 );
    tmp_cond_truth_13 = CHECK_IF_TRUE( tmp_cond_value_13 );
    if ( tmp_cond_truth_13 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_26;
    }
    if ( tmp_cond_truth_13 == 1 )
    {
        goto condexpr_true_38;
    }
    else
    {
        goto condexpr_false_38;
    }
    condexpr_true_38:;
    tmp_subscribed_name_13 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_subscribed_name_13 );
    tmp_subscript_name_13 = const_int_0;
    tmp_type_arg_13 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
    if ( tmp_type_arg_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_26;
    }
    tmp_metaclass_name_13 = BUILTIN_TYPE1( tmp_type_arg_13 );
    Py_DECREF( tmp_type_arg_13 );
    if ( tmp_metaclass_name_13 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_26;
    }
    goto condexpr_end_38;
    condexpr_false_38:;
    tmp_metaclass_name_13 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_13 );
    condexpr_end_38:;
    condexpr_end_37:;
    tmp_bases_name_13 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_bases_name_13 );
    tmp_assign_source_159 = SELECT_METACLASS( tmp_metaclass_name_13, tmp_bases_name_13 );
    if ( tmp_assign_source_159 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_13 );

        exception_lineno = 328;

        goto try_except_handler_26;
    }
    Py_DECREF( tmp_metaclass_name_13 );
    assert( tmp_class_creation_13__metaclass == NULL );
    tmp_class_creation_13__metaclass = tmp_assign_source_159;

    tmp_compare_left_26 = const_str_plain_metaclass;
    tmp_compare_right_26 = tmp_class_creation_13__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_26 );
    tmp_cmp_In_26 = PySequence_Contains( tmp_compare_right_26, tmp_compare_left_26 );
    assert( !(tmp_cmp_In_26 == -1) );
    if ( tmp_cmp_In_26 == 1 )
    {
        goto branch_yes_13;
    }
    else
    {
        goto branch_no_13;
    }
    branch_yes_13:;
    tmp_dictdel_dict = tmp_class_creation_13__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_26;
    }
    branch_no_13:;
    tmp_hasattr_source_13 = tmp_class_creation_13__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_13 );
    tmp_hasattr_attr_13 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_13, tmp_hasattr_attr_13 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_26;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_39;
    }
    else
    {
        goto condexpr_false_39;
    }
    condexpr_true_39:;
    tmp_source_name_32 = tmp_class_creation_13__metaclass;

    CHECK_OBJECT( tmp_source_name_32 );
    tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain___prepare__ );
    if ( tmp_called_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_26;
    }
    tmp_args_name_25 = PyTuple_New( 2 );
    tmp_tuple_element_37 = const_str_plain_CallBlock;
    Py_INCREF( tmp_tuple_element_37 );
    PyTuple_SET_ITEM( tmp_args_name_25, 0, tmp_tuple_element_37 );
    tmp_tuple_element_37 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_tuple_element_37 );
    Py_INCREF( tmp_tuple_element_37 );
    PyTuple_SET_ITEM( tmp_args_name_25, 1, tmp_tuple_element_37 );
    tmp_kw_name_25 = tmp_class_creation_13__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_25 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 328;
    tmp_assign_source_160 = CALL_FUNCTION( tmp_called_name_27, tmp_args_name_25, tmp_kw_name_25 );
    Py_DECREF( tmp_called_name_27 );
    Py_DECREF( tmp_args_name_25 );
    if ( tmp_assign_source_160 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_26;
    }
    goto condexpr_end_39;
    condexpr_false_39:;
    tmp_assign_source_160 = PyDict_New();
    condexpr_end_39:;
    assert( tmp_class_creation_13__prepared == NULL );
    tmp_class_creation_13__prepared = tmp_assign_source_160;

    tmp_set_locals = tmp_class_creation_13__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_13);
    locals_dict_13 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_162 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_12_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_162 );
    outline_12_var___module__ = tmp_assign_source_162;

    tmp_assign_source_163 = const_str_digest_86d45a7144233bec976d910632daef95;
    assert( outline_12_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_163 );
    outline_12_var___doc__ = tmp_assign_source_163;

    tmp_assign_source_164 = const_str_plain_CallBlock;
    assert( outline_12_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_164 );
    outline_12_var___qualname__ = tmp_assign_source_164;

    tmp_assign_source_165 = const_tuple_75062d804f125afdc8d9e83beb2e809e_tuple;
    assert( outline_12_var_fields == NULL );
    Py_INCREF( tmp_assign_source_165 );
    outline_12_var_fields = tmp_assign_source_165;

    // Tried code:
    tmp_called_name_28 = tmp_class_creation_13__metaclass;

    CHECK_OBJECT( tmp_called_name_28 );
    tmp_args_name_26 = PyTuple_New( 3 );
    tmp_tuple_element_38 = const_str_plain_CallBlock;
    Py_INCREF( tmp_tuple_element_38 );
    PyTuple_SET_ITEM( tmp_args_name_26, 0, tmp_tuple_element_38 );
    tmp_tuple_element_38 = tmp_class_creation_13__bases;

    CHECK_OBJECT( tmp_tuple_element_38 );
    Py_INCREF( tmp_tuple_element_38 );
    PyTuple_SET_ITEM( tmp_args_name_26, 1, tmp_tuple_element_38 );
    tmp_tuple_element_38 = locals_dict_13;
    Py_INCREF( tmp_tuple_element_38 );
    if ( outline_12_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_38,
            const_str_plain___qualname__,
            outline_12_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_38,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_38,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_26 );
        Py_DECREF( tmp_tuple_element_38 );

        exception_lineno = 328;

        goto try_except_handler_27;
    }
    if ( outline_12_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_38,
            const_str_plain___module__,
            outline_12_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_38,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_38,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_26 );
        Py_DECREF( tmp_tuple_element_38 );

        exception_lineno = 328;

        goto try_except_handler_27;
    }
    if ( outline_12_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_38,
            const_str_plain___doc__,
            outline_12_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_38,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_38,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_26 );
        Py_DECREF( tmp_tuple_element_38 );

        exception_lineno = 328;

        goto try_except_handler_27;
    }
    if ( outline_12_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_38,
            const_str_plain_fields,
            outline_12_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_38,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_38,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_26 );
        Py_DECREF( tmp_tuple_element_38 );

        exception_lineno = 328;

        goto try_except_handler_27;
    }
    PyTuple_SET_ITEM( tmp_args_name_26, 2, tmp_tuple_element_38 );
    tmp_kw_name_26 = tmp_class_creation_13__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_26 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 328;
    tmp_assign_source_166 = CALL_FUNCTION( tmp_called_name_28, tmp_args_name_26, tmp_kw_name_26 );
    Py_DECREF( tmp_args_name_26 );
    if ( tmp_assign_source_166 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 328;

        goto try_except_handler_27;
    }
    assert( outline_12_var___class__ == NULL );
    outline_12_var___class__ = tmp_assign_source_166;

    tmp_outline_return_value_13 = outline_12_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_13 );
    Py_INCREF( tmp_outline_return_value_13 );
    goto try_return_handler_27;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_27:;
    CHECK_OBJECT( (PyObject *)outline_12_var___class__ );
    Py_DECREF( outline_12_var___class__ );
    outline_12_var___class__ = NULL;

    Py_XDECREF( outline_12_var___qualname__ );
    outline_12_var___qualname__ = NULL;

    Py_XDECREF( outline_12_var___module__ );
    outline_12_var___module__ = NULL;

    Py_XDECREF( outline_12_var___doc__ );
    outline_12_var___doc__ = NULL;

    Py_XDECREF( outline_12_var_fields );
    outline_12_var_fields = NULL;

    goto outline_result_13;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_12_var___qualname__ );
    outline_12_var___qualname__ = NULL;

    Py_XDECREF( outline_12_var___module__ );
    outline_12_var___module__ = NULL;

    Py_XDECREF( outline_12_var___doc__ );
    outline_12_var___doc__ = NULL;

    Py_XDECREF( outline_12_var_fields );
    outline_12_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto outline_exception_13;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_13:;
    exception_lineno = 328;
    goto try_except_handler_26;
    outline_result_13:;
    tmp_assign_source_161 = tmp_outline_return_value_13;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_CallBlock, tmp_assign_source_161 );
    goto try_end_14;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_class_creation_13__class_decl_dict );
    tmp_class_creation_13__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_13__prepared );
    tmp_class_creation_13__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    Py_XDECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_class_creation_13__class_decl_dict );
    tmp_class_creation_13__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_13__prepared );
    tmp_class_creation_13__prepared = NULL;

    // Tried code:
    tmp_assign_source_167 = PyTuple_New( 1 );
    tmp_tuple_element_39 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_39 == NULL ))
    {
        tmp_tuple_element_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_39 == NULL )
    {
        Py_DECREF( tmp_assign_source_167 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 335;

        goto try_except_handler_28;
    }

    Py_INCREF( tmp_tuple_element_39 );
    PyTuple_SET_ITEM( tmp_assign_source_167, 0, tmp_tuple_element_39 );
    assert( tmp_class_creation_14__bases == NULL );
    tmp_class_creation_14__bases = tmp_assign_source_167;

    tmp_assign_source_168 = PyDict_New();
    assert( tmp_class_creation_14__class_decl_dict == NULL );
    tmp_class_creation_14__class_decl_dict = tmp_assign_source_168;

    tmp_compare_left_27 = const_str_plain_metaclass;
    tmp_compare_right_27 = tmp_class_creation_14__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_27 );
    tmp_cmp_In_27 = PySequence_Contains( tmp_compare_right_27, tmp_compare_left_27 );
    assert( !(tmp_cmp_In_27 == -1) );
    if ( tmp_cmp_In_27 == 1 )
    {
        goto condexpr_true_40;
    }
    else
    {
        goto condexpr_false_40;
    }
    condexpr_true_40:;
    tmp_dict_name_14 = tmp_class_creation_14__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_14 );
    tmp_key_name_14 = const_str_plain_metaclass;
    tmp_metaclass_name_14 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
    if ( tmp_metaclass_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_28;
    }
    goto condexpr_end_40;
    condexpr_false_40:;
    tmp_cond_value_14 = tmp_class_creation_14__bases;

    CHECK_OBJECT( tmp_cond_value_14 );
    tmp_cond_truth_14 = CHECK_IF_TRUE( tmp_cond_value_14 );
    if ( tmp_cond_truth_14 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_28;
    }
    if ( tmp_cond_truth_14 == 1 )
    {
        goto condexpr_true_41;
    }
    else
    {
        goto condexpr_false_41;
    }
    condexpr_true_41:;
    tmp_subscribed_name_14 = tmp_class_creation_14__bases;

    CHECK_OBJECT( tmp_subscribed_name_14 );
    tmp_subscript_name_14 = const_int_0;
    tmp_type_arg_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
    if ( tmp_type_arg_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_28;
    }
    tmp_metaclass_name_14 = BUILTIN_TYPE1( tmp_type_arg_14 );
    Py_DECREF( tmp_type_arg_14 );
    if ( tmp_metaclass_name_14 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_28;
    }
    goto condexpr_end_41;
    condexpr_false_41:;
    tmp_metaclass_name_14 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_14 );
    condexpr_end_41:;
    condexpr_end_40:;
    tmp_bases_name_14 = tmp_class_creation_14__bases;

    CHECK_OBJECT( tmp_bases_name_14 );
    tmp_assign_source_169 = SELECT_METACLASS( tmp_metaclass_name_14, tmp_bases_name_14 );
    if ( tmp_assign_source_169 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_14 );

        exception_lineno = 335;

        goto try_except_handler_28;
    }
    Py_DECREF( tmp_metaclass_name_14 );
    assert( tmp_class_creation_14__metaclass == NULL );
    tmp_class_creation_14__metaclass = tmp_assign_source_169;

    tmp_compare_left_28 = const_str_plain_metaclass;
    tmp_compare_right_28 = tmp_class_creation_14__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_28 );
    tmp_cmp_In_28 = PySequence_Contains( tmp_compare_right_28, tmp_compare_left_28 );
    assert( !(tmp_cmp_In_28 == -1) );
    if ( tmp_cmp_In_28 == 1 )
    {
        goto branch_yes_14;
    }
    else
    {
        goto branch_no_14;
    }
    branch_yes_14:;
    tmp_dictdel_dict = tmp_class_creation_14__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_28;
    }
    branch_no_14:;
    tmp_hasattr_source_14 = tmp_class_creation_14__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_14 );
    tmp_hasattr_attr_14 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_14, tmp_hasattr_attr_14 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_28;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_42;
    }
    else
    {
        goto condexpr_false_42;
    }
    condexpr_true_42:;
    tmp_source_name_33 = tmp_class_creation_14__metaclass;

    CHECK_OBJECT( tmp_source_name_33 );
    tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain___prepare__ );
    if ( tmp_called_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_28;
    }
    tmp_args_name_27 = PyTuple_New( 2 );
    tmp_tuple_element_40 = const_str_plain_FilterBlock;
    Py_INCREF( tmp_tuple_element_40 );
    PyTuple_SET_ITEM( tmp_args_name_27, 0, tmp_tuple_element_40 );
    tmp_tuple_element_40 = tmp_class_creation_14__bases;

    CHECK_OBJECT( tmp_tuple_element_40 );
    Py_INCREF( tmp_tuple_element_40 );
    PyTuple_SET_ITEM( tmp_args_name_27, 1, tmp_tuple_element_40 );
    tmp_kw_name_27 = tmp_class_creation_14__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_27 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 335;
    tmp_assign_source_170 = CALL_FUNCTION( tmp_called_name_29, tmp_args_name_27, tmp_kw_name_27 );
    Py_DECREF( tmp_called_name_29 );
    Py_DECREF( tmp_args_name_27 );
    if ( tmp_assign_source_170 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_28;
    }
    goto condexpr_end_42;
    condexpr_false_42:;
    tmp_assign_source_170 = PyDict_New();
    condexpr_end_42:;
    assert( tmp_class_creation_14__prepared == NULL );
    tmp_class_creation_14__prepared = tmp_assign_source_170;

    tmp_set_locals = tmp_class_creation_14__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_14);
    locals_dict_14 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_172 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_13_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_172 );
    outline_13_var___module__ = tmp_assign_source_172;

    tmp_assign_source_173 = const_str_digest_2abb66649b32f53ab4a8d9fe7c3bfbb9;
    assert( outline_13_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_173 );
    outline_13_var___doc__ = tmp_assign_source_173;

    tmp_assign_source_174 = const_str_plain_FilterBlock;
    assert( outline_13_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_174 );
    outline_13_var___qualname__ = tmp_assign_source_174;

    tmp_assign_source_175 = const_tuple_str_plain_body_str_plain_filter_tuple;
    assert( outline_13_var_fields == NULL );
    Py_INCREF( tmp_assign_source_175 );
    outline_13_var_fields = tmp_assign_source_175;

    // Tried code:
    tmp_called_name_30 = tmp_class_creation_14__metaclass;

    CHECK_OBJECT( tmp_called_name_30 );
    tmp_args_name_28 = PyTuple_New( 3 );
    tmp_tuple_element_41 = const_str_plain_FilterBlock;
    Py_INCREF( tmp_tuple_element_41 );
    PyTuple_SET_ITEM( tmp_args_name_28, 0, tmp_tuple_element_41 );
    tmp_tuple_element_41 = tmp_class_creation_14__bases;

    CHECK_OBJECT( tmp_tuple_element_41 );
    Py_INCREF( tmp_tuple_element_41 );
    PyTuple_SET_ITEM( tmp_args_name_28, 1, tmp_tuple_element_41 );
    tmp_tuple_element_41 = locals_dict_14;
    Py_INCREF( tmp_tuple_element_41 );
    if ( outline_13_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_41,
            const_str_plain___qualname__,
            outline_13_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_41,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_41,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_28 );
        Py_DECREF( tmp_tuple_element_41 );

        exception_lineno = 335;

        goto try_except_handler_29;
    }
    if ( outline_13_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_41,
            const_str_plain___module__,
            outline_13_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_41,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_41,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_28 );
        Py_DECREF( tmp_tuple_element_41 );

        exception_lineno = 335;

        goto try_except_handler_29;
    }
    if ( outline_13_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_41,
            const_str_plain___doc__,
            outline_13_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_41,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_41,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_28 );
        Py_DECREF( tmp_tuple_element_41 );

        exception_lineno = 335;

        goto try_except_handler_29;
    }
    if ( outline_13_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_41,
            const_str_plain_fields,
            outline_13_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_41,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_41,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_28 );
        Py_DECREF( tmp_tuple_element_41 );

        exception_lineno = 335;

        goto try_except_handler_29;
    }
    PyTuple_SET_ITEM( tmp_args_name_28, 2, tmp_tuple_element_41 );
    tmp_kw_name_28 = tmp_class_creation_14__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_28 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 335;
    tmp_assign_source_176 = CALL_FUNCTION( tmp_called_name_30, tmp_args_name_28, tmp_kw_name_28 );
    Py_DECREF( tmp_args_name_28 );
    if ( tmp_assign_source_176 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 335;

        goto try_except_handler_29;
    }
    assert( outline_13_var___class__ == NULL );
    outline_13_var___class__ = tmp_assign_source_176;

    tmp_outline_return_value_14 = outline_13_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_14 );
    Py_INCREF( tmp_outline_return_value_14 );
    goto try_return_handler_29;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_29:;
    CHECK_OBJECT( (PyObject *)outline_13_var___class__ );
    Py_DECREF( outline_13_var___class__ );
    outline_13_var___class__ = NULL;

    Py_XDECREF( outline_13_var___qualname__ );
    outline_13_var___qualname__ = NULL;

    Py_XDECREF( outline_13_var___module__ );
    outline_13_var___module__ = NULL;

    Py_XDECREF( outline_13_var___doc__ );
    outline_13_var___doc__ = NULL;

    Py_XDECREF( outline_13_var_fields );
    outline_13_var_fields = NULL;

    goto outline_result_14;
    // Exception handler code:
    try_except_handler_29:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_13_var___qualname__ );
    outline_13_var___qualname__ = NULL;

    Py_XDECREF( outline_13_var___module__ );
    outline_13_var___module__ = NULL;

    Py_XDECREF( outline_13_var___doc__ );
    outline_13_var___doc__ = NULL;

    Py_XDECREF( outline_13_var_fields );
    outline_13_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_28;
    exception_value = exception_keeper_value_28;
    exception_tb = exception_keeper_tb_28;
    exception_lineno = exception_keeper_lineno_28;

    goto outline_exception_14;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_14:;
    exception_lineno = 335;
    goto try_except_handler_28;
    outline_result_14:;
    tmp_assign_source_171 = tmp_outline_return_value_14;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_FilterBlock, tmp_assign_source_171 );
    goto try_end_15;
    // Exception handler code:
    try_except_handler_28:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    Py_XDECREF( tmp_class_creation_14__class_decl_dict );
    tmp_class_creation_14__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_14__prepared );
    tmp_class_creation_14__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    Py_XDECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    Py_XDECREF( tmp_class_creation_14__class_decl_dict );
    tmp_class_creation_14__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_14__prepared );
    tmp_class_creation_14__prepared = NULL;

    // Tried code:
    tmp_assign_source_177 = PyTuple_New( 1 );
    tmp_tuple_element_42 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_42 == NULL ))
    {
        tmp_tuple_element_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_42 == NULL )
    {
        Py_DECREF( tmp_assign_source_177 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 340;

        goto try_except_handler_30;
    }

    Py_INCREF( tmp_tuple_element_42 );
    PyTuple_SET_ITEM( tmp_assign_source_177, 0, tmp_tuple_element_42 );
    assert( tmp_class_creation_15__bases == NULL );
    tmp_class_creation_15__bases = tmp_assign_source_177;

    tmp_assign_source_178 = PyDict_New();
    assert( tmp_class_creation_15__class_decl_dict == NULL );
    tmp_class_creation_15__class_decl_dict = tmp_assign_source_178;

    tmp_compare_left_29 = const_str_plain_metaclass;
    tmp_compare_right_29 = tmp_class_creation_15__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_29 );
    tmp_cmp_In_29 = PySequence_Contains( tmp_compare_right_29, tmp_compare_left_29 );
    assert( !(tmp_cmp_In_29 == -1) );
    if ( tmp_cmp_In_29 == 1 )
    {
        goto condexpr_true_43;
    }
    else
    {
        goto condexpr_false_43;
    }
    condexpr_true_43:;
    tmp_dict_name_15 = tmp_class_creation_15__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_15 );
    tmp_key_name_15 = const_str_plain_metaclass;
    tmp_metaclass_name_15 = DICT_GET_ITEM( tmp_dict_name_15, tmp_key_name_15 );
    if ( tmp_metaclass_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_30;
    }
    goto condexpr_end_43;
    condexpr_false_43:;
    tmp_cond_value_15 = tmp_class_creation_15__bases;

    CHECK_OBJECT( tmp_cond_value_15 );
    tmp_cond_truth_15 = CHECK_IF_TRUE( tmp_cond_value_15 );
    if ( tmp_cond_truth_15 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_30;
    }
    if ( tmp_cond_truth_15 == 1 )
    {
        goto condexpr_true_44;
    }
    else
    {
        goto condexpr_false_44;
    }
    condexpr_true_44:;
    tmp_subscribed_name_15 = tmp_class_creation_15__bases;

    CHECK_OBJECT( tmp_subscribed_name_15 );
    tmp_subscript_name_15 = const_int_0;
    tmp_type_arg_15 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
    if ( tmp_type_arg_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_30;
    }
    tmp_metaclass_name_15 = BUILTIN_TYPE1( tmp_type_arg_15 );
    Py_DECREF( tmp_type_arg_15 );
    if ( tmp_metaclass_name_15 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_30;
    }
    goto condexpr_end_44;
    condexpr_false_44:;
    tmp_metaclass_name_15 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_15 );
    condexpr_end_44:;
    condexpr_end_43:;
    tmp_bases_name_15 = tmp_class_creation_15__bases;

    CHECK_OBJECT( tmp_bases_name_15 );
    tmp_assign_source_179 = SELECT_METACLASS( tmp_metaclass_name_15, tmp_bases_name_15 );
    if ( tmp_assign_source_179 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_15 );

        exception_lineno = 340;

        goto try_except_handler_30;
    }
    Py_DECREF( tmp_metaclass_name_15 );
    assert( tmp_class_creation_15__metaclass == NULL );
    tmp_class_creation_15__metaclass = tmp_assign_source_179;

    tmp_compare_left_30 = const_str_plain_metaclass;
    tmp_compare_right_30 = tmp_class_creation_15__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_30 );
    tmp_cmp_In_30 = PySequence_Contains( tmp_compare_right_30, tmp_compare_left_30 );
    assert( !(tmp_cmp_In_30 == -1) );
    if ( tmp_cmp_In_30 == 1 )
    {
        goto branch_yes_15;
    }
    else
    {
        goto branch_no_15;
    }
    branch_yes_15:;
    tmp_dictdel_dict = tmp_class_creation_15__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_30;
    }
    branch_no_15:;
    tmp_hasattr_source_15 = tmp_class_creation_15__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_15 );
    tmp_hasattr_attr_15 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_15, tmp_hasattr_attr_15 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_30;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_45;
    }
    else
    {
        goto condexpr_false_45;
    }
    condexpr_true_45:;
    tmp_source_name_34 = tmp_class_creation_15__metaclass;

    CHECK_OBJECT( tmp_source_name_34 );
    tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain___prepare__ );
    if ( tmp_called_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_30;
    }
    tmp_args_name_29 = PyTuple_New( 2 );
    tmp_tuple_element_43 = const_str_plain_With;
    Py_INCREF( tmp_tuple_element_43 );
    PyTuple_SET_ITEM( tmp_args_name_29, 0, tmp_tuple_element_43 );
    tmp_tuple_element_43 = tmp_class_creation_15__bases;

    CHECK_OBJECT( tmp_tuple_element_43 );
    Py_INCREF( tmp_tuple_element_43 );
    PyTuple_SET_ITEM( tmp_args_name_29, 1, tmp_tuple_element_43 );
    tmp_kw_name_29 = tmp_class_creation_15__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_29 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 340;
    tmp_assign_source_180 = CALL_FUNCTION( tmp_called_name_31, tmp_args_name_29, tmp_kw_name_29 );
    Py_DECREF( tmp_called_name_31 );
    Py_DECREF( tmp_args_name_29 );
    if ( tmp_assign_source_180 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_30;
    }
    goto condexpr_end_45;
    condexpr_false_45:;
    tmp_assign_source_180 = PyDict_New();
    condexpr_end_45:;
    assert( tmp_class_creation_15__prepared == NULL );
    tmp_class_creation_15__prepared = tmp_assign_source_180;

    tmp_set_locals = tmp_class_creation_15__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_15);
    locals_dict_15 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_182 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_14_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_182 );
    outline_14_var___module__ = tmp_assign_source_182;

    tmp_assign_source_183 = const_str_digest_a5be934f62deb29c722cd2af54ba0d8b;
    assert( outline_14_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_183 );
    outline_14_var___doc__ = tmp_assign_source_183;

    tmp_assign_source_184 = const_str_plain_With;
    assert( outline_14_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_184 );
    outline_14_var___qualname__ = tmp_assign_source_184;

    tmp_assign_source_185 = const_tuple_str_plain_targets_str_plain_values_str_plain_body_tuple;
    assert( outline_14_var_fields == NULL );
    Py_INCREF( tmp_assign_source_185 );
    outline_14_var_fields = tmp_assign_source_185;

    // Tried code:
    tmp_called_name_32 = tmp_class_creation_15__metaclass;

    CHECK_OBJECT( tmp_called_name_32 );
    tmp_args_name_30 = PyTuple_New( 3 );
    tmp_tuple_element_44 = const_str_plain_With;
    Py_INCREF( tmp_tuple_element_44 );
    PyTuple_SET_ITEM( tmp_args_name_30, 0, tmp_tuple_element_44 );
    tmp_tuple_element_44 = tmp_class_creation_15__bases;

    CHECK_OBJECT( tmp_tuple_element_44 );
    Py_INCREF( tmp_tuple_element_44 );
    PyTuple_SET_ITEM( tmp_args_name_30, 1, tmp_tuple_element_44 );
    tmp_tuple_element_44 = locals_dict_15;
    Py_INCREF( tmp_tuple_element_44 );
    if ( outline_14_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_44,
            const_str_plain___qualname__,
            outline_14_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_44,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_44,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_30 );
        Py_DECREF( tmp_tuple_element_44 );

        exception_lineno = 340;

        goto try_except_handler_31;
    }
    if ( outline_14_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_44,
            const_str_plain___module__,
            outline_14_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_44,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_44,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_30 );
        Py_DECREF( tmp_tuple_element_44 );

        exception_lineno = 340;

        goto try_except_handler_31;
    }
    if ( outline_14_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_44,
            const_str_plain___doc__,
            outline_14_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_44,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_44,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_30 );
        Py_DECREF( tmp_tuple_element_44 );

        exception_lineno = 340;

        goto try_except_handler_31;
    }
    if ( outline_14_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_44,
            const_str_plain_fields,
            outline_14_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_44,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_44,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_30 );
        Py_DECREF( tmp_tuple_element_44 );

        exception_lineno = 340;

        goto try_except_handler_31;
    }
    PyTuple_SET_ITEM( tmp_args_name_30, 2, tmp_tuple_element_44 );
    tmp_kw_name_30 = tmp_class_creation_15__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_30 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 340;
    tmp_assign_source_186 = CALL_FUNCTION( tmp_called_name_32, tmp_args_name_30, tmp_kw_name_30 );
    Py_DECREF( tmp_args_name_30 );
    if ( tmp_assign_source_186 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 340;

        goto try_except_handler_31;
    }
    assert( outline_14_var___class__ == NULL );
    outline_14_var___class__ = tmp_assign_source_186;

    tmp_outline_return_value_15 = outline_14_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_15 );
    Py_INCREF( tmp_outline_return_value_15 );
    goto try_return_handler_31;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_31:;
    CHECK_OBJECT( (PyObject *)outline_14_var___class__ );
    Py_DECREF( outline_14_var___class__ );
    outline_14_var___class__ = NULL;

    Py_XDECREF( outline_14_var___qualname__ );
    outline_14_var___qualname__ = NULL;

    Py_XDECREF( outline_14_var___module__ );
    outline_14_var___module__ = NULL;

    Py_XDECREF( outline_14_var___doc__ );
    outline_14_var___doc__ = NULL;

    Py_XDECREF( outline_14_var_fields );
    outline_14_var_fields = NULL;

    goto outline_result_15;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_14_var___qualname__ );
    outline_14_var___qualname__ = NULL;

    Py_XDECREF( outline_14_var___module__ );
    outline_14_var___module__ = NULL;

    Py_XDECREF( outline_14_var___doc__ );
    outline_14_var___doc__ = NULL;

    Py_XDECREF( outline_14_var_fields );
    outline_14_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_30;
    exception_value = exception_keeper_value_30;
    exception_tb = exception_keeper_tb_30;
    exception_lineno = exception_keeper_lineno_30;

    goto outline_exception_15;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_15:;
    exception_lineno = 340;
    goto try_except_handler_30;
    outline_result_15:;
    tmp_assign_source_181 = tmp_outline_return_value_15;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_With, tmp_assign_source_181 );
    goto try_end_16;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_keeper_lineno_31 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_15__bases );
    tmp_class_creation_15__bases = NULL;

    Py_XDECREF( tmp_class_creation_15__class_decl_dict );
    tmp_class_creation_15__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_15__metaclass );
    tmp_class_creation_15__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_15__prepared );
    tmp_class_creation_15__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_31;
    exception_value = exception_keeper_value_31;
    exception_tb = exception_keeper_tb_31;
    exception_lineno = exception_keeper_lineno_31;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    Py_XDECREF( tmp_class_creation_15__bases );
    tmp_class_creation_15__bases = NULL;

    Py_XDECREF( tmp_class_creation_15__class_decl_dict );
    tmp_class_creation_15__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_15__metaclass );
    tmp_class_creation_15__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_15__prepared );
    tmp_class_creation_15__prepared = NULL;

    // Tried code:
    tmp_assign_source_187 = PyTuple_New( 1 );
    tmp_tuple_element_45 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_45 == NULL ))
    {
        tmp_tuple_element_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_45 == NULL )
    {
        Py_DECREF( tmp_assign_source_187 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 349;

        goto try_except_handler_32;
    }

    Py_INCREF( tmp_tuple_element_45 );
    PyTuple_SET_ITEM( tmp_assign_source_187, 0, tmp_tuple_element_45 );
    assert( tmp_class_creation_16__bases == NULL );
    tmp_class_creation_16__bases = tmp_assign_source_187;

    tmp_assign_source_188 = PyDict_New();
    assert( tmp_class_creation_16__class_decl_dict == NULL );
    tmp_class_creation_16__class_decl_dict = tmp_assign_source_188;

    tmp_compare_left_31 = const_str_plain_metaclass;
    tmp_compare_right_31 = tmp_class_creation_16__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_31 );
    tmp_cmp_In_31 = PySequence_Contains( tmp_compare_right_31, tmp_compare_left_31 );
    assert( !(tmp_cmp_In_31 == -1) );
    if ( tmp_cmp_In_31 == 1 )
    {
        goto condexpr_true_46;
    }
    else
    {
        goto condexpr_false_46;
    }
    condexpr_true_46:;
    tmp_dict_name_16 = tmp_class_creation_16__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_16 );
    tmp_key_name_16 = const_str_plain_metaclass;
    tmp_metaclass_name_16 = DICT_GET_ITEM( tmp_dict_name_16, tmp_key_name_16 );
    if ( tmp_metaclass_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_32;
    }
    goto condexpr_end_46;
    condexpr_false_46:;
    tmp_cond_value_16 = tmp_class_creation_16__bases;

    CHECK_OBJECT( tmp_cond_value_16 );
    tmp_cond_truth_16 = CHECK_IF_TRUE( tmp_cond_value_16 );
    if ( tmp_cond_truth_16 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_32;
    }
    if ( tmp_cond_truth_16 == 1 )
    {
        goto condexpr_true_47;
    }
    else
    {
        goto condexpr_false_47;
    }
    condexpr_true_47:;
    tmp_subscribed_name_16 = tmp_class_creation_16__bases;

    CHECK_OBJECT( tmp_subscribed_name_16 );
    tmp_subscript_name_16 = const_int_0;
    tmp_type_arg_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
    if ( tmp_type_arg_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_32;
    }
    tmp_metaclass_name_16 = BUILTIN_TYPE1( tmp_type_arg_16 );
    Py_DECREF( tmp_type_arg_16 );
    if ( tmp_metaclass_name_16 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_32;
    }
    goto condexpr_end_47;
    condexpr_false_47:;
    tmp_metaclass_name_16 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_16 );
    condexpr_end_47:;
    condexpr_end_46:;
    tmp_bases_name_16 = tmp_class_creation_16__bases;

    CHECK_OBJECT( tmp_bases_name_16 );
    tmp_assign_source_189 = SELECT_METACLASS( tmp_metaclass_name_16, tmp_bases_name_16 );
    if ( tmp_assign_source_189 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_16 );

        exception_lineno = 349;

        goto try_except_handler_32;
    }
    Py_DECREF( tmp_metaclass_name_16 );
    assert( tmp_class_creation_16__metaclass == NULL );
    tmp_class_creation_16__metaclass = tmp_assign_source_189;

    tmp_compare_left_32 = const_str_plain_metaclass;
    tmp_compare_right_32 = tmp_class_creation_16__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_32 );
    tmp_cmp_In_32 = PySequence_Contains( tmp_compare_right_32, tmp_compare_left_32 );
    assert( !(tmp_cmp_In_32 == -1) );
    if ( tmp_cmp_In_32 == 1 )
    {
        goto branch_yes_16;
    }
    else
    {
        goto branch_no_16;
    }
    branch_yes_16:;
    tmp_dictdel_dict = tmp_class_creation_16__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_32;
    }
    branch_no_16:;
    tmp_hasattr_source_16 = tmp_class_creation_16__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_16 );
    tmp_hasattr_attr_16 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_16, tmp_hasattr_attr_16 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_32;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_48;
    }
    else
    {
        goto condexpr_false_48;
    }
    condexpr_true_48:;
    tmp_source_name_35 = tmp_class_creation_16__metaclass;

    CHECK_OBJECT( tmp_source_name_35 );
    tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain___prepare__ );
    if ( tmp_called_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_32;
    }
    tmp_args_name_31 = PyTuple_New( 2 );
    tmp_tuple_element_46 = const_str_plain_Block;
    Py_INCREF( tmp_tuple_element_46 );
    PyTuple_SET_ITEM( tmp_args_name_31, 0, tmp_tuple_element_46 );
    tmp_tuple_element_46 = tmp_class_creation_16__bases;

    CHECK_OBJECT( tmp_tuple_element_46 );
    Py_INCREF( tmp_tuple_element_46 );
    PyTuple_SET_ITEM( tmp_args_name_31, 1, tmp_tuple_element_46 );
    tmp_kw_name_31 = tmp_class_creation_16__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_31 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 349;
    tmp_assign_source_190 = CALL_FUNCTION( tmp_called_name_33, tmp_args_name_31, tmp_kw_name_31 );
    Py_DECREF( tmp_called_name_33 );
    Py_DECREF( tmp_args_name_31 );
    if ( tmp_assign_source_190 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_32;
    }
    goto condexpr_end_48;
    condexpr_false_48:;
    tmp_assign_source_190 = PyDict_New();
    condexpr_end_48:;
    assert( tmp_class_creation_16__prepared == NULL );
    tmp_class_creation_16__prepared = tmp_assign_source_190;

    tmp_set_locals = tmp_class_creation_16__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_16);
    locals_dict_16 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_192 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_15_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_192 );
    outline_15_var___module__ = tmp_assign_source_192;

    tmp_assign_source_193 = const_str_digest_747f6d8e7ff5bcadb3c43747302ef158;
    assert( outline_15_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_193 );
    outline_15_var___doc__ = tmp_assign_source_193;

    tmp_assign_source_194 = const_str_plain_Block;
    assert( outline_15_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_194 );
    outline_15_var___qualname__ = tmp_assign_source_194;

    tmp_assign_source_195 = const_tuple_str_plain_name_str_plain_body_str_plain_scoped_tuple;
    assert( outline_15_var_fields == NULL );
    Py_INCREF( tmp_assign_source_195 );
    outline_15_var_fields = tmp_assign_source_195;

    // Tried code:
    tmp_called_name_34 = tmp_class_creation_16__metaclass;

    CHECK_OBJECT( tmp_called_name_34 );
    tmp_args_name_32 = PyTuple_New( 3 );
    tmp_tuple_element_47 = const_str_plain_Block;
    Py_INCREF( tmp_tuple_element_47 );
    PyTuple_SET_ITEM( tmp_args_name_32, 0, tmp_tuple_element_47 );
    tmp_tuple_element_47 = tmp_class_creation_16__bases;

    CHECK_OBJECT( tmp_tuple_element_47 );
    Py_INCREF( tmp_tuple_element_47 );
    PyTuple_SET_ITEM( tmp_args_name_32, 1, tmp_tuple_element_47 );
    tmp_tuple_element_47 = locals_dict_16;
    Py_INCREF( tmp_tuple_element_47 );
    if ( outline_15_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_47,
            const_str_plain___qualname__,
            outline_15_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_47,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_47,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_32 );
        Py_DECREF( tmp_tuple_element_47 );

        exception_lineno = 349;

        goto try_except_handler_33;
    }
    if ( outline_15_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_47,
            const_str_plain___module__,
            outline_15_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_47,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_47,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_32 );
        Py_DECREF( tmp_tuple_element_47 );

        exception_lineno = 349;

        goto try_except_handler_33;
    }
    if ( outline_15_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_47,
            const_str_plain___doc__,
            outline_15_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_47,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_47,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_32 );
        Py_DECREF( tmp_tuple_element_47 );

        exception_lineno = 349;

        goto try_except_handler_33;
    }
    if ( outline_15_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_47,
            const_str_plain_fields,
            outline_15_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_47,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_47,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_32 );
        Py_DECREF( tmp_tuple_element_47 );

        exception_lineno = 349;

        goto try_except_handler_33;
    }
    PyTuple_SET_ITEM( tmp_args_name_32, 2, tmp_tuple_element_47 );
    tmp_kw_name_32 = tmp_class_creation_16__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_32 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 349;
    tmp_assign_source_196 = CALL_FUNCTION( tmp_called_name_34, tmp_args_name_32, tmp_kw_name_32 );
    Py_DECREF( tmp_args_name_32 );
    if ( tmp_assign_source_196 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 349;

        goto try_except_handler_33;
    }
    assert( outline_15_var___class__ == NULL );
    outline_15_var___class__ = tmp_assign_source_196;

    tmp_outline_return_value_16 = outline_15_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_16 );
    Py_INCREF( tmp_outline_return_value_16 );
    goto try_return_handler_33;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_33:;
    CHECK_OBJECT( (PyObject *)outline_15_var___class__ );
    Py_DECREF( outline_15_var___class__ );
    outline_15_var___class__ = NULL;

    Py_XDECREF( outline_15_var___qualname__ );
    outline_15_var___qualname__ = NULL;

    Py_XDECREF( outline_15_var___module__ );
    outline_15_var___module__ = NULL;

    Py_XDECREF( outline_15_var___doc__ );
    outline_15_var___doc__ = NULL;

    Py_XDECREF( outline_15_var_fields );
    outline_15_var_fields = NULL;

    goto outline_result_16;
    // Exception handler code:
    try_except_handler_33:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_keeper_lineno_32 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_15_var___qualname__ );
    outline_15_var___qualname__ = NULL;

    Py_XDECREF( outline_15_var___module__ );
    outline_15_var___module__ = NULL;

    Py_XDECREF( outline_15_var___doc__ );
    outline_15_var___doc__ = NULL;

    Py_XDECREF( outline_15_var_fields );
    outline_15_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_32;
    exception_value = exception_keeper_value_32;
    exception_tb = exception_keeper_tb_32;
    exception_lineno = exception_keeper_lineno_32;

    goto outline_exception_16;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_16:;
    exception_lineno = 349;
    goto try_except_handler_32;
    outline_result_16:;
    tmp_assign_source_191 = tmp_outline_return_value_16;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Block, tmp_assign_source_191 );
    goto try_end_17;
    // Exception handler code:
    try_except_handler_32:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_keeper_lineno_33 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_16__bases );
    tmp_class_creation_16__bases = NULL;

    Py_XDECREF( tmp_class_creation_16__class_decl_dict );
    tmp_class_creation_16__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_16__metaclass );
    tmp_class_creation_16__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_16__prepared );
    tmp_class_creation_16__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_33;
    exception_value = exception_keeper_value_33;
    exception_tb = exception_keeper_tb_33;
    exception_lineno = exception_keeper_lineno_33;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    Py_XDECREF( tmp_class_creation_16__bases );
    tmp_class_creation_16__bases = NULL;

    Py_XDECREF( tmp_class_creation_16__class_decl_dict );
    tmp_class_creation_16__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_16__metaclass );
    tmp_class_creation_16__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_16__prepared );
    tmp_class_creation_16__prepared = NULL;

    // Tried code:
    tmp_assign_source_197 = PyTuple_New( 1 );
    tmp_tuple_element_48 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_48 == NULL ))
    {
        tmp_tuple_element_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_48 == NULL )
    {
        Py_DECREF( tmp_assign_source_197 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 354;

        goto try_except_handler_34;
    }

    Py_INCREF( tmp_tuple_element_48 );
    PyTuple_SET_ITEM( tmp_assign_source_197, 0, tmp_tuple_element_48 );
    assert( tmp_class_creation_17__bases == NULL );
    tmp_class_creation_17__bases = tmp_assign_source_197;

    tmp_assign_source_198 = PyDict_New();
    assert( tmp_class_creation_17__class_decl_dict == NULL );
    tmp_class_creation_17__class_decl_dict = tmp_assign_source_198;

    tmp_compare_left_33 = const_str_plain_metaclass;
    tmp_compare_right_33 = tmp_class_creation_17__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_33 );
    tmp_cmp_In_33 = PySequence_Contains( tmp_compare_right_33, tmp_compare_left_33 );
    assert( !(tmp_cmp_In_33 == -1) );
    if ( tmp_cmp_In_33 == 1 )
    {
        goto condexpr_true_49;
    }
    else
    {
        goto condexpr_false_49;
    }
    condexpr_true_49:;
    tmp_dict_name_17 = tmp_class_creation_17__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_17 );
    tmp_key_name_17 = const_str_plain_metaclass;
    tmp_metaclass_name_17 = DICT_GET_ITEM( tmp_dict_name_17, tmp_key_name_17 );
    if ( tmp_metaclass_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_34;
    }
    goto condexpr_end_49;
    condexpr_false_49:;
    tmp_cond_value_17 = tmp_class_creation_17__bases;

    CHECK_OBJECT( tmp_cond_value_17 );
    tmp_cond_truth_17 = CHECK_IF_TRUE( tmp_cond_value_17 );
    if ( tmp_cond_truth_17 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_34;
    }
    if ( tmp_cond_truth_17 == 1 )
    {
        goto condexpr_true_50;
    }
    else
    {
        goto condexpr_false_50;
    }
    condexpr_true_50:;
    tmp_subscribed_name_17 = tmp_class_creation_17__bases;

    CHECK_OBJECT( tmp_subscribed_name_17 );
    tmp_subscript_name_17 = const_int_0;
    tmp_type_arg_17 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
    if ( tmp_type_arg_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_34;
    }
    tmp_metaclass_name_17 = BUILTIN_TYPE1( tmp_type_arg_17 );
    Py_DECREF( tmp_type_arg_17 );
    if ( tmp_metaclass_name_17 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_34;
    }
    goto condexpr_end_50;
    condexpr_false_50:;
    tmp_metaclass_name_17 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_17 );
    condexpr_end_50:;
    condexpr_end_49:;
    tmp_bases_name_17 = tmp_class_creation_17__bases;

    CHECK_OBJECT( tmp_bases_name_17 );
    tmp_assign_source_199 = SELECT_METACLASS( tmp_metaclass_name_17, tmp_bases_name_17 );
    if ( tmp_assign_source_199 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_17 );

        exception_lineno = 354;

        goto try_except_handler_34;
    }
    Py_DECREF( tmp_metaclass_name_17 );
    assert( tmp_class_creation_17__metaclass == NULL );
    tmp_class_creation_17__metaclass = tmp_assign_source_199;

    tmp_compare_left_34 = const_str_plain_metaclass;
    tmp_compare_right_34 = tmp_class_creation_17__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_34 );
    tmp_cmp_In_34 = PySequence_Contains( tmp_compare_right_34, tmp_compare_left_34 );
    assert( !(tmp_cmp_In_34 == -1) );
    if ( tmp_cmp_In_34 == 1 )
    {
        goto branch_yes_17;
    }
    else
    {
        goto branch_no_17;
    }
    branch_yes_17:;
    tmp_dictdel_dict = tmp_class_creation_17__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_34;
    }
    branch_no_17:;
    tmp_hasattr_source_17 = tmp_class_creation_17__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_17 );
    tmp_hasattr_attr_17 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_17, tmp_hasattr_attr_17 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_34;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_51;
    }
    else
    {
        goto condexpr_false_51;
    }
    condexpr_true_51:;
    tmp_source_name_36 = tmp_class_creation_17__metaclass;

    CHECK_OBJECT( tmp_source_name_36 );
    tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain___prepare__ );
    if ( tmp_called_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_34;
    }
    tmp_args_name_33 = PyTuple_New( 2 );
    tmp_tuple_element_49 = const_str_plain_Include;
    Py_INCREF( tmp_tuple_element_49 );
    PyTuple_SET_ITEM( tmp_args_name_33, 0, tmp_tuple_element_49 );
    tmp_tuple_element_49 = tmp_class_creation_17__bases;

    CHECK_OBJECT( tmp_tuple_element_49 );
    Py_INCREF( tmp_tuple_element_49 );
    PyTuple_SET_ITEM( tmp_args_name_33, 1, tmp_tuple_element_49 );
    tmp_kw_name_33 = tmp_class_creation_17__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_33 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 354;
    tmp_assign_source_200 = CALL_FUNCTION( tmp_called_name_35, tmp_args_name_33, tmp_kw_name_33 );
    Py_DECREF( tmp_called_name_35 );
    Py_DECREF( tmp_args_name_33 );
    if ( tmp_assign_source_200 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_34;
    }
    goto condexpr_end_51;
    condexpr_false_51:;
    tmp_assign_source_200 = PyDict_New();
    condexpr_end_51:;
    assert( tmp_class_creation_17__prepared == NULL );
    tmp_class_creation_17__prepared = tmp_assign_source_200;

    tmp_set_locals = tmp_class_creation_17__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_17);
    locals_dict_17 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_202 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_16_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_202 );
    outline_16_var___module__ = tmp_assign_source_202;

    tmp_assign_source_203 = const_str_digest_96fde943d01e256398bbf1b6ca455873;
    assert( outline_16_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_203 );
    outline_16_var___doc__ = tmp_assign_source_203;

    tmp_assign_source_204 = const_str_plain_Include;
    assert( outline_16_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_204 );
    outline_16_var___qualname__ = tmp_assign_source_204;

    tmp_assign_source_205 = const_tuple_c11ac06eac59c9675cae026ca38f9276_tuple;
    assert( outline_16_var_fields == NULL );
    Py_INCREF( tmp_assign_source_205 );
    outline_16_var_fields = tmp_assign_source_205;

    // Tried code:
    tmp_called_name_36 = tmp_class_creation_17__metaclass;

    CHECK_OBJECT( tmp_called_name_36 );
    tmp_args_name_34 = PyTuple_New( 3 );
    tmp_tuple_element_50 = const_str_plain_Include;
    Py_INCREF( tmp_tuple_element_50 );
    PyTuple_SET_ITEM( tmp_args_name_34, 0, tmp_tuple_element_50 );
    tmp_tuple_element_50 = tmp_class_creation_17__bases;

    CHECK_OBJECT( tmp_tuple_element_50 );
    Py_INCREF( tmp_tuple_element_50 );
    PyTuple_SET_ITEM( tmp_args_name_34, 1, tmp_tuple_element_50 );
    tmp_tuple_element_50 = locals_dict_17;
    Py_INCREF( tmp_tuple_element_50 );
    if ( outline_16_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_50,
            const_str_plain___qualname__,
            outline_16_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_50,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_50,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_34 );
        Py_DECREF( tmp_tuple_element_50 );

        exception_lineno = 354;

        goto try_except_handler_35;
    }
    if ( outline_16_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_50,
            const_str_plain___module__,
            outline_16_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_50,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_50,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_34 );
        Py_DECREF( tmp_tuple_element_50 );

        exception_lineno = 354;

        goto try_except_handler_35;
    }
    if ( outline_16_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_50,
            const_str_plain___doc__,
            outline_16_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_50,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_50,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_34 );
        Py_DECREF( tmp_tuple_element_50 );

        exception_lineno = 354;

        goto try_except_handler_35;
    }
    if ( outline_16_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_50,
            const_str_plain_fields,
            outline_16_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_50,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_50,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_34 );
        Py_DECREF( tmp_tuple_element_50 );

        exception_lineno = 354;

        goto try_except_handler_35;
    }
    PyTuple_SET_ITEM( tmp_args_name_34, 2, tmp_tuple_element_50 );
    tmp_kw_name_34 = tmp_class_creation_17__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_34 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 354;
    tmp_assign_source_206 = CALL_FUNCTION( tmp_called_name_36, tmp_args_name_34, tmp_kw_name_34 );
    Py_DECREF( tmp_args_name_34 );
    if ( tmp_assign_source_206 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 354;

        goto try_except_handler_35;
    }
    assert( outline_16_var___class__ == NULL );
    outline_16_var___class__ = tmp_assign_source_206;

    tmp_outline_return_value_17 = outline_16_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_17 );
    Py_INCREF( tmp_outline_return_value_17 );
    goto try_return_handler_35;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_35:;
    CHECK_OBJECT( (PyObject *)outline_16_var___class__ );
    Py_DECREF( outline_16_var___class__ );
    outline_16_var___class__ = NULL;

    Py_XDECREF( outline_16_var___qualname__ );
    outline_16_var___qualname__ = NULL;

    Py_XDECREF( outline_16_var___module__ );
    outline_16_var___module__ = NULL;

    Py_XDECREF( outline_16_var___doc__ );
    outline_16_var___doc__ = NULL;

    Py_XDECREF( outline_16_var_fields );
    outline_16_var_fields = NULL;

    goto outline_result_17;
    // Exception handler code:
    try_except_handler_35:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_keeper_lineno_34 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_16_var___qualname__ );
    outline_16_var___qualname__ = NULL;

    Py_XDECREF( outline_16_var___module__ );
    outline_16_var___module__ = NULL;

    Py_XDECREF( outline_16_var___doc__ );
    outline_16_var___doc__ = NULL;

    Py_XDECREF( outline_16_var_fields );
    outline_16_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_34;
    exception_value = exception_keeper_value_34;
    exception_tb = exception_keeper_tb_34;
    exception_lineno = exception_keeper_lineno_34;

    goto outline_exception_17;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_17:;
    exception_lineno = 354;
    goto try_except_handler_34;
    outline_result_17:;
    tmp_assign_source_201 = tmp_outline_return_value_17;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Include, tmp_assign_source_201 );
    goto try_end_18;
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_keeper_lineno_35 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_17__bases );
    tmp_class_creation_17__bases = NULL;

    Py_XDECREF( tmp_class_creation_17__class_decl_dict );
    tmp_class_creation_17__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_17__metaclass );
    tmp_class_creation_17__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_17__prepared );
    tmp_class_creation_17__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_35;
    exception_value = exception_keeper_value_35;
    exception_tb = exception_keeper_tb_35;
    exception_lineno = exception_keeper_lineno_35;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    Py_XDECREF( tmp_class_creation_17__bases );
    tmp_class_creation_17__bases = NULL;

    Py_XDECREF( tmp_class_creation_17__class_decl_dict );
    tmp_class_creation_17__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_17__metaclass );
    tmp_class_creation_17__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_17__prepared );
    tmp_class_creation_17__prepared = NULL;

    // Tried code:
    tmp_assign_source_207 = PyTuple_New( 1 );
    tmp_tuple_element_51 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_51 == NULL ))
    {
        tmp_tuple_element_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_51 == NULL )
    {
        Py_DECREF( tmp_assign_source_207 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 359;

        goto try_except_handler_36;
    }

    Py_INCREF( tmp_tuple_element_51 );
    PyTuple_SET_ITEM( tmp_assign_source_207, 0, tmp_tuple_element_51 );
    assert( tmp_class_creation_18__bases == NULL );
    tmp_class_creation_18__bases = tmp_assign_source_207;

    tmp_assign_source_208 = PyDict_New();
    assert( tmp_class_creation_18__class_decl_dict == NULL );
    tmp_class_creation_18__class_decl_dict = tmp_assign_source_208;

    tmp_compare_left_35 = const_str_plain_metaclass;
    tmp_compare_right_35 = tmp_class_creation_18__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_35 );
    tmp_cmp_In_35 = PySequence_Contains( tmp_compare_right_35, tmp_compare_left_35 );
    assert( !(tmp_cmp_In_35 == -1) );
    if ( tmp_cmp_In_35 == 1 )
    {
        goto condexpr_true_52;
    }
    else
    {
        goto condexpr_false_52;
    }
    condexpr_true_52:;
    tmp_dict_name_18 = tmp_class_creation_18__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_18 );
    tmp_key_name_18 = const_str_plain_metaclass;
    tmp_metaclass_name_18 = DICT_GET_ITEM( tmp_dict_name_18, tmp_key_name_18 );
    if ( tmp_metaclass_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_36;
    }
    goto condexpr_end_52;
    condexpr_false_52:;
    tmp_cond_value_18 = tmp_class_creation_18__bases;

    CHECK_OBJECT( tmp_cond_value_18 );
    tmp_cond_truth_18 = CHECK_IF_TRUE( tmp_cond_value_18 );
    if ( tmp_cond_truth_18 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_36;
    }
    if ( tmp_cond_truth_18 == 1 )
    {
        goto condexpr_true_53;
    }
    else
    {
        goto condexpr_false_53;
    }
    condexpr_true_53:;
    tmp_subscribed_name_18 = tmp_class_creation_18__bases;

    CHECK_OBJECT( tmp_subscribed_name_18 );
    tmp_subscript_name_18 = const_int_0;
    tmp_type_arg_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
    if ( tmp_type_arg_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_36;
    }
    tmp_metaclass_name_18 = BUILTIN_TYPE1( tmp_type_arg_18 );
    Py_DECREF( tmp_type_arg_18 );
    if ( tmp_metaclass_name_18 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_36;
    }
    goto condexpr_end_53;
    condexpr_false_53:;
    tmp_metaclass_name_18 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_18 );
    condexpr_end_53:;
    condexpr_end_52:;
    tmp_bases_name_18 = tmp_class_creation_18__bases;

    CHECK_OBJECT( tmp_bases_name_18 );
    tmp_assign_source_209 = SELECT_METACLASS( tmp_metaclass_name_18, tmp_bases_name_18 );
    if ( tmp_assign_source_209 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_18 );

        exception_lineno = 359;

        goto try_except_handler_36;
    }
    Py_DECREF( tmp_metaclass_name_18 );
    assert( tmp_class_creation_18__metaclass == NULL );
    tmp_class_creation_18__metaclass = tmp_assign_source_209;

    tmp_compare_left_36 = const_str_plain_metaclass;
    tmp_compare_right_36 = tmp_class_creation_18__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_36 );
    tmp_cmp_In_36 = PySequence_Contains( tmp_compare_right_36, tmp_compare_left_36 );
    assert( !(tmp_cmp_In_36 == -1) );
    if ( tmp_cmp_In_36 == 1 )
    {
        goto branch_yes_18;
    }
    else
    {
        goto branch_no_18;
    }
    branch_yes_18:;
    tmp_dictdel_dict = tmp_class_creation_18__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_36;
    }
    branch_no_18:;
    tmp_hasattr_source_18 = tmp_class_creation_18__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_18 );
    tmp_hasattr_attr_18 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_18, tmp_hasattr_attr_18 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_36;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_54;
    }
    else
    {
        goto condexpr_false_54;
    }
    condexpr_true_54:;
    tmp_source_name_37 = tmp_class_creation_18__metaclass;

    CHECK_OBJECT( tmp_source_name_37 );
    tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain___prepare__ );
    if ( tmp_called_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_36;
    }
    tmp_args_name_35 = PyTuple_New( 2 );
    tmp_tuple_element_52 = const_str_plain_Import;
    Py_INCREF( tmp_tuple_element_52 );
    PyTuple_SET_ITEM( tmp_args_name_35, 0, tmp_tuple_element_52 );
    tmp_tuple_element_52 = tmp_class_creation_18__bases;

    CHECK_OBJECT( tmp_tuple_element_52 );
    Py_INCREF( tmp_tuple_element_52 );
    PyTuple_SET_ITEM( tmp_args_name_35, 1, tmp_tuple_element_52 );
    tmp_kw_name_35 = tmp_class_creation_18__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_35 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 359;
    tmp_assign_source_210 = CALL_FUNCTION( tmp_called_name_37, tmp_args_name_35, tmp_kw_name_35 );
    Py_DECREF( tmp_called_name_37 );
    Py_DECREF( tmp_args_name_35 );
    if ( tmp_assign_source_210 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_36;
    }
    goto condexpr_end_54;
    condexpr_false_54:;
    tmp_assign_source_210 = PyDict_New();
    condexpr_end_54:;
    assert( tmp_class_creation_18__prepared == NULL );
    tmp_class_creation_18__prepared = tmp_assign_source_210;

    tmp_set_locals = tmp_class_creation_18__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_18);
    locals_dict_18 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_212 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_17_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_212 );
    outline_17_var___module__ = tmp_assign_source_212;

    tmp_assign_source_213 = const_str_digest_3740cc5eeb1f2781cbc1ef396ea8675f;
    assert( outline_17_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_213 );
    outline_17_var___doc__ = tmp_assign_source_213;

    tmp_assign_source_214 = const_str_plain_Import;
    assert( outline_17_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_214 );
    outline_17_var___qualname__ = tmp_assign_source_214;

    tmp_assign_source_215 = const_tuple_str_plain_template_str_plain_target_str_plain_with_context_tuple;
    assert( outline_17_var_fields == NULL );
    Py_INCREF( tmp_assign_source_215 );
    outline_17_var_fields = tmp_assign_source_215;

    // Tried code:
    tmp_called_name_38 = tmp_class_creation_18__metaclass;

    CHECK_OBJECT( tmp_called_name_38 );
    tmp_args_name_36 = PyTuple_New( 3 );
    tmp_tuple_element_53 = const_str_plain_Import;
    Py_INCREF( tmp_tuple_element_53 );
    PyTuple_SET_ITEM( tmp_args_name_36, 0, tmp_tuple_element_53 );
    tmp_tuple_element_53 = tmp_class_creation_18__bases;

    CHECK_OBJECT( tmp_tuple_element_53 );
    Py_INCREF( tmp_tuple_element_53 );
    PyTuple_SET_ITEM( tmp_args_name_36, 1, tmp_tuple_element_53 );
    tmp_tuple_element_53 = locals_dict_18;
    Py_INCREF( tmp_tuple_element_53 );
    if ( outline_17_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_53,
            const_str_plain___qualname__,
            outline_17_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_53,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_53,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_36 );
        Py_DECREF( tmp_tuple_element_53 );

        exception_lineno = 359;

        goto try_except_handler_37;
    }
    if ( outline_17_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_53,
            const_str_plain___module__,
            outline_17_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_53,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_53,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_36 );
        Py_DECREF( tmp_tuple_element_53 );

        exception_lineno = 359;

        goto try_except_handler_37;
    }
    if ( outline_17_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_53,
            const_str_plain___doc__,
            outline_17_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_53,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_53,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_36 );
        Py_DECREF( tmp_tuple_element_53 );

        exception_lineno = 359;

        goto try_except_handler_37;
    }
    if ( outline_17_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_53,
            const_str_plain_fields,
            outline_17_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_53,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_53,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_36 );
        Py_DECREF( tmp_tuple_element_53 );

        exception_lineno = 359;

        goto try_except_handler_37;
    }
    PyTuple_SET_ITEM( tmp_args_name_36, 2, tmp_tuple_element_53 );
    tmp_kw_name_36 = tmp_class_creation_18__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_36 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 359;
    tmp_assign_source_216 = CALL_FUNCTION( tmp_called_name_38, tmp_args_name_36, tmp_kw_name_36 );
    Py_DECREF( tmp_args_name_36 );
    if ( tmp_assign_source_216 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 359;

        goto try_except_handler_37;
    }
    assert( outline_17_var___class__ == NULL );
    outline_17_var___class__ = tmp_assign_source_216;

    tmp_outline_return_value_18 = outline_17_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_18 );
    Py_INCREF( tmp_outline_return_value_18 );
    goto try_return_handler_37;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_37:;
    CHECK_OBJECT( (PyObject *)outline_17_var___class__ );
    Py_DECREF( outline_17_var___class__ );
    outline_17_var___class__ = NULL;

    Py_XDECREF( outline_17_var___qualname__ );
    outline_17_var___qualname__ = NULL;

    Py_XDECREF( outline_17_var___module__ );
    outline_17_var___module__ = NULL;

    Py_XDECREF( outline_17_var___doc__ );
    outline_17_var___doc__ = NULL;

    Py_XDECREF( outline_17_var_fields );
    outline_17_var_fields = NULL;

    goto outline_result_18;
    // Exception handler code:
    try_except_handler_37:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_keeper_lineno_36 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_17_var___qualname__ );
    outline_17_var___qualname__ = NULL;

    Py_XDECREF( outline_17_var___module__ );
    outline_17_var___module__ = NULL;

    Py_XDECREF( outline_17_var___doc__ );
    outline_17_var___doc__ = NULL;

    Py_XDECREF( outline_17_var_fields );
    outline_17_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_36;
    exception_value = exception_keeper_value_36;
    exception_tb = exception_keeper_tb_36;
    exception_lineno = exception_keeper_lineno_36;

    goto outline_exception_18;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_18:;
    exception_lineno = 359;
    goto try_except_handler_36;
    outline_result_18:;
    tmp_assign_source_211 = tmp_outline_return_value_18;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Import, tmp_assign_source_211 );
    goto try_end_19;
    // Exception handler code:
    try_except_handler_36:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_keeper_lineno_37 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_18__bases );
    tmp_class_creation_18__bases = NULL;

    Py_XDECREF( tmp_class_creation_18__class_decl_dict );
    tmp_class_creation_18__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_18__metaclass );
    tmp_class_creation_18__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_18__prepared );
    tmp_class_creation_18__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_37;
    exception_value = exception_keeper_value_37;
    exception_tb = exception_keeper_tb_37;
    exception_lineno = exception_keeper_lineno_37;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    Py_XDECREF( tmp_class_creation_18__bases );
    tmp_class_creation_18__bases = NULL;

    Py_XDECREF( tmp_class_creation_18__class_decl_dict );
    tmp_class_creation_18__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_18__metaclass );
    tmp_class_creation_18__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_18__prepared );
    tmp_class_creation_18__prepared = NULL;

    // Tried code:
    tmp_assign_source_217 = PyTuple_New( 1 );
    tmp_tuple_element_54 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_54 == NULL ))
    {
        tmp_tuple_element_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_54 == NULL )
    {
        Py_DECREF( tmp_assign_source_217 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 364;

        goto try_except_handler_38;
    }

    Py_INCREF( tmp_tuple_element_54 );
    PyTuple_SET_ITEM( tmp_assign_source_217, 0, tmp_tuple_element_54 );
    assert( tmp_class_creation_19__bases == NULL );
    tmp_class_creation_19__bases = tmp_assign_source_217;

    tmp_assign_source_218 = PyDict_New();
    assert( tmp_class_creation_19__class_decl_dict == NULL );
    tmp_class_creation_19__class_decl_dict = tmp_assign_source_218;

    tmp_compare_left_37 = const_str_plain_metaclass;
    tmp_compare_right_37 = tmp_class_creation_19__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_37 );
    tmp_cmp_In_37 = PySequence_Contains( tmp_compare_right_37, tmp_compare_left_37 );
    assert( !(tmp_cmp_In_37 == -1) );
    if ( tmp_cmp_In_37 == 1 )
    {
        goto condexpr_true_55;
    }
    else
    {
        goto condexpr_false_55;
    }
    condexpr_true_55:;
    tmp_dict_name_19 = tmp_class_creation_19__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_19 );
    tmp_key_name_19 = const_str_plain_metaclass;
    tmp_metaclass_name_19 = DICT_GET_ITEM( tmp_dict_name_19, tmp_key_name_19 );
    if ( tmp_metaclass_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_38;
    }
    goto condexpr_end_55;
    condexpr_false_55:;
    tmp_cond_value_19 = tmp_class_creation_19__bases;

    CHECK_OBJECT( tmp_cond_value_19 );
    tmp_cond_truth_19 = CHECK_IF_TRUE( tmp_cond_value_19 );
    if ( tmp_cond_truth_19 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_38;
    }
    if ( tmp_cond_truth_19 == 1 )
    {
        goto condexpr_true_56;
    }
    else
    {
        goto condexpr_false_56;
    }
    condexpr_true_56:;
    tmp_subscribed_name_19 = tmp_class_creation_19__bases;

    CHECK_OBJECT( tmp_subscribed_name_19 );
    tmp_subscript_name_19 = const_int_0;
    tmp_type_arg_19 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
    if ( tmp_type_arg_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_38;
    }
    tmp_metaclass_name_19 = BUILTIN_TYPE1( tmp_type_arg_19 );
    Py_DECREF( tmp_type_arg_19 );
    if ( tmp_metaclass_name_19 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_38;
    }
    goto condexpr_end_56;
    condexpr_false_56:;
    tmp_metaclass_name_19 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_19 );
    condexpr_end_56:;
    condexpr_end_55:;
    tmp_bases_name_19 = tmp_class_creation_19__bases;

    CHECK_OBJECT( tmp_bases_name_19 );
    tmp_assign_source_219 = SELECT_METACLASS( tmp_metaclass_name_19, tmp_bases_name_19 );
    if ( tmp_assign_source_219 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_19 );

        exception_lineno = 364;

        goto try_except_handler_38;
    }
    Py_DECREF( tmp_metaclass_name_19 );
    assert( tmp_class_creation_19__metaclass == NULL );
    tmp_class_creation_19__metaclass = tmp_assign_source_219;

    tmp_compare_left_38 = const_str_plain_metaclass;
    tmp_compare_right_38 = tmp_class_creation_19__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_38 );
    tmp_cmp_In_38 = PySequence_Contains( tmp_compare_right_38, tmp_compare_left_38 );
    assert( !(tmp_cmp_In_38 == -1) );
    if ( tmp_cmp_In_38 == 1 )
    {
        goto branch_yes_19;
    }
    else
    {
        goto branch_no_19;
    }
    branch_yes_19:;
    tmp_dictdel_dict = tmp_class_creation_19__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_38;
    }
    branch_no_19:;
    tmp_hasattr_source_19 = tmp_class_creation_19__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_19 );
    tmp_hasattr_attr_19 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_19, tmp_hasattr_attr_19 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_38;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_57;
    }
    else
    {
        goto condexpr_false_57;
    }
    condexpr_true_57:;
    tmp_source_name_38 = tmp_class_creation_19__metaclass;

    CHECK_OBJECT( tmp_source_name_38 );
    tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain___prepare__ );
    if ( tmp_called_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_38;
    }
    tmp_args_name_37 = PyTuple_New( 2 );
    tmp_tuple_element_55 = const_str_plain_FromImport;
    Py_INCREF( tmp_tuple_element_55 );
    PyTuple_SET_ITEM( tmp_args_name_37, 0, tmp_tuple_element_55 );
    tmp_tuple_element_55 = tmp_class_creation_19__bases;

    CHECK_OBJECT( tmp_tuple_element_55 );
    Py_INCREF( tmp_tuple_element_55 );
    PyTuple_SET_ITEM( tmp_args_name_37, 1, tmp_tuple_element_55 );
    tmp_kw_name_37 = tmp_class_creation_19__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_37 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 364;
    tmp_assign_source_220 = CALL_FUNCTION( tmp_called_name_39, tmp_args_name_37, tmp_kw_name_37 );
    Py_DECREF( tmp_called_name_39 );
    Py_DECREF( tmp_args_name_37 );
    if ( tmp_assign_source_220 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_38;
    }
    goto condexpr_end_57;
    condexpr_false_57:;
    tmp_assign_source_220 = PyDict_New();
    condexpr_end_57:;
    assert( tmp_class_creation_19__prepared == NULL );
    tmp_class_creation_19__prepared = tmp_assign_source_220;

    tmp_set_locals = tmp_class_creation_19__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_19);
    locals_dict_19 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_222 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_18_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_222 );
    outline_18_var___module__ = tmp_assign_source_222;

    tmp_assign_source_223 = const_str_digest_86f2787df3d43109e652aefde8ba7f0e;
    assert( outline_18_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_223 );
    outline_18_var___doc__ = tmp_assign_source_223;

    tmp_assign_source_224 = const_str_plain_FromImport;
    assert( outline_18_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_224 );
    outline_18_var___qualname__ = tmp_assign_source_224;

    tmp_assign_source_225 = const_tuple_str_plain_template_str_plain_names_str_plain_with_context_tuple;
    assert( outline_18_var_fields == NULL );
    Py_INCREF( tmp_assign_source_225 );
    outline_18_var_fields = tmp_assign_source_225;

    // Tried code:
    tmp_called_name_40 = tmp_class_creation_19__metaclass;

    CHECK_OBJECT( tmp_called_name_40 );
    tmp_args_name_38 = PyTuple_New( 3 );
    tmp_tuple_element_56 = const_str_plain_FromImport;
    Py_INCREF( tmp_tuple_element_56 );
    PyTuple_SET_ITEM( tmp_args_name_38, 0, tmp_tuple_element_56 );
    tmp_tuple_element_56 = tmp_class_creation_19__bases;

    CHECK_OBJECT( tmp_tuple_element_56 );
    Py_INCREF( tmp_tuple_element_56 );
    PyTuple_SET_ITEM( tmp_args_name_38, 1, tmp_tuple_element_56 );
    tmp_tuple_element_56 = locals_dict_19;
    Py_INCREF( tmp_tuple_element_56 );
    if ( outline_18_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_56,
            const_str_plain___qualname__,
            outline_18_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_56,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_56,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_38 );
        Py_DECREF( tmp_tuple_element_56 );

        exception_lineno = 364;

        goto try_except_handler_39;
    }
    if ( outline_18_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_56,
            const_str_plain___module__,
            outline_18_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_56,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_56,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_38 );
        Py_DECREF( tmp_tuple_element_56 );

        exception_lineno = 364;

        goto try_except_handler_39;
    }
    if ( outline_18_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_56,
            const_str_plain___doc__,
            outline_18_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_56,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_56,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_38 );
        Py_DECREF( tmp_tuple_element_56 );

        exception_lineno = 364;

        goto try_except_handler_39;
    }
    if ( outline_18_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_56,
            const_str_plain_fields,
            outline_18_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_56,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_56,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_38 );
        Py_DECREF( tmp_tuple_element_56 );

        exception_lineno = 364;

        goto try_except_handler_39;
    }
    PyTuple_SET_ITEM( tmp_args_name_38, 2, tmp_tuple_element_56 );
    tmp_kw_name_38 = tmp_class_creation_19__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_38 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 364;
    tmp_assign_source_226 = CALL_FUNCTION( tmp_called_name_40, tmp_args_name_38, tmp_kw_name_38 );
    Py_DECREF( tmp_args_name_38 );
    if ( tmp_assign_source_226 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 364;

        goto try_except_handler_39;
    }
    assert( outline_18_var___class__ == NULL );
    outline_18_var___class__ = tmp_assign_source_226;

    tmp_outline_return_value_19 = outline_18_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_19 );
    Py_INCREF( tmp_outline_return_value_19 );
    goto try_return_handler_39;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_39:;
    CHECK_OBJECT( (PyObject *)outline_18_var___class__ );
    Py_DECREF( outline_18_var___class__ );
    outline_18_var___class__ = NULL;

    Py_XDECREF( outline_18_var___qualname__ );
    outline_18_var___qualname__ = NULL;

    Py_XDECREF( outline_18_var___module__ );
    outline_18_var___module__ = NULL;

    Py_XDECREF( outline_18_var___doc__ );
    outline_18_var___doc__ = NULL;

    Py_XDECREF( outline_18_var_fields );
    outline_18_var_fields = NULL;

    goto outline_result_19;
    // Exception handler code:
    try_except_handler_39:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_keeper_lineno_38 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_18_var___qualname__ );
    outline_18_var___qualname__ = NULL;

    Py_XDECREF( outline_18_var___module__ );
    outline_18_var___module__ = NULL;

    Py_XDECREF( outline_18_var___doc__ );
    outline_18_var___doc__ = NULL;

    Py_XDECREF( outline_18_var_fields );
    outline_18_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_38;
    exception_value = exception_keeper_value_38;
    exception_tb = exception_keeper_tb_38;
    exception_lineno = exception_keeper_lineno_38;

    goto outline_exception_19;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_19:;
    exception_lineno = 364;
    goto try_except_handler_38;
    outline_result_19:;
    tmp_assign_source_221 = tmp_outline_return_value_19;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_FromImport, tmp_assign_source_221 );
    goto try_end_20;
    // Exception handler code:
    try_except_handler_38:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_keeper_lineno_39 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_19__bases );
    tmp_class_creation_19__bases = NULL;

    Py_XDECREF( tmp_class_creation_19__class_decl_dict );
    tmp_class_creation_19__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_19__metaclass );
    tmp_class_creation_19__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_19__prepared );
    tmp_class_creation_19__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_39;
    exception_value = exception_keeper_value_39;
    exception_tb = exception_keeper_tb_39;
    exception_lineno = exception_keeper_lineno_39;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    Py_XDECREF( tmp_class_creation_19__bases );
    tmp_class_creation_19__bases = NULL;

    Py_XDECREF( tmp_class_creation_19__class_decl_dict );
    tmp_class_creation_19__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_19__metaclass );
    tmp_class_creation_19__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_19__prepared );
    tmp_class_creation_19__prepared = NULL;

    // Tried code:
    tmp_assign_source_227 = PyTuple_New( 1 );
    tmp_tuple_element_57 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_57 == NULL ))
    {
        tmp_tuple_element_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_57 == NULL )
    {
        Py_DECREF( tmp_assign_source_227 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 378;

        goto try_except_handler_40;
    }

    Py_INCREF( tmp_tuple_element_57 );
    PyTuple_SET_ITEM( tmp_assign_source_227, 0, tmp_tuple_element_57 );
    assert( tmp_class_creation_20__bases == NULL );
    tmp_class_creation_20__bases = tmp_assign_source_227;

    tmp_assign_source_228 = PyDict_New();
    assert( tmp_class_creation_20__class_decl_dict == NULL );
    tmp_class_creation_20__class_decl_dict = tmp_assign_source_228;

    tmp_compare_left_39 = const_str_plain_metaclass;
    tmp_compare_right_39 = tmp_class_creation_20__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_39 );
    tmp_cmp_In_39 = PySequence_Contains( tmp_compare_right_39, tmp_compare_left_39 );
    assert( !(tmp_cmp_In_39 == -1) );
    if ( tmp_cmp_In_39 == 1 )
    {
        goto condexpr_true_58;
    }
    else
    {
        goto condexpr_false_58;
    }
    condexpr_true_58:;
    tmp_dict_name_20 = tmp_class_creation_20__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_20 );
    tmp_key_name_20 = const_str_plain_metaclass;
    tmp_metaclass_name_20 = DICT_GET_ITEM( tmp_dict_name_20, tmp_key_name_20 );
    if ( tmp_metaclass_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_40;
    }
    goto condexpr_end_58;
    condexpr_false_58:;
    tmp_cond_value_20 = tmp_class_creation_20__bases;

    CHECK_OBJECT( tmp_cond_value_20 );
    tmp_cond_truth_20 = CHECK_IF_TRUE( tmp_cond_value_20 );
    if ( tmp_cond_truth_20 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_40;
    }
    if ( tmp_cond_truth_20 == 1 )
    {
        goto condexpr_true_59;
    }
    else
    {
        goto condexpr_false_59;
    }
    condexpr_true_59:;
    tmp_subscribed_name_20 = tmp_class_creation_20__bases;

    CHECK_OBJECT( tmp_subscribed_name_20 );
    tmp_subscript_name_20 = const_int_0;
    tmp_type_arg_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_20, tmp_subscript_name_20 );
    if ( tmp_type_arg_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_40;
    }
    tmp_metaclass_name_20 = BUILTIN_TYPE1( tmp_type_arg_20 );
    Py_DECREF( tmp_type_arg_20 );
    if ( tmp_metaclass_name_20 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_40;
    }
    goto condexpr_end_59;
    condexpr_false_59:;
    tmp_metaclass_name_20 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_20 );
    condexpr_end_59:;
    condexpr_end_58:;
    tmp_bases_name_20 = tmp_class_creation_20__bases;

    CHECK_OBJECT( tmp_bases_name_20 );
    tmp_assign_source_229 = SELECT_METACLASS( tmp_metaclass_name_20, tmp_bases_name_20 );
    if ( tmp_assign_source_229 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_20 );

        exception_lineno = 378;

        goto try_except_handler_40;
    }
    Py_DECREF( tmp_metaclass_name_20 );
    assert( tmp_class_creation_20__metaclass == NULL );
    tmp_class_creation_20__metaclass = tmp_assign_source_229;

    tmp_compare_left_40 = const_str_plain_metaclass;
    tmp_compare_right_40 = tmp_class_creation_20__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_40 );
    tmp_cmp_In_40 = PySequence_Contains( tmp_compare_right_40, tmp_compare_left_40 );
    assert( !(tmp_cmp_In_40 == -1) );
    if ( tmp_cmp_In_40 == 1 )
    {
        goto branch_yes_20;
    }
    else
    {
        goto branch_no_20;
    }
    branch_yes_20:;
    tmp_dictdel_dict = tmp_class_creation_20__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_40;
    }
    branch_no_20:;
    tmp_hasattr_source_20 = tmp_class_creation_20__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_20 );
    tmp_hasattr_attr_20 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_20, tmp_hasattr_attr_20 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_40;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_60;
    }
    else
    {
        goto condexpr_false_60;
    }
    condexpr_true_60:;
    tmp_source_name_39 = tmp_class_creation_20__metaclass;

    CHECK_OBJECT( tmp_source_name_39 );
    tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain___prepare__ );
    if ( tmp_called_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_40;
    }
    tmp_args_name_39 = PyTuple_New( 2 );
    tmp_tuple_element_58 = const_str_plain_ExprStmt;
    Py_INCREF( tmp_tuple_element_58 );
    PyTuple_SET_ITEM( tmp_args_name_39, 0, tmp_tuple_element_58 );
    tmp_tuple_element_58 = tmp_class_creation_20__bases;

    CHECK_OBJECT( tmp_tuple_element_58 );
    Py_INCREF( tmp_tuple_element_58 );
    PyTuple_SET_ITEM( tmp_args_name_39, 1, tmp_tuple_element_58 );
    tmp_kw_name_39 = tmp_class_creation_20__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_39 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 378;
    tmp_assign_source_230 = CALL_FUNCTION( tmp_called_name_41, tmp_args_name_39, tmp_kw_name_39 );
    Py_DECREF( tmp_called_name_41 );
    Py_DECREF( tmp_args_name_39 );
    if ( tmp_assign_source_230 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_40;
    }
    goto condexpr_end_60;
    condexpr_false_60:;
    tmp_assign_source_230 = PyDict_New();
    condexpr_end_60:;
    assert( tmp_class_creation_20__prepared == NULL );
    tmp_class_creation_20__prepared = tmp_assign_source_230;

    tmp_set_locals = tmp_class_creation_20__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_20);
    locals_dict_20 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_232 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_19_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_232 );
    outline_19_var___module__ = tmp_assign_source_232;

    tmp_assign_source_233 = const_str_digest_cca0fd94d05de45173845d1fabb7ddfc;
    assert( outline_19_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_233 );
    outline_19_var___doc__ = tmp_assign_source_233;

    tmp_assign_source_234 = const_str_plain_ExprStmt;
    assert( outline_19_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_234 );
    outline_19_var___qualname__ = tmp_assign_source_234;

    tmp_assign_source_235 = const_tuple_str_plain_node_tuple;
    assert( outline_19_var_fields == NULL );
    Py_INCREF( tmp_assign_source_235 );
    outline_19_var_fields = tmp_assign_source_235;

    // Tried code:
    tmp_called_name_42 = tmp_class_creation_20__metaclass;

    CHECK_OBJECT( tmp_called_name_42 );
    tmp_args_name_40 = PyTuple_New( 3 );
    tmp_tuple_element_59 = const_str_plain_ExprStmt;
    Py_INCREF( tmp_tuple_element_59 );
    PyTuple_SET_ITEM( tmp_args_name_40, 0, tmp_tuple_element_59 );
    tmp_tuple_element_59 = tmp_class_creation_20__bases;

    CHECK_OBJECT( tmp_tuple_element_59 );
    Py_INCREF( tmp_tuple_element_59 );
    PyTuple_SET_ITEM( tmp_args_name_40, 1, tmp_tuple_element_59 );
    tmp_tuple_element_59 = locals_dict_20;
    Py_INCREF( tmp_tuple_element_59 );
    if ( outline_19_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_59,
            const_str_plain___qualname__,
            outline_19_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_59,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_59,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_40 );
        Py_DECREF( tmp_tuple_element_59 );

        exception_lineno = 378;

        goto try_except_handler_41;
    }
    if ( outline_19_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_59,
            const_str_plain___module__,
            outline_19_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_59,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_59,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_40 );
        Py_DECREF( tmp_tuple_element_59 );

        exception_lineno = 378;

        goto try_except_handler_41;
    }
    if ( outline_19_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_59,
            const_str_plain___doc__,
            outline_19_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_59,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_59,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_40 );
        Py_DECREF( tmp_tuple_element_59 );

        exception_lineno = 378;

        goto try_except_handler_41;
    }
    if ( outline_19_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_59,
            const_str_plain_fields,
            outline_19_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_59,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_59,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_40 );
        Py_DECREF( tmp_tuple_element_59 );

        exception_lineno = 378;

        goto try_except_handler_41;
    }
    PyTuple_SET_ITEM( tmp_args_name_40, 2, tmp_tuple_element_59 );
    tmp_kw_name_40 = tmp_class_creation_20__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_40 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 378;
    tmp_assign_source_236 = CALL_FUNCTION( tmp_called_name_42, tmp_args_name_40, tmp_kw_name_40 );
    Py_DECREF( tmp_args_name_40 );
    if ( tmp_assign_source_236 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;

        goto try_except_handler_41;
    }
    assert( outline_19_var___class__ == NULL );
    outline_19_var___class__ = tmp_assign_source_236;

    tmp_outline_return_value_20 = outline_19_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_20 );
    Py_INCREF( tmp_outline_return_value_20 );
    goto try_return_handler_41;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_41:;
    CHECK_OBJECT( (PyObject *)outline_19_var___class__ );
    Py_DECREF( outline_19_var___class__ );
    outline_19_var___class__ = NULL;

    Py_XDECREF( outline_19_var___qualname__ );
    outline_19_var___qualname__ = NULL;

    Py_XDECREF( outline_19_var___module__ );
    outline_19_var___module__ = NULL;

    Py_XDECREF( outline_19_var___doc__ );
    outline_19_var___doc__ = NULL;

    Py_XDECREF( outline_19_var_fields );
    outline_19_var_fields = NULL;

    goto outline_result_20;
    // Exception handler code:
    try_except_handler_41:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_keeper_lineno_40 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_19_var___qualname__ );
    outline_19_var___qualname__ = NULL;

    Py_XDECREF( outline_19_var___module__ );
    outline_19_var___module__ = NULL;

    Py_XDECREF( outline_19_var___doc__ );
    outline_19_var___doc__ = NULL;

    Py_XDECREF( outline_19_var_fields );
    outline_19_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_40;
    exception_value = exception_keeper_value_40;
    exception_tb = exception_keeper_tb_40;
    exception_lineno = exception_keeper_lineno_40;

    goto outline_exception_20;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_20:;
    exception_lineno = 378;
    goto try_except_handler_40;
    outline_result_20:;
    tmp_assign_source_231 = tmp_outline_return_value_20;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_ExprStmt, tmp_assign_source_231 );
    goto try_end_21;
    // Exception handler code:
    try_except_handler_40:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_keeper_lineno_41 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_20__bases );
    tmp_class_creation_20__bases = NULL;

    Py_XDECREF( tmp_class_creation_20__class_decl_dict );
    tmp_class_creation_20__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_20__metaclass );
    tmp_class_creation_20__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_20__prepared );
    tmp_class_creation_20__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_41;
    exception_value = exception_keeper_value_41;
    exception_tb = exception_keeper_tb_41;
    exception_lineno = exception_keeper_lineno_41;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    Py_XDECREF( tmp_class_creation_20__bases );
    tmp_class_creation_20__bases = NULL;

    Py_XDECREF( tmp_class_creation_20__class_decl_dict );
    tmp_class_creation_20__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_20__metaclass );
    tmp_class_creation_20__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_20__prepared );
    tmp_class_creation_20__prepared = NULL;

    // Tried code:
    tmp_assign_source_237 = PyTuple_New( 1 );
    tmp_tuple_element_60 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_60 == NULL ))
    {
        tmp_tuple_element_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_60 == NULL )
    {
        Py_DECREF( tmp_assign_source_237 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 383;

        goto try_except_handler_42;
    }

    Py_INCREF( tmp_tuple_element_60 );
    PyTuple_SET_ITEM( tmp_assign_source_237, 0, tmp_tuple_element_60 );
    assert( tmp_class_creation_21__bases == NULL );
    tmp_class_creation_21__bases = tmp_assign_source_237;

    tmp_assign_source_238 = PyDict_New();
    assert( tmp_class_creation_21__class_decl_dict == NULL );
    tmp_class_creation_21__class_decl_dict = tmp_assign_source_238;

    tmp_compare_left_41 = const_str_plain_metaclass;
    tmp_compare_right_41 = tmp_class_creation_21__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_41 );
    tmp_cmp_In_41 = PySequence_Contains( tmp_compare_right_41, tmp_compare_left_41 );
    assert( !(tmp_cmp_In_41 == -1) );
    if ( tmp_cmp_In_41 == 1 )
    {
        goto condexpr_true_61;
    }
    else
    {
        goto condexpr_false_61;
    }
    condexpr_true_61:;
    tmp_dict_name_21 = tmp_class_creation_21__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_21 );
    tmp_key_name_21 = const_str_plain_metaclass;
    tmp_metaclass_name_21 = DICT_GET_ITEM( tmp_dict_name_21, tmp_key_name_21 );
    if ( tmp_metaclass_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_42;
    }
    goto condexpr_end_61;
    condexpr_false_61:;
    tmp_cond_value_21 = tmp_class_creation_21__bases;

    CHECK_OBJECT( tmp_cond_value_21 );
    tmp_cond_truth_21 = CHECK_IF_TRUE( tmp_cond_value_21 );
    if ( tmp_cond_truth_21 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_42;
    }
    if ( tmp_cond_truth_21 == 1 )
    {
        goto condexpr_true_62;
    }
    else
    {
        goto condexpr_false_62;
    }
    condexpr_true_62:;
    tmp_subscribed_name_21 = tmp_class_creation_21__bases;

    CHECK_OBJECT( tmp_subscribed_name_21 );
    tmp_subscript_name_21 = const_int_0;
    tmp_type_arg_21 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_21, tmp_subscript_name_21 );
    if ( tmp_type_arg_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_42;
    }
    tmp_metaclass_name_21 = BUILTIN_TYPE1( tmp_type_arg_21 );
    Py_DECREF( tmp_type_arg_21 );
    if ( tmp_metaclass_name_21 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_42;
    }
    goto condexpr_end_62;
    condexpr_false_62:;
    tmp_metaclass_name_21 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_21 );
    condexpr_end_62:;
    condexpr_end_61:;
    tmp_bases_name_21 = tmp_class_creation_21__bases;

    CHECK_OBJECT( tmp_bases_name_21 );
    tmp_assign_source_239 = SELECT_METACLASS( tmp_metaclass_name_21, tmp_bases_name_21 );
    if ( tmp_assign_source_239 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_21 );

        exception_lineno = 383;

        goto try_except_handler_42;
    }
    Py_DECREF( tmp_metaclass_name_21 );
    assert( tmp_class_creation_21__metaclass == NULL );
    tmp_class_creation_21__metaclass = tmp_assign_source_239;

    tmp_compare_left_42 = const_str_plain_metaclass;
    tmp_compare_right_42 = tmp_class_creation_21__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_42 );
    tmp_cmp_In_42 = PySequence_Contains( tmp_compare_right_42, tmp_compare_left_42 );
    assert( !(tmp_cmp_In_42 == -1) );
    if ( tmp_cmp_In_42 == 1 )
    {
        goto branch_yes_21;
    }
    else
    {
        goto branch_no_21;
    }
    branch_yes_21:;
    tmp_dictdel_dict = tmp_class_creation_21__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_42;
    }
    branch_no_21:;
    tmp_hasattr_source_21 = tmp_class_creation_21__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_21 );
    tmp_hasattr_attr_21 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_21, tmp_hasattr_attr_21 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_42;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_63;
    }
    else
    {
        goto condexpr_false_63;
    }
    condexpr_true_63:;
    tmp_source_name_40 = tmp_class_creation_21__metaclass;

    CHECK_OBJECT( tmp_source_name_40 );
    tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain___prepare__ );
    if ( tmp_called_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_42;
    }
    tmp_args_name_41 = PyTuple_New( 2 );
    tmp_tuple_element_61 = const_str_plain_Assign;
    Py_INCREF( tmp_tuple_element_61 );
    PyTuple_SET_ITEM( tmp_args_name_41, 0, tmp_tuple_element_61 );
    tmp_tuple_element_61 = tmp_class_creation_21__bases;

    CHECK_OBJECT( tmp_tuple_element_61 );
    Py_INCREF( tmp_tuple_element_61 );
    PyTuple_SET_ITEM( tmp_args_name_41, 1, tmp_tuple_element_61 );
    tmp_kw_name_41 = tmp_class_creation_21__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_41 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 383;
    tmp_assign_source_240 = CALL_FUNCTION( tmp_called_name_43, tmp_args_name_41, tmp_kw_name_41 );
    Py_DECREF( tmp_called_name_43 );
    Py_DECREF( tmp_args_name_41 );
    if ( tmp_assign_source_240 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_42;
    }
    goto condexpr_end_63;
    condexpr_false_63:;
    tmp_assign_source_240 = PyDict_New();
    condexpr_end_63:;
    assert( tmp_class_creation_21__prepared == NULL );
    tmp_class_creation_21__prepared = tmp_assign_source_240;

    tmp_set_locals = tmp_class_creation_21__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_21);
    locals_dict_21 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_242 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_20_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_242 );
    outline_20_var___module__ = tmp_assign_source_242;

    tmp_assign_source_243 = const_str_digest_abeaa30875478a8728439599b60393c8;
    assert( outline_20_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_243 );
    outline_20_var___doc__ = tmp_assign_source_243;

    tmp_assign_source_244 = const_str_plain_Assign;
    assert( outline_20_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_244 );
    outline_20_var___qualname__ = tmp_assign_source_244;

    tmp_assign_source_245 = const_tuple_str_plain_target_str_plain_node_tuple;
    assert( outline_20_var_fields == NULL );
    Py_INCREF( tmp_assign_source_245 );
    outline_20_var_fields = tmp_assign_source_245;

    // Tried code:
    tmp_called_name_44 = tmp_class_creation_21__metaclass;

    CHECK_OBJECT( tmp_called_name_44 );
    tmp_args_name_42 = PyTuple_New( 3 );
    tmp_tuple_element_62 = const_str_plain_Assign;
    Py_INCREF( tmp_tuple_element_62 );
    PyTuple_SET_ITEM( tmp_args_name_42, 0, tmp_tuple_element_62 );
    tmp_tuple_element_62 = tmp_class_creation_21__bases;

    CHECK_OBJECT( tmp_tuple_element_62 );
    Py_INCREF( tmp_tuple_element_62 );
    PyTuple_SET_ITEM( tmp_args_name_42, 1, tmp_tuple_element_62 );
    tmp_tuple_element_62 = locals_dict_21;
    Py_INCREF( tmp_tuple_element_62 );
    if ( outline_20_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_62,
            const_str_plain___qualname__,
            outline_20_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_62,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_62,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_42 );
        Py_DECREF( tmp_tuple_element_62 );

        exception_lineno = 383;

        goto try_except_handler_43;
    }
    if ( outline_20_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_62,
            const_str_plain___module__,
            outline_20_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_62,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_62,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_42 );
        Py_DECREF( tmp_tuple_element_62 );

        exception_lineno = 383;

        goto try_except_handler_43;
    }
    if ( outline_20_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_62,
            const_str_plain___doc__,
            outline_20_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_62,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_62,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_42 );
        Py_DECREF( tmp_tuple_element_62 );

        exception_lineno = 383;

        goto try_except_handler_43;
    }
    if ( outline_20_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_62,
            const_str_plain_fields,
            outline_20_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_62,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_62,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_42 );
        Py_DECREF( tmp_tuple_element_62 );

        exception_lineno = 383;

        goto try_except_handler_43;
    }
    PyTuple_SET_ITEM( tmp_args_name_42, 2, tmp_tuple_element_62 );
    tmp_kw_name_42 = tmp_class_creation_21__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_42 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 383;
    tmp_assign_source_246 = CALL_FUNCTION( tmp_called_name_44, tmp_args_name_42, tmp_kw_name_42 );
    Py_DECREF( tmp_args_name_42 );
    if ( tmp_assign_source_246 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 383;

        goto try_except_handler_43;
    }
    assert( outline_20_var___class__ == NULL );
    outline_20_var___class__ = tmp_assign_source_246;

    tmp_outline_return_value_21 = outline_20_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_21 );
    Py_INCREF( tmp_outline_return_value_21 );
    goto try_return_handler_43;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_43:;
    CHECK_OBJECT( (PyObject *)outline_20_var___class__ );
    Py_DECREF( outline_20_var___class__ );
    outline_20_var___class__ = NULL;

    Py_XDECREF( outline_20_var___qualname__ );
    outline_20_var___qualname__ = NULL;

    Py_XDECREF( outline_20_var___module__ );
    outline_20_var___module__ = NULL;

    Py_XDECREF( outline_20_var___doc__ );
    outline_20_var___doc__ = NULL;

    Py_XDECREF( outline_20_var_fields );
    outline_20_var_fields = NULL;

    goto outline_result_21;
    // Exception handler code:
    try_except_handler_43:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_keeper_lineno_42 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_20_var___qualname__ );
    outline_20_var___qualname__ = NULL;

    Py_XDECREF( outline_20_var___module__ );
    outline_20_var___module__ = NULL;

    Py_XDECREF( outline_20_var___doc__ );
    outline_20_var___doc__ = NULL;

    Py_XDECREF( outline_20_var_fields );
    outline_20_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_42;
    exception_value = exception_keeper_value_42;
    exception_tb = exception_keeper_tb_42;
    exception_lineno = exception_keeper_lineno_42;

    goto outline_exception_21;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_21:;
    exception_lineno = 383;
    goto try_except_handler_42;
    outline_result_21:;
    tmp_assign_source_241 = tmp_outline_return_value_21;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Assign, tmp_assign_source_241 );
    goto try_end_22;
    // Exception handler code:
    try_except_handler_42:;
    exception_keeper_type_43 = exception_type;
    exception_keeper_value_43 = exception_value;
    exception_keeper_tb_43 = exception_tb;
    exception_keeper_lineno_43 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_21__bases );
    tmp_class_creation_21__bases = NULL;

    Py_XDECREF( tmp_class_creation_21__class_decl_dict );
    tmp_class_creation_21__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_21__metaclass );
    tmp_class_creation_21__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_21__prepared );
    tmp_class_creation_21__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_43;
    exception_value = exception_keeper_value_43;
    exception_tb = exception_keeper_tb_43;
    exception_lineno = exception_keeper_lineno_43;

    goto frame_exception_exit_1;
    // End of try:
    try_end_22:;
    Py_XDECREF( tmp_class_creation_21__bases );
    tmp_class_creation_21__bases = NULL;

    Py_XDECREF( tmp_class_creation_21__class_decl_dict );
    tmp_class_creation_21__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_21__metaclass );
    tmp_class_creation_21__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_21__prepared );
    tmp_class_creation_21__prepared = NULL;

    // Tried code:
    tmp_assign_source_247 = PyTuple_New( 1 );
    tmp_tuple_element_63 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_63 == NULL ))
    {
        tmp_tuple_element_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_63 == NULL )
    {
        Py_DECREF( tmp_assign_source_247 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 388;

        goto try_except_handler_44;
    }

    Py_INCREF( tmp_tuple_element_63 );
    PyTuple_SET_ITEM( tmp_assign_source_247, 0, tmp_tuple_element_63 );
    assert( tmp_class_creation_22__bases == NULL );
    tmp_class_creation_22__bases = tmp_assign_source_247;

    tmp_assign_source_248 = PyDict_New();
    assert( tmp_class_creation_22__class_decl_dict == NULL );
    tmp_class_creation_22__class_decl_dict = tmp_assign_source_248;

    tmp_compare_left_43 = const_str_plain_metaclass;
    tmp_compare_right_43 = tmp_class_creation_22__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_43 );
    tmp_cmp_In_43 = PySequence_Contains( tmp_compare_right_43, tmp_compare_left_43 );
    assert( !(tmp_cmp_In_43 == -1) );
    if ( tmp_cmp_In_43 == 1 )
    {
        goto condexpr_true_64;
    }
    else
    {
        goto condexpr_false_64;
    }
    condexpr_true_64:;
    tmp_dict_name_22 = tmp_class_creation_22__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_22 );
    tmp_key_name_22 = const_str_plain_metaclass;
    tmp_metaclass_name_22 = DICT_GET_ITEM( tmp_dict_name_22, tmp_key_name_22 );
    if ( tmp_metaclass_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_44;
    }
    goto condexpr_end_64;
    condexpr_false_64:;
    tmp_cond_value_22 = tmp_class_creation_22__bases;

    CHECK_OBJECT( tmp_cond_value_22 );
    tmp_cond_truth_22 = CHECK_IF_TRUE( tmp_cond_value_22 );
    if ( tmp_cond_truth_22 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_44;
    }
    if ( tmp_cond_truth_22 == 1 )
    {
        goto condexpr_true_65;
    }
    else
    {
        goto condexpr_false_65;
    }
    condexpr_true_65:;
    tmp_subscribed_name_22 = tmp_class_creation_22__bases;

    CHECK_OBJECT( tmp_subscribed_name_22 );
    tmp_subscript_name_22 = const_int_0;
    tmp_type_arg_22 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_22, tmp_subscript_name_22 );
    if ( tmp_type_arg_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_44;
    }
    tmp_metaclass_name_22 = BUILTIN_TYPE1( tmp_type_arg_22 );
    Py_DECREF( tmp_type_arg_22 );
    if ( tmp_metaclass_name_22 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_44;
    }
    goto condexpr_end_65;
    condexpr_false_65:;
    tmp_metaclass_name_22 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_22 );
    condexpr_end_65:;
    condexpr_end_64:;
    tmp_bases_name_22 = tmp_class_creation_22__bases;

    CHECK_OBJECT( tmp_bases_name_22 );
    tmp_assign_source_249 = SELECT_METACLASS( tmp_metaclass_name_22, tmp_bases_name_22 );
    if ( tmp_assign_source_249 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_22 );

        exception_lineno = 388;

        goto try_except_handler_44;
    }
    Py_DECREF( tmp_metaclass_name_22 );
    assert( tmp_class_creation_22__metaclass == NULL );
    tmp_class_creation_22__metaclass = tmp_assign_source_249;

    tmp_compare_left_44 = const_str_plain_metaclass;
    tmp_compare_right_44 = tmp_class_creation_22__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_44 );
    tmp_cmp_In_44 = PySequence_Contains( tmp_compare_right_44, tmp_compare_left_44 );
    assert( !(tmp_cmp_In_44 == -1) );
    if ( tmp_cmp_In_44 == 1 )
    {
        goto branch_yes_22;
    }
    else
    {
        goto branch_no_22;
    }
    branch_yes_22:;
    tmp_dictdel_dict = tmp_class_creation_22__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_44;
    }
    branch_no_22:;
    tmp_hasattr_source_22 = tmp_class_creation_22__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_22 );
    tmp_hasattr_attr_22 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_22, tmp_hasattr_attr_22 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_44;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_66;
    }
    else
    {
        goto condexpr_false_66;
    }
    condexpr_true_66:;
    tmp_source_name_41 = tmp_class_creation_22__metaclass;

    CHECK_OBJECT( tmp_source_name_41 );
    tmp_called_name_45 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain___prepare__ );
    if ( tmp_called_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_44;
    }
    tmp_args_name_43 = PyTuple_New( 2 );
    tmp_tuple_element_64 = const_str_plain_AssignBlock;
    Py_INCREF( tmp_tuple_element_64 );
    PyTuple_SET_ITEM( tmp_args_name_43, 0, tmp_tuple_element_64 );
    tmp_tuple_element_64 = tmp_class_creation_22__bases;

    CHECK_OBJECT( tmp_tuple_element_64 );
    Py_INCREF( tmp_tuple_element_64 );
    PyTuple_SET_ITEM( tmp_args_name_43, 1, tmp_tuple_element_64 );
    tmp_kw_name_43 = tmp_class_creation_22__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_43 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 388;
    tmp_assign_source_250 = CALL_FUNCTION( tmp_called_name_45, tmp_args_name_43, tmp_kw_name_43 );
    Py_DECREF( tmp_called_name_45 );
    Py_DECREF( tmp_args_name_43 );
    if ( tmp_assign_source_250 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_44;
    }
    goto condexpr_end_66;
    condexpr_false_66:;
    tmp_assign_source_250 = PyDict_New();
    condexpr_end_66:;
    assert( tmp_class_creation_22__prepared == NULL );
    tmp_class_creation_22__prepared = tmp_assign_source_250;

    tmp_set_locals = tmp_class_creation_22__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_22);
    locals_dict_22 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_252 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_21_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_252 );
    outline_21_var___module__ = tmp_assign_source_252;

    tmp_assign_source_253 = const_str_digest_01de7be6f170be43c661981511ba219f;
    assert( outline_21_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_253 );
    outline_21_var___doc__ = tmp_assign_source_253;

    tmp_assign_source_254 = const_str_plain_AssignBlock;
    assert( outline_21_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_254 );
    outline_21_var___qualname__ = tmp_assign_source_254;

    tmp_assign_source_255 = const_tuple_str_plain_target_str_plain_filter_str_plain_body_tuple;
    assert( outline_21_var_fields == NULL );
    Py_INCREF( tmp_assign_source_255 );
    outline_21_var_fields = tmp_assign_source_255;

    // Tried code:
    tmp_called_name_46 = tmp_class_creation_22__metaclass;

    CHECK_OBJECT( tmp_called_name_46 );
    tmp_args_name_44 = PyTuple_New( 3 );
    tmp_tuple_element_65 = const_str_plain_AssignBlock;
    Py_INCREF( tmp_tuple_element_65 );
    PyTuple_SET_ITEM( tmp_args_name_44, 0, tmp_tuple_element_65 );
    tmp_tuple_element_65 = tmp_class_creation_22__bases;

    CHECK_OBJECT( tmp_tuple_element_65 );
    Py_INCREF( tmp_tuple_element_65 );
    PyTuple_SET_ITEM( tmp_args_name_44, 1, tmp_tuple_element_65 );
    tmp_tuple_element_65 = locals_dict_22;
    Py_INCREF( tmp_tuple_element_65 );
    if ( outline_21_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_65,
            const_str_plain___qualname__,
            outline_21_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_65,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_65,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_44 );
        Py_DECREF( tmp_tuple_element_65 );

        exception_lineno = 388;

        goto try_except_handler_45;
    }
    if ( outline_21_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_65,
            const_str_plain___module__,
            outline_21_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_65,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_65,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_44 );
        Py_DECREF( tmp_tuple_element_65 );

        exception_lineno = 388;

        goto try_except_handler_45;
    }
    if ( outline_21_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_65,
            const_str_plain___doc__,
            outline_21_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_65,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_65,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_44 );
        Py_DECREF( tmp_tuple_element_65 );

        exception_lineno = 388;

        goto try_except_handler_45;
    }
    if ( outline_21_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_65,
            const_str_plain_fields,
            outline_21_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_65,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_65,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_44 );
        Py_DECREF( tmp_tuple_element_65 );

        exception_lineno = 388;

        goto try_except_handler_45;
    }
    PyTuple_SET_ITEM( tmp_args_name_44, 2, tmp_tuple_element_65 );
    tmp_kw_name_44 = tmp_class_creation_22__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_44 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 388;
    tmp_assign_source_256 = CALL_FUNCTION( tmp_called_name_46, tmp_args_name_44, tmp_kw_name_44 );
    Py_DECREF( tmp_args_name_44 );
    if ( tmp_assign_source_256 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 388;

        goto try_except_handler_45;
    }
    assert( outline_21_var___class__ == NULL );
    outline_21_var___class__ = tmp_assign_source_256;

    tmp_outline_return_value_22 = outline_21_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_22 );
    Py_INCREF( tmp_outline_return_value_22 );
    goto try_return_handler_45;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_45:;
    CHECK_OBJECT( (PyObject *)outline_21_var___class__ );
    Py_DECREF( outline_21_var___class__ );
    outline_21_var___class__ = NULL;

    Py_XDECREF( outline_21_var___qualname__ );
    outline_21_var___qualname__ = NULL;

    Py_XDECREF( outline_21_var___module__ );
    outline_21_var___module__ = NULL;

    Py_XDECREF( outline_21_var___doc__ );
    outline_21_var___doc__ = NULL;

    Py_XDECREF( outline_21_var_fields );
    outline_21_var_fields = NULL;

    goto outline_result_22;
    // Exception handler code:
    try_except_handler_45:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_keeper_lineno_44 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_21_var___qualname__ );
    outline_21_var___qualname__ = NULL;

    Py_XDECREF( outline_21_var___module__ );
    outline_21_var___module__ = NULL;

    Py_XDECREF( outline_21_var___doc__ );
    outline_21_var___doc__ = NULL;

    Py_XDECREF( outline_21_var_fields );
    outline_21_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_44;
    exception_value = exception_keeper_value_44;
    exception_tb = exception_keeper_tb_44;
    exception_lineno = exception_keeper_lineno_44;

    goto outline_exception_22;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_22:;
    exception_lineno = 388;
    goto try_except_handler_44;
    outline_result_22:;
    tmp_assign_source_251 = tmp_outline_return_value_22;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_AssignBlock, tmp_assign_source_251 );
    goto try_end_23;
    // Exception handler code:
    try_except_handler_44:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_keeper_lineno_45 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_22__bases );
    tmp_class_creation_22__bases = NULL;

    Py_XDECREF( tmp_class_creation_22__class_decl_dict );
    tmp_class_creation_22__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_22__metaclass );
    tmp_class_creation_22__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_22__prepared );
    tmp_class_creation_22__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_45;
    exception_value = exception_keeper_value_45;
    exception_tb = exception_keeper_tb_45;
    exception_lineno = exception_keeper_lineno_45;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    Py_XDECREF( tmp_class_creation_22__bases );
    tmp_class_creation_22__bases = NULL;

    Py_XDECREF( tmp_class_creation_22__class_decl_dict );
    tmp_class_creation_22__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_22__metaclass );
    tmp_class_creation_22__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_22__prepared );
    tmp_class_creation_22__prepared = NULL;

    // Tried code:
    tmp_assign_source_257 = PyTuple_New( 1 );
    tmp_tuple_element_66 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Node );

    if (unlikely( tmp_tuple_element_66 == NULL ))
    {
        tmp_tuple_element_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Node );
    }

    if ( tmp_tuple_element_66 == NULL )
    {
        Py_DECREF( tmp_assign_source_257 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Node" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 393;

        goto try_except_handler_46;
    }

    Py_INCREF( tmp_tuple_element_66 );
    PyTuple_SET_ITEM( tmp_assign_source_257, 0, tmp_tuple_element_66 );
    assert( tmp_class_creation_23__bases == NULL );
    tmp_class_creation_23__bases = tmp_assign_source_257;

    tmp_assign_source_258 = PyDict_New();
    assert( tmp_class_creation_23__class_decl_dict == NULL );
    tmp_class_creation_23__class_decl_dict = tmp_assign_source_258;

    tmp_compare_left_45 = const_str_plain_metaclass;
    tmp_compare_right_45 = tmp_class_creation_23__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_45 );
    tmp_cmp_In_45 = PySequence_Contains( tmp_compare_right_45, tmp_compare_left_45 );
    assert( !(tmp_cmp_In_45 == -1) );
    if ( tmp_cmp_In_45 == 1 )
    {
        goto condexpr_true_67;
    }
    else
    {
        goto condexpr_false_67;
    }
    condexpr_true_67:;
    tmp_dict_name_23 = tmp_class_creation_23__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_23 );
    tmp_key_name_23 = const_str_plain_metaclass;
    tmp_metaclass_name_23 = DICT_GET_ITEM( tmp_dict_name_23, tmp_key_name_23 );
    if ( tmp_metaclass_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_46;
    }
    goto condexpr_end_67;
    condexpr_false_67:;
    tmp_cond_value_23 = tmp_class_creation_23__bases;

    CHECK_OBJECT( tmp_cond_value_23 );
    tmp_cond_truth_23 = CHECK_IF_TRUE( tmp_cond_value_23 );
    if ( tmp_cond_truth_23 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_46;
    }
    if ( tmp_cond_truth_23 == 1 )
    {
        goto condexpr_true_68;
    }
    else
    {
        goto condexpr_false_68;
    }
    condexpr_true_68:;
    tmp_subscribed_name_23 = tmp_class_creation_23__bases;

    CHECK_OBJECT( tmp_subscribed_name_23 );
    tmp_subscript_name_23 = const_int_0;
    tmp_type_arg_23 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_23, tmp_subscript_name_23 );
    if ( tmp_type_arg_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_46;
    }
    tmp_metaclass_name_23 = BUILTIN_TYPE1( tmp_type_arg_23 );
    Py_DECREF( tmp_type_arg_23 );
    if ( tmp_metaclass_name_23 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_46;
    }
    goto condexpr_end_68;
    condexpr_false_68:;
    tmp_metaclass_name_23 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_23 );
    condexpr_end_68:;
    condexpr_end_67:;
    tmp_bases_name_23 = tmp_class_creation_23__bases;

    CHECK_OBJECT( tmp_bases_name_23 );
    tmp_assign_source_259 = SELECT_METACLASS( tmp_metaclass_name_23, tmp_bases_name_23 );
    if ( tmp_assign_source_259 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_23 );

        exception_lineno = 393;

        goto try_except_handler_46;
    }
    Py_DECREF( tmp_metaclass_name_23 );
    assert( tmp_class_creation_23__metaclass == NULL );
    tmp_class_creation_23__metaclass = tmp_assign_source_259;

    tmp_compare_left_46 = const_str_plain_metaclass;
    tmp_compare_right_46 = tmp_class_creation_23__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_46 );
    tmp_cmp_In_46 = PySequence_Contains( tmp_compare_right_46, tmp_compare_left_46 );
    assert( !(tmp_cmp_In_46 == -1) );
    if ( tmp_cmp_In_46 == 1 )
    {
        goto branch_yes_23;
    }
    else
    {
        goto branch_no_23;
    }
    branch_yes_23:;
    tmp_dictdel_dict = tmp_class_creation_23__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_46;
    }
    branch_no_23:;
    tmp_hasattr_source_23 = tmp_class_creation_23__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_23 );
    tmp_hasattr_attr_23 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_23, tmp_hasattr_attr_23 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_46;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_69;
    }
    else
    {
        goto condexpr_false_69;
    }
    condexpr_true_69:;
    tmp_source_name_42 = tmp_class_creation_23__metaclass;

    CHECK_OBJECT( tmp_source_name_42 );
    tmp_called_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain___prepare__ );
    if ( tmp_called_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_46;
    }
    tmp_args_name_45 = PyTuple_New( 2 );
    tmp_tuple_element_67 = const_str_plain_Expr;
    Py_INCREF( tmp_tuple_element_67 );
    PyTuple_SET_ITEM( tmp_args_name_45, 0, tmp_tuple_element_67 );
    tmp_tuple_element_67 = tmp_class_creation_23__bases;

    CHECK_OBJECT( tmp_tuple_element_67 );
    Py_INCREF( tmp_tuple_element_67 );
    PyTuple_SET_ITEM( tmp_args_name_45, 1, tmp_tuple_element_67 );
    tmp_kw_name_45 = tmp_class_creation_23__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_45 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 393;
    tmp_assign_source_260 = CALL_FUNCTION( tmp_called_name_47, tmp_args_name_45, tmp_kw_name_45 );
    Py_DECREF( tmp_called_name_47 );
    Py_DECREF( tmp_args_name_45 );
    if ( tmp_assign_source_260 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_46;
    }
    goto condexpr_end_69;
    condexpr_false_69:;
    tmp_assign_source_260 = PyDict_New();
    condexpr_end_69:;
    assert( tmp_class_creation_23__prepared == NULL );
    tmp_class_creation_23__prepared = tmp_assign_source_260;

    tmp_set_locals = tmp_class_creation_23__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_23);
    locals_dict_23 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_262 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_22_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_262 );
    outline_22_var___module__ = tmp_assign_source_262;

    tmp_assign_source_263 = const_str_digest_41496a23db1a51655852694516177510;
    assert( outline_22_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_263 );
    outline_22_var___doc__ = tmp_assign_source_263;

    tmp_assign_source_264 = const_str_plain_Expr;
    assert( outline_22_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_264 );
    outline_22_var___qualname__ = tmp_assign_source_264;

    tmp_assign_source_265 = Py_True;
    assert( outline_22_var_abstract == NULL );
    Py_INCREF( tmp_assign_source_265 );
    outline_22_var_abstract = tmp_assign_source_265;

    tmp_defaults_5 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_5 );
    tmp_assign_source_266 = MAKE_FUNCTION_jinja2$nodes$$$function_20_as_const( tmp_defaults_5 );
    assert( outline_22_var_as_const == NULL );
    outline_22_var_as_const = tmp_assign_source_266;

    tmp_assign_source_267 = MAKE_FUNCTION_jinja2$nodes$$$function_21_can_assign(  );
    assert( outline_22_var_can_assign == NULL );
    outline_22_var_can_assign = tmp_assign_source_267;

    // Tried code:
    tmp_called_name_48 = tmp_class_creation_23__metaclass;

    CHECK_OBJECT( tmp_called_name_48 );
    tmp_args_name_46 = PyTuple_New( 3 );
    tmp_tuple_element_68 = const_str_plain_Expr;
    Py_INCREF( tmp_tuple_element_68 );
    PyTuple_SET_ITEM( tmp_args_name_46, 0, tmp_tuple_element_68 );
    tmp_tuple_element_68 = tmp_class_creation_23__bases;

    CHECK_OBJECT( tmp_tuple_element_68 );
    Py_INCREF( tmp_tuple_element_68 );
    PyTuple_SET_ITEM( tmp_args_name_46, 1, tmp_tuple_element_68 );
    tmp_tuple_element_68 = locals_dict_23;
    Py_INCREF( tmp_tuple_element_68 );
    if ( outline_22_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_68,
            const_str_plain___qualname__,
            outline_22_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_68,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_68,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_46 );
        Py_DECREF( tmp_tuple_element_68 );

        exception_lineno = 393;

        goto try_except_handler_47;
    }
    if ( outline_22_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_68,
            const_str_plain___module__,
            outline_22_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_68,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_68,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_46 );
        Py_DECREF( tmp_tuple_element_68 );

        exception_lineno = 393;

        goto try_except_handler_47;
    }
    if ( outline_22_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_68,
            const_str_plain___doc__,
            outline_22_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_68,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_68,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_46 );
        Py_DECREF( tmp_tuple_element_68 );

        exception_lineno = 393;

        goto try_except_handler_47;
    }
    if ( outline_22_var_abstract != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_68,
            const_str_plain_abstract,
            outline_22_var_abstract
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_68,
            const_str_plain_abstract
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_68,
                const_str_plain_abstract
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_46 );
        Py_DECREF( tmp_tuple_element_68 );

        exception_lineno = 393;

        goto try_except_handler_47;
    }
    if ( outline_22_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_68,
            const_str_plain_as_const,
            outline_22_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_68,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_68,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_46 );
        Py_DECREF( tmp_tuple_element_68 );

        exception_lineno = 393;

        goto try_except_handler_47;
    }
    if ( outline_22_var_can_assign != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_68,
            const_str_plain_can_assign,
            outline_22_var_can_assign
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_68,
            const_str_plain_can_assign
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_68,
                const_str_plain_can_assign
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_46 );
        Py_DECREF( tmp_tuple_element_68 );

        exception_lineno = 393;

        goto try_except_handler_47;
    }
    PyTuple_SET_ITEM( tmp_args_name_46, 2, tmp_tuple_element_68 );
    tmp_kw_name_46 = tmp_class_creation_23__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_46 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 393;
    tmp_assign_source_268 = CALL_FUNCTION( tmp_called_name_48, tmp_args_name_46, tmp_kw_name_46 );
    Py_DECREF( tmp_args_name_46 );
    if ( tmp_assign_source_268 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 393;

        goto try_except_handler_47;
    }
    assert( outline_22_var___class__ == NULL );
    outline_22_var___class__ = tmp_assign_source_268;

    tmp_outline_return_value_23 = outline_22_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_23 );
    Py_INCREF( tmp_outline_return_value_23 );
    goto try_return_handler_47;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_47:;
    CHECK_OBJECT( (PyObject *)outline_22_var___class__ );
    Py_DECREF( outline_22_var___class__ );
    outline_22_var___class__ = NULL;

    Py_XDECREF( outline_22_var___qualname__ );
    outline_22_var___qualname__ = NULL;

    Py_XDECREF( outline_22_var___module__ );
    outline_22_var___module__ = NULL;

    Py_XDECREF( outline_22_var___doc__ );
    outline_22_var___doc__ = NULL;

    Py_XDECREF( outline_22_var_abstract );
    outline_22_var_abstract = NULL;

    Py_XDECREF( outline_22_var_as_const );
    outline_22_var_as_const = NULL;

    Py_XDECREF( outline_22_var_can_assign );
    outline_22_var_can_assign = NULL;

    goto outline_result_23;
    // Exception handler code:
    try_except_handler_47:;
    exception_keeper_type_46 = exception_type;
    exception_keeper_value_46 = exception_value;
    exception_keeper_tb_46 = exception_tb;
    exception_keeper_lineno_46 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_22_var___qualname__ );
    outline_22_var___qualname__ = NULL;

    Py_XDECREF( outline_22_var___module__ );
    outline_22_var___module__ = NULL;

    Py_XDECREF( outline_22_var___doc__ );
    outline_22_var___doc__ = NULL;

    Py_XDECREF( outline_22_var_abstract );
    outline_22_var_abstract = NULL;

    Py_XDECREF( outline_22_var_as_const );
    outline_22_var_as_const = NULL;

    Py_XDECREF( outline_22_var_can_assign );
    outline_22_var_can_assign = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_46;
    exception_value = exception_keeper_value_46;
    exception_tb = exception_keeper_tb_46;
    exception_lineno = exception_keeper_lineno_46;

    goto outline_exception_23;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_23:;
    exception_lineno = 393;
    goto try_except_handler_46;
    outline_result_23:;
    tmp_assign_source_261 = tmp_outline_return_value_23;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr, tmp_assign_source_261 );
    goto try_end_24;
    // Exception handler code:
    try_except_handler_46:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_keeper_lineno_47 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_23__bases );
    tmp_class_creation_23__bases = NULL;

    Py_XDECREF( tmp_class_creation_23__class_decl_dict );
    tmp_class_creation_23__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_23__metaclass );
    tmp_class_creation_23__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_23__prepared );
    tmp_class_creation_23__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_47;
    exception_value = exception_keeper_value_47;
    exception_tb = exception_keeper_tb_47;
    exception_lineno = exception_keeper_lineno_47;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    Py_XDECREF( tmp_class_creation_23__bases );
    tmp_class_creation_23__bases = NULL;

    Py_XDECREF( tmp_class_creation_23__class_decl_dict );
    tmp_class_creation_23__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_23__metaclass );
    tmp_class_creation_23__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_23__prepared );
    tmp_class_creation_23__prepared = NULL;

    // Tried code:
    tmp_assign_source_269 = PyTuple_New( 1 );
    tmp_tuple_element_69 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_69 == NULL ))
    {
        tmp_tuple_element_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_69 == NULL )
    {
        Py_DECREF( tmp_assign_source_269 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 415;

        goto try_except_handler_48;
    }

    Py_INCREF( tmp_tuple_element_69 );
    PyTuple_SET_ITEM( tmp_assign_source_269, 0, tmp_tuple_element_69 );
    assert( tmp_class_creation_24__bases == NULL );
    tmp_class_creation_24__bases = tmp_assign_source_269;

    tmp_assign_source_270 = PyDict_New();
    assert( tmp_class_creation_24__class_decl_dict == NULL );
    tmp_class_creation_24__class_decl_dict = tmp_assign_source_270;

    tmp_compare_left_47 = const_str_plain_metaclass;
    tmp_compare_right_47 = tmp_class_creation_24__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_47 );
    tmp_cmp_In_47 = PySequence_Contains( tmp_compare_right_47, tmp_compare_left_47 );
    assert( !(tmp_cmp_In_47 == -1) );
    if ( tmp_cmp_In_47 == 1 )
    {
        goto condexpr_true_70;
    }
    else
    {
        goto condexpr_false_70;
    }
    condexpr_true_70:;
    tmp_dict_name_24 = tmp_class_creation_24__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_24 );
    tmp_key_name_24 = const_str_plain_metaclass;
    tmp_metaclass_name_24 = DICT_GET_ITEM( tmp_dict_name_24, tmp_key_name_24 );
    if ( tmp_metaclass_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_48;
    }
    goto condexpr_end_70;
    condexpr_false_70:;
    tmp_cond_value_24 = tmp_class_creation_24__bases;

    CHECK_OBJECT( tmp_cond_value_24 );
    tmp_cond_truth_24 = CHECK_IF_TRUE( tmp_cond_value_24 );
    if ( tmp_cond_truth_24 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_48;
    }
    if ( tmp_cond_truth_24 == 1 )
    {
        goto condexpr_true_71;
    }
    else
    {
        goto condexpr_false_71;
    }
    condexpr_true_71:;
    tmp_subscribed_name_24 = tmp_class_creation_24__bases;

    CHECK_OBJECT( tmp_subscribed_name_24 );
    tmp_subscript_name_24 = const_int_0;
    tmp_type_arg_24 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_24, tmp_subscript_name_24 );
    if ( tmp_type_arg_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_48;
    }
    tmp_metaclass_name_24 = BUILTIN_TYPE1( tmp_type_arg_24 );
    Py_DECREF( tmp_type_arg_24 );
    if ( tmp_metaclass_name_24 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_48;
    }
    goto condexpr_end_71;
    condexpr_false_71:;
    tmp_metaclass_name_24 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_24 );
    condexpr_end_71:;
    condexpr_end_70:;
    tmp_bases_name_24 = tmp_class_creation_24__bases;

    CHECK_OBJECT( tmp_bases_name_24 );
    tmp_assign_source_271 = SELECT_METACLASS( tmp_metaclass_name_24, tmp_bases_name_24 );
    if ( tmp_assign_source_271 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_24 );

        exception_lineno = 415;

        goto try_except_handler_48;
    }
    Py_DECREF( tmp_metaclass_name_24 );
    assert( tmp_class_creation_24__metaclass == NULL );
    tmp_class_creation_24__metaclass = tmp_assign_source_271;

    tmp_compare_left_48 = const_str_plain_metaclass;
    tmp_compare_right_48 = tmp_class_creation_24__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_48 );
    tmp_cmp_In_48 = PySequence_Contains( tmp_compare_right_48, tmp_compare_left_48 );
    assert( !(tmp_cmp_In_48 == -1) );
    if ( tmp_cmp_In_48 == 1 )
    {
        goto branch_yes_24;
    }
    else
    {
        goto branch_no_24;
    }
    branch_yes_24:;
    tmp_dictdel_dict = tmp_class_creation_24__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_48;
    }
    branch_no_24:;
    tmp_hasattr_source_24 = tmp_class_creation_24__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_24 );
    tmp_hasattr_attr_24 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_24, tmp_hasattr_attr_24 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_48;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_72;
    }
    else
    {
        goto condexpr_false_72;
    }
    condexpr_true_72:;
    tmp_source_name_43 = tmp_class_creation_24__metaclass;

    CHECK_OBJECT( tmp_source_name_43 );
    tmp_called_name_49 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain___prepare__ );
    if ( tmp_called_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_48;
    }
    tmp_args_name_47 = PyTuple_New( 2 );
    tmp_tuple_element_70 = const_str_plain_BinExpr;
    Py_INCREF( tmp_tuple_element_70 );
    PyTuple_SET_ITEM( tmp_args_name_47, 0, tmp_tuple_element_70 );
    tmp_tuple_element_70 = tmp_class_creation_24__bases;

    CHECK_OBJECT( tmp_tuple_element_70 );
    Py_INCREF( tmp_tuple_element_70 );
    PyTuple_SET_ITEM( tmp_args_name_47, 1, tmp_tuple_element_70 );
    tmp_kw_name_47 = tmp_class_creation_24__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_47 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 415;
    tmp_assign_source_272 = CALL_FUNCTION( tmp_called_name_49, tmp_args_name_47, tmp_kw_name_47 );
    Py_DECREF( tmp_called_name_49 );
    Py_DECREF( tmp_args_name_47 );
    if ( tmp_assign_source_272 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_48;
    }
    goto condexpr_end_72;
    condexpr_false_72:;
    tmp_assign_source_272 = PyDict_New();
    condexpr_end_72:;
    assert( tmp_class_creation_24__prepared == NULL );
    tmp_class_creation_24__prepared = tmp_assign_source_272;

    tmp_set_locals = tmp_class_creation_24__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_24);
    locals_dict_24 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_274 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_23_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_274 );
    outline_23_var___module__ = tmp_assign_source_274;

    tmp_assign_source_275 = const_str_digest_bc7983e79634e0b23326239af8a9407e;
    assert( outline_23_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_275 );
    outline_23_var___doc__ = tmp_assign_source_275;

    tmp_assign_source_276 = const_str_plain_BinExpr;
    assert( outline_23_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_276 );
    outline_23_var___qualname__ = tmp_assign_source_276;

    tmp_assign_source_277 = const_tuple_str_plain_left_str_plain_right_tuple;
    assert( outline_23_var_fields == NULL );
    Py_INCREF( tmp_assign_source_277 );
    outline_23_var_fields = tmp_assign_source_277;

    tmp_assign_source_278 = Py_None;
    assert( outline_23_var_operator == NULL );
    Py_INCREF( tmp_assign_source_278 );
    outline_23_var_operator = tmp_assign_source_278;

    tmp_assign_source_279 = Py_True;
    assert( outline_23_var_abstract == NULL );
    Py_INCREF( tmp_assign_source_279 );
    outline_23_var_abstract = tmp_assign_source_279;

    tmp_defaults_6 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_6 );
    tmp_assign_source_280 = MAKE_FUNCTION_jinja2$nodes$$$function_22_as_const( tmp_defaults_6 );
    assert( outline_23_var_as_const == NULL );
    outline_23_var_as_const = tmp_assign_source_280;

    // Tried code:
    tmp_called_name_50 = tmp_class_creation_24__metaclass;

    CHECK_OBJECT( tmp_called_name_50 );
    tmp_args_name_48 = PyTuple_New( 3 );
    tmp_tuple_element_71 = const_str_plain_BinExpr;
    Py_INCREF( tmp_tuple_element_71 );
    PyTuple_SET_ITEM( tmp_args_name_48, 0, tmp_tuple_element_71 );
    tmp_tuple_element_71 = tmp_class_creation_24__bases;

    CHECK_OBJECT( tmp_tuple_element_71 );
    Py_INCREF( tmp_tuple_element_71 );
    PyTuple_SET_ITEM( tmp_args_name_48, 1, tmp_tuple_element_71 );
    tmp_tuple_element_71 = locals_dict_24;
    Py_INCREF( tmp_tuple_element_71 );
    if ( outline_23_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_71,
            const_str_plain___qualname__,
            outline_23_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_71,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_71,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_48 );
        Py_DECREF( tmp_tuple_element_71 );

        exception_lineno = 415;

        goto try_except_handler_49;
    }
    if ( outline_23_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_71,
            const_str_plain___module__,
            outline_23_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_71,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_71,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_48 );
        Py_DECREF( tmp_tuple_element_71 );

        exception_lineno = 415;

        goto try_except_handler_49;
    }
    if ( outline_23_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_71,
            const_str_plain___doc__,
            outline_23_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_71,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_71,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_48 );
        Py_DECREF( tmp_tuple_element_71 );

        exception_lineno = 415;

        goto try_except_handler_49;
    }
    if ( outline_23_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_71,
            const_str_plain_fields,
            outline_23_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_71,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_71,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_48 );
        Py_DECREF( tmp_tuple_element_71 );

        exception_lineno = 415;

        goto try_except_handler_49;
    }
    if ( outline_23_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_71,
            const_str_plain_operator,
            outline_23_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_71,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_71,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_48 );
        Py_DECREF( tmp_tuple_element_71 );

        exception_lineno = 415;

        goto try_except_handler_49;
    }
    if ( outline_23_var_abstract != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_71,
            const_str_plain_abstract,
            outline_23_var_abstract
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_71,
            const_str_plain_abstract
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_71,
                const_str_plain_abstract
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_48 );
        Py_DECREF( tmp_tuple_element_71 );

        exception_lineno = 415;

        goto try_except_handler_49;
    }
    if ( outline_23_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_71,
            const_str_plain_as_const,
            outline_23_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_71,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_71,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_48 );
        Py_DECREF( tmp_tuple_element_71 );

        exception_lineno = 415;

        goto try_except_handler_49;
    }
    PyTuple_SET_ITEM( tmp_args_name_48, 2, tmp_tuple_element_71 );
    tmp_kw_name_48 = tmp_class_creation_24__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_48 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 415;
    tmp_assign_source_281 = CALL_FUNCTION( tmp_called_name_50, tmp_args_name_48, tmp_kw_name_48 );
    Py_DECREF( tmp_args_name_48 );
    if ( tmp_assign_source_281 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 415;

        goto try_except_handler_49;
    }
    assert( outline_23_var___class__ == NULL );
    outline_23_var___class__ = tmp_assign_source_281;

    tmp_outline_return_value_24 = outline_23_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_24 );
    Py_INCREF( tmp_outline_return_value_24 );
    goto try_return_handler_49;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_49:;
    CHECK_OBJECT( (PyObject *)outline_23_var___class__ );
    Py_DECREF( outline_23_var___class__ );
    outline_23_var___class__ = NULL;

    Py_XDECREF( outline_23_var___qualname__ );
    outline_23_var___qualname__ = NULL;

    Py_XDECREF( outline_23_var___module__ );
    outline_23_var___module__ = NULL;

    Py_XDECREF( outline_23_var___doc__ );
    outline_23_var___doc__ = NULL;

    Py_XDECREF( outline_23_var_fields );
    outline_23_var_fields = NULL;

    Py_XDECREF( outline_23_var_operator );
    outline_23_var_operator = NULL;

    Py_XDECREF( outline_23_var_abstract );
    outline_23_var_abstract = NULL;

    Py_XDECREF( outline_23_var_as_const );
    outline_23_var_as_const = NULL;

    goto outline_result_24;
    // Exception handler code:
    try_except_handler_49:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_keeper_lineno_48 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_23_var___qualname__ );
    outline_23_var___qualname__ = NULL;

    Py_XDECREF( outline_23_var___module__ );
    outline_23_var___module__ = NULL;

    Py_XDECREF( outline_23_var___doc__ );
    outline_23_var___doc__ = NULL;

    Py_XDECREF( outline_23_var_fields );
    outline_23_var_fields = NULL;

    Py_XDECREF( outline_23_var_operator );
    outline_23_var_operator = NULL;

    Py_XDECREF( outline_23_var_abstract );
    outline_23_var_abstract = NULL;

    Py_XDECREF( outline_23_var_as_const );
    outline_23_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_48;
    exception_value = exception_keeper_value_48;
    exception_tb = exception_keeper_tb_48;
    exception_lineno = exception_keeper_lineno_48;

    goto outline_exception_24;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_24:;
    exception_lineno = 415;
    goto try_except_handler_48;
    outline_result_24:;
    tmp_assign_source_273 = tmp_outline_return_value_24;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr, tmp_assign_source_273 );
    goto try_end_25;
    // Exception handler code:
    try_except_handler_48:;
    exception_keeper_type_49 = exception_type;
    exception_keeper_value_49 = exception_value;
    exception_keeper_tb_49 = exception_tb;
    exception_keeper_lineno_49 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_24__bases );
    tmp_class_creation_24__bases = NULL;

    Py_XDECREF( tmp_class_creation_24__class_decl_dict );
    tmp_class_creation_24__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_24__metaclass );
    tmp_class_creation_24__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_24__prepared );
    tmp_class_creation_24__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_49;
    exception_value = exception_keeper_value_49;
    exception_tb = exception_keeper_tb_49;
    exception_lineno = exception_keeper_lineno_49;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    Py_XDECREF( tmp_class_creation_24__bases );
    tmp_class_creation_24__bases = NULL;

    Py_XDECREF( tmp_class_creation_24__class_decl_dict );
    tmp_class_creation_24__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_24__metaclass );
    tmp_class_creation_24__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_24__prepared );
    tmp_class_creation_24__prepared = NULL;

    // Tried code:
    tmp_assign_source_282 = PyTuple_New( 1 );
    tmp_tuple_element_72 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_72 == NULL ))
    {
        tmp_tuple_element_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_72 == NULL )
    {
        Py_DECREF( tmp_assign_source_282 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 434;

        goto try_except_handler_50;
    }

    Py_INCREF( tmp_tuple_element_72 );
    PyTuple_SET_ITEM( tmp_assign_source_282, 0, tmp_tuple_element_72 );
    assert( tmp_class_creation_25__bases == NULL );
    tmp_class_creation_25__bases = tmp_assign_source_282;

    tmp_assign_source_283 = PyDict_New();
    assert( tmp_class_creation_25__class_decl_dict == NULL );
    tmp_class_creation_25__class_decl_dict = tmp_assign_source_283;

    tmp_compare_left_49 = const_str_plain_metaclass;
    tmp_compare_right_49 = tmp_class_creation_25__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_49 );
    tmp_cmp_In_49 = PySequence_Contains( tmp_compare_right_49, tmp_compare_left_49 );
    assert( !(tmp_cmp_In_49 == -1) );
    if ( tmp_cmp_In_49 == 1 )
    {
        goto condexpr_true_73;
    }
    else
    {
        goto condexpr_false_73;
    }
    condexpr_true_73:;
    tmp_dict_name_25 = tmp_class_creation_25__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_25 );
    tmp_key_name_25 = const_str_plain_metaclass;
    tmp_metaclass_name_25 = DICT_GET_ITEM( tmp_dict_name_25, tmp_key_name_25 );
    if ( tmp_metaclass_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_50;
    }
    goto condexpr_end_73;
    condexpr_false_73:;
    tmp_cond_value_25 = tmp_class_creation_25__bases;

    CHECK_OBJECT( tmp_cond_value_25 );
    tmp_cond_truth_25 = CHECK_IF_TRUE( tmp_cond_value_25 );
    if ( tmp_cond_truth_25 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_50;
    }
    if ( tmp_cond_truth_25 == 1 )
    {
        goto condexpr_true_74;
    }
    else
    {
        goto condexpr_false_74;
    }
    condexpr_true_74:;
    tmp_subscribed_name_25 = tmp_class_creation_25__bases;

    CHECK_OBJECT( tmp_subscribed_name_25 );
    tmp_subscript_name_25 = const_int_0;
    tmp_type_arg_25 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_25, tmp_subscript_name_25 );
    if ( tmp_type_arg_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_50;
    }
    tmp_metaclass_name_25 = BUILTIN_TYPE1( tmp_type_arg_25 );
    Py_DECREF( tmp_type_arg_25 );
    if ( tmp_metaclass_name_25 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_50;
    }
    goto condexpr_end_74;
    condexpr_false_74:;
    tmp_metaclass_name_25 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_25 );
    condexpr_end_74:;
    condexpr_end_73:;
    tmp_bases_name_25 = tmp_class_creation_25__bases;

    CHECK_OBJECT( tmp_bases_name_25 );
    tmp_assign_source_284 = SELECT_METACLASS( tmp_metaclass_name_25, tmp_bases_name_25 );
    if ( tmp_assign_source_284 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_25 );

        exception_lineno = 434;

        goto try_except_handler_50;
    }
    Py_DECREF( tmp_metaclass_name_25 );
    assert( tmp_class_creation_25__metaclass == NULL );
    tmp_class_creation_25__metaclass = tmp_assign_source_284;

    tmp_compare_left_50 = const_str_plain_metaclass;
    tmp_compare_right_50 = tmp_class_creation_25__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_50 );
    tmp_cmp_In_50 = PySequence_Contains( tmp_compare_right_50, tmp_compare_left_50 );
    assert( !(tmp_cmp_In_50 == -1) );
    if ( tmp_cmp_In_50 == 1 )
    {
        goto branch_yes_25;
    }
    else
    {
        goto branch_no_25;
    }
    branch_yes_25:;
    tmp_dictdel_dict = tmp_class_creation_25__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_50;
    }
    branch_no_25:;
    tmp_hasattr_source_25 = tmp_class_creation_25__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_25 );
    tmp_hasattr_attr_25 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_25, tmp_hasattr_attr_25 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_50;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_75;
    }
    else
    {
        goto condexpr_false_75;
    }
    condexpr_true_75:;
    tmp_source_name_44 = tmp_class_creation_25__metaclass;

    CHECK_OBJECT( tmp_source_name_44 );
    tmp_called_name_51 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain___prepare__ );
    if ( tmp_called_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_50;
    }
    tmp_args_name_49 = PyTuple_New( 2 );
    tmp_tuple_element_73 = const_str_plain_UnaryExpr;
    Py_INCREF( tmp_tuple_element_73 );
    PyTuple_SET_ITEM( tmp_args_name_49, 0, tmp_tuple_element_73 );
    tmp_tuple_element_73 = tmp_class_creation_25__bases;

    CHECK_OBJECT( tmp_tuple_element_73 );
    Py_INCREF( tmp_tuple_element_73 );
    PyTuple_SET_ITEM( tmp_args_name_49, 1, tmp_tuple_element_73 );
    tmp_kw_name_49 = tmp_class_creation_25__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_49 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 434;
    tmp_assign_source_285 = CALL_FUNCTION( tmp_called_name_51, tmp_args_name_49, tmp_kw_name_49 );
    Py_DECREF( tmp_called_name_51 );
    Py_DECREF( tmp_args_name_49 );
    if ( tmp_assign_source_285 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_50;
    }
    goto condexpr_end_75;
    condexpr_false_75:;
    tmp_assign_source_285 = PyDict_New();
    condexpr_end_75:;
    assert( tmp_class_creation_25__prepared == NULL );
    tmp_class_creation_25__prepared = tmp_assign_source_285;

    tmp_set_locals = tmp_class_creation_25__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_25);
    locals_dict_25 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_287 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_24_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_287 );
    outline_24_var___module__ = tmp_assign_source_287;

    tmp_assign_source_288 = const_str_digest_472796dcef6b45d0473d8b520f22289a;
    assert( outline_24_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_288 );
    outline_24_var___doc__ = tmp_assign_source_288;

    tmp_assign_source_289 = const_str_plain_UnaryExpr;
    assert( outline_24_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_289 );
    outline_24_var___qualname__ = tmp_assign_source_289;

    tmp_assign_source_290 = const_tuple_str_plain_node_tuple;
    assert( outline_24_var_fields == NULL );
    Py_INCREF( tmp_assign_source_290 );
    outline_24_var_fields = tmp_assign_source_290;

    tmp_assign_source_291 = Py_None;
    assert( outline_24_var_operator == NULL );
    Py_INCREF( tmp_assign_source_291 );
    outline_24_var_operator = tmp_assign_source_291;

    tmp_assign_source_292 = Py_True;
    assert( outline_24_var_abstract == NULL );
    Py_INCREF( tmp_assign_source_292 );
    outline_24_var_abstract = tmp_assign_source_292;

    tmp_defaults_7 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_7 );
    tmp_assign_source_293 = MAKE_FUNCTION_jinja2$nodes$$$function_23_as_const( tmp_defaults_7 );
    assert( outline_24_var_as_const == NULL );
    outline_24_var_as_const = tmp_assign_source_293;

    // Tried code:
    tmp_called_name_52 = tmp_class_creation_25__metaclass;

    CHECK_OBJECT( tmp_called_name_52 );
    tmp_args_name_50 = PyTuple_New( 3 );
    tmp_tuple_element_74 = const_str_plain_UnaryExpr;
    Py_INCREF( tmp_tuple_element_74 );
    PyTuple_SET_ITEM( tmp_args_name_50, 0, tmp_tuple_element_74 );
    tmp_tuple_element_74 = tmp_class_creation_25__bases;

    CHECK_OBJECT( tmp_tuple_element_74 );
    Py_INCREF( tmp_tuple_element_74 );
    PyTuple_SET_ITEM( tmp_args_name_50, 1, tmp_tuple_element_74 );
    tmp_tuple_element_74 = locals_dict_25;
    Py_INCREF( tmp_tuple_element_74 );
    if ( outline_24_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_74,
            const_str_plain___qualname__,
            outline_24_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_74,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_74,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_50 );
        Py_DECREF( tmp_tuple_element_74 );

        exception_lineno = 434;

        goto try_except_handler_51;
    }
    if ( outline_24_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_74,
            const_str_plain___module__,
            outline_24_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_74,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_74,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_50 );
        Py_DECREF( tmp_tuple_element_74 );

        exception_lineno = 434;

        goto try_except_handler_51;
    }
    if ( outline_24_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_74,
            const_str_plain___doc__,
            outline_24_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_74,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_74,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_50 );
        Py_DECREF( tmp_tuple_element_74 );

        exception_lineno = 434;

        goto try_except_handler_51;
    }
    if ( outline_24_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_74,
            const_str_plain_fields,
            outline_24_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_74,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_74,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_50 );
        Py_DECREF( tmp_tuple_element_74 );

        exception_lineno = 434;

        goto try_except_handler_51;
    }
    if ( outline_24_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_74,
            const_str_plain_operator,
            outline_24_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_74,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_74,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_50 );
        Py_DECREF( tmp_tuple_element_74 );

        exception_lineno = 434;

        goto try_except_handler_51;
    }
    if ( outline_24_var_abstract != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_74,
            const_str_plain_abstract,
            outline_24_var_abstract
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_74,
            const_str_plain_abstract
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_74,
                const_str_plain_abstract
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_50 );
        Py_DECREF( tmp_tuple_element_74 );

        exception_lineno = 434;

        goto try_except_handler_51;
    }
    if ( outline_24_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_74,
            const_str_plain_as_const,
            outline_24_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_74,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_74,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_50 );
        Py_DECREF( tmp_tuple_element_74 );

        exception_lineno = 434;

        goto try_except_handler_51;
    }
    PyTuple_SET_ITEM( tmp_args_name_50, 2, tmp_tuple_element_74 );
    tmp_kw_name_50 = tmp_class_creation_25__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_50 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 434;
    tmp_assign_source_294 = CALL_FUNCTION( tmp_called_name_52, tmp_args_name_50, tmp_kw_name_50 );
    Py_DECREF( tmp_args_name_50 );
    if ( tmp_assign_source_294 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 434;

        goto try_except_handler_51;
    }
    assert( outline_24_var___class__ == NULL );
    outline_24_var___class__ = tmp_assign_source_294;

    tmp_outline_return_value_25 = outline_24_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_25 );
    Py_INCREF( tmp_outline_return_value_25 );
    goto try_return_handler_51;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_51:;
    CHECK_OBJECT( (PyObject *)outline_24_var___class__ );
    Py_DECREF( outline_24_var___class__ );
    outline_24_var___class__ = NULL;

    Py_XDECREF( outline_24_var___qualname__ );
    outline_24_var___qualname__ = NULL;

    Py_XDECREF( outline_24_var___module__ );
    outline_24_var___module__ = NULL;

    Py_XDECREF( outline_24_var___doc__ );
    outline_24_var___doc__ = NULL;

    Py_XDECREF( outline_24_var_fields );
    outline_24_var_fields = NULL;

    Py_XDECREF( outline_24_var_operator );
    outline_24_var_operator = NULL;

    Py_XDECREF( outline_24_var_abstract );
    outline_24_var_abstract = NULL;

    Py_XDECREF( outline_24_var_as_const );
    outline_24_var_as_const = NULL;

    goto outline_result_25;
    // Exception handler code:
    try_except_handler_51:;
    exception_keeper_type_50 = exception_type;
    exception_keeper_value_50 = exception_value;
    exception_keeper_tb_50 = exception_tb;
    exception_keeper_lineno_50 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_24_var___qualname__ );
    outline_24_var___qualname__ = NULL;

    Py_XDECREF( outline_24_var___module__ );
    outline_24_var___module__ = NULL;

    Py_XDECREF( outline_24_var___doc__ );
    outline_24_var___doc__ = NULL;

    Py_XDECREF( outline_24_var_fields );
    outline_24_var_fields = NULL;

    Py_XDECREF( outline_24_var_operator );
    outline_24_var_operator = NULL;

    Py_XDECREF( outline_24_var_abstract );
    outline_24_var_abstract = NULL;

    Py_XDECREF( outline_24_var_as_const );
    outline_24_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_50;
    exception_value = exception_keeper_value_50;
    exception_tb = exception_keeper_tb_50;
    exception_lineno = exception_keeper_lineno_50;

    goto outline_exception_25;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_25:;
    exception_lineno = 434;
    goto try_except_handler_50;
    outline_result_25:;
    tmp_assign_source_286 = tmp_outline_return_value_25;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_UnaryExpr, tmp_assign_source_286 );
    goto try_end_26;
    // Exception handler code:
    try_except_handler_50:;
    exception_keeper_type_51 = exception_type;
    exception_keeper_value_51 = exception_value;
    exception_keeper_tb_51 = exception_tb;
    exception_keeper_lineno_51 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_25__bases );
    tmp_class_creation_25__bases = NULL;

    Py_XDECREF( tmp_class_creation_25__class_decl_dict );
    tmp_class_creation_25__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_25__metaclass );
    tmp_class_creation_25__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_25__prepared );
    tmp_class_creation_25__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_51;
    exception_value = exception_keeper_value_51;
    exception_tb = exception_keeper_tb_51;
    exception_lineno = exception_keeper_lineno_51;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    Py_XDECREF( tmp_class_creation_25__bases );
    tmp_class_creation_25__bases = NULL;

    Py_XDECREF( tmp_class_creation_25__class_decl_dict );
    tmp_class_creation_25__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_25__metaclass );
    tmp_class_creation_25__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_25__prepared );
    tmp_class_creation_25__prepared = NULL;

    // Tried code:
    tmp_assign_source_295 = PyTuple_New( 1 );
    tmp_tuple_element_75 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_75 == NULL ))
    {
        tmp_tuple_element_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_75 == NULL )
    {
        Py_DECREF( tmp_assign_source_295 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 453;

        goto try_except_handler_52;
    }

    Py_INCREF( tmp_tuple_element_75 );
    PyTuple_SET_ITEM( tmp_assign_source_295, 0, tmp_tuple_element_75 );
    assert( tmp_class_creation_26__bases == NULL );
    tmp_class_creation_26__bases = tmp_assign_source_295;

    tmp_assign_source_296 = PyDict_New();
    assert( tmp_class_creation_26__class_decl_dict == NULL );
    tmp_class_creation_26__class_decl_dict = tmp_assign_source_296;

    tmp_compare_left_51 = const_str_plain_metaclass;
    tmp_compare_right_51 = tmp_class_creation_26__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_51 );
    tmp_cmp_In_51 = PySequence_Contains( tmp_compare_right_51, tmp_compare_left_51 );
    assert( !(tmp_cmp_In_51 == -1) );
    if ( tmp_cmp_In_51 == 1 )
    {
        goto condexpr_true_76;
    }
    else
    {
        goto condexpr_false_76;
    }
    condexpr_true_76:;
    tmp_dict_name_26 = tmp_class_creation_26__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_26 );
    tmp_key_name_26 = const_str_plain_metaclass;
    tmp_metaclass_name_26 = DICT_GET_ITEM( tmp_dict_name_26, tmp_key_name_26 );
    if ( tmp_metaclass_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_52;
    }
    goto condexpr_end_76;
    condexpr_false_76:;
    tmp_cond_value_26 = tmp_class_creation_26__bases;

    CHECK_OBJECT( tmp_cond_value_26 );
    tmp_cond_truth_26 = CHECK_IF_TRUE( tmp_cond_value_26 );
    if ( tmp_cond_truth_26 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_52;
    }
    if ( tmp_cond_truth_26 == 1 )
    {
        goto condexpr_true_77;
    }
    else
    {
        goto condexpr_false_77;
    }
    condexpr_true_77:;
    tmp_subscribed_name_26 = tmp_class_creation_26__bases;

    CHECK_OBJECT( tmp_subscribed_name_26 );
    tmp_subscript_name_26 = const_int_0;
    tmp_type_arg_26 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_26, tmp_subscript_name_26 );
    if ( tmp_type_arg_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_52;
    }
    tmp_metaclass_name_26 = BUILTIN_TYPE1( tmp_type_arg_26 );
    Py_DECREF( tmp_type_arg_26 );
    if ( tmp_metaclass_name_26 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_52;
    }
    goto condexpr_end_77;
    condexpr_false_77:;
    tmp_metaclass_name_26 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_26 );
    condexpr_end_77:;
    condexpr_end_76:;
    tmp_bases_name_26 = tmp_class_creation_26__bases;

    CHECK_OBJECT( tmp_bases_name_26 );
    tmp_assign_source_297 = SELECT_METACLASS( tmp_metaclass_name_26, tmp_bases_name_26 );
    if ( tmp_assign_source_297 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_26 );

        exception_lineno = 453;

        goto try_except_handler_52;
    }
    Py_DECREF( tmp_metaclass_name_26 );
    assert( tmp_class_creation_26__metaclass == NULL );
    tmp_class_creation_26__metaclass = tmp_assign_source_297;

    tmp_compare_left_52 = const_str_plain_metaclass;
    tmp_compare_right_52 = tmp_class_creation_26__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_52 );
    tmp_cmp_In_52 = PySequence_Contains( tmp_compare_right_52, tmp_compare_left_52 );
    assert( !(tmp_cmp_In_52 == -1) );
    if ( tmp_cmp_In_52 == 1 )
    {
        goto branch_yes_26;
    }
    else
    {
        goto branch_no_26;
    }
    branch_yes_26:;
    tmp_dictdel_dict = tmp_class_creation_26__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_52;
    }
    branch_no_26:;
    tmp_hasattr_source_26 = tmp_class_creation_26__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_26 );
    tmp_hasattr_attr_26 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_26, tmp_hasattr_attr_26 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_52;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_78;
    }
    else
    {
        goto condexpr_false_78;
    }
    condexpr_true_78:;
    tmp_source_name_45 = tmp_class_creation_26__metaclass;

    CHECK_OBJECT( tmp_source_name_45 );
    tmp_called_name_53 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain___prepare__ );
    if ( tmp_called_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_52;
    }
    tmp_args_name_51 = PyTuple_New( 2 );
    tmp_tuple_element_76 = const_str_plain_Name;
    Py_INCREF( tmp_tuple_element_76 );
    PyTuple_SET_ITEM( tmp_args_name_51, 0, tmp_tuple_element_76 );
    tmp_tuple_element_76 = tmp_class_creation_26__bases;

    CHECK_OBJECT( tmp_tuple_element_76 );
    Py_INCREF( tmp_tuple_element_76 );
    PyTuple_SET_ITEM( tmp_args_name_51, 1, tmp_tuple_element_76 );
    tmp_kw_name_51 = tmp_class_creation_26__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_51 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 453;
    tmp_assign_source_298 = CALL_FUNCTION( tmp_called_name_53, tmp_args_name_51, tmp_kw_name_51 );
    Py_DECREF( tmp_called_name_53 );
    Py_DECREF( tmp_args_name_51 );
    if ( tmp_assign_source_298 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_52;
    }
    goto condexpr_end_78;
    condexpr_false_78:;
    tmp_assign_source_298 = PyDict_New();
    condexpr_end_78:;
    assert( tmp_class_creation_26__prepared == NULL );
    tmp_class_creation_26__prepared = tmp_assign_source_298;

    tmp_set_locals = tmp_class_creation_26__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_26);
    locals_dict_26 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_300 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_25_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_300 );
    outline_25_var___module__ = tmp_assign_source_300;

    tmp_assign_source_301 = const_str_digest_1a54bdadf362c140e2262c76f6c45563;
    assert( outline_25_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_301 );
    outline_25_var___doc__ = tmp_assign_source_301;

    tmp_assign_source_302 = const_str_plain_Name;
    assert( outline_25_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_302 );
    outline_25_var___qualname__ = tmp_assign_source_302;

    tmp_assign_source_303 = const_tuple_str_plain_name_str_plain_ctx_tuple;
    assert( outline_25_var_fields == NULL );
    Py_INCREF( tmp_assign_source_303 );
    outline_25_var_fields = tmp_assign_source_303;

    tmp_assign_source_304 = MAKE_FUNCTION_jinja2$nodes$$$function_24_can_assign(  );
    assert( outline_25_var_can_assign == NULL );
    outline_25_var_can_assign = tmp_assign_source_304;

    // Tried code:
    tmp_called_name_54 = tmp_class_creation_26__metaclass;

    CHECK_OBJECT( tmp_called_name_54 );
    tmp_args_name_52 = PyTuple_New( 3 );
    tmp_tuple_element_77 = const_str_plain_Name;
    Py_INCREF( tmp_tuple_element_77 );
    PyTuple_SET_ITEM( tmp_args_name_52, 0, tmp_tuple_element_77 );
    tmp_tuple_element_77 = tmp_class_creation_26__bases;

    CHECK_OBJECT( tmp_tuple_element_77 );
    Py_INCREF( tmp_tuple_element_77 );
    PyTuple_SET_ITEM( tmp_args_name_52, 1, tmp_tuple_element_77 );
    tmp_tuple_element_77 = locals_dict_26;
    Py_INCREF( tmp_tuple_element_77 );
    if ( outline_25_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_77,
            const_str_plain___qualname__,
            outline_25_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_77,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_77,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_52 );
        Py_DECREF( tmp_tuple_element_77 );

        exception_lineno = 453;

        goto try_except_handler_53;
    }
    if ( outline_25_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_77,
            const_str_plain___module__,
            outline_25_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_77,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_77,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_52 );
        Py_DECREF( tmp_tuple_element_77 );

        exception_lineno = 453;

        goto try_except_handler_53;
    }
    if ( outline_25_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_77,
            const_str_plain___doc__,
            outline_25_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_77,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_77,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_52 );
        Py_DECREF( tmp_tuple_element_77 );

        exception_lineno = 453;

        goto try_except_handler_53;
    }
    if ( outline_25_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_77,
            const_str_plain_fields,
            outline_25_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_77,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_77,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_52 );
        Py_DECREF( tmp_tuple_element_77 );

        exception_lineno = 453;

        goto try_except_handler_53;
    }
    if ( outline_25_var_can_assign != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_77,
            const_str_plain_can_assign,
            outline_25_var_can_assign
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_77,
            const_str_plain_can_assign
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_77,
                const_str_plain_can_assign
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_52 );
        Py_DECREF( tmp_tuple_element_77 );

        exception_lineno = 453;

        goto try_except_handler_53;
    }
    PyTuple_SET_ITEM( tmp_args_name_52, 2, tmp_tuple_element_77 );
    tmp_kw_name_52 = tmp_class_creation_26__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_52 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 453;
    tmp_assign_source_305 = CALL_FUNCTION( tmp_called_name_54, tmp_args_name_52, tmp_kw_name_52 );
    Py_DECREF( tmp_args_name_52 );
    if ( tmp_assign_source_305 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 453;

        goto try_except_handler_53;
    }
    assert( outline_25_var___class__ == NULL );
    outline_25_var___class__ = tmp_assign_source_305;

    tmp_outline_return_value_26 = outline_25_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_26 );
    Py_INCREF( tmp_outline_return_value_26 );
    goto try_return_handler_53;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_53:;
    CHECK_OBJECT( (PyObject *)outline_25_var___class__ );
    Py_DECREF( outline_25_var___class__ );
    outline_25_var___class__ = NULL;

    Py_XDECREF( outline_25_var___qualname__ );
    outline_25_var___qualname__ = NULL;

    Py_XDECREF( outline_25_var___module__ );
    outline_25_var___module__ = NULL;

    Py_XDECREF( outline_25_var___doc__ );
    outline_25_var___doc__ = NULL;

    Py_XDECREF( outline_25_var_fields );
    outline_25_var_fields = NULL;

    Py_XDECREF( outline_25_var_can_assign );
    outline_25_var_can_assign = NULL;

    goto outline_result_26;
    // Exception handler code:
    try_except_handler_53:;
    exception_keeper_type_52 = exception_type;
    exception_keeper_value_52 = exception_value;
    exception_keeper_tb_52 = exception_tb;
    exception_keeper_lineno_52 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_25_var___qualname__ );
    outline_25_var___qualname__ = NULL;

    Py_XDECREF( outline_25_var___module__ );
    outline_25_var___module__ = NULL;

    Py_XDECREF( outline_25_var___doc__ );
    outline_25_var___doc__ = NULL;

    Py_XDECREF( outline_25_var_fields );
    outline_25_var_fields = NULL;

    Py_XDECREF( outline_25_var_can_assign );
    outline_25_var_can_assign = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_52;
    exception_value = exception_keeper_value_52;
    exception_tb = exception_keeper_tb_52;
    exception_lineno = exception_keeper_lineno_52;

    goto outline_exception_26;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_26:;
    exception_lineno = 453;
    goto try_except_handler_52;
    outline_result_26:;
    tmp_assign_source_299 = tmp_outline_return_value_26;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Name, tmp_assign_source_299 );
    goto try_end_27;
    // Exception handler code:
    try_except_handler_52:;
    exception_keeper_type_53 = exception_type;
    exception_keeper_value_53 = exception_value;
    exception_keeper_tb_53 = exception_tb;
    exception_keeper_lineno_53 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_26__bases );
    tmp_class_creation_26__bases = NULL;

    Py_XDECREF( tmp_class_creation_26__class_decl_dict );
    tmp_class_creation_26__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_26__metaclass );
    tmp_class_creation_26__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_26__prepared );
    tmp_class_creation_26__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_53;
    exception_value = exception_keeper_value_53;
    exception_tb = exception_keeper_tb_53;
    exception_lineno = exception_keeper_lineno_53;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    Py_XDECREF( tmp_class_creation_26__bases );
    tmp_class_creation_26__bases = NULL;

    Py_XDECREF( tmp_class_creation_26__class_decl_dict );
    tmp_class_creation_26__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_26__metaclass );
    tmp_class_creation_26__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_26__prepared );
    tmp_class_creation_26__prepared = NULL;

    // Tried code:
    tmp_assign_source_306 = PyTuple_New( 1 );
    tmp_tuple_element_78 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_78 == NULL ))
    {
        tmp_tuple_element_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_78 == NULL )
    {
        Py_DECREF( tmp_assign_source_306 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 468;

        goto try_except_handler_54;
    }

    Py_INCREF( tmp_tuple_element_78 );
    PyTuple_SET_ITEM( tmp_assign_source_306, 0, tmp_tuple_element_78 );
    assert( tmp_class_creation_27__bases == NULL );
    tmp_class_creation_27__bases = tmp_assign_source_306;

    tmp_assign_source_307 = PyDict_New();
    assert( tmp_class_creation_27__class_decl_dict == NULL );
    tmp_class_creation_27__class_decl_dict = tmp_assign_source_307;

    tmp_compare_left_53 = const_str_plain_metaclass;
    tmp_compare_right_53 = tmp_class_creation_27__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_53 );
    tmp_cmp_In_53 = PySequence_Contains( tmp_compare_right_53, tmp_compare_left_53 );
    assert( !(tmp_cmp_In_53 == -1) );
    if ( tmp_cmp_In_53 == 1 )
    {
        goto condexpr_true_79;
    }
    else
    {
        goto condexpr_false_79;
    }
    condexpr_true_79:;
    tmp_dict_name_27 = tmp_class_creation_27__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_27 );
    tmp_key_name_27 = const_str_plain_metaclass;
    tmp_metaclass_name_27 = DICT_GET_ITEM( tmp_dict_name_27, tmp_key_name_27 );
    if ( tmp_metaclass_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_54;
    }
    goto condexpr_end_79;
    condexpr_false_79:;
    tmp_cond_value_27 = tmp_class_creation_27__bases;

    CHECK_OBJECT( tmp_cond_value_27 );
    tmp_cond_truth_27 = CHECK_IF_TRUE( tmp_cond_value_27 );
    if ( tmp_cond_truth_27 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_54;
    }
    if ( tmp_cond_truth_27 == 1 )
    {
        goto condexpr_true_80;
    }
    else
    {
        goto condexpr_false_80;
    }
    condexpr_true_80:;
    tmp_subscribed_name_27 = tmp_class_creation_27__bases;

    CHECK_OBJECT( tmp_subscribed_name_27 );
    tmp_subscript_name_27 = const_int_0;
    tmp_type_arg_27 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_27, tmp_subscript_name_27 );
    if ( tmp_type_arg_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_54;
    }
    tmp_metaclass_name_27 = BUILTIN_TYPE1( tmp_type_arg_27 );
    Py_DECREF( tmp_type_arg_27 );
    if ( tmp_metaclass_name_27 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_54;
    }
    goto condexpr_end_80;
    condexpr_false_80:;
    tmp_metaclass_name_27 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_27 );
    condexpr_end_80:;
    condexpr_end_79:;
    tmp_bases_name_27 = tmp_class_creation_27__bases;

    CHECK_OBJECT( tmp_bases_name_27 );
    tmp_assign_source_308 = SELECT_METACLASS( tmp_metaclass_name_27, tmp_bases_name_27 );
    if ( tmp_assign_source_308 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_27 );

        exception_lineno = 468;

        goto try_except_handler_54;
    }
    Py_DECREF( tmp_metaclass_name_27 );
    assert( tmp_class_creation_27__metaclass == NULL );
    tmp_class_creation_27__metaclass = tmp_assign_source_308;

    tmp_compare_left_54 = const_str_plain_metaclass;
    tmp_compare_right_54 = tmp_class_creation_27__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_54 );
    tmp_cmp_In_54 = PySequence_Contains( tmp_compare_right_54, tmp_compare_left_54 );
    assert( !(tmp_cmp_In_54 == -1) );
    if ( tmp_cmp_In_54 == 1 )
    {
        goto branch_yes_27;
    }
    else
    {
        goto branch_no_27;
    }
    branch_yes_27:;
    tmp_dictdel_dict = tmp_class_creation_27__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_54;
    }
    branch_no_27:;
    tmp_hasattr_source_27 = tmp_class_creation_27__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_27 );
    tmp_hasattr_attr_27 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_27, tmp_hasattr_attr_27 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_54;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_81;
    }
    else
    {
        goto condexpr_false_81;
    }
    condexpr_true_81:;
    tmp_source_name_46 = tmp_class_creation_27__metaclass;

    CHECK_OBJECT( tmp_source_name_46 );
    tmp_called_name_55 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain___prepare__ );
    if ( tmp_called_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_54;
    }
    tmp_args_name_53 = PyTuple_New( 2 );
    tmp_tuple_element_79 = const_str_plain_NSRef;
    Py_INCREF( tmp_tuple_element_79 );
    PyTuple_SET_ITEM( tmp_args_name_53, 0, tmp_tuple_element_79 );
    tmp_tuple_element_79 = tmp_class_creation_27__bases;

    CHECK_OBJECT( tmp_tuple_element_79 );
    Py_INCREF( tmp_tuple_element_79 );
    PyTuple_SET_ITEM( tmp_args_name_53, 1, tmp_tuple_element_79 );
    tmp_kw_name_53 = tmp_class_creation_27__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_53 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 468;
    tmp_assign_source_309 = CALL_FUNCTION( tmp_called_name_55, tmp_args_name_53, tmp_kw_name_53 );
    Py_DECREF( tmp_called_name_55 );
    Py_DECREF( tmp_args_name_53 );
    if ( tmp_assign_source_309 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_54;
    }
    goto condexpr_end_81;
    condexpr_false_81:;
    tmp_assign_source_309 = PyDict_New();
    condexpr_end_81:;
    assert( tmp_class_creation_27__prepared == NULL );
    tmp_class_creation_27__prepared = tmp_assign_source_309;

    tmp_set_locals = tmp_class_creation_27__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_27);
    locals_dict_27 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_311 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_26_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_311 );
    outline_26_var___module__ = tmp_assign_source_311;

    tmp_assign_source_312 = const_str_digest_d06746aa47b9d1d9b048c9ac192e1e9b;
    assert( outline_26_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_312 );
    outline_26_var___doc__ = tmp_assign_source_312;

    tmp_assign_source_313 = const_str_plain_NSRef;
    assert( outline_26_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_313 );
    outline_26_var___qualname__ = tmp_assign_source_313;

    tmp_assign_source_314 = const_tuple_str_plain_name_str_plain_attr_tuple;
    assert( outline_26_var_fields == NULL );
    Py_INCREF( tmp_assign_source_314 );
    outline_26_var_fields = tmp_assign_source_314;

    tmp_assign_source_315 = MAKE_FUNCTION_jinja2$nodes$$$function_25_can_assign(  );
    assert( outline_26_var_can_assign == NULL );
    outline_26_var_can_assign = tmp_assign_source_315;

    // Tried code:
    tmp_called_name_56 = tmp_class_creation_27__metaclass;

    CHECK_OBJECT( tmp_called_name_56 );
    tmp_args_name_54 = PyTuple_New( 3 );
    tmp_tuple_element_80 = const_str_plain_NSRef;
    Py_INCREF( tmp_tuple_element_80 );
    PyTuple_SET_ITEM( tmp_args_name_54, 0, tmp_tuple_element_80 );
    tmp_tuple_element_80 = tmp_class_creation_27__bases;

    CHECK_OBJECT( tmp_tuple_element_80 );
    Py_INCREF( tmp_tuple_element_80 );
    PyTuple_SET_ITEM( tmp_args_name_54, 1, tmp_tuple_element_80 );
    tmp_tuple_element_80 = locals_dict_27;
    Py_INCREF( tmp_tuple_element_80 );
    if ( outline_26_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_80,
            const_str_plain___qualname__,
            outline_26_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_80,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_80,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_54 );
        Py_DECREF( tmp_tuple_element_80 );

        exception_lineno = 468;

        goto try_except_handler_55;
    }
    if ( outline_26_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_80,
            const_str_plain___module__,
            outline_26_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_80,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_80,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_54 );
        Py_DECREF( tmp_tuple_element_80 );

        exception_lineno = 468;

        goto try_except_handler_55;
    }
    if ( outline_26_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_80,
            const_str_plain___doc__,
            outline_26_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_80,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_80,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_54 );
        Py_DECREF( tmp_tuple_element_80 );

        exception_lineno = 468;

        goto try_except_handler_55;
    }
    if ( outline_26_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_80,
            const_str_plain_fields,
            outline_26_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_80,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_80,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_54 );
        Py_DECREF( tmp_tuple_element_80 );

        exception_lineno = 468;

        goto try_except_handler_55;
    }
    if ( outline_26_var_can_assign != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_80,
            const_str_plain_can_assign,
            outline_26_var_can_assign
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_80,
            const_str_plain_can_assign
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_80,
                const_str_plain_can_assign
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_54 );
        Py_DECREF( tmp_tuple_element_80 );

        exception_lineno = 468;

        goto try_except_handler_55;
    }
    PyTuple_SET_ITEM( tmp_args_name_54, 2, tmp_tuple_element_80 );
    tmp_kw_name_54 = tmp_class_creation_27__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_54 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 468;
    tmp_assign_source_316 = CALL_FUNCTION( tmp_called_name_56, tmp_args_name_54, tmp_kw_name_54 );
    Py_DECREF( tmp_args_name_54 );
    if ( tmp_assign_source_316 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 468;

        goto try_except_handler_55;
    }
    assert( outline_26_var___class__ == NULL );
    outline_26_var___class__ = tmp_assign_source_316;

    tmp_outline_return_value_27 = outline_26_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_27 );
    Py_INCREF( tmp_outline_return_value_27 );
    goto try_return_handler_55;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_55:;
    CHECK_OBJECT( (PyObject *)outline_26_var___class__ );
    Py_DECREF( outline_26_var___class__ );
    outline_26_var___class__ = NULL;

    Py_XDECREF( outline_26_var___qualname__ );
    outline_26_var___qualname__ = NULL;

    Py_XDECREF( outline_26_var___module__ );
    outline_26_var___module__ = NULL;

    Py_XDECREF( outline_26_var___doc__ );
    outline_26_var___doc__ = NULL;

    Py_XDECREF( outline_26_var_fields );
    outline_26_var_fields = NULL;

    Py_XDECREF( outline_26_var_can_assign );
    outline_26_var_can_assign = NULL;

    goto outline_result_27;
    // Exception handler code:
    try_except_handler_55:;
    exception_keeper_type_54 = exception_type;
    exception_keeper_value_54 = exception_value;
    exception_keeper_tb_54 = exception_tb;
    exception_keeper_lineno_54 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_26_var___qualname__ );
    outline_26_var___qualname__ = NULL;

    Py_XDECREF( outline_26_var___module__ );
    outline_26_var___module__ = NULL;

    Py_XDECREF( outline_26_var___doc__ );
    outline_26_var___doc__ = NULL;

    Py_XDECREF( outline_26_var_fields );
    outline_26_var_fields = NULL;

    Py_XDECREF( outline_26_var_can_assign );
    outline_26_var_can_assign = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_54;
    exception_value = exception_keeper_value_54;
    exception_tb = exception_keeper_tb_54;
    exception_lineno = exception_keeper_lineno_54;

    goto outline_exception_27;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_27:;
    exception_lineno = 468;
    goto try_except_handler_54;
    outline_result_27:;
    tmp_assign_source_310 = tmp_outline_return_value_27;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_NSRef, tmp_assign_source_310 );
    goto try_end_28;
    // Exception handler code:
    try_except_handler_54:;
    exception_keeper_type_55 = exception_type;
    exception_keeper_value_55 = exception_value;
    exception_keeper_tb_55 = exception_tb;
    exception_keeper_lineno_55 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_27__bases );
    tmp_class_creation_27__bases = NULL;

    Py_XDECREF( tmp_class_creation_27__class_decl_dict );
    tmp_class_creation_27__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_27__metaclass );
    tmp_class_creation_27__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_27__prepared );
    tmp_class_creation_27__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_55;
    exception_value = exception_keeper_value_55;
    exception_tb = exception_keeper_tb_55;
    exception_lineno = exception_keeper_lineno_55;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    Py_XDECREF( tmp_class_creation_27__bases );
    tmp_class_creation_27__bases = NULL;

    Py_XDECREF( tmp_class_creation_27__class_decl_dict );
    tmp_class_creation_27__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_27__metaclass );
    tmp_class_creation_27__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_27__prepared );
    tmp_class_creation_27__prepared = NULL;

    // Tried code:
    tmp_assign_source_317 = PyTuple_New( 1 );
    tmp_tuple_element_81 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_81 == NULL ))
    {
        tmp_tuple_element_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_81 == NULL )
    {
        Py_DECREF( tmp_assign_source_317 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 480;

        goto try_except_handler_56;
    }

    Py_INCREF( tmp_tuple_element_81 );
    PyTuple_SET_ITEM( tmp_assign_source_317, 0, tmp_tuple_element_81 );
    assert( tmp_class_creation_28__bases == NULL );
    tmp_class_creation_28__bases = tmp_assign_source_317;

    tmp_assign_source_318 = PyDict_New();
    assert( tmp_class_creation_28__class_decl_dict == NULL );
    tmp_class_creation_28__class_decl_dict = tmp_assign_source_318;

    tmp_compare_left_55 = const_str_plain_metaclass;
    tmp_compare_right_55 = tmp_class_creation_28__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_55 );
    tmp_cmp_In_55 = PySequence_Contains( tmp_compare_right_55, tmp_compare_left_55 );
    assert( !(tmp_cmp_In_55 == -1) );
    if ( tmp_cmp_In_55 == 1 )
    {
        goto condexpr_true_82;
    }
    else
    {
        goto condexpr_false_82;
    }
    condexpr_true_82:;
    tmp_dict_name_28 = tmp_class_creation_28__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_28 );
    tmp_key_name_28 = const_str_plain_metaclass;
    tmp_metaclass_name_28 = DICT_GET_ITEM( tmp_dict_name_28, tmp_key_name_28 );
    if ( tmp_metaclass_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_56;
    }
    goto condexpr_end_82;
    condexpr_false_82:;
    tmp_cond_value_28 = tmp_class_creation_28__bases;

    CHECK_OBJECT( tmp_cond_value_28 );
    tmp_cond_truth_28 = CHECK_IF_TRUE( tmp_cond_value_28 );
    if ( tmp_cond_truth_28 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_56;
    }
    if ( tmp_cond_truth_28 == 1 )
    {
        goto condexpr_true_83;
    }
    else
    {
        goto condexpr_false_83;
    }
    condexpr_true_83:;
    tmp_subscribed_name_28 = tmp_class_creation_28__bases;

    CHECK_OBJECT( tmp_subscribed_name_28 );
    tmp_subscript_name_28 = const_int_0;
    tmp_type_arg_28 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_28, tmp_subscript_name_28 );
    if ( tmp_type_arg_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_56;
    }
    tmp_metaclass_name_28 = BUILTIN_TYPE1( tmp_type_arg_28 );
    Py_DECREF( tmp_type_arg_28 );
    if ( tmp_metaclass_name_28 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_56;
    }
    goto condexpr_end_83;
    condexpr_false_83:;
    tmp_metaclass_name_28 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_28 );
    condexpr_end_83:;
    condexpr_end_82:;
    tmp_bases_name_28 = tmp_class_creation_28__bases;

    CHECK_OBJECT( tmp_bases_name_28 );
    tmp_assign_source_319 = SELECT_METACLASS( tmp_metaclass_name_28, tmp_bases_name_28 );
    if ( tmp_assign_source_319 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_28 );

        exception_lineno = 480;

        goto try_except_handler_56;
    }
    Py_DECREF( tmp_metaclass_name_28 );
    assert( tmp_class_creation_28__metaclass == NULL );
    tmp_class_creation_28__metaclass = tmp_assign_source_319;

    tmp_compare_left_56 = const_str_plain_metaclass;
    tmp_compare_right_56 = tmp_class_creation_28__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_56 );
    tmp_cmp_In_56 = PySequence_Contains( tmp_compare_right_56, tmp_compare_left_56 );
    assert( !(tmp_cmp_In_56 == -1) );
    if ( tmp_cmp_In_56 == 1 )
    {
        goto branch_yes_28;
    }
    else
    {
        goto branch_no_28;
    }
    branch_yes_28:;
    tmp_dictdel_dict = tmp_class_creation_28__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_56;
    }
    branch_no_28:;
    tmp_hasattr_source_28 = tmp_class_creation_28__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_28 );
    tmp_hasattr_attr_28 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_28, tmp_hasattr_attr_28 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_56;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_84;
    }
    else
    {
        goto condexpr_false_84;
    }
    condexpr_true_84:;
    tmp_source_name_47 = tmp_class_creation_28__metaclass;

    CHECK_OBJECT( tmp_source_name_47 );
    tmp_called_name_57 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain___prepare__ );
    if ( tmp_called_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_56;
    }
    tmp_args_name_55 = PyTuple_New( 2 );
    tmp_tuple_element_82 = const_str_plain_Literal;
    Py_INCREF( tmp_tuple_element_82 );
    PyTuple_SET_ITEM( tmp_args_name_55, 0, tmp_tuple_element_82 );
    tmp_tuple_element_82 = tmp_class_creation_28__bases;

    CHECK_OBJECT( tmp_tuple_element_82 );
    Py_INCREF( tmp_tuple_element_82 );
    PyTuple_SET_ITEM( tmp_args_name_55, 1, tmp_tuple_element_82 );
    tmp_kw_name_55 = tmp_class_creation_28__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_55 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 480;
    tmp_assign_source_320 = CALL_FUNCTION( tmp_called_name_57, tmp_args_name_55, tmp_kw_name_55 );
    Py_DECREF( tmp_called_name_57 );
    Py_DECREF( tmp_args_name_55 );
    if ( tmp_assign_source_320 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_56;
    }
    goto condexpr_end_84;
    condexpr_false_84:;
    tmp_assign_source_320 = PyDict_New();
    condexpr_end_84:;
    assert( tmp_class_creation_28__prepared == NULL );
    tmp_class_creation_28__prepared = tmp_assign_source_320;

    tmp_set_locals = tmp_class_creation_28__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_28);
    locals_dict_28 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_322 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_27_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_322 );
    outline_27_var___module__ = tmp_assign_source_322;

    tmp_assign_source_323 = const_str_digest_845cafcab2f0caa927796cd7bcdd0142;
    assert( outline_27_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_323 );
    outline_27_var___doc__ = tmp_assign_source_323;

    tmp_assign_source_324 = const_str_plain_Literal;
    assert( outline_27_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_324 );
    outline_27_var___qualname__ = tmp_assign_source_324;

    tmp_assign_source_325 = Py_True;
    assert( outline_27_var_abstract == NULL );
    Py_INCREF( tmp_assign_source_325 );
    outline_27_var_abstract = tmp_assign_source_325;

    // Tried code:
    tmp_called_name_58 = tmp_class_creation_28__metaclass;

    CHECK_OBJECT( tmp_called_name_58 );
    tmp_args_name_56 = PyTuple_New( 3 );
    tmp_tuple_element_83 = const_str_plain_Literal;
    Py_INCREF( tmp_tuple_element_83 );
    PyTuple_SET_ITEM( tmp_args_name_56, 0, tmp_tuple_element_83 );
    tmp_tuple_element_83 = tmp_class_creation_28__bases;

    CHECK_OBJECT( tmp_tuple_element_83 );
    Py_INCREF( tmp_tuple_element_83 );
    PyTuple_SET_ITEM( tmp_args_name_56, 1, tmp_tuple_element_83 );
    tmp_tuple_element_83 = locals_dict_28;
    Py_INCREF( tmp_tuple_element_83 );
    if ( outline_27_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_83,
            const_str_plain___qualname__,
            outline_27_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_83,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_83,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_56 );
        Py_DECREF( tmp_tuple_element_83 );

        exception_lineno = 480;

        goto try_except_handler_57;
    }
    if ( outline_27_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_83,
            const_str_plain___module__,
            outline_27_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_83,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_83,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_56 );
        Py_DECREF( tmp_tuple_element_83 );

        exception_lineno = 480;

        goto try_except_handler_57;
    }
    if ( outline_27_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_83,
            const_str_plain___doc__,
            outline_27_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_83,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_83,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_56 );
        Py_DECREF( tmp_tuple_element_83 );

        exception_lineno = 480;

        goto try_except_handler_57;
    }
    if ( outline_27_var_abstract != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_83,
            const_str_plain_abstract,
            outline_27_var_abstract
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_83,
            const_str_plain_abstract
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_83,
                const_str_plain_abstract
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_56 );
        Py_DECREF( tmp_tuple_element_83 );

        exception_lineno = 480;

        goto try_except_handler_57;
    }
    PyTuple_SET_ITEM( tmp_args_name_56, 2, tmp_tuple_element_83 );
    tmp_kw_name_56 = tmp_class_creation_28__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_56 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 480;
    tmp_assign_source_326 = CALL_FUNCTION( tmp_called_name_58, tmp_args_name_56, tmp_kw_name_56 );
    Py_DECREF( tmp_args_name_56 );
    if ( tmp_assign_source_326 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 480;

        goto try_except_handler_57;
    }
    assert( outline_27_var___class__ == NULL );
    outline_27_var___class__ = tmp_assign_source_326;

    tmp_outline_return_value_28 = outline_27_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_28 );
    Py_INCREF( tmp_outline_return_value_28 );
    goto try_return_handler_57;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_57:;
    CHECK_OBJECT( (PyObject *)outline_27_var___class__ );
    Py_DECREF( outline_27_var___class__ );
    outline_27_var___class__ = NULL;

    Py_XDECREF( outline_27_var___qualname__ );
    outline_27_var___qualname__ = NULL;

    Py_XDECREF( outline_27_var___module__ );
    outline_27_var___module__ = NULL;

    Py_XDECREF( outline_27_var___doc__ );
    outline_27_var___doc__ = NULL;

    Py_XDECREF( outline_27_var_abstract );
    outline_27_var_abstract = NULL;

    goto outline_result_28;
    // Exception handler code:
    try_except_handler_57:;
    exception_keeper_type_56 = exception_type;
    exception_keeper_value_56 = exception_value;
    exception_keeper_tb_56 = exception_tb;
    exception_keeper_lineno_56 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_27_var___qualname__ );
    outline_27_var___qualname__ = NULL;

    Py_XDECREF( outline_27_var___module__ );
    outline_27_var___module__ = NULL;

    Py_XDECREF( outline_27_var___doc__ );
    outline_27_var___doc__ = NULL;

    Py_XDECREF( outline_27_var_abstract );
    outline_27_var_abstract = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_56;
    exception_value = exception_keeper_value_56;
    exception_tb = exception_keeper_tb_56;
    exception_lineno = exception_keeper_lineno_56;

    goto outline_exception_28;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_28:;
    exception_lineno = 480;
    goto try_except_handler_56;
    outline_result_28:;
    tmp_assign_source_321 = tmp_outline_return_value_28;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Literal, tmp_assign_source_321 );
    goto try_end_29;
    // Exception handler code:
    try_except_handler_56:;
    exception_keeper_type_57 = exception_type;
    exception_keeper_value_57 = exception_value;
    exception_keeper_tb_57 = exception_tb;
    exception_keeper_lineno_57 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_28__bases );
    tmp_class_creation_28__bases = NULL;

    Py_XDECREF( tmp_class_creation_28__class_decl_dict );
    tmp_class_creation_28__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_28__metaclass );
    tmp_class_creation_28__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_28__prepared );
    tmp_class_creation_28__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_57;
    exception_value = exception_keeper_value_57;
    exception_tb = exception_keeper_tb_57;
    exception_lineno = exception_keeper_lineno_57;

    goto frame_exception_exit_1;
    // End of try:
    try_end_29:;
    Py_XDECREF( tmp_class_creation_28__bases );
    tmp_class_creation_28__bases = NULL;

    Py_XDECREF( tmp_class_creation_28__class_decl_dict );
    tmp_class_creation_28__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_28__metaclass );
    tmp_class_creation_28__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_28__prepared );
    tmp_class_creation_28__prepared = NULL;

    // Tried code:
    tmp_assign_source_327 = PyTuple_New( 1 );
    tmp_tuple_element_84 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Literal );

    if (unlikely( tmp_tuple_element_84 == NULL ))
    {
        tmp_tuple_element_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Literal );
    }

    if ( tmp_tuple_element_84 == NULL )
    {
        Py_DECREF( tmp_assign_source_327 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Literal" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 485;

        goto try_except_handler_58;
    }

    Py_INCREF( tmp_tuple_element_84 );
    PyTuple_SET_ITEM( tmp_assign_source_327, 0, tmp_tuple_element_84 );
    assert( tmp_class_creation_29__bases == NULL );
    tmp_class_creation_29__bases = tmp_assign_source_327;

    tmp_assign_source_328 = PyDict_New();
    assert( tmp_class_creation_29__class_decl_dict == NULL );
    tmp_class_creation_29__class_decl_dict = tmp_assign_source_328;

    tmp_compare_left_57 = const_str_plain_metaclass;
    tmp_compare_right_57 = tmp_class_creation_29__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_57 );
    tmp_cmp_In_57 = PySequence_Contains( tmp_compare_right_57, tmp_compare_left_57 );
    assert( !(tmp_cmp_In_57 == -1) );
    if ( tmp_cmp_In_57 == 1 )
    {
        goto condexpr_true_85;
    }
    else
    {
        goto condexpr_false_85;
    }
    condexpr_true_85:;
    tmp_dict_name_29 = tmp_class_creation_29__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_29 );
    tmp_key_name_29 = const_str_plain_metaclass;
    tmp_metaclass_name_29 = DICT_GET_ITEM( tmp_dict_name_29, tmp_key_name_29 );
    if ( tmp_metaclass_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_58;
    }
    goto condexpr_end_85;
    condexpr_false_85:;
    tmp_cond_value_29 = tmp_class_creation_29__bases;

    CHECK_OBJECT( tmp_cond_value_29 );
    tmp_cond_truth_29 = CHECK_IF_TRUE( tmp_cond_value_29 );
    if ( tmp_cond_truth_29 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_58;
    }
    if ( tmp_cond_truth_29 == 1 )
    {
        goto condexpr_true_86;
    }
    else
    {
        goto condexpr_false_86;
    }
    condexpr_true_86:;
    tmp_subscribed_name_29 = tmp_class_creation_29__bases;

    CHECK_OBJECT( tmp_subscribed_name_29 );
    tmp_subscript_name_29 = const_int_0;
    tmp_type_arg_29 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_29, tmp_subscript_name_29 );
    if ( tmp_type_arg_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_58;
    }
    tmp_metaclass_name_29 = BUILTIN_TYPE1( tmp_type_arg_29 );
    Py_DECREF( tmp_type_arg_29 );
    if ( tmp_metaclass_name_29 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_58;
    }
    goto condexpr_end_86;
    condexpr_false_86:;
    tmp_metaclass_name_29 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_29 );
    condexpr_end_86:;
    condexpr_end_85:;
    tmp_bases_name_29 = tmp_class_creation_29__bases;

    CHECK_OBJECT( tmp_bases_name_29 );
    tmp_assign_source_329 = SELECT_METACLASS( tmp_metaclass_name_29, tmp_bases_name_29 );
    if ( tmp_assign_source_329 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_29 );

        exception_lineno = 485;

        goto try_except_handler_58;
    }
    Py_DECREF( tmp_metaclass_name_29 );
    assert( tmp_class_creation_29__metaclass == NULL );
    tmp_class_creation_29__metaclass = tmp_assign_source_329;

    tmp_compare_left_58 = const_str_plain_metaclass;
    tmp_compare_right_58 = tmp_class_creation_29__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_58 );
    tmp_cmp_In_58 = PySequence_Contains( tmp_compare_right_58, tmp_compare_left_58 );
    assert( !(tmp_cmp_In_58 == -1) );
    if ( tmp_cmp_In_58 == 1 )
    {
        goto branch_yes_29;
    }
    else
    {
        goto branch_no_29;
    }
    branch_yes_29:;
    tmp_dictdel_dict = tmp_class_creation_29__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_58;
    }
    branch_no_29:;
    tmp_hasattr_source_29 = tmp_class_creation_29__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_29 );
    tmp_hasattr_attr_29 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_29, tmp_hasattr_attr_29 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_58;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_87;
    }
    else
    {
        goto condexpr_false_87;
    }
    condexpr_true_87:;
    tmp_source_name_48 = tmp_class_creation_29__metaclass;

    CHECK_OBJECT( tmp_source_name_48 );
    tmp_called_name_59 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain___prepare__ );
    if ( tmp_called_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_58;
    }
    tmp_args_name_57 = PyTuple_New( 2 );
    tmp_tuple_element_85 = const_str_plain_Const;
    Py_INCREF( tmp_tuple_element_85 );
    PyTuple_SET_ITEM( tmp_args_name_57, 0, tmp_tuple_element_85 );
    tmp_tuple_element_85 = tmp_class_creation_29__bases;

    CHECK_OBJECT( tmp_tuple_element_85 );
    Py_INCREF( tmp_tuple_element_85 );
    PyTuple_SET_ITEM( tmp_args_name_57, 1, tmp_tuple_element_85 );
    tmp_kw_name_57 = tmp_class_creation_29__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_57 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 485;
    tmp_assign_source_330 = CALL_FUNCTION( tmp_called_name_59, tmp_args_name_57, tmp_kw_name_57 );
    Py_DECREF( tmp_called_name_59 );
    Py_DECREF( tmp_args_name_57 );
    if ( tmp_assign_source_330 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_58;
    }
    goto condexpr_end_87;
    condexpr_false_87:;
    tmp_assign_source_330 = PyDict_New();
    condexpr_end_87:;
    assert( tmp_class_creation_29__prepared == NULL );
    tmp_class_creation_29__prepared = tmp_assign_source_330;

    tmp_set_locals = tmp_class_creation_29__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_29);
    locals_dict_29 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_332 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_28_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_332 );
    outline_28_var___module__ = tmp_assign_source_332;

    tmp_assign_source_333 = const_str_digest_62c4af48d20ce9b09b9aba02e5a47e45;
    assert( outline_28_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_333 );
    outline_28_var___doc__ = tmp_assign_source_333;

    tmp_assign_source_334 = const_str_plain_Const;
    assert( outline_28_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_334 );
    outline_28_var___qualname__ = tmp_assign_source_334;

    tmp_assign_source_335 = const_tuple_str_plain_value_tuple;
    assert( outline_28_var_fields == NULL );
    Py_INCREF( tmp_assign_source_335 );
    outline_28_var_fields = tmp_assign_source_335;

    tmp_defaults_8 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_8 );
    tmp_assign_source_336 = MAKE_FUNCTION_jinja2$nodes$$$function_26_as_const( tmp_defaults_8 );
    assert( outline_28_var_as_const == NULL );
    outline_28_var_as_const = tmp_assign_source_336;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3, codeobj_d1a3ca5fa1d79bc2de1c830e07e219b4, module_jinja2$nodes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 = cache_frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 ) == 2 ); // Frame stack

    // Framed code:
    tmp_defaults_9 = const_tuple_none_none_tuple;
    Py_INCREF( tmp_defaults_9 );
    tmp_classmethod_arg_1 = MAKE_FUNCTION_jinja2$nodes$$$function_27_from_untrusted( tmp_defaults_9 );
    tmp_assign_source_337 = BUILTIN_CLASSMETHOD( tmp_classmethod_arg_1 );
    Py_DECREF( tmp_classmethod_arg_1 );
    if ( tmp_assign_source_337 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 503;
        type_description_2 = "NoooooN";
        goto frame_exception_exit_3;
    }
    assert( outline_28_var_from_untrusted == NULL );
    outline_28_var_from_untrusted = tmp_assign_source_337;


#if 0
    RESTORE_FRAME_EXCEPTION( frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3,
        type_description_2,
        NULL,
        outline_28_var___qualname__,
        outline_28_var___module__,
        outline_28_var___doc__,
        outline_28_var_fields,
        outline_28_var_as_const,
        outline_28_var_from_untrusted
    );


    // Release cached frame.
    if ( frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 == cache_frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 )
    {
        Py_DECREF( frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 );
    }
    cache_frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 = NULL;

    assertFrameObject( frame_d1a3ca5fa1d79bc2de1c830e07e219b4_3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto nested_frame_exit_2;

    frame_no_exception_2:;

    goto skip_nested_handling_2;
    nested_frame_exit_2:;

    goto try_except_handler_59;
    skip_nested_handling_2:;
    tmp_called_name_60 = tmp_class_creation_29__metaclass;

    CHECK_OBJECT( tmp_called_name_60 );
    tmp_args_name_58 = PyTuple_New( 3 );
    tmp_tuple_element_86 = const_str_plain_Const;
    Py_INCREF( tmp_tuple_element_86 );
    PyTuple_SET_ITEM( tmp_args_name_58, 0, tmp_tuple_element_86 );
    tmp_tuple_element_86 = tmp_class_creation_29__bases;

    CHECK_OBJECT( tmp_tuple_element_86 );
    Py_INCREF( tmp_tuple_element_86 );
    PyTuple_SET_ITEM( tmp_args_name_58, 1, tmp_tuple_element_86 );
    tmp_tuple_element_86 = locals_dict_29;
    Py_INCREF( tmp_tuple_element_86 );
    if ( outline_28_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_86,
            const_str_plain___qualname__,
            outline_28_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_86,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_86,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_58 );
        Py_DECREF( tmp_tuple_element_86 );

        exception_lineno = 485;

        goto try_except_handler_59;
    }
    if ( outline_28_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_86,
            const_str_plain___module__,
            outline_28_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_86,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_86,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_58 );
        Py_DECREF( tmp_tuple_element_86 );

        exception_lineno = 485;

        goto try_except_handler_59;
    }
    if ( outline_28_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_86,
            const_str_plain___doc__,
            outline_28_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_86,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_86,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_58 );
        Py_DECREF( tmp_tuple_element_86 );

        exception_lineno = 485;

        goto try_except_handler_59;
    }
    if ( outline_28_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_86,
            const_str_plain_fields,
            outline_28_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_86,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_86,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_58 );
        Py_DECREF( tmp_tuple_element_86 );

        exception_lineno = 485;

        goto try_except_handler_59;
    }
    if ( outline_28_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_86,
            const_str_plain_as_const,
            outline_28_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_86,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_86,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_58 );
        Py_DECREF( tmp_tuple_element_86 );

        exception_lineno = 485;

        goto try_except_handler_59;
    }
    if ( outline_28_var_from_untrusted != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_86,
            const_str_plain_from_untrusted,
            outline_28_var_from_untrusted
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_86,
            const_str_plain_from_untrusted
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_86,
                const_str_plain_from_untrusted
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_58 );
        Py_DECREF( tmp_tuple_element_86 );

        exception_lineno = 485;

        goto try_except_handler_59;
    }
    PyTuple_SET_ITEM( tmp_args_name_58, 2, tmp_tuple_element_86 );
    tmp_kw_name_58 = tmp_class_creation_29__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_58 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 485;
    tmp_assign_source_338 = CALL_FUNCTION( tmp_called_name_60, tmp_args_name_58, tmp_kw_name_58 );
    Py_DECREF( tmp_args_name_58 );
    if ( tmp_assign_source_338 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 485;

        goto try_except_handler_59;
    }
    assert( outline_28_var___class__ == NULL );
    outline_28_var___class__ = tmp_assign_source_338;

    tmp_outline_return_value_29 = outline_28_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_29 );
    Py_INCREF( tmp_outline_return_value_29 );
    goto try_return_handler_59;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_59:;
    CHECK_OBJECT( (PyObject *)outline_28_var___class__ );
    Py_DECREF( outline_28_var___class__ );
    outline_28_var___class__ = NULL;

    Py_XDECREF( outline_28_var___qualname__ );
    outline_28_var___qualname__ = NULL;

    Py_XDECREF( outline_28_var___module__ );
    outline_28_var___module__ = NULL;

    Py_XDECREF( outline_28_var___doc__ );
    outline_28_var___doc__ = NULL;

    Py_XDECREF( outline_28_var_fields );
    outline_28_var_fields = NULL;

    Py_XDECREF( outline_28_var_as_const );
    outline_28_var_as_const = NULL;

    Py_XDECREF( outline_28_var_from_untrusted );
    outline_28_var_from_untrusted = NULL;

    goto outline_result_29;
    // Exception handler code:
    try_except_handler_59:;
    exception_keeper_type_58 = exception_type;
    exception_keeper_value_58 = exception_value;
    exception_keeper_tb_58 = exception_tb;
    exception_keeper_lineno_58 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_28_var___qualname__ );
    outline_28_var___qualname__ = NULL;

    Py_XDECREF( outline_28_var___module__ );
    outline_28_var___module__ = NULL;

    Py_XDECREF( outline_28_var___doc__ );
    outline_28_var___doc__ = NULL;

    Py_XDECREF( outline_28_var_fields );
    outline_28_var_fields = NULL;

    Py_XDECREF( outline_28_var_as_const );
    outline_28_var_as_const = NULL;

    Py_XDECREF( outline_28_var_from_untrusted );
    outline_28_var_from_untrusted = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_58;
    exception_value = exception_keeper_value_58;
    exception_tb = exception_keeper_tb_58;
    exception_lineno = exception_keeper_lineno_58;

    goto outline_exception_29;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_29:;
    exception_lineno = 485;
    goto try_except_handler_58;
    outline_result_29:;
    tmp_assign_source_331 = tmp_outline_return_value_29;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Const, tmp_assign_source_331 );
    goto try_end_30;
    // Exception handler code:
    try_except_handler_58:;
    exception_keeper_type_59 = exception_type;
    exception_keeper_value_59 = exception_value;
    exception_keeper_tb_59 = exception_tb;
    exception_keeper_lineno_59 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_29__bases );
    tmp_class_creation_29__bases = NULL;

    Py_XDECREF( tmp_class_creation_29__class_decl_dict );
    tmp_class_creation_29__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_29__metaclass );
    tmp_class_creation_29__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_29__prepared );
    tmp_class_creation_29__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_59;
    exception_value = exception_keeper_value_59;
    exception_tb = exception_keeper_tb_59;
    exception_lineno = exception_keeper_lineno_59;

    goto frame_exception_exit_1;
    // End of try:
    try_end_30:;
    Py_XDECREF( tmp_class_creation_29__bases );
    tmp_class_creation_29__bases = NULL;

    Py_XDECREF( tmp_class_creation_29__class_decl_dict );
    tmp_class_creation_29__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_29__metaclass );
    tmp_class_creation_29__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_29__prepared );
    tmp_class_creation_29__prepared = NULL;

    // Tried code:
    tmp_assign_source_339 = PyTuple_New( 1 );
    tmp_tuple_element_87 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Literal );

    if (unlikely( tmp_tuple_element_87 == NULL ))
    {
        tmp_tuple_element_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Literal );
    }

    if ( tmp_tuple_element_87 == NULL )
    {
        Py_DECREF( tmp_assign_source_339 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Literal" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 515;

        goto try_except_handler_60;
    }

    Py_INCREF( tmp_tuple_element_87 );
    PyTuple_SET_ITEM( tmp_assign_source_339, 0, tmp_tuple_element_87 );
    assert( tmp_class_creation_30__bases == NULL );
    tmp_class_creation_30__bases = tmp_assign_source_339;

    tmp_assign_source_340 = PyDict_New();
    assert( tmp_class_creation_30__class_decl_dict == NULL );
    tmp_class_creation_30__class_decl_dict = tmp_assign_source_340;

    tmp_compare_left_59 = const_str_plain_metaclass;
    tmp_compare_right_59 = tmp_class_creation_30__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_59 );
    tmp_cmp_In_59 = PySequence_Contains( tmp_compare_right_59, tmp_compare_left_59 );
    assert( !(tmp_cmp_In_59 == -1) );
    if ( tmp_cmp_In_59 == 1 )
    {
        goto condexpr_true_88;
    }
    else
    {
        goto condexpr_false_88;
    }
    condexpr_true_88:;
    tmp_dict_name_30 = tmp_class_creation_30__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_30 );
    tmp_key_name_30 = const_str_plain_metaclass;
    tmp_metaclass_name_30 = DICT_GET_ITEM( tmp_dict_name_30, tmp_key_name_30 );
    if ( tmp_metaclass_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_60;
    }
    goto condexpr_end_88;
    condexpr_false_88:;
    tmp_cond_value_30 = tmp_class_creation_30__bases;

    CHECK_OBJECT( tmp_cond_value_30 );
    tmp_cond_truth_30 = CHECK_IF_TRUE( tmp_cond_value_30 );
    if ( tmp_cond_truth_30 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_60;
    }
    if ( tmp_cond_truth_30 == 1 )
    {
        goto condexpr_true_89;
    }
    else
    {
        goto condexpr_false_89;
    }
    condexpr_true_89:;
    tmp_subscribed_name_30 = tmp_class_creation_30__bases;

    CHECK_OBJECT( tmp_subscribed_name_30 );
    tmp_subscript_name_30 = const_int_0;
    tmp_type_arg_30 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_30, tmp_subscript_name_30 );
    if ( tmp_type_arg_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_60;
    }
    tmp_metaclass_name_30 = BUILTIN_TYPE1( tmp_type_arg_30 );
    Py_DECREF( tmp_type_arg_30 );
    if ( tmp_metaclass_name_30 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_60;
    }
    goto condexpr_end_89;
    condexpr_false_89:;
    tmp_metaclass_name_30 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_30 );
    condexpr_end_89:;
    condexpr_end_88:;
    tmp_bases_name_30 = tmp_class_creation_30__bases;

    CHECK_OBJECT( tmp_bases_name_30 );
    tmp_assign_source_341 = SELECT_METACLASS( tmp_metaclass_name_30, tmp_bases_name_30 );
    if ( tmp_assign_source_341 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_30 );

        exception_lineno = 515;

        goto try_except_handler_60;
    }
    Py_DECREF( tmp_metaclass_name_30 );
    assert( tmp_class_creation_30__metaclass == NULL );
    tmp_class_creation_30__metaclass = tmp_assign_source_341;

    tmp_compare_left_60 = const_str_plain_metaclass;
    tmp_compare_right_60 = tmp_class_creation_30__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_60 );
    tmp_cmp_In_60 = PySequence_Contains( tmp_compare_right_60, tmp_compare_left_60 );
    assert( !(tmp_cmp_In_60 == -1) );
    if ( tmp_cmp_In_60 == 1 )
    {
        goto branch_yes_30;
    }
    else
    {
        goto branch_no_30;
    }
    branch_yes_30:;
    tmp_dictdel_dict = tmp_class_creation_30__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_60;
    }
    branch_no_30:;
    tmp_hasattr_source_30 = tmp_class_creation_30__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_30 );
    tmp_hasattr_attr_30 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_30, tmp_hasattr_attr_30 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_60;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_90;
    }
    else
    {
        goto condexpr_false_90;
    }
    condexpr_true_90:;
    tmp_source_name_49 = tmp_class_creation_30__metaclass;

    CHECK_OBJECT( tmp_source_name_49 );
    tmp_called_name_61 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain___prepare__ );
    if ( tmp_called_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_60;
    }
    tmp_args_name_59 = PyTuple_New( 2 );
    tmp_tuple_element_88 = const_str_plain_TemplateData;
    Py_INCREF( tmp_tuple_element_88 );
    PyTuple_SET_ITEM( tmp_args_name_59, 0, tmp_tuple_element_88 );
    tmp_tuple_element_88 = tmp_class_creation_30__bases;

    CHECK_OBJECT( tmp_tuple_element_88 );
    Py_INCREF( tmp_tuple_element_88 );
    PyTuple_SET_ITEM( tmp_args_name_59, 1, tmp_tuple_element_88 );
    tmp_kw_name_59 = tmp_class_creation_30__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_59 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 515;
    tmp_assign_source_342 = CALL_FUNCTION( tmp_called_name_61, tmp_args_name_59, tmp_kw_name_59 );
    Py_DECREF( tmp_called_name_61 );
    Py_DECREF( tmp_args_name_59 );
    if ( tmp_assign_source_342 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_60;
    }
    goto condexpr_end_90;
    condexpr_false_90:;
    tmp_assign_source_342 = PyDict_New();
    condexpr_end_90:;
    assert( tmp_class_creation_30__prepared == NULL );
    tmp_class_creation_30__prepared = tmp_assign_source_342;

    tmp_set_locals = tmp_class_creation_30__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_30);
    locals_dict_30 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_344 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_29_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_344 );
    outline_29_var___module__ = tmp_assign_source_344;

    tmp_assign_source_345 = const_str_digest_b5d186439a50b4d992ca35e19b3d8bd0;
    assert( outline_29_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_345 );
    outline_29_var___doc__ = tmp_assign_source_345;

    tmp_assign_source_346 = const_str_plain_TemplateData;
    assert( outline_29_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_346 );
    outline_29_var___qualname__ = tmp_assign_source_346;

    tmp_assign_source_347 = const_tuple_str_plain_data_tuple;
    assert( outline_29_var_fields == NULL );
    Py_INCREF( tmp_assign_source_347 );
    outline_29_var_fields = tmp_assign_source_347;

    tmp_defaults_10 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_10 );
    tmp_assign_source_348 = MAKE_FUNCTION_jinja2$nodes$$$function_28_as_const( tmp_defaults_10 );
    assert( outline_29_var_as_const == NULL );
    outline_29_var_as_const = tmp_assign_source_348;

    // Tried code:
    tmp_called_name_62 = tmp_class_creation_30__metaclass;

    CHECK_OBJECT( tmp_called_name_62 );
    tmp_args_name_60 = PyTuple_New( 3 );
    tmp_tuple_element_89 = const_str_plain_TemplateData;
    Py_INCREF( tmp_tuple_element_89 );
    PyTuple_SET_ITEM( tmp_args_name_60, 0, tmp_tuple_element_89 );
    tmp_tuple_element_89 = tmp_class_creation_30__bases;

    CHECK_OBJECT( tmp_tuple_element_89 );
    Py_INCREF( tmp_tuple_element_89 );
    PyTuple_SET_ITEM( tmp_args_name_60, 1, tmp_tuple_element_89 );
    tmp_tuple_element_89 = locals_dict_30;
    Py_INCREF( tmp_tuple_element_89 );
    if ( outline_29_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_89,
            const_str_plain___qualname__,
            outline_29_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_89,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_89,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_60 );
        Py_DECREF( tmp_tuple_element_89 );

        exception_lineno = 515;

        goto try_except_handler_61;
    }
    if ( outline_29_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_89,
            const_str_plain___module__,
            outline_29_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_89,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_89,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_60 );
        Py_DECREF( tmp_tuple_element_89 );

        exception_lineno = 515;

        goto try_except_handler_61;
    }
    if ( outline_29_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_89,
            const_str_plain___doc__,
            outline_29_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_89,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_89,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_60 );
        Py_DECREF( tmp_tuple_element_89 );

        exception_lineno = 515;

        goto try_except_handler_61;
    }
    if ( outline_29_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_89,
            const_str_plain_fields,
            outline_29_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_89,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_89,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_60 );
        Py_DECREF( tmp_tuple_element_89 );

        exception_lineno = 515;

        goto try_except_handler_61;
    }
    if ( outline_29_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_89,
            const_str_plain_as_const,
            outline_29_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_89,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_89,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_60 );
        Py_DECREF( tmp_tuple_element_89 );

        exception_lineno = 515;

        goto try_except_handler_61;
    }
    PyTuple_SET_ITEM( tmp_args_name_60, 2, tmp_tuple_element_89 );
    tmp_kw_name_60 = tmp_class_creation_30__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_60 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 515;
    tmp_assign_source_349 = CALL_FUNCTION( tmp_called_name_62, tmp_args_name_60, tmp_kw_name_60 );
    Py_DECREF( tmp_args_name_60 );
    if ( tmp_assign_source_349 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 515;

        goto try_except_handler_61;
    }
    assert( outline_29_var___class__ == NULL );
    outline_29_var___class__ = tmp_assign_source_349;

    tmp_outline_return_value_30 = outline_29_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_30 );
    Py_INCREF( tmp_outline_return_value_30 );
    goto try_return_handler_61;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_61:;
    CHECK_OBJECT( (PyObject *)outline_29_var___class__ );
    Py_DECREF( outline_29_var___class__ );
    outline_29_var___class__ = NULL;

    Py_XDECREF( outline_29_var___qualname__ );
    outline_29_var___qualname__ = NULL;

    Py_XDECREF( outline_29_var___module__ );
    outline_29_var___module__ = NULL;

    Py_XDECREF( outline_29_var___doc__ );
    outline_29_var___doc__ = NULL;

    Py_XDECREF( outline_29_var_fields );
    outline_29_var_fields = NULL;

    Py_XDECREF( outline_29_var_as_const );
    outline_29_var_as_const = NULL;

    goto outline_result_30;
    // Exception handler code:
    try_except_handler_61:;
    exception_keeper_type_60 = exception_type;
    exception_keeper_value_60 = exception_value;
    exception_keeper_tb_60 = exception_tb;
    exception_keeper_lineno_60 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_29_var___qualname__ );
    outline_29_var___qualname__ = NULL;

    Py_XDECREF( outline_29_var___module__ );
    outline_29_var___module__ = NULL;

    Py_XDECREF( outline_29_var___doc__ );
    outline_29_var___doc__ = NULL;

    Py_XDECREF( outline_29_var_fields );
    outline_29_var_fields = NULL;

    Py_XDECREF( outline_29_var_as_const );
    outline_29_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_60;
    exception_value = exception_keeper_value_60;
    exception_tb = exception_keeper_tb_60;
    exception_lineno = exception_keeper_lineno_60;

    goto outline_exception_30;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_30:;
    exception_lineno = 515;
    goto try_except_handler_60;
    outline_result_30:;
    tmp_assign_source_343 = tmp_outline_return_value_30;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_TemplateData, tmp_assign_source_343 );
    goto try_end_31;
    // Exception handler code:
    try_except_handler_60:;
    exception_keeper_type_61 = exception_type;
    exception_keeper_value_61 = exception_value;
    exception_keeper_tb_61 = exception_tb;
    exception_keeper_lineno_61 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_30__bases );
    tmp_class_creation_30__bases = NULL;

    Py_XDECREF( tmp_class_creation_30__class_decl_dict );
    tmp_class_creation_30__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_30__metaclass );
    tmp_class_creation_30__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_30__prepared );
    tmp_class_creation_30__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_61;
    exception_value = exception_keeper_value_61;
    exception_tb = exception_keeper_tb_61;
    exception_lineno = exception_keeper_lineno_61;

    goto frame_exception_exit_1;
    // End of try:
    try_end_31:;
    Py_XDECREF( tmp_class_creation_30__bases );
    tmp_class_creation_30__bases = NULL;

    Py_XDECREF( tmp_class_creation_30__class_decl_dict );
    tmp_class_creation_30__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_30__metaclass );
    tmp_class_creation_30__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_30__prepared );
    tmp_class_creation_30__prepared = NULL;

    // Tried code:
    tmp_assign_source_350 = PyTuple_New( 1 );
    tmp_tuple_element_90 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Literal );

    if (unlikely( tmp_tuple_element_90 == NULL ))
    {
        tmp_tuple_element_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Literal );
    }

    if ( tmp_tuple_element_90 == NULL )
    {
        Py_DECREF( tmp_assign_source_350 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Literal" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 528;

        goto try_except_handler_62;
    }

    Py_INCREF( tmp_tuple_element_90 );
    PyTuple_SET_ITEM( tmp_assign_source_350, 0, tmp_tuple_element_90 );
    assert( tmp_class_creation_31__bases == NULL );
    tmp_class_creation_31__bases = tmp_assign_source_350;

    tmp_assign_source_351 = PyDict_New();
    assert( tmp_class_creation_31__class_decl_dict == NULL );
    tmp_class_creation_31__class_decl_dict = tmp_assign_source_351;

    tmp_compare_left_61 = const_str_plain_metaclass;
    tmp_compare_right_61 = tmp_class_creation_31__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_61 );
    tmp_cmp_In_61 = PySequence_Contains( tmp_compare_right_61, tmp_compare_left_61 );
    assert( !(tmp_cmp_In_61 == -1) );
    if ( tmp_cmp_In_61 == 1 )
    {
        goto condexpr_true_91;
    }
    else
    {
        goto condexpr_false_91;
    }
    condexpr_true_91:;
    tmp_dict_name_31 = tmp_class_creation_31__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_31 );
    tmp_key_name_31 = const_str_plain_metaclass;
    tmp_metaclass_name_31 = DICT_GET_ITEM( tmp_dict_name_31, tmp_key_name_31 );
    if ( tmp_metaclass_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_62;
    }
    goto condexpr_end_91;
    condexpr_false_91:;
    tmp_cond_value_31 = tmp_class_creation_31__bases;

    CHECK_OBJECT( tmp_cond_value_31 );
    tmp_cond_truth_31 = CHECK_IF_TRUE( tmp_cond_value_31 );
    if ( tmp_cond_truth_31 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_62;
    }
    if ( tmp_cond_truth_31 == 1 )
    {
        goto condexpr_true_92;
    }
    else
    {
        goto condexpr_false_92;
    }
    condexpr_true_92:;
    tmp_subscribed_name_31 = tmp_class_creation_31__bases;

    CHECK_OBJECT( tmp_subscribed_name_31 );
    tmp_subscript_name_31 = const_int_0;
    tmp_type_arg_31 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_31, tmp_subscript_name_31 );
    if ( tmp_type_arg_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_62;
    }
    tmp_metaclass_name_31 = BUILTIN_TYPE1( tmp_type_arg_31 );
    Py_DECREF( tmp_type_arg_31 );
    if ( tmp_metaclass_name_31 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_62;
    }
    goto condexpr_end_92;
    condexpr_false_92:;
    tmp_metaclass_name_31 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_31 );
    condexpr_end_92:;
    condexpr_end_91:;
    tmp_bases_name_31 = tmp_class_creation_31__bases;

    CHECK_OBJECT( tmp_bases_name_31 );
    tmp_assign_source_352 = SELECT_METACLASS( tmp_metaclass_name_31, tmp_bases_name_31 );
    if ( tmp_assign_source_352 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_31 );

        exception_lineno = 528;

        goto try_except_handler_62;
    }
    Py_DECREF( tmp_metaclass_name_31 );
    assert( tmp_class_creation_31__metaclass == NULL );
    tmp_class_creation_31__metaclass = tmp_assign_source_352;

    tmp_compare_left_62 = const_str_plain_metaclass;
    tmp_compare_right_62 = tmp_class_creation_31__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_62 );
    tmp_cmp_In_62 = PySequence_Contains( tmp_compare_right_62, tmp_compare_left_62 );
    assert( !(tmp_cmp_In_62 == -1) );
    if ( tmp_cmp_In_62 == 1 )
    {
        goto branch_yes_31;
    }
    else
    {
        goto branch_no_31;
    }
    branch_yes_31:;
    tmp_dictdel_dict = tmp_class_creation_31__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_62;
    }
    branch_no_31:;
    tmp_hasattr_source_31 = tmp_class_creation_31__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_31 );
    tmp_hasattr_attr_31 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_31, tmp_hasattr_attr_31 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_62;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_93;
    }
    else
    {
        goto condexpr_false_93;
    }
    condexpr_true_93:;
    tmp_source_name_50 = tmp_class_creation_31__metaclass;

    CHECK_OBJECT( tmp_source_name_50 );
    tmp_called_name_63 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain___prepare__ );
    if ( tmp_called_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_62;
    }
    tmp_args_name_61 = PyTuple_New( 2 );
    tmp_tuple_element_91 = const_str_plain_Tuple;
    Py_INCREF( tmp_tuple_element_91 );
    PyTuple_SET_ITEM( tmp_args_name_61, 0, tmp_tuple_element_91 );
    tmp_tuple_element_91 = tmp_class_creation_31__bases;

    CHECK_OBJECT( tmp_tuple_element_91 );
    Py_INCREF( tmp_tuple_element_91 );
    PyTuple_SET_ITEM( tmp_args_name_61, 1, tmp_tuple_element_91 );
    tmp_kw_name_61 = tmp_class_creation_31__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_61 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 528;
    tmp_assign_source_353 = CALL_FUNCTION( tmp_called_name_63, tmp_args_name_61, tmp_kw_name_61 );
    Py_DECREF( tmp_called_name_63 );
    Py_DECREF( tmp_args_name_61 );
    if ( tmp_assign_source_353 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_62;
    }
    goto condexpr_end_93;
    condexpr_false_93:;
    tmp_assign_source_353 = PyDict_New();
    condexpr_end_93:;
    assert( tmp_class_creation_31__prepared == NULL );
    tmp_class_creation_31__prepared = tmp_assign_source_353;

    tmp_set_locals = tmp_class_creation_31__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_31);
    locals_dict_31 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_355 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_30_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_355 );
    outline_30_var___module__ = tmp_assign_source_355;

    tmp_assign_source_356 = const_str_digest_70ea80b28f642acc57035d060bf1a656;
    assert( outline_30_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_356 );
    outline_30_var___doc__ = tmp_assign_source_356;

    tmp_assign_source_357 = const_str_plain_Tuple;
    assert( outline_30_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_357 );
    outline_30_var___qualname__ = tmp_assign_source_357;

    tmp_assign_source_358 = const_tuple_str_plain_items_str_plain_ctx_tuple;
    assert( outline_30_var_fields == NULL );
    Py_INCREF( tmp_assign_source_358 );
    outline_30_var_fields = tmp_assign_source_358;

    tmp_defaults_11 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_11 );
    tmp_assign_source_359 = MAKE_FUNCTION_jinja2$nodes$$$function_29_as_const( tmp_defaults_11 );
    assert( outline_30_var_as_const == NULL );
    outline_30_var_as_const = tmp_assign_source_359;

    tmp_assign_source_360 = MAKE_FUNCTION_jinja2$nodes$$$function_30_can_assign(  );
    assert( outline_30_var_can_assign == NULL );
    outline_30_var_can_assign = tmp_assign_source_360;

    // Tried code:
    tmp_called_name_64 = tmp_class_creation_31__metaclass;

    CHECK_OBJECT( tmp_called_name_64 );
    tmp_args_name_62 = PyTuple_New( 3 );
    tmp_tuple_element_92 = const_str_plain_Tuple;
    Py_INCREF( tmp_tuple_element_92 );
    PyTuple_SET_ITEM( tmp_args_name_62, 0, tmp_tuple_element_92 );
    tmp_tuple_element_92 = tmp_class_creation_31__bases;

    CHECK_OBJECT( tmp_tuple_element_92 );
    Py_INCREF( tmp_tuple_element_92 );
    PyTuple_SET_ITEM( tmp_args_name_62, 1, tmp_tuple_element_92 );
    tmp_tuple_element_92 = locals_dict_31;
    Py_INCREF( tmp_tuple_element_92 );
    if ( outline_30_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_92,
            const_str_plain___qualname__,
            outline_30_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_92,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_92,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_62 );
        Py_DECREF( tmp_tuple_element_92 );

        exception_lineno = 528;

        goto try_except_handler_63;
    }
    if ( outline_30_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_92,
            const_str_plain___module__,
            outline_30_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_92,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_92,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_62 );
        Py_DECREF( tmp_tuple_element_92 );

        exception_lineno = 528;

        goto try_except_handler_63;
    }
    if ( outline_30_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_92,
            const_str_plain___doc__,
            outline_30_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_92,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_92,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_62 );
        Py_DECREF( tmp_tuple_element_92 );

        exception_lineno = 528;

        goto try_except_handler_63;
    }
    if ( outline_30_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_92,
            const_str_plain_fields,
            outline_30_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_92,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_92,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_62 );
        Py_DECREF( tmp_tuple_element_92 );

        exception_lineno = 528;

        goto try_except_handler_63;
    }
    if ( outline_30_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_92,
            const_str_plain_as_const,
            outline_30_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_92,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_92,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_62 );
        Py_DECREF( tmp_tuple_element_92 );

        exception_lineno = 528;

        goto try_except_handler_63;
    }
    if ( outline_30_var_can_assign != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_92,
            const_str_plain_can_assign,
            outline_30_var_can_assign
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_92,
            const_str_plain_can_assign
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_92,
                const_str_plain_can_assign
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_62 );
        Py_DECREF( tmp_tuple_element_92 );

        exception_lineno = 528;

        goto try_except_handler_63;
    }
    PyTuple_SET_ITEM( tmp_args_name_62, 2, tmp_tuple_element_92 );
    tmp_kw_name_62 = tmp_class_creation_31__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_62 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 528;
    tmp_assign_source_361 = CALL_FUNCTION( tmp_called_name_64, tmp_args_name_62, tmp_kw_name_62 );
    Py_DECREF( tmp_args_name_62 );
    if ( tmp_assign_source_361 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 528;

        goto try_except_handler_63;
    }
    assert( outline_30_var___class__ == NULL );
    outline_30_var___class__ = tmp_assign_source_361;

    tmp_outline_return_value_31 = outline_30_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_31 );
    Py_INCREF( tmp_outline_return_value_31 );
    goto try_return_handler_63;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_63:;
    CHECK_OBJECT( (PyObject *)outline_30_var___class__ );
    Py_DECREF( outline_30_var___class__ );
    outline_30_var___class__ = NULL;

    Py_XDECREF( outline_30_var___qualname__ );
    outline_30_var___qualname__ = NULL;

    Py_XDECREF( outline_30_var___module__ );
    outline_30_var___module__ = NULL;

    Py_XDECREF( outline_30_var___doc__ );
    outline_30_var___doc__ = NULL;

    Py_XDECREF( outline_30_var_fields );
    outline_30_var_fields = NULL;

    Py_XDECREF( outline_30_var_as_const );
    outline_30_var_as_const = NULL;

    Py_XDECREF( outline_30_var_can_assign );
    outline_30_var_can_assign = NULL;

    goto outline_result_31;
    // Exception handler code:
    try_except_handler_63:;
    exception_keeper_type_62 = exception_type;
    exception_keeper_value_62 = exception_value;
    exception_keeper_tb_62 = exception_tb;
    exception_keeper_lineno_62 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_30_var___qualname__ );
    outline_30_var___qualname__ = NULL;

    Py_XDECREF( outline_30_var___module__ );
    outline_30_var___module__ = NULL;

    Py_XDECREF( outline_30_var___doc__ );
    outline_30_var___doc__ = NULL;

    Py_XDECREF( outline_30_var_fields );
    outline_30_var_fields = NULL;

    Py_XDECREF( outline_30_var_as_const );
    outline_30_var_as_const = NULL;

    Py_XDECREF( outline_30_var_can_assign );
    outline_30_var_can_assign = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_62;
    exception_value = exception_keeper_value_62;
    exception_tb = exception_keeper_tb_62;
    exception_lineno = exception_keeper_lineno_62;

    goto outline_exception_31;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_31:;
    exception_lineno = 528;
    goto try_except_handler_62;
    outline_result_31:;
    tmp_assign_source_354 = tmp_outline_return_value_31;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Tuple, tmp_assign_source_354 );
    goto try_end_32;
    // Exception handler code:
    try_except_handler_62:;
    exception_keeper_type_63 = exception_type;
    exception_keeper_value_63 = exception_value;
    exception_keeper_tb_63 = exception_tb;
    exception_keeper_lineno_63 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_31__bases );
    tmp_class_creation_31__bases = NULL;

    Py_XDECREF( tmp_class_creation_31__class_decl_dict );
    tmp_class_creation_31__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_31__metaclass );
    tmp_class_creation_31__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_31__prepared );
    tmp_class_creation_31__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_63;
    exception_value = exception_keeper_value_63;
    exception_tb = exception_keeper_tb_63;
    exception_lineno = exception_keeper_lineno_63;

    goto frame_exception_exit_1;
    // End of try:
    try_end_32:;
    Py_XDECREF( tmp_class_creation_31__bases );
    tmp_class_creation_31__bases = NULL;

    Py_XDECREF( tmp_class_creation_31__class_decl_dict );
    tmp_class_creation_31__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_31__metaclass );
    tmp_class_creation_31__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_31__prepared );
    tmp_class_creation_31__prepared = NULL;

    // Tried code:
    tmp_assign_source_362 = PyTuple_New( 1 );
    tmp_tuple_element_93 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Literal );

    if (unlikely( tmp_tuple_element_93 == NULL ))
    {
        tmp_tuple_element_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Literal );
    }

    if ( tmp_tuple_element_93 == NULL )
    {
        Py_DECREF( tmp_assign_source_362 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Literal" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 546;

        goto try_except_handler_64;
    }

    Py_INCREF( tmp_tuple_element_93 );
    PyTuple_SET_ITEM( tmp_assign_source_362, 0, tmp_tuple_element_93 );
    assert( tmp_class_creation_32__bases == NULL );
    tmp_class_creation_32__bases = tmp_assign_source_362;

    tmp_assign_source_363 = PyDict_New();
    assert( tmp_class_creation_32__class_decl_dict == NULL );
    tmp_class_creation_32__class_decl_dict = tmp_assign_source_363;

    tmp_compare_left_63 = const_str_plain_metaclass;
    tmp_compare_right_63 = tmp_class_creation_32__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_63 );
    tmp_cmp_In_63 = PySequence_Contains( tmp_compare_right_63, tmp_compare_left_63 );
    assert( !(tmp_cmp_In_63 == -1) );
    if ( tmp_cmp_In_63 == 1 )
    {
        goto condexpr_true_94;
    }
    else
    {
        goto condexpr_false_94;
    }
    condexpr_true_94:;
    tmp_dict_name_32 = tmp_class_creation_32__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_32 );
    tmp_key_name_32 = const_str_plain_metaclass;
    tmp_metaclass_name_32 = DICT_GET_ITEM( tmp_dict_name_32, tmp_key_name_32 );
    if ( tmp_metaclass_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_64;
    }
    goto condexpr_end_94;
    condexpr_false_94:;
    tmp_cond_value_32 = tmp_class_creation_32__bases;

    CHECK_OBJECT( tmp_cond_value_32 );
    tmp_cond_truth_32 = CHECK_IF_TRUE( tmp_cond_value_32 );
    if ( tmp_cond_truth_32 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_64;
    }
    if ( tmp_cond_truth_32 == 1 )
    {
        goto condexpr_true_95;
    }
    else
    {
        goto condexpr_false_95;
    }
    condexpr_true_95:;
    tmp_subscribed_name_32 = tmp_class_creation_32__bases;

    CHECK_OBJECT( tmp_subscribed_name_32 );
    tmp_subscript_name_32 = const_int_0;
    tmp_type_arg_32 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_32, tmp_subscript_name_32 );
    if ( tmp_type_arg_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_64;
    }
    tmp_metaclass_name_32 = BUILTIN_TYPE1( tmp_type_arg_32 );
    Py_DECREF( tmp_type_arg_32 );
    if ( tmp_metaclass_name_32 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_64;
    }
    goto condexpr_end_95;
    condexpr_false_95:;
    tmp_metaclass_name_32 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_32 );
    condexpr_end_95:;
    condexpr_end_94:;
    tmp_bases_name_32 = tmp_class_creation_32__bases;

    CHECK_OBJECT( tmp_bases_name_32 );
    tmp_assign_source_364 = SELECT_METACLASS( tmp_metaclass_name_32, tmp_bases_name_32 );
    if ( tmp_assign_source_364 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_32 );

        exception_lineno = 546;

        goto try_except_handler_64;
    }
    Py_DECREF( tmp_metaclass_name_32 );
    assert( tmp_class_creation_32__metaclass == NULL );
    tmp_class_creation_32__metaclass = tmp_assign_source_364;

    tmp_compare_left_64 = const_str_plain_metaclass;
    tmp_compare_right_64 = tmp_class_creation_32__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_64 );
    tmp_cmp_In_64 = PySequence_Contains( tmp_compare_right_64, tmp_compare_left_64 );
    assert( !(tmp_cmp_In_64 == -1) );
    if ( tmp_cmp_In_64 == 1 )
    {
        goto branch_yes_32;
    }
    else
    {
        goto branch_no_32;
    }
    branch_yes_32:;
    tmp_dictdel_dict = tmp_class_creation_32__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_64;
    }
    branch_no_32:;
    tmp_hasattr_source_32 = tmp_class_creation_32__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_32 );
    tmp_hasattr_attr_32 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_32, tmp_hasattr_attr_32 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_64;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_96;
    }
    else
    {
        goto condexpr_false_96;
    }
    condexpr_true_96:;
    tmp_source_name_51 = tmp_class_creation_32__metaclass;

    CHECK_OBJECT( tmp_source_name_51 );
    tmp_called_name_65 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain___prepare__ );
    if ( tmp_called_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_64;
    }
    tmp_args_name_63 = PyTuple_New( 2 );
    tmp_tuple_element_94 = const_str_plain_List;
    Py_INCREF( tmp_tuple_element_94 );
    PyTuple_SET_ITEM( tmp_args_name_63, 0, tmp_tuple_element_94 );
    tmp_tuple_element_94 = tmp_class_creation_32__bases;

    CHECK_OBJECT( tmp_tuple_element_94 );
    Py_INCREF( tmp_tuple_element_94 );
    PyTuple_SET_ITEM( tmp_args_name_63, 1, tmp_tuple_element_94 );
    tmp_kw_name_63 = tmp_class_creation_32__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_63 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 546;
    tmp_assign_source_365 = CALL_FUNCTION( tmp_called_name_65, tmp_args_name_63, tmp_kw_name_63 );
    Py_DECREF( tmp_called_name_65 );
    Py_DECREF( tmp_args_name_63 );
    if ( tmp_assign_source_365 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_64;
    }
    goto condexpr_end_96;
    condexpr_false_96:;
    tmp_assign_source_365 = PyDict_New();
    condexpr_end_96:;
    assert( tmp_class_creation_32__prepared == NULL );
    tmp_class_creation_32__prepared = tmp_assign_source_365;

    tmp_set_locals = tmp_class_creation_32__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_32);
    locals_dict_32 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_367 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_31_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_367 );
    outline_31_var___module__ = tmp_assign_source_367;

    tmp_assign_source_368 = const_str_digest_adb63acf99b0f61bd500405681614422;
    assert( outline_31_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_368 );
    outline_31_var___doc__ = tmp_assign_source_368;

    tmp_assign_source_369 = const_str_plain_List;
    assert( outline_31_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_369 );
    outline_31_var___qualname__ = tmp_assign_source_369;

    tmp_assign_source_370 = const_tuple_str_plain_items_tuple;
    assert( outline_31_var_fields == NULL );
    Py_INCREF( tmp_assign_source_370 );
    outline_31_var_fields = tmp_assign_source_370;

    tmp_defaults_12 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_12 );
    tmp_assign_source_371 = MAKE_FUNCTION_jinja2$nodes$$$function_31_as_const( tmp_defaults_12 );
    assert( outline_31_var_as_const == NULL );
    outline_31_var_as_const = tmp_assign_source_371;

    // Tried code:
    tmp_called_name_66 = tmp_class_creation_32__metaclass;

    CHECK_OBJECT( tmp_called_name_66 );
    tmp_args_name_64 = PyTuple_New( 3 );
    tmp_tuple_element_95 = const_str_plain_List;
    Py_INCREF( tmp_tuple_element_95 );
    PyTuple_SET_ITEM( tmp_args_name_64, 0, tmp_tuple_element_95 );
    tmp_tuple_element_95 = tmp_class_creation_32__bases;

    CHECK_OBJECT( tmp_tuple_element_95 );
    Py_INCREF( tmp_tuple_element_95 );
    PyTuple_SET_ITEM( tmp_args_name_64, 1, tmp_tuple_element_95 );
    tmp_tuple_element_95 = locals_dict_32;
    Py_INCREF( tmp_tuple_element_95 );
    if ( outline_31_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_95,
            const_str_plain___qualname__,
            outline_31_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_95,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_95,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_64 );
        Py_DECREF( tmp_tuple_element_95 );

        exception_lineno = 546;

        goto try_except_handler_65;
    }
    if ( outline_31_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_95,
            const_str_plain___module__,
            outline_31_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_95,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_95,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_64 );
        Py_DECREF( tmp_tuple_element_95 );

        exception_lineno = 546;

        goto try_except_handler_65;
    }
    if ( outline_31_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_95,
            const_str_plain___doc__,
            outline_31_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_95,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_95,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_64 );
        Py_DECREF( tmp_tuple_element_95 );

        exception_lineno = 546;

        goto try_except_handler_65;
    }
    if ( outline_31_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_95,
            const_str_plain_fields,
            outline_31_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_95,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_95,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_64 );
        Py_DECREF( tmp_tuple_element_95 );

        exception_lineno = 546;

        goto try_except_handler_65;
    }
    if ( outline_31_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_95,
            const_str_plain_as_const,
            outline_31_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_95,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_95,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_64 );
        Py_DECREF( tmp_tuple_element_95 );

        exception_lineno = 546;

        goto try_except_handler_65;
    }
    PyTuple_SET_ITEM( tmp_args_name_64, 2, tmp_tuple_element_95 );
    tmp_kw_name_64 = tmp_class_creation_32__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_64 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 546;
    tmp_assign_source_372 = CALL_FUNCTION( tmp_called_name_66, tmp_args_name_64, tmp_kw_name_64 );
    Py_DECREF( tmp_args_name_64 );
    if ( tmp_assign_source_372 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 546;

        goto try_except_handler_65;
    }
    assert( outline_31_var___class__ == NULL );
    outline_31_var___class__ = tmp_assign_source_372;

    tmp_outline_return_value_32 = outline_31_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_32 );
    Py_INCREF( tmp_outline_return_value_32 );
    goto try_return_handler_65;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_65:;
    CHECK_OBJECT( (PyObject *)outline_31_var___class__ );
    Py_DECREF( outline_31_var___class__ );
    outline_31_var___class__ = NULL;

    Py_XDECREF( outline_31_var___qualname__ );
    outline_31_var___qualname__ = NULL;

    Py_XDECREF( outline_31_var___module__ );
    outline_31_var___module__ = NULL;

    Py_XDECREF( outline_31_var___doc__ );
    outline_31_var___doc__ = NULL;

    Py_XDECREF( outline_31_var_fields );
    outline_31_var_fields = NULL;

    Py_XDECREF( outline_31_var_as_const );
    outline_31_var_as_const = NULL;

    goto outline_result_32;
    // Exception handler code:
    try_except_handler_65:;
    exception_keeper_type_64 = exception_type;
    exception_keeper_value_64 = exception_value;
    exception_keeper_tb_64 = exception_tb;
    exception_keeper_lineno_64 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_31_var___qualname__ );
    outline_31_var___qualname__ = NULL;

    Py_XDECREF( outline_31_var___module__ );
    outline_31_var___module__ = NULL;

    Py_XDECREF( outline_31_var___doc__ );
    outline_31_var___doc__ = NULL;

    Py_XDECREF( outline_31_var_fields );
    outline_31_var_fields = NULL;

    Py_XDECREF( outline_31_var_as_const );
    outline_31_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_64;
    exception_value = exception_keeper_value_64;
    exception_tb = exception_keeper_tb_64;
    exception_lineno = exception_keeper_lineno_64;

    goto outline_exception_32;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_32:;
    exception_lineno = 546;
    goto try_except_handler_64;
    outline_result_32:;
    tmp_assign_source_366 = tmp_outline_return_value_32;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_List, tmp_assign_source_366 );
    goto try_end_33;
    // Exception handler code:
    try_except_handler_64:;
    exception_keeper_type_65 = exception_type;
    exception_keeper_value_65 = exception_value;
    exception_keeper_tb_65 = exception_tb;
    exception_keeper_lineno_65 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_32__bases );
    tmp_class_creation_32__bases = NULL;

    Py_XDECREF( tmp_class_creation_32__class_decl_dict );
    tmp_class_creation_32__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_32__metaclass );
    tmp_class_creation_32__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_32__prepared );
    tmp_class_creation_32__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_65;
    exception_value = exception_keeper_value_65;
    exception_tb = exception_keeper_tb_65;
    exception_lineno = exception_keeper_lineno_65;

    goto frame_exception_exit_1;
    // End of try:
    try_end_33:;
    Py_XDECREF( tmp_class_creation_32__bases );
    tmp_class_creation_32__bases = NULL;

    Py_XDECREF( tmp_class_creation_32__class_decl_dict );
    tmp_class_creation_32__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_32__metaclass );
    tmp_class_creation_32__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_32__prepared );
    tmp_class_creation_32__prepared = NULL;

    // Tried code:
    tmp_assign_source_373 = PyTuple_New( 1 );
    tmp_tuple_element_96 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Literal );

    if (unlikely( tmp_tuple_element_96 == NULL ))
    {
        tmp_tuple_element_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Literal );
    }

    if ( tmp_tuple_element_96 == NULL )
    {
        Py_DECREF( tmp_assign_source_373 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Literal" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 555;

        goto try_except_handler_66;
    }

    Py_INCREF( tmp_tuple_element_96 );
    PyTuple_SET_ITEM( tmp_assign_source_373, 0, tmp_tuple_element_96 );
    assert( tmp_class_creation_33__bases == NULL );
    tmp_class_creation_33__bases = tmp_assign_source_373;

    tmp_assign_source_374 = PyDict_New();
    assert( tmp_class_creation_33__class_decl_dict == NULL );
    tmp_class_creation_33__class_decl_dict = tmp_assign_source_374;

    tmp_compare_left_65 = const_str_plain_metaclass;
    tmp_compare_right_65 = tmp_class_creation_33__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_65 );
    tmp_cmp_In_65 = PySequence_Contains( tmp_compare_right_65, tmp_compare_left_65 );
    assert( !(tmp_cmp_In_65 == -1) );
    if ( tmp_cmp_In_65 == 1 )
    {
        goto condexpr_true_97;
    }
    else
    {
        goto condexpr_false_97;
    }
    condexpr_true_97:;
    tmp_dict_name_33 = tmp_class_creation_33__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_33 );
    tmp_key_name_33 = const_str_plain_metaclass;
    tmp_metaclass_name_33 = DICT_GET_ITEM( tmp_dict_name_33, tmp_key_name_33 );
    if ( tmp_metaclass_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_66;
    }
    goto condexpr_end_97;
    condexpr_false_97:;
    tmp_cond_value_33 = tmp_class_creation_33__bases;

    CHECK_OBJECT( tmp_cond_value_33 );
    tmp_cond_truth_33 = CHECK_IF_TRUE( tmp_cond_value_33 );
    if ( tmp_cond_truth_33 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_66;
    }
    if ( tmp_cond_truth_33 == 1 )
    {
        goto condexpr_true_98;
    }
    else
    {
        goto condexpr_false_98;
    }
    condexpr_true_98:;
    tmp_subscribed_name_33 = tmp_class_creation_33__bases;

    CHECK_OBJECT( tmp_subscribed_name_33 );
    tmp_subscript_name_33 = const_int_0;
    tmp_type_arg_33 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_33, tmp_subscript_name_33 );
    if ( tmp_type_arg_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_66;
    }
    tmp_metaclass_name_33 = BUILTIN_TYPE1( tmp_type_arg_33 );
    Py_DECREF( tmp_type_arg_33 );
    if ( tmp_metaclass_name_33 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_66;
    }
    goto condexpr_end_98;
    condexpr_false_98:;
    tmp_metaclass_name_33 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_33 );
    condexpr_end_98:;
    condexpr_end_97:;
    tmp_bases_name_33 = tmp_class_creation_33__bases;

    CHECK_OBJECT( tmp_bases_name_33 );
    tmp_assign_source_375 = SELECT_METACLASS( tmp_metaclass_name_33, tmp_bases_name_33 );
    if ( tmp_assign_source_375 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_33 );

        exception_lineno = 555;

        goto try_except_handler_66;
    }
    Py_DECREF( tmp_metaclass_name_33 );
    assert( tmp_class_creation_33__metaclass == NULL );
    tmp_class_creation_33__metaclass = tmp_assign_source_375;

    tmp_compare_left_66 = const_str_plain_metaclass;
    tmp_compare_right_66 = tmp_class_creation_33__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_66 );
    tmp_cmp_In_66 = PySequence_Contains( tmp_compare_right_66, tmp_compare_left_66 );
    assert( !(tmp_cmp_In_66 == -1) );
    if ( tmp_cmp_In_66 == 1 )
    {
        goto branch_yes_33;
    }
    else
    {
        goto branch_no_33;
    }
    branch_yes_33:;
    tmp_dictdel_dict = tmp_class_creation_33__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_66;
    }
    branch_no_33:;
    tmp_hasattr_source_33 = tmp_class_creation_33__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_33 );
    tmp_hasattr_attr_33 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_33, tmp_hasattr_attr_33 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_66;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_99;
    }
    else
    {
        goto condexpr_false_99;
    }
    condexpr_true_99:;
    tmp_source_name_52 = tmp_class_creation_33__metaclass;

    CHECK_OBJECT( tmp_source_name_52 );
    tmp_called_name_67 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain___prepare__ );
    if ( tmp_called_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_66;
    }
    tmp_args_name_65 = PyTuple_New( 2 );
    tmp_tuple_element_97 = const_str_plain_Dict;
    Py_INCREF( tmp_tuple_element_97 );
    PyTuple_SET_ITEM( tmp_args_name_65, 0, tmp_tuple_element_97 );
    tmp_tuple_element_97 = tmp_class_creation_33__bases;

    CHECK_OBJECT( tmp_tuple_element_97 );
    Py_INCREF( tmp_tuple_element_97 );
    PyTuple_SET_ITEM( tmp_args_name_65, 1, tmp_tuple_element_97 );
    tmp_kw_name_65 = tmp_class_creation_33__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_65 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 555;
    tmp_assign_source_376 = CALL_FUNCTION( tmp_called_name_67, tmp_args_name_65, tmp_kw_name_65 );
    Py_DECREF( tmp_called_name_67 );
    Py_DECREF( tmp_args_name_65 );
    if ( tmp_assign_source_376 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_66;
    }
    goto condexpr_end_99;
    condexpr_false_99:;
    tmp_assign_source_376 = PyDict_New();
    condexpr_end_99:;
    assert( tmp_class_creation_33__prepared == NULL );
    tmp_class_creation_33__prepared = tmp_assign_source_376;

    tmp_set_locals = tmp_class_creation_33__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_33);
    locals_dict_33 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_378 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_32_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_378 );
    outline_32_var___module__ = tmp_assign_source_378;

    tmp_assign_source_379 = const_str_digest_797433fccfc787066be93fb6493d73ad;
    assert( outline_32_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_379 );
    outline_32_var___doc__ = tmp_assign_source_379;

    tmp_assign_source_380 = const_str_plain_Dict;
    assert( outline_32_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_380 );
    outline_32_var___qualname__ = tmp_assign_source_380;

    tmp_assign_source_381 = const_tuple_str_plain_items_tuple;
    assert( outline_32_var_fields == NULL );
    Py_INCREF( tmp_assign_source_381 );
    outline_32_var_fields = tmp_assign_source_381;

    tmp_defaults_13 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_13 );
    tmp_assign_source_382 = MAKE_FUNCTION_jinja2$nodes$$$function_32_as_const( tmp_defaults_13 );
    assert( outline_32_var_as_const == NULL );
    outline_32_var_as_const = tmp_assign_source_382;

    // Tried code:
    tmp_called_name_68 = tmp_class_creation_33__metaclass;

    CHECK_OBJECT( tmp_called_name_68 );
    tmp_args_name_66 = PyTuple_New( 3 );
    tmp_tuple_element_98 = const_str_plain_Dict;
    Py_INCREF( tmp_tuple_element_98 );
    PyTuple_SET_ITEM( tmp_args_name_66, 0, tmp_tuple_element_98 );
    tmp_tuple_element_98 = tmp_class_creation_33__bases;

    CHECK_OBJECT( tmp_tuple_element_98 );
    Py_INCREF( tmp_tuple_element_98 );
    PyTuple_SET_ITEM( tmp_args_name_66, 1, tmp_tuple_element_98 );
    tmp_tuple_element_98 = locals_dict_33;
    Py_INCREF( tmp_tuple_element_98 );
    if ( outline_32_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_98,
            const_str_plain___qualname__,
            outline_32_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_98,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_98,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_66 );
        Py_DECREF( tmp_tuple_element_98 );

        exception_lineno = 555;

        goto try_except_handler_67;
    }
    if ( outline_32_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_98,
            const_str_plain___module__,
            outline_32_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_98,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_98,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_66 );
        Py_DECREF( tmp_tuple_element_98 );

        exception_lineno = 555;

        goto try_except_handler_67;
    }
    if ( outline_32_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_98,
            const_str_plain___doc__,
            outline_32_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_98,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_98,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_66 );
        Py_DECREF( tmp_tuple_element_98 );

        exception_lineno = 555;

        goto try_except_handler_67;
    }
    if ( outline_32_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_98,
            const_str_plain_fields,
            outline_32_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_98,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_98,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_66 );
        Py_DECREF( tmp_tuple_element_98 );

        exception_lineno = 555;

        goto try_except_handler_67;
    }
    if ( outline_32_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_98,
            const_str_plain_as_const,
            outline_32_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_98,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_98,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_66 );
        Py_DECREF( tmp_tuple_element_98 );

        exception_lineno = 555;

        goto try_except_handler_67;
    }
    PyTuple_SET_ITEM( tmp_args_name_66, 2, tmp_tuple_element_98 );
    tmp_kw_name_66 = tmp_class_creation_33__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_66 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 555;
    tmp_assign_source_383 = CALL_FUNCTION( tmp_called_name_68, tmp_args_name_66, tmp_kw_name_66 );
    Py_DECREF( tmp_args_name_66 );
    if ( tmp_assign_source_383 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 555;

        goto try_except_handler_67;
    }
    assert( outline_32_var___class__ == NULL );
    outline_32_var___class__ = tmp_assign_source_383;

    tmp_outline_return_value_33 = outline_32_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_33 );
    Py_INCREF( tmp_outline_return_value_33 );
    goto try_return_handler_67;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_67:;
    CHECK_OBJECT( (PyObject *)outline_32_var___class__ );
    Py_DECREF( outline_32_var___class__ );
    outline_32_var___class__ = NULL;

    Py_XDECREF( outline_32_var___qualname__ );
    outline_32_var___qualname__ = NULL;

    Py_XDECREF( outline_32_var___module__ );
    outline_32_var___module__ = NULL;

    Py_XDECREF( outline_32_var___doc__ );
    outline_32_var___doc__ = NULL;

    Py_XDECREF( outline_32_var_fields );
    outline_32_var_fields = NULL;

    Py_XDECREF( outline_32_var_as_const );
    outline_32_var_as_const = NULL;

    goto outline_result_33;
    // Exception handler code:
    try_except_handler_67:;
    exception_keeper_type_66 = exception_type;
    exception_keeper_value_66 = exception_value;
    exception_keeper_tb_66 = exception_tb;
    exception_keeper_lineno_66 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_32_var___qualname__ );
    outline_32_var___qualname__ = NULL;

    Py_XDECREF( outline_32_var___module__ );
    outline_32_var___module__ = NULL;

    Py_XDECREF( outline_32_var___doc__ );
    outline_32_var___doc__ = NULL;

    Py_XDECREF( outline_32_var_fields );
    outline_32_var_fields = NULL;

    Py_XDECREF( outline_32_var_as_const );
    outline_32_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_66;
    exception_value = exception_keeper_value_66;
    exception_tb = exception_keeper_tb_66;
    exception_lineno = exception_keeper_lineno_66;

    goto outline_exception_33;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_33:;
    exception_lineno = 555;
    goto try_except_handler_66;
    outline_result_33:;
    tmp_assign_source_377 = tmp_outline_return_value_33;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Dict, tmp_assign_source_377 );
    goto try_end_34;
    // Exception handler code:
    try_except_handler_66:;
    exception_keeper_type_67 = exception_type;
    exception_keeper_value_67 = exception_value;
    exception_keeper_tb_67 = exception_tb;
    exception_keeper_lineno_67 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_33__bases );
    tmp_class_creation_33__bases = NULL;

    Py_XDECREF( tmp_class_creation_33__class_decl_dict );
    tmp_class_creation_33__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_33__metaclass );
    tmp_class_creation_33__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_33__prepared );
    tmp_class_creation_33__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_67;
    exception_value = exception_keeper_value_67;
    exception_tb = exception_keeper_tb_67;
    exception_lineno = exception_keeper_lineno_67;

    goto frame_exception_exit_1;
    // End of try:
    try_end_34:;
    Py_XDECREF( tmp_class_creation_33__bases );
    tmp_class_creation_33__bases = NULL;

    Py_XDECREF( tmp_class_creation_33__class_decl_dict );
    tmp_class_creation_33__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_33__metaclass );
    tmp_class_creation_33__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_33__prepared );
    tmp_class_creation_33__prepared = NULL;

    // Tried code:
    tmp_assign_source_384 = PyTuple_New( 1 );
    tmp_tuple_element_99 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Helper );

    if (unlikely( tmp_tuple_element_99 == NULL ))
    {
        tmp_tuple_element_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Helper );
    }

    if ( tmp_tuple_element_99 == NULL )
    {
        Py_DECREF( tmp_assign_source_384 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Helper" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 566;

        goto try_except_handler_68;
    }

    Py_INCREF( tmp_tuple_element_99 );
    PyTuple_SET_ITEM( tmp_assign_source_384, 0, tmp_tuple_element_99 );
    assert( tmp_class_creation_34__bases == NULL );
    tmp_class_creation_34__bases = tmp_assign_source_384;

    tmp_assign_source_385 = PyDict_New();
    assert( tmp_class_creation_34__class_decl_dict == NULL );
    tmp_class_creation_34__class_decl_dict = tmp_assign_source_385;

    tmp_compare_left_67 = const_str_plain_metaclass;
    tmp_compare_right_67 = tmp_class_creation_34__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_67 );
    tmp_cmp_In_67 = PySequence_Contains( tmp_compare_right_67, tmp_compare_left_67 );
    assert( !(tmp_cmp_In_67 == -1) );
    if ( tmp_cmp_In_67 == 1 )
    {
        goto condexpr_true_100;
    }
    else
    {
        goto condexpr_false_100;
    }
    condexpr_true_100:;
    tmp_dict_name_34 = tmp_class_creation_34__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_34 );
    tmp_key_name_34 = const_str_plain_metaclass;
    tmp_metaclass_name_34 = DICT_GET_ITEM( tmp_dict_name_34, tmp_key_name_34 );
    if ( tmp_metaclass_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_68;
    }
    goto condexpr_end_100;
    condexpr_false_100:;
    tmp_cond_value_34 = tmp_class_creation_34__bases;

    CHECK_OBJECT( tmp_cond_value_34 );
    tmp_cond_truth_34 = CHECK_IF_TRUE( tmp_cond_value_34 );
    if ( tmp_cond_truth_34 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_68;
    }
    if ( tmp_cond_truth_34 == 1 )
    {
        goto condexpr_true_101;
    }
    else
    {
        goto condexpr_false_101;
    }
    condexpr_true_101:;
    tmp_subscribed_name_34 = tmp_class_creation_34__bases;

    CHECK_OBJECT( tmp_subscribed_name_34 );
    tmp_subscript_name_34 = const_int_0;
    tmp_type_arg_34 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_34, tmp_subscript_name_34 );
    if ( tmp_type_arg_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_68;
    }
    tmp_metaclass_name_34 = BUILTIN_TYPE1( tmp_type_arg_34 );
    Py_DECREF( tmp_type_arg_34 );
    if ( tmp_metaclass_name_34 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_68;
    }
    goto condexpr_end_101;
    condexpr_false_101:;
    tmp_metaclass_name_34 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_34 );
    condexpr_end_101:;
    condexpr_end_100:;
    tmp_bases_name_34 = tmp_class_creation_34__bases;

    CHECK_OBJECT( tmp_bases_name_34 );
    tmp_assign_source_386 = SELECT_METACLASS( tmp_metaclass_name_34, tmp_bases_name_34 );
    if ( tmp_assign_source_386 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_34 );

        exception_lineno = 566;

        goto try_except_handler_68;
    }
    Py_DECREF( tmp_metaclass_name_34 );
    assert( tmp_class_creation_34__metaclass == NULL );
    tmp_class_creation_34__metaclass = tmp_assign_source_386;

    tmp_compare_left_68 = const_str_plain_metaclass;
    tmp_compare_right_68 = tmp_class_creation_34__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_68 );
    tmp_cmp_In_68 = PySequence_Contains( tmp_compare_right_68, tmp_compare_left_68 );
    assert( !(tmp_cmp_In_68 == -1) );
    if ( tmp_cmp_In_68 == 1 )
    {
        goto branch_yes_34;
    }
    else
    {
        goto branch_no_34;
    }
    branch_yes_34:;
    tmp_dictdel_dict = tmp_class_creation_34__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_68;
    }
    branch_no_34:;
    tmp_hasattr_source_34 = tmp_class_creation_34__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_34 );
    tmp_hasattr_attr_34 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_34, tmp_hasattr_attr_34 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_68;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_102;
    }
    else
    {
        goto condexpr_false_102;
    }
    condexpr_true_102:;
    tmp_source_name_53 = tmp_class_creation_34__metaclass;

    CHECK_OBJECT( tmp_source_name_53 );
    tmp_called_name_69 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain___prepare__ );
    if ( tmp_called_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_68;
    }
    tmp_args_name_67 = PyTuple_New( 2 );
    tmp_tuple_element_100 = const_str_plain_Pair;
    Py_INCREF( tmp_tuple_element_100 );
    PyTuple_SET_ITEM( tmp_args_name_67, 0, tmp_tuple_element_100 );
    tmp_tuple_element_100 = tmp_class_creation_34__bases;

    CHECK_OBJECT( tmp_tuple_element_100 );
    Py_INCREF( tmp_tuple_element_100 );
    PyTuple_SET_ITEM( tmp_args_name_67, 1, tmp_tuple_element_100 );
    tmp_kw_name_67 = tmp_class_creation_34__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_67 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 566;
    tmp_assign_source_387 = CALL_FUNCTION( tmp_called_name_69, tmp_args_name_67, tmp_kw_name_67 );
    Py_DECREF( tmp_called_name_69 );
    Py_DECREF( tmp_args_name_67 );
    if ( tmp_assign_source_387 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_68;
    }
    goto condexpr_end_102;
    condexpr_false_102:;
    tmp_assign_source_387 = PyDict_New();
    condexpr_end_102:;
    assert( tmp_class_creation_34__prepared == NULL );
    tmp_class_creation_34__prepared = tmp_assign_source_387;

    tmp_set_locals = tmp_class_creation_34__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_34);
    locals_dict_34 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_389 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_33_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_389 );
    outline_33_var___module__ = tmp_assign_source_389;

    tmp_assign_source_390 = const_str_digest_5a3a854b390024a6f292bfb3854773ef;
    assert( outline_33_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_390 );
    outline_33_var___doc__ = tmp_assign_source_390;

    tmp_assign_source_391 = const_str_plain_Pair;
    assert( outline_33_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_391 );
    outline_33_var___qualname__ = tmp_assign_source_391;

    tmp_assign_source_392 = const_tuple_str_plain_key_str_plain_value_tuple;
    assert( outline_33_var_fields == NULL );
    Py_INCREF( tmp_assign_source_392 );
    outline_33_var_fields = tmp_assign_source_392;

    tmp_defaults_14 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_14 );
    tmp_assign_source_393 = MAKE_FUNCTION_jinja2$nodes$$$function_33_as_const( tmp_defaults_14 );
    assert( outline_33_var_as_const == NULL );
    outline_33_var_as_const = tmp_assign_source_393;

    // Tried code:
    tmp_called_name_70 = tmp_class_creation_34__metaclass;

    CHECK_OBJECT( tmp_called_name_70 );
    tmp_args_name_68 = PyTuple_New( 3 );
    tmp_tuple_element_101 = const_str_plain_Pair;
    Py_INCREF( tmp_tuple_element_101 );
    PyTuple_SET_ITEM( tmp_args_name_68, 0, tmp_tuple_element_101 );
    tmp_tuple_element_101 = tmp_class_creation_34__bases;

    CHECK_OBJECT( tmp_tuple_element_101 );
    Py_INCREF( tmp_tuple_element_101 );
    PyTuple_SET_ITEM( tmp_args_name_68, 1, tmp_tuple_element_101 );
    tmp_tuple_element_101 = locals_dict_34;
    Py_INCREF( tmp_tuple_element_101 );
    if ( outline_33_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_101,
            const_str_plain___qualname__,
            outline_33_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_101,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_101,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_68 );
        Py_DECREF( tmp_tuple_element_101 );

        exception_lineno = 566;

        goto try_except_handler_69;
    }
    if ( outline_33_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_101,
            const_str_plain___module__,
            outline_33_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_101,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_101,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_68 );
        Py_DECREF( tmp_tuple_element_101 );

        exception_lineno = 566;

        goto try_except_handler_69;
    }
    if ( outline_33_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_101,
            const_str_plain___doc__,
            outline_33_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_101,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_101,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_68 );
        Py_DECREF( tmp_tuple_element_101 );

        exception_lineno = 566;

        goto try_except_handler_69;
    }
    if ( outline_33_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_101,
            const_str_plain_fields,
            outline_33_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_101,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_101,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_68 );
        Py_DECREF( tmp_tuple_element_101 );

        exception_lineno = 566;

        goto try_except_handler_69;
    }
    if ( outline_33_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_101,
            const_str_plain_as_const,
            outline_33_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_101,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_101,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_68 );
        Py_DECREF( tmp_tuple_element_101 );

        exception_lineno = 566;

        goto try_except_handler_69;
    }
    PyTuple_SET_ITEM( tmp_args_name_68, 2, tmp_tuple_element_101 );
    tmp_kw_name_68 = tmp_class_creation_34__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_68 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 566;
    tmp_assign_source_394 = CALL_FUNCTION( tmp_called_name_70, tmp_args_name_68, tmp_kw_name_68 );
    Py_DECREF( tmp_args_name_68 );
    if ( tmp_assign_source_394 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;

        goto try_except_handler_69;
    }
    assert( outline_33_var___class__ == NULL );
    outline_33_var___class__ = tmp_assign_source_394;

    tmp_outline_return_value_34 = outline_33_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_34 );
    Py_INCREF( tmp_outline_return_value_34 );
    goto try_return_handler_69;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_69:;
    CHECK_OBJECT( (PyObject *)outline_33_var___class__ );
    Py_DECREF( outline_33_var___class__ );
    outline_33_var___class__ = NULL;

    Py_XDECREF( outline_33_var___qualname__ );
    outline_33_var___qualname__ = NULL;

    Py_XDECREF( outline_33_var___module__ );
    outline_33_var___module__ = NULL;

    Py_XDECREF( outline_33_var___doc__ );
    outline_33_var___doc__ = NULL;

    Py_XDECREF( outline_33_var_fields );
    outline_33_var_fields = NULL;

    Py_XDECREF( outline_33_var_as_const );
    outline_33_var_as_const = NULL;

    goto outline_result_34;
    // Exception handler code:
    try_except_handler_69:;
    exception_keeper_type_68 = exception_type;
    exception_keeper_value_68 = exception_value;
    exception_keeper_tb_68 = exception_tb;
    exception_keeper_lineno_68 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_33_var___qualname__ );
    outline_33_var___qualname__ = NULL;

    Py_XDECREF( outline_33_var___module__ );
    outline_33_var___module__ = NULL;

    Py_XDECREF( outline_33_var___doc__ );
    outline_33_var___doc__ = NULL;

    Py_XDECREF( outline_33_var_fields );
    outline_33_var_fields = NULL;

    Py_XDECREF( outline_33_var_as_const );
    outline_33_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_68;
    exception_value = exception_keeper_value_68;
    exception_tb = exception_keeper_tb_68;
    exception_lineno = exception_keeper_lineno_68;

    goto outline_exception_34;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_34:;
    exception_lineno = 566;
    goto try_except_handler_68;
    outline_result_34:;
    tmp_assign_source_388 = tmp_outline_return_value_34;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Pair, tmp_assign_source_388 );
    goto try_end_35;
    // Exception handler code:
    try_except_handler_68:;
    exception_keeper_type_69 = exception_type;
    exception_keeper_value_69 = exception_value;
    exception_keeper_tb_69 = exception_tb;
    exception_keeper_lineno_69 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_34__bases );
    tmp_class_creation_34__bases = NULL;

    Py_XDECREF( tmp_class_creation_34__class_decl_dict );
    tmp_class_creation_34__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_34__metaclass );
    tmp_class_creation_34__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_34__prepared );
    tmp_class_creation_34__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_69;
    exception_value = exception_keeper_value_69;
    exception_tb = exception_keeper_tb_69;
    exception_lineno = exception_keeper_lineno_69;

    goto frame_exception_exit_1;
    // End of try:
    try_end_35:;
    Py_XDECREF( tmp_class_creation_34__bases );
    tmp_class_creation_34__bases = NULL;

    Py_XDECREF( tmp_class_creation_34__class_decl_dict );
    tmp_class_creation_34__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_34__metaclass );
    tmp_class_creation_34__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_34__prepared );
    tmp_class_creation_34__prepared = NULL;

    // Tried code:
    tmp_assign_source_395 = PyTuple_New( 1 );
    tmp_tuple_element_102 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Helper );

    if (unlikely( tmp_tuple_element_102 == NULL ))
    {
        tmp_tuple_element_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Helper );
    }

    if ( tmp_tuple_element_102 == NULL )
    {
        Py_DECREF( tmp_assign_source_395 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Helper" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 575;

        goto try_except_handler_70;
    }

    Py_INCREF( tmp_tuple_element_102 );
    PyTuple_SET_ITEM( tmp_assign_source_395, 0, tmp_tuple_element_102 );
    assert( tmp_class_creation_35__bases == NULL );
    tmp_class_creation_35__bases = tmp_assign_source_395;

    tmp_assign_source_396 = PyDict_New();
    assert( tmp_class_creation_35__class_decl_dict == NULL );
    tmp_class_creation_35__class_decl_dict = tmp_assign_source_396;

    tmp_compare_left_69 = const_str_plain_metaclass;
    tmp_compare_right_69 = tmp_class_creation_35__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_69 );
    tmp_cmp_In_69 = PySequence_Contains( tmp_compare_right_69, tmp_compare_left_69 );
    assert( !(tmp_cmp_In_69 == -1) );
    if ( tmp_cmp_In_69 == 1 )
    {
        goto condexpr_true_103;
    }
    else
    {
        goto condexpr_false_103;
    }
    condexpr_true_103:;
    tmp_dict_name_35 = tmp_class_creation_35__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_35 );
    tmp_key_name_35 = const_str_plain_metaclass;
    tmp_metaclass_name_35 = DICT_GET_ITEM( tmp_dict_name_35, tmp_key_name_35 );
    if ( tmp_metaclass_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_70;
    }
    goto condexpr_end_103;
    condexpr_false_103:;
    tmp_cond_value_35 = tmp_class_creation_35__bases;

    CHECK_OBJECT( tmp_cond_value_35 );
    tmp_cond_truth_35 = CHECK_IF_TRUE( tmp_cond_value_35 );
    if ( tmp_cond_truth_35 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_70;
    }
    if ( tmp_cond_truth_35 == 1 )
    {
        goto condexpr_true_104;
    }
    else
    {
        goto condexpr_false_104;
    }
    condexpr_true_104:;
    tmp_subscribed_name_35 = tmp_class_creation_35__bases;

    CHECK_OBJECT( tmp_subscribed_name_35 );
    tmp_subscript_name_35 = const_int_0;
    tmp_type_arg_35 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_35, tmp_subscript_name_35 );
    if ( tmp_type_arg_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_70;
    }
    tmp_metaclass_name_35 = BUILTIN_TYPE1( tmp_type_arg_35 );
    Py_DECREF( tmp_type_arg_35 );
    if ( tmp_metaclass_name_35 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_70;
    }
    goto condexpr_end_104;
    condexpr_false_104:;
    tmp_metaclass_name_35 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_35 );
    condexpr_end_104:;
    condexpr_end_103:;
    tmp_bases_name_35 = tmp_class_creation_35__bases;

    CHECK_OBJECT( tmp_bases_name_35 );
    tmp_assign_source_397 = SELECT_METACLASS( tmp_metaclass_name_35, tmp_bases_name_35 );
    if ( tmp_assign_source_397 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_35 );

        exception_lineno = 575;

        goto try_except_handler_70;
    }
    Py_DECREF( tmp_metaclass_name_35 );
    assert( tmp_class_creation_35__metaclass == NULL );
    tmp_class_creation_35__metaclass = tmp_assign_source_397;

    tmp_compare_left_70 = const_str_plain_metaclass;
    tmp_compare_right_70 = tmp_class_creation_35__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_70 );
    tmp_cmp_In_70 = PySequence_Contains( tmp_compare_right_70, tmp_compare_left_70 );
    assert( !(tmp_cmp_In_70 == -1) );
    if ( tmp_cmp_In_70 == 1 )
    {
        goto branch_yes_35;
    }
    else
    {
        goto branch_no_35;
    }
    branch_yes_35:;
    tmp_dictdel_dict = tmp_class_creation_35__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_70;
    }
    branch_no_35:;
    tmp_hasattr_source_35 = tmp_class_creation_35__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_35 );
    tmp_hasattr_attr_35 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_35, tmp_hasattr_attr_35 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_70;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_105;
    }
    else
    {
        goto condexpr_false_105;
    }
    condexpr_true_105:;
    tmp_source_name_54 = tmp_class_creation_35__metaclass;

    CHECK_OBJECT( tmp_source_name_54 );
    tmp_called_name_71 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain___prepare__ );
    if ( tmp_called_name_71 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_70;
    }
    tmp_args_name_69 = PyTuple_New( 2 );
    tmp_tuple_element_103 = const_str_plain_Keyword;
    Py_INCREF( tmp_tuple_element_103 );
    PyTuple_SET_ITEM( tmp_args_name_69, 0, tmp_tuple_element_103 );
    tmp_tuple_element_103 = tmp_class_creation_35__bases;

    CHECK_OBJECT( tmp_tuple_element_103 );
    Py_INCREF( tmp_tuple_element_103 );
    PyTuple_SET_ITEM( tmp_args_name_69, 1, tmp_tuple_element_103 );
    tmp_kw_name_69 = tmp_class_creation_35__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_69 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 575;
    tmp_assign_source_398 = CALL_FUNCTION( tmp_called_name_71, tmp_args_name_69, tmp_kw_name_69 );
    Py_DECREF( tmp_called_name_71 );
    Py_DECREF( tmp_args_name_69 );
    if ( tmp_assign_source_398 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_70;
    }
    goto condexpr_end_105;
    condexpr_false_105:;
    tmp_assign_source_398 = PyDict_New();
    condexpr_end_105:;
    assert( tmp_class_creation_35__prepared == NULL );
    tmp_class_creation_35__prepared = tmp_assign_source_398;

    tmp_set_locals = tmp_class_creation_35__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_35);
    locals_dict_35 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_400 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_34_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_400 );
    outline_34_var___module__ = tmp_assign_source_400;

    tmp_assign_source_401 = const_str_digest_62ec52fbadea4400c885be3c37827827;
    assert( outline_34_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_401 );
    outline_34_var___doc__ = tmp_assign_source_401;

    tmp_assign_source_402 = const_str_plain_Keyword;
    assert( outline_34_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_402 );
    outline_34_var___qualname__ = tmp_assign_source_402;

    tmp_assign_source_403 = const_tuple_str_plain_key_str_plain_value_tuple;
    assert( outline_34_var_fields == NULL );
    Py_INCREF( tmp_assign_source_403 );
    outline_34_var_fields = tmp_assign_source_403;

    tmp_defaults_15 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_15 );
    tmp_assign_source_404 = MAKE_FUNCTION_jinja2$nodes$$$function_34_as_const( tmp_defaults_15 );
    assert( outline_34_var_as_const == NULL );
    outline_34_var_as_const = tmp_assign_source_404;

    // Tried code:
    tmp_called_name_72 = tmp_class_creation_35__metaclass;

    CHECK_OBJECT( tmp_called_name_72 );
    tmp_args_name_70 = PyTuple_New( 3 );
    tmp_tuple_element_104 = const_str_plain_Keyword;
    Py_INCREF( tmp_tuple_element_104 );
    PyTuple_SET_ITEM( tmp_args_name_70, 0, tmp_tuple_element_104 );
    tmp_tuple_element_104 = tmp_class_creation_35__bases;

    CHECK_OBJECT( tmp_tuple_element_104 );
    Py_INCREF( tmp_tuple_element_104 );
    PyTuple_SET_ITEM( tmp_args_name_70, 1, tmp_tuple_element_104 );
    tmp_tuple_element_104 = locals_dict_35;
    Py_INCREF( tmp_tuple_element_104 );
    if ( outline_34_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_104,
            const_str_plain___qualname__,
            outline_34_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_104,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_104,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_70 );
        Py_DECREF( tmp_tuple_element_104 );

        exception_lineno = 575;

        goto try_except_handler_71;
    }
    if ( outline_34_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_104,
            const_str_plain___module__,
            outline_34_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_104,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_104,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_70 );
        Py_DECREF( tmp_tuple_element_104 );

        exception_lineno = 575;

        goto try_except_handler_71;
    }
    if ( outline_34_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_104,
            const_str_plain___doc__,
            outline_34_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_104,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_104,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_70 );
        Py_DECREF( tmp_tuple_element_104 );

        exception_lineno = 575;

        goto try_except_handler_71;
    }
    if ( outline_34_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_104,
            const_str_plain_fields,
            outline_34_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_104,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_104,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_70 );
        Py_DECREF( tmp_tuple_element_104 );

        exception_lineno = 575;

        goto try_except_handler_71;
    }
    if ( outline_34_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_104,
            const_str_plain_as_const,
            outline_34_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_104,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_104,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_70 );
        Py_DECREF( tmp_tuple_element_104 );

        exception_lineno = 575;

        goto try_except_handler_71;
    }
    PyTuple_SET_ITEM( tmp_args_name_70, 2, tmp_tuple_element_104 );
    tmp_kw_name_70 = tmp_class_creation_35__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_70 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 575;
    tmp_assign_source_405 = CALL_FUNCTION( tmp_called_name_72, tmp_args_name_70, tmp_kw_name_70 );
    Py_DECREF( tmp_args_name_70 );
    if ( tmp_assign_source_405 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 575;

        goto try_except_handler_71;
    }
    assert( outline_34_var___class__ == NULL );
    outline_34_var___class__ = tmp_assign_source_405;

    tmp_outline_return_value_35 = outline_34_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_35 );
    Py_INCREF( tmp_outline_return_value_35 );
    goto try_return_handler_71;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_71:;
    CHECK_OBJECT( (PyObject *)outline_34_var___class__ );
    Py_DECREF( outline_34_var___class__ );
    outline_34_var___class__ = NULL;

    Py_XDECREF( outline_34_var___qualname__ );
    outline_34_var___qualname__ = NULL;

    Py_XDECREF( outline_34_var___module__ );
    outline_34_var___module__ = NULL;

    Py_XDECREF( outline_34_var___doc__ );
    outline_34_var___doc__ = NULL;

    Py_XDECREF( outline_34_var_fields );
    outline_34_var_fields = NULL;

    Py_XDECREF( outline_34_var_as_const );
    outline_34_var_as_const = NULL;

    goto outline_result_35;
    // Exception handler code:
    try_except_handler_71:;
    exception_keeper_type_70 = exception_type;
    exception_keeper_value_70 = exception_value;
    exception_keeper_tb_70 = exception_tb;
    exception_keeper_lineno_70 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_34_var___qualname__ );
    outline_34_var___qualname__ = NULL;

    Py_XDECREF( outline_34_var___module__ );
    outline_34_var___module__ = NULL;

    Py_XDECREF( outline_34_var___doc__ );
    outline_34_var___doc__ = NULL;

    Py_XDECREF( outline_34_var_fields );
    outline_34_var_fields = NULL;

    Py_XDECREF( outline_34_var_as_const );
    outline_34_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_70;
    exception_value = exception_keeper_value_70;
    exception_tb = exception_keeper_tb_70;
    exception_lineno = exception_keeper_lineno_70;

    goto outline_exception_35;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_35:;
    exception_lineno = 575;
    goto try_except_handler_70;
    outline_result_35:;
    tmp_assign_source_399 = tmp_outline_return_value_35;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Keyword, tmp_assign_source_399 );
    goto try_end_36;
    // Exception handler code:
    try_except_handler_70:;
    exception_keeper_type_71 = exception_type;
    exception_keeper_value_71 = exception_value;
    exception_keeper_tb_71 = exception_tb;
    exception_keeper_lineno_71 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_35__bases );
    tmp_class_creation_35__bases = NULL;

    Py_XDECREF( tmp_class_creation_35__class_decl_dict );
    tmp_class_creation_35__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_35__metaclass );
    tmp_class_creation_35__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_35__prepared );
    tmp_class_creation_35__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_71;
    exception_value = exception_keeper_value_71;
    exception_tb = exception_keeper_tb_71;
    exception_lineno = exception_keeper_lineno_71;

    goto frame_exception_exit_1;
    // End of try:
    try_end_36:;
    Py_XDECREF( tmp_class_creation_35__bases );
    tmp_class_creation_35__bases = NULL;

    Py_XDECREF( tmp_class_creation_35__class_decl_dict );
    tmp_class_creation_35__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_35__metaclass );
    tmp_class_creation_35__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_35__prepared );
    tmp_class_creation_35__prepared = NULL;

    // Tried code:
    tmp_assign_source_406 = PyTuple_New( 1 );
    tmp_tuple_element_105 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_105 == NULL ))
    {
        tmp_tuple_element_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_105 == NULL )
    {
        Py_DECREF( tmp_assign_source_406 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 584;

        goto try_except_handler_72;
    }

    Py_INCREF( tmp_tuple_element_105 );
    PyTuple_SET_ITEM( tmp_assign_source_406, 0, tmp_tuple_element_105 );
    assert( tmp_class_creation_36__bases == NULL );
    tmp_class_creation_36__bases = tmp_assign_source_406;

    tmp_assign_source_407 = PyDict_New();
    assert( tmp_class_creation_36__class_decl_dict == NULL );
    tmp_class_creation_36__class_decl_dict = tmp_assign_source_407;

    tmp_compare_left_71 = const_str_plain_metaclass;
    tmp_compare_right_71 = tmp_class_creation_36__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_71 );
    tmp_cmp_In_71 = PySequence_Contains( tmp_compare_right_71, tmp_compare_left_71 );
    assert( !(tmp_cmp_In_71 == -1) );
    if ( tmp_cmp_In_71 == 1 )
    {
        goto condexpr_true_106;
    }
    else
    {
        goto condexpr_false_106;
    }
    condexpr_true_106:;
    tmp_dict_name_36 = tmp_class_creation_36__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_36 );
    tmp_key_name_36 = const_str_plain_metaclass;
    tmp_metaclass_name_36 = DICT_GET_ITEM( tmp_dict_name_36, tmp_key_name_36 );
    if ( tmp_metaclass_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_72;
    }
    goto condexpr_end_106;
    condexpr_false_106:;
    tmp_cond_value_36 = tmp_class_creation_36__bases;

    CHECK_OBJECT( tmp_cond_value_36 );
    tmp_cond_truth_36 = CHECK_IF_TRUE( tmp_cond_value_36 );
    if ( tmp_cond_truth_36 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_72;
    }
    if ( tmp_cond_truth_36 == 1 )
    {
        goto condexpr_true_107;
    }
    else
    {
        goto condexpr_false_107;
    }
    condexpr_true_107:;
    tmp_subscribed_name_36 = tmp_class_creation_36__bases;

    CHECK_OBJECT( tmp_subscribed_name_36 );
    tmp_subscript_name_36 = const_int_0;
    tmp_type_arg_36 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_36, tmp_subscript_name_36 );
    if ( tmp_type_arg_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_72;
    }
    tmp_metaclass_name_36 = BUILTIN_TYPE1( tmp_type_arg_36 );
    Py_DECREF( tmp_type_arg_36 );
    if ( tmp_metaclass_name_36 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_72;
    }
    goto condexpr_end_107;
    condexpr_false_107:;
    tmp_metaclass_name_36 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_36 );
    condexpr_end_107:;
    condexpr_end_106:;
    tmp_bases_name_36 = tmp_class_creation_36__bases;

    CHECK_OBJECT( tmp_bases_name_36 );
    tmp_assign_source_408 = SELECT_METACLASS( tmp_metaclass_name_36, tmp_bases_name_36 );
    if ( tmp_assign_source_408 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_36 );

        exception_lineno = 584;

        goto try_except_handler_72;
    }
    Py_DECREF( tmp_metaclass_name_36 );
    assert( tmp_class_creation_36__metaclass == NULL );
    tmp_class_creation_36__metaclass = tmp_assign_source_408;

    tmp_compare_left_72 = const_str_plain_metaclass;
    tmp_compare_right_72 = tmp_class_creation_36__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_72 );
    tmp_cmp_In_72 = PySequence_Contains( tmp_compare_right_72, tmp_compare_left_72 );
    assert( !(tmp_cmp_In_72 == -1) );
    if ( tmp_cmp_In_72 == 1 )
    {
        goto branch_yes_36;
    }
    else
    {
        goto branch_no_36;
    }
    branch_yes_36:;
    tmp_dictdel_dict = tmp_class_creation_36__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_72;
    }
    branch_no_36:;
    tmp_hasattr_source_36 = tmp_class_creation_36__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_36 );
    tmp_hasattr_attr_36 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_36, tmp_hasattr_attr_36 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_72;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_108;
    }
    else
    {
        goto condexpr_false_108;
    }
    condexpr_true_108:;
    tmp_source_name_55 = tmp_class_creation_36__metaclass;

    CHECK_OBJECT( tmp_source_name_55 );
    tmp_called_name_73 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain___prepare__ );
    if ( tmp_called_name_73 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_72;
    }
    tmp_args_name_71 = PyTuple_New( 2 );
    tmp_tuple_element_106 = const_str_plain_CondExpr;
    Py_INCREF( tmp_tuple_element_106 );
    PyTuple_SET_ITEM( tmp_args_name_71, 0, tmp_tuple_element_106 );
    tmp_tuple_element_106 = tmp_class_creation_36__bases;

    CHECK_OBJECT( tmp_tuple_element_106 );
    Py_INCREF( tmp_tuple_element_106 );
    PyTuple_SET_ITEM( tmp_args_name_71, 1, tmp_tuple_element_106 );
    tmp_kw_name_71 = tmp_class_creation_36__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_71 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 584;
    tmp_assign_source_409 = CALL_FUNCTION( tmp_called_name_73, tmp_args_name_71, tmp_kw_name_71 );
    Py_DECREF( tmp_called_name_73 );
    Py_DECREF( tmp_args_name_71 );
    if ( tmp_assign_source_409 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_72;
    }
    goto condexpr_end_108;
    condexpr_false_108:;
    tmp_assign_source_409 = PyDict_New();
    condexpr_end_108:;
    assert( tmp_class_creation_36__prepared == NULL );
    tmp_class_creation_36__prepared = tmp_assign_source_409;

    tmp_set_locals = tmp_class_creation_36__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_36);
    locals_dict_36 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_411 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_35_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_411 );
    outline_35_var___module__ = tmp_assign_source_411;

    tmp_assign_source_412 = const_str_digest_fc365cf01d2591bedc22470a116c9165;
    assert( outline_35_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_412 );
    outline_35_var___doc__ = tmp_assign_source_412;

    tmp_assign_source_413 = const_str_plain_CondExpr;
    assert( outline_35_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_413 );
    outline_35_var___qualname__ = tmp_assign_source_413;

    tmp_assign_source_414 = const_tuple_str_plain_test_str_plain_expr1_str_plain_expr2_tuple;
    assert( outline_35_var_fields == NULL );
    Py_INCREF( tmp_assign_source_414 );
    outline_35_var_fields = tmp_assign_source_414;

    tmp_defaults_16 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_16 );
    tmp_assign_source_415 = MAKE_FUNCTION_jinja2$nodes$$$function_35_as_const( tmp_defaults_16 );
    assert( outline_35_var_as_const == NULL );
    outline_35_var_as_const = tmp_assign_source_415;

    // Tried code:
    tmp_called_name_74 = tmp_class_creation_36__metaclass;

    CHECK_OBJECT( tmp_called_name_74 );
    tmp_args_name_72 = PyTuple_New( 3 );
    tmp_tuple_element_107 = const_str_plain_CondExpr;
    Py_INCREF( tmp_tuple_element_107 );
    PyTuple_SET_ITEM( tmp_args_name_72, 0, tmp_tuple_element_107 );
    tmp_tuple_element_107 = tmp_class_creation_36__bases;

    CHECK_OBJECT( tmp_tuple_element_107 );
    Py_INCREF( tmp_tuple_element_107 );
    PyTuple_SET_ITEM( tmp_args_name_72, 1, tmp_tuple_element_107 );
    tmp_tuple_element_107 = locals_dict_36;
    Py_INCREF( tmp_tuple_element_107 );
    if ( outline_35_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_107,
            const_str_plain___qualname__,
            outline_35_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_107,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_107,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_72 );
        Py_DECREF( tmp_tuple_element_107 );

        exception_lineno = 584;

        goto try_except_handler_73;
    }
    if ( outline_35_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_107,
            const_str_plain___module__,
            outline_35_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_107,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_107,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_72 );
        Py_DECREF( tmp_tuple_element_107 );

        exception_lineno = 584;

        goto try_except_handler_73;
    }
    if ( outline_35_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_107,
            const_str_plain___doc__,
            outline_35_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_107,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_107,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_72 );
        Py_DECREF( tmp_tuple_element_107 );

        exception_lineno = 584;

        goto try_except_handler_73;
    }
    if ( outline_35_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_107,
            const_str_plain_fields,
            outline_35_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_107,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_107,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_72 );
        Py_DECREF( tmp_tuple_element_107 );

        exception_lineno = 584;

        goto try_except_handler_73;
    }
    if ( outline_35_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_107,
            const_str_plain_as_const,
            outline_35_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_107,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_107,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_72 );
        Py_DECREF( tmp_tuple_element_107 );

        exception_lineno = 584;

        goto try_except_handler_73;
    }
    PyTuple_SET_ITEM( tmp_args_name_72, 2, tmp_tuple_element_107 );
    tmp_kw_name_72 = tmp_class_creation_36__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_72 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 584;
    tmp_assign_source_416 = CALL_FUNCTION( tmp_called_name_74, tmp_args_name_72, tmp_kw_name_72 );
    Py_DECREF( tmp_args_name_72 );
    if ( tmp_assign_source_416 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 584;

        goto try_except_handler_73;
    }
    assert( outline_35_var___class__ == NULL );
    outline_35_var___class__ = tmp_assign_source_416;

    tmp_outline_return_value_36 = outline_35_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_36 );
    Py_INCREF( tmp_outline_return_value_36 );
    goto try_return_handler_73;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_73:;
    CHECK_OBJECT( (PyObject *)outline_35_var___class__ );
    Py_DECREF( outline_35_var___class__ );
    outline_35_var___class__ = NULL;

    Py_XDECREF( outline_35_var___qualname__ );
    outline_35_var___qualname__ = NULL;

    Py_XDECREF( outline_35_var___module__ );
    outline_35_var___module__ = NULL;

    Py_XDECREF( outline_35_var___doc__ );
    outline_35_var___doc__ = NULL;

    Py_XDECREF( outline_35_var_fields );
    outline_35_var_fields = NULL;

    Py_XDECREF( outline_35_var_as_const );
    outline_35_var_as_const = NULL;

    goto outline_result_36;
    // Exception handler code:
    try_except_handler_73:;
    exception_keeper_type_72 = exception_type;
    exception_keeper_value_72 = exception_value;
    exception_keeper_tb_72 = exception_tb;
    exception_keeper_lineno_72 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_35_var___qualname__ );
    outline_35_var___qualname__ = NULL;

    Py_XDECREF( outline_35_var___module__ );
    outline_35_var___module__ = NULL;

    Py_XDECREF( outline_35_var___doc__ );
    outline_35_var___doc__ = NULL;

    Py_XDECREF( outline_35_var_fields );
    outline_35_var_fields = NULL;

    Py_XDECREF( outline_35_var_as_const );
    outline_35_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_72;
    exception_value = exception_keeper_value_72;
    exception_tb = exception_keeper_tb_72;
    exception_lineno = exception_keeper_lineno_72;

    goto outline_exception_36;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_36:;
    exception_lineno = 584;
    goto try_except_handler_72;
    outline_result_36:;
    tmp_assign_source_410 = tmp_outline_return_value_36;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_CondExpr, tmp_assign_source_410 );
    goto try_end_37;
    // Exception handler code:
    try_except_handler_72:;
    exception_keeper_type_73 = exception_type;
    exception_keeper_value_73 = exception_value;
    exception_keeper_tb_73 = exception_tb;
    exception_keeper_lineno_73 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_36__bases );
    tmp_class_creation_36__bases = NULL;

    Py_XDECREF( tmp_class_creation_36__class_decl_dict );
    tmp_class_creation_36__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_36__metaclass );
    tmp_class_creation_36__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_36__prepared );
    tmp_class_creation_36__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_73;
    exception_value = exception_keeper_value_73;
    exception_tb = exception_keeper_tb_73;
    exception_lineno = exception_keeper_lineno_73;

    goto frame_exception_exit_1;
    // End of try:
    try_end_37:;
    Py_XDECREF( tmp_class_creation_36__bases );
    tmp_class_creation_36__bases = NULL;

    Py_XDECREF( tmp_class_creation_36__class_decl_dict );
    tmp_class_creation_36__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_36__metaclass );
    tmp_class_creation_36__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_36__prepared );
    tmp_class_creation_36__prepared = NULL;

    tmp_assign_source_417 = MAKE_FUNCTION_jinja2$nodes$$$function_36_args_as_const(  );
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_args_as_const, tmp_assign_source_417 );
    // Tried code:
    tmp_assign_source_418 = PyTuple_New( 1 );
    tmp_tuple_element_108 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_108 == NULL ))
    {
        tmp_tuple_element_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_108 == NULL )
    {
        Py_DECREF( tmp_assign_source_418 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 621;

        goto try_except_handler_74;
    }

    Py_INCREF( tmp_tuple_element_108 );
    PyTuple_SET_ITEM( tmp_assign_source_418, 0, tmp_tuple_element_108 );
    assert( tmp_class_creation_37__bases == NULL );
    tmp_class_creation_37__bases = tmp_assign_source_418;

    tmp_assign_source_419 = PyDict_New();
    assert( tmp_class_creation_37__class_decl_dict == NULL );
    tmp_class_creation_37__class_decl_dict = tmp_assign_source_419;

    tmp_compare_left_73 = const_str_plain_metaclass;
    tmp_compare_right_73 = tmp_class_creation_37__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_73 );
    tmp_cmp_In_73 = PySequence_Contains( tmp_compare_right_73, tmp_compare_left_73 );
    assert( !(tmp_cmp_In_73 == -1) );
    if ( tmp_cmp_In_73 == 1 )
    {
        goto condexpr_true_109;
    }
    else
    {
        goto condexpr_false_109;
    }
    condexpr_true_109:;
    tmp_dict_name_37 = tmp_class_creation_37__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_37 );
    tmp_key_name_37 = const_str_plain_metaclass;
    tmp_metaclass_name_37 = DICT_GET_ITEM( tmp_dict_name_37, tmp_key_name_37 );
    if ( tmp_metaclass_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_74;
    }
    goto condexpr_end_109;
    condexpr_false_109:;
    tmp_cond_value_37 = tmp_class_creation_37__bases;

    CHECK_OBJECT( tmp_cond_value_37 );
    tmp_cond_truth_37 = CHECK_IF_TRUE( tmp_cond_value_37 );
    if ( tmp_cond_truth_37 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_74;
    }
    if ( tmp_cond_truth_37 == 1 )
    {
        goto condexpr_true_110;
    }
    else
    {
        goto condexpr_false_110;
    }
    condexpr_true_110:;
    tmp_subscribed_name_37 = tmp_class_creation_37__bases;

    CHECK_OBJECT( tmp_subscribed_name_37 );
    tmp_subscript_name_37 = const_int_0;
    tmp_type_arg_37 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_37, tmp_subscript_name_37 );
    if ( tmp_type_arg_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_74;
    }
    tmp_metaclass_name_37 = BUILTIN_TYPE1( tmp_type_arg_37 );
    Py_DECREF( tmp_type_arg_37 );
    if ( tmp_metaclass_name_37 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_74;
    }
    goto condexpr_end_110;
    condexpr_false_110:;
    tmp_metaclass_name_37 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_37 );
    condexpr_end_110:;
    condexpr_end_109:;
    tmp_bases_name_37 = tmp_class_creation_37__bases;

    CHECK_OBJECT( tmp_bases_name_37 );
    tmp_assign_source_420 = SELECT_METACLASS( tmp_metaclass_name_37, tmp_bases_name_37 );
    if ( tmp_assign_source_420 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_37 );

        exception_lineno = 621;

        goto try_except_handler_74;
    }
    Py_DECREF( tmp_metaclass_name_37 );
    assert( tmp_class_creation_37__metaclass == NULL );
    tmp_class_creation_37__metaclass = tmp_assign_source_420;

    tmp_compare_left_74 = const_str_plain_metaclass;
    tmp_compare_right_74 = tmp_class_creation_37__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_74 );
    tmp_cmp_In_74 = PySequence_Contains( tmp_compare_right_74, tmp_compare_left_74 );
    assert( !(tmp_cmp_In_74 == -1) );
    if ( tmp_cmp_In_74 == 1 )
    {
        goto branch_yes_37;
    }
    else
    {
        goto branch_no_37;
    }
    branch_yes_37:;
    tmp_dictdel_dict = tmp_class_creation_37__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_74;
    }
    branch_no_37:;
    tmp_hasattr_source_37 = tmp_class_creation_37__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_37 );
    tmp_hasattr_attr_37 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_37, tmp_hasattr_attr_37 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_74;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_111;
    }
    else
    {
        goto condexpr_false_111;
    }
    condexpr_true_111:;
    tmp_source_name_56 = tmp_class_creation_37__metaclass;

    CHECK_OBJECT( tmp_source_name_56 );
    tmp_called_name_75 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain___prepare__ );
    if ( tmp_called_name_75 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_74;
    }
    tmp_args_name_73 = PyTuple_New( 2 );
    tmp_tuple_element_109 = const_str_plain_Filter;
    Py_INCREF( tmp_tuple_element_109 );
    PyTuple_SET_ITEM( tmp_args_name_73, 0, tmp_tuple_element_109 );
    tmp_tuple_element_109 = tmp_class_creation_37__bases;

    CHECK_OBJECT( tmp_tuple_element_109 );
    Py_INCREF( tmp_tuple_element_109 );
    PyTuple_SET_ITEM( tmp_args_name_73, 1, tmp_tuple_element_109 );
    tmp_kw_name_73 = tmp_class_creation_37__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_73 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 621;
    tmp_assign_source_421 = CALL_FUNCTION( tmp_called_name_75, tmp_args_name_73, tmp_kw_name_73 );
    Py_DECREF( tmp_called_name_75 );
    Py_DECREF( tmp_args_name_73 );
    if ( tmp_assign_source_421 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_74;
    }
    goto condexpr_end_111;
    condexpr_false_111:;
    tmp_assign_source_421 = PyDict_New();
    condexpr_end_111:;
    assert( tmp_class_creation_37__prepared == NULL );
    tmp_class_creation_37__prepared = tmp_assign_source_421;

    tmp_set_locals = tmp_class_creation_37__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_37);
    locals_dict_37 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_423 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_36_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_423 );
    outline_36_var___module__ = tmp_assign_source_423;

    tmp_assign_source_424 = const_str_digest_61111f079391d235704d0f7a5ed3ba38;
    assert( outline_36_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_424 );
    outline_36_var___doc__ = tmp_assign_source_424;

    tmp_assign_source_425 = const_str_plain_Filter;
    assert( outline_36_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_425 );
    outline_36_var___qualname__ = tmp_assign_source_425;

    tmp_assign_source_426 = const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple;
    assert( outline_36_var_fields == NULL );
    Py_INCREF( tmp_assign_source_426 );
    outline_36_var_fields = tmp_assign_source_426;

    tmp_defaults_17 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_17 );
    tmp_assign_source_427 = MAKE_FUNCTION_jinja2$nodes$$$function_37_as_const( tmp_defaults_17 );
    assert( outline_36_var_as_const == NULL );
    outline_36_var_as_const = tmp_assign_source_427;

    // Tried code:
    tmp_called_name_76 = tmp_class_creation_37__metaclass;

    CHECK_OBJECT( tmp_called_name_76 );
    tmp_args_name_74 = PyTuple_New( 3 );
    tmp_tuple_element_110 = const_str_plain_Filter;
    Py_INCREF( tmp_tuple_element_110 );
    PyTuple_SET_ITEM( tmp_args_name_74, 0, tmp_tuple_element_110 );
    tmp_tuple_element_110 = tmp_class_creation_37__bases;

    CHECK_OBJECT( tmp_tuple_element_110 );
    Py_INCREF( tmp_tuple_element_110 );
    PyTuple_SET_ITEM( tmp_args_name_74, 1, tmp_tuple_element_110 );
    tmp_tuple_element_110 = locals_dict_37;
    Py_INCREF( tmp_tuple_element_110 );
    if ( outline_36_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_110,
            const_str_plain___qualname__,
            outline_36_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_110,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_110,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_74 );
        Py_DECREF( tmp_tuple_element_110 );

        exception_lineno = 621;

        goto try_except_handler_75;
    }
    if ( outline_36_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_110,
            const_str_plain___module__,
            outline_36_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_110,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_110,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_74 );
        Py_DECREF( tmp_tuple_element_110 );

        exception_lineno = 621;

        goto try_except_handler_75;
    }
    if ( outline_36_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_110,
            const_str_plain___doc__,
            outline_36_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_110,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_110,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_74 );
        Py_DECREF( tmp_tuple_element_110 );

        exception_lineno = 621;

        goto try_except_handler_75;
    }
    if ( outline_36_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_110,
            const_str_plain_fields,
            outline_36_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_110,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_110,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_74 );
        Py_DECREF( tmp_tuple_element_110 );

        exception_lineno = 621;

        goto try_except_handler_75;
    }
    if ( outline_36_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_110,
            const_str_plain_as_const,
            outline_36_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_110,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_110,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_74 );
        Py_DECREF( tmp_tuple_element_110 );

        exception_lineno = 621;

        goto try_except_handler_75;
    }
    PyTuple_SET_ITEM( tmp_args_name_74, 2, tmp_tuple_element_110 );
    tmp_kw_name_74 = tmp_class_creation_37__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_74 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 621;
    tmp_assign_source_428 = CALL_FUNCTION( tmp_called_name_76, tmp_args_name_74, tmp_kw_name_74 );
    Py_DECREF( tmp_args_name_74 );
    if ( tmp_assign_source_428 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 621;

        goto try_except_handler_75;
    }
    assert( outline_36_var___class__ == NULL );
    outline_36_var___class__ = tmp_assign_source_428;

    tmp_outline_return_value_37 = outline_36_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_37 );
    Py_INCREF( tmp_outline_return_value_37 );
    goto try_return_handler_75;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_75:;
    CHECK_OBJECT( (PyObject *)outline_36_var___class__ );
    Py_DECREF( outline_36_var___class__ );
    outline_36_var___class__ = NULL;

    Py_XDECREF( outline_36_var___qualname__ );
    outline_36_var___qualname__ = NULL;

    Py_XDECREF( outline_36_var___module__ );
    outline_36_var___module__ = NULL;

    Py_XDECREF( outline_36_var___doc__ );
    outline_36_var___doc__ = NULL;

    Py_XDECREF( outline_36_var_fields );
    outline_36_var_fields = NULL;

    Py_XDECREF( outline_36_var_as_const );
    outline_36_var_as_const = NULL;

    goto outline_result_37;
    // Exception handler code:
    try_except_handler_75:;
    exception_keeper_type_74 = exception_type;
    exception_keeper_value_74 = exception_value;
    exception_keeper_tb_74 = exception_tb;
    exception_keeper_lineno_74 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_36_var___qualname__ );
    outline_36_var___qualname__ = NULL;

    Py_XDECREF( outline_36_var___module__ );
    outline_36_var___module__ = NULL;

    Py_XDECREF( outline_36_var___doc__ );
    outline_36_var___doc__ = NULL;

    Py_XDECREF( outline_36_var_fields );
    outline_36_var_fields = NULL;

    Py_XDECREF( outline_36_var_as_const );
    outline_36_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_74;
    exception_value = exception_keeper_value_74;
    exception_tb = exception_keeper_tb_74;
    exception_lineno = exception_keeper_lineno_74;

    goto outline_exception_37;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_37:;
    exception_lineno = 621;
    goto try_except_handler_74;
    outline_result_37:;
    tmp_assign_source_422 = tmp_outline_return_value_37;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Filter, tmp_assign_source_422 );
    goto try_end_38;
    // Exception handler code:
    try_except_handler_74:;
    exception_keeper_type_75 = exception_type;
    exception_keeper_value_75 = exception_value;
    exception_keeper_tb_75 = exception_tb;
    exception_keeper_lineno_75 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_37__bases );
    tmp_class_creation_37__bases = NULL;

    Py_XDECREF( tmp_class_creation_37__class_decl_dict );
    tmp_class_creation_37__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_37__metaclass );
    tmp_class_creation_37__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_37__prepared );
    tmp_class_creation_37__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_75;
    exception_value = exception_keeper_value_75;
    exception_tb = exception_keeper_tb_75;
    exception_lineno = exception_keeper_lineno_75;

    goto frame_exception_exit_1;
    // End of try:
    try_end_38:;
    Py_XDECREF( tmp_class_creation_37__bases );
    tmp_class_creation_37__bases = NULL;

    Py_XDECREF( tmp_class_creation_37__class_decl_dict );
    tmp_class_creation_37__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_37__metaclass );
    tmp_class_creation_37__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_37__prepared );
    tmp_class_creation_37__prepared = NULL;

    // Tried code:
    tmp_assign_source_429 = PyTuple_New( 1 );
    tmp_tuple_element_111 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_111 == NULL ))
    {
        tmp_tuple_element_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_111 == NULL )
    {
        Py_DECREF( tmp_assign_source_429 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 669;

        goto try_except_handler_76;
    }

    Py_INCREF( tmp_tuple_element_111 );
    PyTuple_SET_ITEM( tmp_assign_source_429, 0, tmp_tuple_element_111 );
    assert( tmp_class_creation_38__bases == NULL );
    tmp_class_creation_38__bases = tmp_assign_source_429;

    tmp_assign_source_430 = PyDict_New();
    assert( tmp_class_creation_38__class_decl_dict == NULL );
    tmp_class_creation_38__class_decl_dict = tmp_assign_source_430;

    tmp_compare_left_75 = const_str_plain_metaclass;
    tmp_compare_right_75 = tmp_class_creation_38__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_75 );
    tmp_cmp_In_75 = PySequence_Contains( tmp_compare_right_75, tmp_compare_left_75 );
    assert( !(tmp_cmp_In_75 == -1) );
    if ( tmp_cmp_In_75 == 1 )
    {
        goto condexpr_true_112;
    }
    else
    {
        goto condexpr_false_112;
    }
    condexpr_true_112:;
    tmp_dict_name_38 = tmp_class_creation_38__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_38 );
    tmp_key_name_38 = const_str_plain_metaclass;
    tmp_metaclass_name_38 = DICT_GET_ITEM( tmp_dict_name_38, tmp_key_name_38 );
    if ( tmp_metaclass_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_76;
    }
    goto condexpr_end_112;
    condexpr_false_112:;
    tmp_cond_value_38 = tmp_class_creation_38__bases;

    CHECK_OBJECT( tmp_cond_value_38 );
    tmp_cond_truth_38 = CHECK_IF_TRUE( tmp_cond_value_38 );
    if ( tmp_cond_truth_38 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_76;
    }
    if ( tmp_cond_truth_38 == 1 )
    {
        goto condexpr_true_113;
    }
    else
    {
        goto condexpr_false_113;
    }
    condexpr_true_113:;
    tmp_subscribed_name_38 = tmp_class_creation_38__bases;

    CHECK_OBJECT( tmp_subscribed_name_38 );
    tmp_subscript_name_38 = const_int_0;
    tmp_type_arg_38 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_38, tmp_subscript_name_38 );
    if ( tmp_type_arg_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_76;
    }
    tmp_metaclass_name_38 = BUILTIN_TYPE1( tmp_type_arg_38 );
    Py_DECREF( tmp_type_arg_38 );
    if ( tmp_metaclass_name_38 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_76;
    }
    goto condexpr_end_113;
    condexpr_false_113:;
    tmp_metaclass_name_38 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_38 );
    condexpr_end_113:;
    condexpr_end_112:;
    tmp_bases_name_38 = tmp_class_creation_38__bases;

    CHECK_OBJECT( tmp_bases_name_38 );
    tmp_assign_source_431 = SELECT_METACLASS( tmp_metaclass_name_38, tmp_bases_name_38 );
    if ( tmp_assign_source_431 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_38 );

        exception_lineno = 669;

        goto try_except_handler_76;
    }
    Py_DECREF( tmp_metaclass_name_38 );
    assert( tmp_class_creation_38__metaclass == NULL );
    tmp_class_creation_38__metaclass = tmp_assign_source_431;

    tmp_compare_left_76 = const_str_plain_metaclass;
    tmp_compare_right_76 = tmp_class_creation_38__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_76 );
    tmp_cmp_In_76 = PySequence_Contains( tmp_compare_right_76, tmp_compare_left_76 );
    assert( !(tmp_cmp_In_76 == -1) );
    if ( tmp_cmp_In_76 == 1 )
    {
        goto branch_yes_38;
    }
    else
    {
        goto branch_no_38;
    }
    branch_yes_38:;
    tmp_dictdel_dict = tmp_class_creation_38__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_76;
    }
    branch_no_38:;
    tmp_hasattr_source_38 = tmp_class_creation_38__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_38 );
    tmp_hasattr_attr_38 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_38, tmp_hasattr_attr_38 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_76;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_114;
    }
    else
    {
        goto condexpr_false_114;
    }
    condexpr_true_114:;
    tmp_source_name_57 = tmp_class_creation_38__metaclass;

    CHECK_OBJECT( tmp_source_name_57 );
    tmp_called_name_77 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain___prepare__ );
    if ( tmp_called_name_77 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_76;
    }
    tmp_args_name_75 = PyTuple_New( 2 );
    tmp_tuple_element_112 = const_str_plain_Test;
    Py_INCREF( tmp_tuple_element_112 );
    PyTuple_SET_ITEM( tmp_args_name_75, 0, tmp_tuple_element_112 );
    tmp_tuple_element_112 = tmp_class_creation_38__bases;

    CHECK_OBJECT( tmp_tuple_element_112 );
    Py_INCREF( tmp_tuple_element_112 );
    PyTuple_SET_ITEM( tmp_args_name_75, 1, tmp_tuple_element_112 );
    tmp_kw_name_75 = tmp_class_creation_38__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_75 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 669;
    tmp_assign_source_432 = CALL_FUNCTION( tmp_called_name_77, tmp_args_name_75, tmp_kw_name_75 );
    Py_DECREF( tmp_called_name_77 );
    Py_DECREF( tmp_args_name_75 );
    if ( tmp_assign_source_432 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_76;
    }
    goto condexpr_end_114;
    condexpr_false_114:;
    tmp_assign_source_432 = PyDict_New();
    condexpr_end_114:;
    assert( tmp_class_creation_38__prepared == NULL );
    tmp_class_creation_38__prepared = tmp_assign_source_432;

    tmp_set_locals = tmp_class_creation_38__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_38);
    locals_dict_38 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_434 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_37_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_434 );
    outline_37_var___module__ = tmp_assign_source_434;

    tmp_assign_source_435 = const_str_digest_e3a4c823e1ef10e127881c4bbabde90e;
    assert( outline_37_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_435 );
    outline_37_var___doc__ = tmp_assign_source_435;

    tmp_assign_source_436 = const_str_plain_Test;
    assert( outline_37_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_436 );
    outline_37_var___qualname__ = tmp_assign_source_436;

    tmp_assign_source_437 = const_tuple_3b340678ed43d4ad8a720e12f1a73cf3_tuple;
    assert( outline_37_var_fields == NULL );
    Py_INCREF( tmp_assign_source_437 );
    outline_37_var_fields = tmp_assign_source_437;

    tmp_defaults_18 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_18 );
    tmp_assign_source_438 = MAKE_FUNCTION_jinja2$nodes$$$function_38_as_const( tmp_defaults_18 );
    assert( outline_37_var_as_const == NULL );
    outline_37_var_as_const = tmp_assign_source_438;

    // Tried code:
    tmp_called_name_78 = tmp_class_creation_38__metaclass;

    CHECK_OBJECT( tmp_called_name_78 );
    tmp_args_name_76 = PyTuple_New( 3 );
    tmp_tuple_element_113 = const_str_plain_Test;
    Py_INCREF( tmp_tuple_element_113 );
    PyTuple_SET_ITEM( tmp_args_name_76, 0, tmp_tuple_element_113 );
    tmp_tuple_element_113 = tmp_class_creation_38__bases;

    CHECK_OBJECT( tmp_tuple_element_113 );
    Py_INCREF( tmp_tuple_element_113 );
    PyTuple_SET_ITEM( tmp_args_name_76, 1, tmp_tuple_element_113 );
    tmp_tuple_element_113 = locals_dict_38;
    Py_INCREF( tmp_tuple_element_113 );
    if ( outline_37_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_113,
            const_str_plain___qualname__,
            outline_37_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_113,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_113,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_76 );
        Py_DECREF( tmp_tuple_element_113 );

        exception_lineno = 669;

        goto try_except_handler_77;
    }
    if ( outline_37_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_113,
            const_str_plain___module__,
            outline_37_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_113,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_113,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_76 );
        Py_DECREF( tmp_tuple_element_113 );

        exception_lineno = 669;

        goto try_except_handler_77;
    }
    if ( outline_37_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_113,
            const_str_plain___doc__,
            outline_37_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_113,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_113,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_76 );
        Py_DECREF( tmp_tuple_element_113 );

        exception_lineno = 669;

        goto try_except_handler_77;
    }
    if ( outline_37_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_113,
            const_str_plain_fields,
            outline_37_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_113,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_113,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_76 );
        Py_DECREF( tmp_tuple_element_113 );

        exception_lineno = 669;

        goto try_except_handler_77;
    }
    if ( outline_37_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_113,
            const_str_plain_as_const,
            outline_37_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_113,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_113,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_76 );
        Py_DECREF( tmp_tuple_element_113 );

        exception_lineno = 669;

        goto try_except_handler_77;
    }
    PyTuple_SET_ITEM( tmp_args_name_76, 2, tmp_tuple_element_113 );
    tmp_kw_name_76 = tmp_class_creation_38__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_76 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 669;
    tmp_assign_source_439 = CALL_FUNCTION( tmp_called_name_78, tmp_args_name_76, tmp_kw_name_76 );
    Py_DECREF( tmp_args_name_76 );
    if ( tmp_assign_source_439 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 669;

        goto try_except_handler_77;
    }
    assert( outline_37_var___class__ == NULL );
    outline_37_var___class__ = tmp_assign_source_439;

    tmp_outline_return_value_38 = outline_37_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_38 );
    Py_INCREF( tmp_outline_return_value_38 );
    goto try_return_handler_77;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_77:;
    CHECK_OBJECT( (PyObject *)outline_37_var___class__ );
    Py_DECREF( outline_37_var___class__ );
    outline_37_var___class__ = NULL;

    Py_XDECREF( outline_37_var___qualname__ );
    outline_37_var___qualname__ = NULL;

    Py_XDECREF( outline_37_var___module__ );
    outline_37_var___module__ = NULL;

    Py_XDECREF( outline_37_var___doc__ );
    outline_37_var___doc__ = NULL;

    Py_XDECREF( outline_37_var_fields );
    outline_37_var_fields = NULL;

    Py_XDECREF( outline_37_var_as_const );
    outline_37_var_as_const = NULL;

    goto outline_result_38;
    // Exception handler code:
    try_except_handler_77:;
    exception_keeper_type_76 = exception_type;
    exception_keeper_value_76 = exception_value;
    exception_keeper_tb_76 = exception_tb;
    exception_keeper_lineno_76 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_37_var___qualname__ );
    outline_37_var___qualname__ = NULL;

    Py_XDECREF( outline_37_var___module__ );
    outline_37_var___module__ = NULL;

    Py_XDECREF( outline_37_var___doc__ );
    outline_37_var___doc__ = NULL;

    Py_XDECREF( outline_37_var_fields );
    outline_37_var_fields = NULL;

    Py_XDECREF( outline_37_var_as_const );
    outline_37_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_76;
    exception_value = exception_keeper_value_76;
    exception_tb = exception_keeper_tb_76;
    exception_lineno = exception_keeper_lineno_76;

    goto outline_exception_38;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_38:;
    exception_lineno = 669;
    goto try_except_handler_76;
    outline_result_38:;
    tmp_assign_source_433 = tmp_outline_return_value_38;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Test, tmp_assign_source_433 );
    goto try_end_39;
    // Exception handler code:
    try_except_handler_76:;
    exception_keeper_type_77 = exception_type;
    exception_keeper_value_77 = exception_value;
    exception_keeper_tb_77 = exception_tb;
    exception_keeper_lineno_77 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_38__bases );
    tmp_class_creation_38__bases = NULL;

    Py_XDECREF( tmp_class_creation_38__class_decl_dict );
    tmp_class_creation_38__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_38__metaclass );
    tmp_class_creation_38__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_38__prepared );
    tmp_class_creation_38__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_77;
    exception_value = exception_keeper_value_77;
    exception_tb = exception_keeper_tb_77;
    exception_lineno = exception_keeper_lineno_77;

    goto frame_exception_exit_1;
    // End of try:
    try_end_39:;
    Py_XDECREF( tmp_class_creation_38__bases );
    tmp_class_creation_38__bases = NULL;

    Py_XDECREF( tmp_class_creation_38__class_decl_dict );
    tmp_class_creation_38__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_38__metaclass );
    tmp_class_creation_38__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_38__prepared );
    tmp_class_creation_38__prepared = NULL;

    // Tried code:
    tmp_assign_source_440 = PyTuple_New( 1 );
    tmp_tuple_element_114 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_114 == NULL ))
    {
        tmp_tuple_element_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_114 == NULL )
    {
        Py_DECREF( tmp_assign_source_440 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 692;

        goto try_except_handler_78;
    }

    Py_INCREF( tmp_tuple_element_114 );
    PyTuple_SET_ITEM( tmp_assign_source_440, 0, tmp_tuple_element_114 );
    assert( tmp_class_creation_39__bases == NULL );
    tmp_class_creation_39__bases = tmp_assign_source_440;

    tmp_assign_source_441 = PyDict_New();
    assert( tmp_class_creation_39__class_decl_dict == NULL );
    tmp_class_creation_39__class_decl_dict = tmp_assign_source_441;

    tmp_compare_left_77 = const_str_plain_metaclass;
    tmp_compare_right_77 = tmp_class_creation_39__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_77 );
    tmp_cmp_In_77 = PySequence_Contains( tmp_compare_right_77, tmp_compare_left_77 );
    assert( !(tmp_cmp_In_77 == -1) );
    if ( tmp_cmp_In_77 == 1 )
    {
        goto condexpr_true_115;
    }
    else
    {
        goto condexpr_false_115;
    }
    condexpr_true_115:;
    tmp_dict_name_39 = tmp_class_creation_39__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_39 );
    tmp_key_name_39 = const_str_plain_metaclass;
    tmp_metaclass_name_39 = DICT_GET_ITEM( tmp_dict_name_39, tmp_key_name_39 );
    if ( tmp_metaclass_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_78;
    }
    goto condexpr_end_115;
    condexpr_false_115:;
    tmp_cond_value_39 = tmp_class_creation_39__bases;

    CHECK_OBJECT( tmp_cond_value_39 );
    tmp_cond_truth_39 = CHECK_IF_TRUE( tmp_cond_value_39 );
    if ( tmp_cond_truth_39 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_78;
    }
    if ( tmp_cond_truth_39 == 1 )
    {
        goto condexpr_true_116;
    }
    else
    {
        goto condexpr_false_116;
    }
    condexpr_true_116:;
    tmp_subscribed_name_39 = tmp_class_creation_39__bases;

    CHECK_OBJECT( tmp_subscribed_name_39 );
    tmp_subscript_name_39 = const_int_0;
    tmp_type_arg_39 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_39, tmp_subscript_name_39 );
    if ( tmp_type_arg_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_78;
    }
    tmp_metaclass_name_39 = BUILTIN_TYPE1( tmp_type_arg_39 );
    Py_DECREF( tmp_type_arg_39 );
    if ( tmp_metaclass_name_39 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_78;
    }
    goto condexpr_end_116;
    condexpr_false_116:;
    tmp_metaclass_name_39 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_39 );
    condexpr_end_116:;
    condexpr_end_115:;
    tmp_bases_name_39 = tmp_class_creation_39__bases;

    CHECK_OBJECT( tmp_bases_name_39 );
    tmp_assign_source_442 = SELECT_METACLASS( tmp_metaclass_name_39, tmp_bases_name_39 );
    if ( tmp_assign_source_442 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_39 );

        exception_lineno = 692;

        goto try_except_handler_78;
    }
    Py_DECREF( tmp_metaclass_name_39 );
    assert( tmp_class_creation_39__metaclass == NULL );
    tmp_class_creation_39__metaclass = tmp_assign_source_442;

    tmp_compare_left_78 = const_str_plain_metaclass;
    tmp_compare_right_78 = tmp_class_creation_39__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_78 );
    tmp_cmp_In_78 = PySequence_Contains( tmp_compare_right_78, tmp_compare_left_78 );
    assert( !(tmp_cmp_In_78 == -1) );
    if ( tmp_cmp_In_78 == 1 )
    {
        goto branch_yes_39;
    }
    else
    {
        goto branch_no_39;
    }
    branch_yes_39:;
    tmp_dictdel_dict = tmp_class_creation_39__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_78;
    }
    branch_no_39:;
    tmp_hasattr_source_39 = tmp_class_creation_39__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_39 );
    tmp_hasattr_attr_39 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_39, tmp_hasattr_attr_39 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_78;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_117;
    }
    else
    {
        goto condexpr_false_117;
    }
    condexpr_true_117:;
    tmp_source_name_58 = tmp_class_creation_39__metaclass;

    CHECK_OBJECT( tmp_source_name_58 );
    tmp_called_name_79 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain___prepare__ );
    if ( tmp_called_name_79 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_78;
    }
    tmp_args_name_77 = PyTuple_New( 2 );
    tmp_tuple_element_115 = const_str_plain_Call;
    Py_INCREF( tmp_tuple_element_115 );
    PyTuple_SET_ITEM( tmp_args_name_77, 0, tmp_tuple_element_115 );
    tmp_tuple_element_115 = tmp_class_creation_39__bases;

    CHECK_OBJECT( tmp_tuple_element_115 );
    Py_INCREF( tmp_tuple_element_115 );
    PyTuple_SET_ITEM( tmp_args_name_77, 1, tmp_tuple_element_115 );
    tmp_kw_name_77 = tmp_class_creation_39__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_77 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 692;
    tmp_assign_source_443 = CALL_FUNCTION( tmp_called_name_79, tmp_args_name_77, tmp_kw_name_77 );
    Py_DECREF( tmp_called_name_79 );
    Py_DECREF( tmp_args_name_77 );
    if ( tmp_assign_source_443 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_78;
    }
    goto condexpr_end_117;
    condexpr_false_117:;
    tmp_assign_source_443 = PyDict_New();
    condexpr_end_117:;
    assert( tmp_class_creation_39__prepared == NULL );
    tmp_class_creation_39__prepared = tmp_assign_source_443;

    tmp_set_locals = tmp_class_creation_39__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_39);
    locals_dict_39 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_445 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_38_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_445 );
    outline_38_var___module__ = tmp_assign_source_445;

    tmp_assign_source_446 = const_str_digest_8f6598f348110ec82837ebe097590a72;
    assert( outline_38_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_446 );
    outline_38_var___doc__ = tmp_assign_source_446;

    tmp_assign_source_447 = const_str_plain_Call;
    assert( outline_38_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_447 );
    outline_38_var___qualname__ = tmp_assign_source_447;

    tmp_assign_source_448 = const_tuple_c393dd118778570338b62cd408509935_tuple;
    assert( outline_38_var_fields == NULL );
    Py_INCREF( tmp_assign_source_448 );
    outline_38_var_fields = tmp_assign_source_448;

    // Tried code:
    tmp_called_name_80 = tmp_class_creation_39__metaclass;

    CHECK_OBJECT( tmp_called_name_80 );
    tmp_args_name_78 = PyTuple_New( 3 );
    tmp_tuple_element_116 = const_str_plain_Call;
    Py_INCREF( tmp_tuple_element_116 );
    PyTuple_SET_ITEM( tmp_args_name_78, 0, tmp_tuple_element_116 );
    tmp_tuple_element_116 = tmp_class_creation_39__bases;

    CHECK_OBJECT( tmp_tuple_element_116 );
    Py_INCREF( tmp_tuple_element_116 );
    PyTuple_SET_ITEM( tmp_args_name_78, 1, tmp_tuple_element_116 );
    tmp_tuple_element_116 = locals_dict_39;
    Py_INCREF( tmp_tuple_element_116 );
    if ( outline_38_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_116,
            const_str_plain___qualname__,
            outline_38_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_116,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_116,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_78 );
        Py_DECREF( tmp_tuple_element_116 );

        exception_lineno = 692;

        goto try_except_handler_79;
    }
    if ( outline_38_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_116,
            const_str_plain___module__,
            outline_38_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_116,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_116,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_78 );
        Py_DECREF( tmp_tuple_element_116 );

        exception_lineno = 692;

        goto try_except_handler_79;
    }
    if ( outline_38_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_116,
            const_str_plain___doc__,
            outline_38_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_116,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_116,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_78 );
        Py_DECREF( tmp_tuple_element_116 );

        exception_lineno = 692;

        goto try_except_handler_79;
    }
    if ( outline_38_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_116,
            const_str_plain_fields,
            outline_38_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_116,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_116,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_78 );
        Py_DECREF( tmp_tuple_element_116 );

        exception_lineno = 692;

        goto try_except_handler_79;
    }
    PyTuple_SET_ITEM( tmp_args_name_78, 2, tmp_tuple_element_116 );
    tmp_kw_name_78 = tmp_class_creation_39__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_78 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 692;
    tmp_assign_source_449 = CALL_FUNCTION( tmp_called_name_80, tmp_args_name_78, tmp_kw_name_78 );
    Py_DECREF( tmp_args_name_78 );
    if ( tmp_assign_source_449 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 692;

        goto try_except_handler_79;
    }
    assert( outline_38_var___class__ == NULL );
    outline_38_var___class__ = tmp_assign_source_449;

    tmp_outline_return_value_39 = outline_38_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_39 );
    Py_INCREF( tmp_outline_return_value_39 );
    goto try_return_handler_79;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_79:;
    CHECK_OBJECT( (PyObject *)outline_38_var___class__ );
    Py_DECREF( outline_38_var___class__ );
    outline_38_var___class__ = NULL;

    Py_XDECREF( outline_38_var___qualname__ );
    outline_38_var___qualname__ = NULL;

    Py_XDECREF( outline_38_var___module__ );
    outline_38_var___module__ = NULL;

    Py_XDECREF( outline_38_var___doc__ );
    outline_38_var___doc__ = NULL;

    Py_XDECREF( outline_38_var_fields );
    outline_38_var_fields = NULL;

    goto outline_result_39;
    // Exception handler code:
    try_except_handler_79:;
    exception_keeper_type_78 = exception_type;
    exception_keeper_value_78 = exception_value;
    exception_keeper_tb_78 = exception_tb;
    exception_keeper_lineno_78 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_38_var___qualname__ );
    outline_38_var___qualname__ = NULL;

    Py_XDECREF( outline_38_var___module__ );
    outline_38_var___module__ = NULL;

    Py_XDECREF( outline_38_var___doc__ );
    outline_38_var___doc__ = NULL;

    Py_XDECREF( outline_38_var_fields );
    outline_38_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_78;
    exception_value = exception_keeper_value_78;
    exception_tb = exception_keeper_tb_78;
    exception_lineno = exception_keeper_lineno_78;

    goto outline_exception_39;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_39:;
    exception_lineno = 692;
    goto try_except_handler_78;
    outline_result_39:;
    tmp_assign_source_444 = tmp_outline_return_value_39;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Call, tmp_assign_source_444 );
    goto try_end_40;
    // Exception handler code:
    try_except_handler_78:;
    exception_keeper_type_79 = exception_type;
    exception_keeper_value_79 = exception_value;
    exception_keeper_tb_79 = exception_tb;
    exception_keeper_lineno_79 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_39__bases );
    tmp_class_creation_39__bases = NULL;

    Py_XDECREF( tmp_class_creation_39__class_decl_dict );
    tmp_class_creation_39__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_39__metaclass );
    tmp_class_creation_39__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_39__prepared );
    tmp_class_creation_39__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_79;
    exception_value = exception_keeper_value_79;
    exception_tb = exception_keeper_tb_79;
    exception_lineno = exception_keeper_lineno_79;

    goto frame_exception_exit_1;
    // End of try:
    try_end_40:;
    Py_XDECREF( tmp_class_creation_39__bases );
    tmp_class_creation_39__bases = NULL;

    Py_XDECREF( tmp_class_creation_39__class_decl_dict );
    tmp_class_creation_39__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_39__metaclass );
    tmp_class_creation_39__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_39__prepared );
    tmp_class_creation_39__prepared = NULL;

    // Tried code:
    tmp_assign_source_450 = PyTuple_New( 1 );
    tmp_tuple_element_117 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_117 == NULL ))
    {
        tmp_tuple_element_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_117 == NULL )
    {
        Py_DECREF( tmp_assign_source_450 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 702;

        goto try_except_handler_80;
    }

    Py_INCREF( tmp_tuple_element_117 );
    PyTuple_SET_ITEM( tmp_assign_source_450, 0, tmp_tuple_element_117 );
    assert( tmp_class_creation_40__bases == NULL );
    tmp_class_creation_40__bases = tmp_assign_source_450;

    tmp_assign_source_451 = PyDict_New();
    assert( tmp_class_creation_40__class_decl_dict == NULL );
    tmp_class_creation_40__class_decl_dict = tmp_assign_source_451;

    tmp_compare_left_79 = const_str_plain_metaclass;
    tmp_compare_right_79 = tmp_class_creation_40__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_79 );
    tmp_cmp_In_79 = PySequence_Contains( tmp_compare_right_79, tmp_compare_left_79 );
    assert( !(tmp_cmp_In_79 == -1) );
    if ( tmp_cmp_In_79 == 1 )
    {
        goto condexpr_true_118;
    }
    else
    {
        goto condexpr_false_118;
    }
    condexpr_true_118:;
    tmp_dict_name_40 = tmp_class_creation_40__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_40 );
    tmp_key_name_40 = const_str_plain_metaclass;
    tmp_metaclass_name_40 = DICT_GET_ITEM( tmp_dict_name_40, tmp_key_name_40 );
    if ( tmp_metaclass_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_80;
    }
    goto condexpr_end_118;
    condexpr_false_118:;
    tmp_cond_value_40 = tmp_class_creation_40__bases;

    CHECK_OBJECT( tmp_cond_value_40 );
    tmp_cond_truth_40 = CHECK_IF_TRUE( tmp_cond_value_40 );
    if ( tmp_cond_truth_40 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_80;
    }
    if ( tmp_cond_truth_40 == 1 )
    {
        goto condexpr_true_119;
    }
    else
    {
        goto condexpr_false_119;
    }
    condexpr_true_119:;
    tmp_subscribed_name_40 = tmp_class_creation_40__bases;

    CHECK_OBJECT( tmp_subscribed_name_40 );
    tmp_subscript_name_40 = const_int_0;
    tmp_type_arg_40 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_40, tmp_subscript_name_40 );
    if ( tmp_type_arg_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_80;
    }
    tmp_metaclass_name_40 = BUILTIN_TYPE1( tmp_type_arg_40 );
    Py_DECREF( tmp_type_arg_40 );
    if ( tmp_metaclass_name_40 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_80;
    }
    goto condexpr_end_119;
    condexpr_false_119:;
    tmp_metaclass_name_40 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_40 );
    condexpr_end_119:;
    condexpr_end_118:;
    tmp_bases_name_40 = tmp_class_creation_40__bases;

    CHECK_OBJECT( tmp_bases_name_40 );
    tmp_assign_source_452 = SELECT_METACLASS( tmp_metaclass_name_40, tmp_bases_name_40 );
    if ( tmp_assign_source_452 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_40 );

        exception_lineno = 702;

        goto try_except_handler_80;
    }
    Py_DECREF( tmp_metaclass_name_40 );
    assert( tmp_class_creation_40__metaclass == NULL );
    tmp_class_creation_40__metaclass = tmp_assign_source_452;

    tmp_compare_left_80 = const_str_plain_metaclass;
    tmp_compare_right_80 = tmp_class_creation_40__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_80 );
    tmp_cmp_In_80 = PySequence_Contains( tmp_compare_right_80, tmp_compare_left_80 );
    assert( !(tmp_cmp_In_80 == -1) );
    if ( tmp_cmp_In_80 == 1 )
    {
        goto branch_yes_40;
    }
    else
    {
        goto branch_no_40;
    }
    branch_yes_40:;
    tmp_dictdel_dict = tmp_class_creation_40__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_80;
    }
    branch_no_40:;
    tmp_hasattr_source_40 = tmp_class_creation_40__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_40 );
    tmp_hasattr_attr_40 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_40, tmp_hasattr_attr_40 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_80;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_120;
    }
    else
    {
        goto condexpr_false_120;
    }
    condexpr_true_120:;
    tmp_source_name_59 = tmp_class_creation_40__metaclass;

    CHECK_OBJECT( tmp_source_name_59 );
    tmp_called_name_81 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain___prepare__ );
    if ( tmp_called_name_81 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_80;
    }
    tmp_args_name_79 = PyTuple_New( 2 );
    tmp_tuple_element_118 = const_str_plain_Getitem;
    Py_INCREF( tmp_tuple_element_118 );
    PyTuple_SET_ITEM( tmp_args_name_79, 0, tmp_tuple_element_118 );
    tmp_tuple_element_118 = tmp_class_creation_40__bases;

    CHECK_OBJECT( tmp_tuple_element_118 );
    Py_INCREF( tmp_tuple_element_118 );
    PyTuple_SET_ITEM( tmp_args_name_79, 1, tmp_tuple_element_118 );
    tmp_kw_name_79 = tmp_class_creation_40__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_79 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 702;
    tmp_assign_source_453 = CALL_FUNCTION( tmp_called_name_81, tmp_args_name_79, tmp_kw_name_79 );
    Py_DECREF( tmp_called_name_81 );
    Py_DECREF( tmp_args_name_79 );
    if ( tmp_assign_source_453 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_80;
    }
    goto condexpr_end_120;
    condexpr_false_120:;
    tmp_assign_source_453 = PyDict_New();
    condexpr_end_120:;
    assert( tmp_class_creation_40__prepared == NULL );
    tmp_class_creation_40__prepared = tmp_assign_source_453;

    tmp_set_locals = tmp_class_creation_40__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_40);
    locals_dict_40 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_455 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_39_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_455 );
    outline_39_var___module__ = tmp_assign_source_455;

    tmp_assign_source_456 = const_str_digest_f0bda5c3ed94a095299059b8d099b5d2;
    assert( outline_39_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_456 );
    outline_39_var___doc__ = tmp_assign_source_456;

    tmp_assign_source_457 = const_str_plain_Getitem;
    assert( outline_39_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_457 );
    outline_39_var___qualname__ = tmp_assign_source_457;

    tmp_assign_source_458 = const_tuple_str_plain_node_str_plain_arg_str_plain_ctx_tuple;
    assert( outline_39_var_fields == NULL );
    Py_INCREF( tmp_assign_source_458 );
    outline_39_var_fields = tmp_assign_source_458;

    tmp_defaults_19 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_19 );
    tmp_assign_source_459 = MAKE_FUNCTION_jinja2$nodes$$$function_39_as_const( tmp_defaults_19 );
    assert( outline_39_var_as_const == NULL );
    outline_39_var_as_const = tmp_assign_source_459;

    tmp_assign_source_460 = MAKE_FUNCTION_jinja2$nodes$$$function_40_can_assign(  );
    assert( outline_39_var_can_assign == NULL );
    outline_39_var_can_assign = tmp_assign_source_460;

    // Tried code:
    tmp_called_name_82 = tmp_class_creation_40__metaclass;

    CHECK_OBJECT( tmp_called_name_82 );
    tmp_args_name_80 = PyTuple_New( 3 );
    tmp_tuple_element_119 = const_str_plain_Getitem;
    Py_INCREF( tmp_tuple_element_119 );
    PyTuple_SET_ITEM( tmp_args_name_80, 0, tmp_tuple_element_119 );
    tmp_tuple_element_119 = tmp_class_creation_40__bases;

    CHECK_OBJECT( tmp_tuple_element_119 );
    Py_INCREF( tmp_tuple_element_119 );
    PyTuple_SET_ITEM( tmp_args_name_80, 1, tmp_tuple_element_119 );
    tmp_tuple_element_119 = locals_dict_40;
    Py_INCREF( tmp_tuple_element_119 );
    if ( outline_39_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_119,
            const_str_plain___qualname__,
            outline_39_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_119,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_119,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_80 );
        Py_DECREF( tmp_tuple_element_119 );

        exception_lineno = 702;

        goto try_except_handler_81;
    }
    if ( outline_39_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_119,
            const_str_plain___module__,
            outline_39_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_119,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_119,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_80 );
        Py_DECREF( tmp_tuple_element_119 );

        exception_lineno = 702;

        goto try_except_handler_81;
    }
    if ( outline_39_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_119,
            const_str_plain___doc__,
            outline_39_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_119,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_119,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_80 );
        Py_DECREF( tmp_tuple_element_119 );

        exception_lineno = 702;

        goto try_except_handler_81;
    }
    if ( outline_39_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_119,
            const_str_plain_fields,
            outline_39_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_119,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_119,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_80 );
        Py_DECREF( tmp_tuple_element_119 );

        exception_lineno = 702;

        goto try_except_handler_81;
    }
    if ( outline_39_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_119,
            const_str_plain_as_const,
            outline_39_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_119,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_119,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_80 );
        Py_DECREF( tmp_tuple_element_119 );

        exception_lineno = 702;

        goto try_except_handler_81;
    }
    if ( outline_39_var_can_assign != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_119,
            const_str_plain_can_assign,
            outline_39_var_can_assign
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_119,
            const_str_plain_can_assign
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_119,
                const_str_plain_can_assign
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_80 );
        Py_DECREF( tmp_tuple_element_119 );

        exception_lineno = 702;

        goto try_except_handler_81;
    }
    PyTuple_SET_ITEM( tmp_args_name_80, 2, tmp_tuple_element_119 );
    tmp_kw_name_80 = tmp_class_creation_40__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_80 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 702;
    tmp_assign_source_461 = CALL_FUNCTION( tmp_called_name_82, tmp_args_name_80, tmp_kw_name_80 );
    Py_DECREF( tmp_args_name_80 );
    if ( tmp_assign_source_461 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 702;

        goto try_except_handler_81;
    }
    assert( outline_39_var___class__ == NULL );
    outline_39_var___class__ = tmp_assign_source_461;

    tmp_outline_return_value_40 = outline_39_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_40 );
    Py_INCREF( tmp_outline_return_value_40 );
    goto try_return_handler_81;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_81:;
    CHECK_OBJECT( (PyObject *)outline_39_var___class__ );
    Py_DECREF( outline_39_var___class__ );
    outline_39_var___class__ = NULL;

    Py_XDECREF( outline_39_var___qualname__ );
    outline_39_var___qualname__ = NULL;

    Py_XDECREF( outline_39_var___module__ );
    outline_39_var___module__ = NULL;

    Py_XDECREF( outline_39_var___doc__ );
    outline_39_var___doc__ = NULL;

    Py_XDECREF( outline_39_var_fields );
    outline_39_var_fields = NULL;

    Py_XDECREF( outline_39_var_as_const );
    outline_39_var_as_const = NULL;

    Py_XDECREF( outline_39_var_can_assign );
    outline_39_var_can_assign = NULL;

    goto outline_result_40;
    // Exception handler code:
    try_except_handler_81:;
    exception_keeper_type_80 = exception_type;
    exception_keeper_value_80 = exception_value;
    exception_keeper_tb_80 = exception_tb;
    exception_keeper_lineno_80 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_39_var___qualname__ );
    outline_39_var___qualname__ = NULL;

    Py_XDECREF( outline_39_var___module__ );
    outline_39_var___module__ = NULL;

    Py_XDECREF( outline_39_var___doc__ );
    outline_39_var___doc__ = NULL;

    Py_XDECREF( outline_39_var_fields );
    outline_39_var_fields = NULL;

    Py_XDECREF( outline_39_var_as_const );
    outline_39_var_as_const = NULL;

    Py_XDECREF( outline_39_var_can_assign );
    outline_39_var_can_assign = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_80;
    exception_value = exception_keeper_value_80;
    exception_tb = exception_keeper_tb_80;
    exception_lineno = exception_keeper_lineno_80;

    goto outline_exception_40;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_40:;
    exception_lineno = 702;
    goto try_except_handler_80;
    outline_result_40:;
    tmp_assign_source_454 = tmp_outline_return_value_40;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Getitem, tmp_assign_source_454 );
    goto try_end_41;
    // Exception handler code:
    try_except_handler_80:;
    exception_keeper_type_81 = exception_type;
    exception_keeper_value_81 = exception_value;
    exception_keeper_tb_81 = exception_tb;
    exception_keeper_lineno_81 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_40__bases );
    tmp_class_creation_40__bases = NULL;

    Py_XDECREF( tmp_class_creation_40__class_decl_dict );
    tmp_class_creation_40__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_40__metaclass );
    tmp_class_creation_40__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_40__prepared );
    tmp_class_creation_40__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_81;
    exception_value = exception_keeper_value_81;
    exception_tb = exception_keeper_tb_81;
    exception_lineno = exception_keeper_lineno_81;

    goto frame_exception_exit_1;
    // End of try:
    try_end_41:;
    Py_XDECREF( tmp_class_creation_40__bases );
    tmp_class_creation_40__bases = NULL;

    Py_XDECREF( tmp_class_creation_40__class_decl_dict );
    tmp_class_creation_40__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_40__metaclass );
    tmp_class_creation_40__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_40__prepared );
    tmp_class_creation_40__prepared = NULL;

    // Tried code:
    tmp_assign_source_462 = PyTuple_New( 1 );
    tmp_tuple_element_120 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_120 == NULL ))
    {
        tmp_tuple_element_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_120 == NULL )
    {
        Py_DECREF( tmp_assign_source_462 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 720;

        goto try_except_handler_82;
    }

    Py_INCREF( tmp_tuple_element_120 );
    PyTuple_SET_ITEM( tmp_assign_source_462, 0, tmp_tuple_element_120 );
    assert( tmp_class_creation_41__bases == NULL );
    tmp_class_creation_41__bases = tmp_assign_source_462;

    tmp_assign_source_463 = PyDict_New();
    assert( tmp_class_creation_41__class_decl_dict == NULL );
    tmp_class_creation_41__class_decl_dict = tmp_assign_source_463;

    tmp_compare_left_81 = const_str_plain_metaclass;
    tmp_compare_right_81 = tmp_class_creation_41__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_81 );
    tmp_cmp_In_81 = PySequence_Contains( tmp_compare_right_81, tmp_compare_left_81 );
    assert( !(tmp_cmp_In_81 == -1) );
    if ( tmp_cmp_In_81 == 1 )
    {
        goto condexpr_true_121;
    }
    else
    {
        goto condexpr_false_121;
    }
    condexpr_true_121:;
    tmp_dict_name_41 = tmp_class_creation_41__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_41 );
    tmp_key_name_41 = const_str_plain_metaclass;
    tmp_metaclass_name_41 = DICT_GET_ITEM( tmp_dict_name_41, tmp_key_name_41 );
    if ( tmp_metaclass_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_82;
    }
    goto condexpr_end_121;
    condexpr_false_121:;
    tmp_cond_value_41 = tmp_class_creation_41__bases;

    CHECK_OBJECT( tmp_cond_value_41 );
    tmp_cond_truth_41 = CHECK_IF_TRUE( tmp_cond_value_41 );
    if ( tmp_cond_truth_41 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_82;
    }
    if ( tmp_cond_truth_41 == 1 )
    {
        goto condexpr_true_122;
    }
    else
    {
        goto condexpr_false_122;
    }
    condexpr_true_122:;
    tmp_subscribed_name_41 = tmp_class_creation_41__bases;

    CHECK_OBJECT( tmp_subscribed_name_41 );
    tmp_subscript_name_41 = const_int_0;
    tmp_type_arg_41 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_41, tmp_subscript_name_41 );
    if ( tmp_type_arg_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_82;
    }
    tmp_metaclass_name_41 = BUILTIN_TYPE1( tmp_type_arg_41 );
    Py_DECREF( tmp_type_arg_41 );
    if ( tmp_metaclass_name_41 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_82;
    }
    goto condexpr_end_122;
    condexpr_false_122:;
    tmp_metaclass_name_41 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_41 );
    condexpr_end_122:;
    condexpr_end_121:;
    tmp_bases_name_41 = tmp_class_creation_41__bases;

    CHECK_OBJECT( tmp_bases_name_41 );
    tmp_assign_source_464 = SELECT_METACLASS( tmp_metaclass_name_41, tmp_bases_name_41 );
    if ( tmp_assign_source_464 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_41 );

        exception_lineno = 720;

        goto try_except_handler_82;
    }
    Py_DECREF( tmp_metaclass_name_41 );
    assert( tmp_class_creation_41__metaclass == NULL );
    tmp_class_creation_41__metaclass = tmp_assign_source_464;

    tmp_compare_left_82 = const_str_plain_metaclass;
    tmp_compare_right_82 = tmp_class_creation_41__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_82 );
    tmp_cmp_In_82 = PySequence_Contains( tmp_compare_right_82, tmp_compare_left_82 );
    assert( !(tmp_cmp_In_82 == -1) );
    if ( tmp_cmp_In_82 == 1 )
    {
        goto branch_yes_41;
    }
    else
    {
        goto branch_no_41;
    }
    branch_yes_41:;
    tmp_dictdel_dict = tmp_class_creation_41__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_82;
    }
    branch_no_41:;
    tmp_hasattr_source_41 = tmp_class_creation_41__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_41 );
    tmp_hasattr_attr_41 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_41, tmp_hasattr_attr_41 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_82;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_123;
    }
    else
    {
        goto condexpr_false_123;
    }
    condexpr_true_123:;
    tmp_source_name_60 = tmp_class_creation_41__metaclass;

    CHECK_OBJECT( tmp_source_name_60 );
    tmp_called_name_83 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain___prepare__ );
    if ( tmp_called_name_83 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_82;
    }
    tmp_args_name_81 = PyTuple_New( 2 );
    tmp_tuple_element_121 = const_str_plain_Getattr;
    Py_INCREF( tmp_tuple_element_121 );
    PyTuple_SET_ITEM( tmp_args_name_81, 0, tmp_tuple_element_121 );
    tmp_tuple_element_121 = tmp_class_creation_41__bases;

    CHECK_OBJECT( tmp_tuple_element_121 );
    Py_INCREF( tmp_tuple_element_121 );
    PyTuple_SET_ITEM( tmp_args_name_81, 1, tmp_tuple_element_121 );
    tmp_kw_name_81 = tmp_class_creation_41__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_81 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 720;
    tmp_assign_source_465 = CALL_FUNCTION( tmp_called_name_83, tmp_args_name_81, tmp_kw_name_81 );
    Py_DECREF( tmp_called_name_83 );
    Py_DECREF( tmp_args_name_81 );
    if ( tmp_assign_source_465 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_82;
    }
    goto condexpr_end_123;
    condexpr_false_123:;
    tmp_assign_source_465 = PyDict_New();
    condexpr_end_123:;
    assert( tmp_class_creation_41__prepared == NULL );
    tmp_class_creation_41__prepared = tmp_assign_source_465;

    tmp_set_locals = tmp_class_creation_41__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_41);
    locals_dict_41 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_467 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_40_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_467 );
    outline_40_var___module__ = tmp_assign_source_467;

    tmp_assign_source_468 = const_str_digest_fdcbd20fae004c3283c3ee2fb4fdf02b;
    assert( outline_40_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_468 );
    outline_40_var___doc__ = tmp_assign_source_468;

    tmp_assign_source_469 = const_str_plain_Getattr;
    assert( outline_40_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_469 );
    outline_40_var___qualname__ = tmp_assign_source_469;

    tmp_assign_source_470 = const_tuple_str_plain_node_str_plain_attr_str_plain_ctx_tuple;
    assert( outline_40_var_fields == NULL );
    Py_INCREF( tmp_assign_source_470 );
    outline_40_var_fields = tmp_assign_source_470;

    tmp_defaults_20 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_20 );
    tmp_assign_source_471 = MAKE_FUNCTION_jinja2$nodes$$$function_41_as_const( tmp_defaults_20 );
    assert( outline_40_var_as_const == NULL );
    outline_40_var_as_const = tmp_assign_source_471;

    tmp_assign_source_472 = MAKE_FUNCTION_jinja2$nodes$$$function_42_can_assign(  );
    assert( outline_40_var_can_assign == NULL );
    outline_40_var_can_assign = tmp_assign_source_472;

    // Tried code:
    tmp_called_name_84 = tmp_class_creation_41__metaclass;

    CHECK_OBJECT( tmp_called_name_84 );
    tmp_args_name_82 = PyTuple_New( 3 );
    tmp_tuple_element_122 = const_str_plain_Getattr;
    Py_INCREF( tmp_tuple_element_122 );
    PyTuple_SET_ITEM( tmp_args_name_82, 0, tmp_tuple_element_122 );
    tmp_tuple_element_122 = tmp_class_creation_41__bases;

    CHECK_OBJECT( tmp_tuple_element_122 );
    Py_INCREF( tmp_tuple_element_122 );
    PyTuple_SET_ITEM( tmp_args_name_82, 1, tmp_tuple_element_122 );
    tmp_tuple_element_122 = locals_dict_41;
    Py_INCREF( tmp_tuple_element_122 );
    if ( outline_40_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_122,
            const_str_plain___qualname__,
            outline_40_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_122,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_122,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_82 );
        Py_DECREF( tmp_tuple_element_122 );

        exception_lineno = 720;

        goto try_except_handler_83;
    }
    if ( outline_40_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_122,
            const_str_plain___module__,
            outline_40_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_122,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_122,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_82 );
        Py_DECREF( tmp_tuple_element_122 );

        exception_lineno = 720;

        goto try_except_handler_83;
    }
    if ( outline_40_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_122,
            const_str_plain___doc__,
            outline_40_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_122,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_122,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_82 );
        Py_DECREF( tmp_tuple_element_122 );

        exception_lineno = 720;

        goto try_except_handler_83;
    }
    if ( outline_40_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_122,
            const_str_plain_fields,
            outline_40_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_122,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_122,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_82 );
        Py_DECREF( tmp_tuple_element_122 );

        exception_lineno = 720;

        goto try_except_handler_83;
    }
    if ( outline_40_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_122,
            const_str_plain_as_const,
            outline_40_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_122,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_122,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_82 );
        Py_DECREF( tmp_tuple_element_122 );

        exception_lineno = 720;

        goto try_except_handler_83;
    }
    if ( outline_40_var_can_assign != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_122,
            const_str_plain_can_assign,
            outline_40_var_can_assign
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_122,
            const_str_plain_can_assign
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_122,
                const_str_plain_can_assign
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_82 );
        Py_DECREF( tmp_tuple_element_122 );

        exception_lineno = 720;

        goto try_except_handler_83;
    }
    PyTuple_SET_ITEM( tmp_args_name_82, 2, tmp_tuple_element_122 );
    tmp_kw_name_82 = tmp_class_creation_41__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_82 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 720;
    tmp_assign_source_473 = CALL_FUNCTION( tmp_called_name_84, tmp_args_name_82, tmp_kw_name_82 );
    Py_DECREF( tmp_args_name_82 );
    if ( tmp_assign_source_473 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 720;

        goto try_except_handler_83;
    }
    assert( outline_40_var___class__ == NULL );
    outline_40_var___class__ = tmp_assign_source_473;

    tmp_outline_return_value_41 = outline_40_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_41 );
    Py_INCREF( tmp_outline_return_value_41 );
    goto try_return_handler_83;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_83:;
    CHECK_OBJECT( (PyObject *)outline_40_var___class__ );
    Py_DECREF( outline_40_var___class__ );
    outline_40_var___class__ = NULL;

    Py_XDECREF( outline_40_var___qualname__ );
    outline_40_var___qualname__ = NULL;

    Py_XDECREF( outline_40_var___module__ );
    outline_40_var___module__ = NULL;

    Py_XDECREF( outline_40_var___doc__ );
    outline_40_var___doc__ = NULL;

    Py_XDECREF( outline_40_var_fields );
    outline_40_var_fields = NULL;

    Py_XDECREF( outline_40_var_as_const );
    outline_40_var_as_const = NULL;

    Py_XDECREF( outline_40_var_can_assign );
    outline_40_var_can_assign = NULL;

    goto outline_result_41;
    // Exception handler code:
    try_except_handler_83:;
    exception_keeper_type_82 = exception_type;
    exception_keeper_value_82 = exception_value;
    exception_keeper_tb_82 = exception_tb;
    exception_keeper_lineno_82 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_40_var___qualname__ );
    outline_40_var___qualname__ = NULL;

    Py_XDECREF( outline_40_var___module__ );
    outline_40_var___module__ = NULL;

    Py_XDECREF( outline_40_var___doc__ );
    outline_40_var___doc__ = NULL;

    Py_XDECREF( outline_40_var_fields );
    outline_40_var_fields = NULL;

    Py_XDECREF( outline_40_var_as_const );
    outline_40_var_as_const = NULL;

    Py_XDECREF( outline_40_var_can_assign );
    outline_40_var_can_assign = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_82;
    exception_value = exception_keeper_value_82;
    exception_tb = exception_keeper_tb_82;
    exception_lineno = exception_keeper_lineno_82;

    goto outline_exception_41;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_41:;
    exception_lineno = 720;
    goto try_except_handler_82;
    outline_result_41:;
    tmp_assign_source_466 = tmp_outline_return_value_41;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Getattr, tmp_assign_source_466 );
    goto try_end_42;
    // Exception handler code:
    try_except_handler_82:;
    exception_keeper_type_83 = exception_type;
    exception_keeper_value_83 = exception_value;
    exception_keeper_tb_83 = exception_tb;
    exception_keeper_lineno_83 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_41__bases );
    tmp_class_creation_41__bases = NULL;

    Py_XDECREF( tmp_class_creation_41__class_decl_dict );
    tmp_class_creation_41__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_41__metaclass );
    tmp_class_creation_41__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_41__prepared );
    tmp_class_creation_41__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_83;
    exception_value = exception_keeper_value_83;
    exception_tb = exception_keeper_tb_83;
    exception_lineno = exception_keeper_lineno_83;

    goto frame_exception_exit_1;
    // End of try:
    try_end_42:;
    Py_XDECREF( tmp_class_creation_41__bases );
    tmp_class_creation_41__bases = NULL;

    Py_XDECREF( tmp_class_creation_41__class_decl_dict );
    tmp_class_creation_41__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_41__metaclass );
    tmp_class_creation_41__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_41__prepared );
    tmp_class_creation_41__prepared = NULL;

    // Tried code:
    tmp_assign_source_474 = PyTuple_New( 1 );
    tmp_tuple_element_123 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_123 == NULL ))
    {
        tmp_tuple_element_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_123 == NULL )
    {
        Py_DECREF( tmp_assign_source_474 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 740;

        goto try_except_handler_84;
    }

    Py_INCREF( tmp_tuple_element_123 );
    PyTuple_SET_ITEM( tmp_assign_source_474, 0, tmp_tuple_element_123 );
    assert( tmp_class_creation_42__bases == NULL );
    tmp_class_creation_42__bases = tmp_assign_source_474;

    tmp_assign_source_475 = PyDict_New();
    assert( tmp_class_creation_42__class_decl_dict == NULL );
    tmp_class_creation_42__class_decl_dict = tmp_assign_source_475;

    tmp_compare_left_83 = const_str_plain_metaclass;
    tmp_compare_right_83 = tmp_class_creation_42__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_83 );
    tmp_cmp_In_83 = PySequence_Contains( tmp_compare_right_83, tmp_compare_left_83 );
    assert( !(tmp_cmp_In_83 == -1) );
    if ( tmp_cmp_In_83 == 1 )
    {
        goto condexpr_true_124;
    }
    else
    {
        goto condexpr_false_124;
    }
    condexpr_true_124:;
    tmp_dict_name_42 = tmp_class_creation_42__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_42 );
    tmp_key_name_42 = const_str_plain_metaclass;
    tmp_metaclass_name_42 = DICT_GET_ITEM( tmp_dict_name_42, tmp_key_name_42 );
    if ( tmp_metaclass_name_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_84;
    }
    goto condexpr_end_124;
    condexpr_false_124:;
    tmp_cond_value_42 = tmp_class_creation_42__bases;

    CHECK_OBJECT( tmp_cond_value_42 );
    tmp_cond_truth_42 = CHECK_IF_TRUE( tmp_cond_value_42 );
    if ( tmp_cond_truth_42 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_84;
    }
    if ( tmp_cond_truth_42 == 1 )
    {
        goto condexpr_true_125;
    }
    else
    {
        goto condexpr_false_125;
    }
    condexpr_true_125:;
    tmp_subscribed_name_42 = tmp_class_creation_42__bases;

    CHECK_OBJECT( tmp_subscribed_name_42 );
    tmp_subscript_name_42 = const_int_0;
    tmp_type_arg_42 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_42, tmp_subscript_name_42 );
    if ( tmp_type_arg_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_84;
    }
    tmp_metaclass_name_42 = BUILTIN_TYPE1( tmp_type_arg_42 );
    Py_DECREF( tmp_type_arg_42 );
    if ( tmp_metaclass_name_42 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_84;
    }
    goto condexpr_end_125;
    condexpr_false_125:;
    tmp_metaclass_name_42 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_42 );
    condexpr_end_125:;
    condexpr_end_124:;
    tmp_bases_name_42 = tmp_class_creation_42__bases;

    CHECK_OBJECT( tmp_bases_name_42 );
    tmp_assign_source_476 = SELECT_METACLASS( tmp_metaclass_name_42, tmp_bases_name_42 );
    if ( tmp_assign_source_476 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_42 );

        exception_lineno = 740;

        goto try_except_handler_84;
    }
    Py_DECREF( tmp_metaclass_name_42 );
    assert( tmp_class_creation_42__metaclass == NULL );
    tmp_class_creation_42__metaclass = tmp_assign_source_476;

    tmp_compare_left_84 = const_str_plain_metaclass;
    tmp_compare_right_84 = tmp_class_creation_42__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_84 );
    tmp_cmp_In_84 = PySequence_Contains( tmp_compare_right_84, tmp_compare_left_84 );
    assert( !(tmp_cmp_In_84 == -1) );
    if ( tmp_cmp_In_84 == 1 )
    {
        goto branch_yes_42;
    }
    else
    {
        goto branch_no_42;
    }
    branch_yes_42:;
    tmp_dictdel_dict = tmp_class_creation_42__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_84;
    }
    branch_no_42:;
    tmp_hasattr_source_42 = tmp_class_creation_42__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_42 );
    tmp_hasattr_attr_42 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_42, tmp_hasattr_attr_42 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_84;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_126;
    }
    else
    {
        goto condexpr_false_126;
    }
    condexpr_true_126:;
    tmp_source_name_61 = tmp_class_creation_42__metaclass;

    CHECK_OBJECT( tmp_source_name_61 );
    tmp_called_name_85 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain___prepare__ );
    if ( tmp_called_name_85 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_84;
    }
    tmp_args_name_83 = PyTuple_New( 2 );
    tmp_tuple_element_124 = const_str_plain_Slice;
    Py_INCREF( tmp_tuple_element_124 );
    PyTuple_SET_ITEM( tmp_args_name_83, 0, tmp_tuple_element_124 );
    tmp_tuple_element_124 = tmp_class_creation_42__bases;

    CHECK_OBJECT( tmp_tuple_element_124 );
    Py_INCREF( tmp_tuple_element_124 );
    PyTuple_SET_ITEM( tmp_args_name_83, 1, tmp_tuple_element_124 );
    tmp_kw_name_83 = tmp_class_creation_42__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_83 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 740;
    tmp_assign_source_477 = CALL_FUNCTION( tmp_called_name_85, tmp_args_name_83, tmp_kw_name_83 );
    Py_DECREF( tmp_called_name_85 );
    Py_DECREF( tmp_args_name_83 );
    if ( tmp_assign_source_477 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_84;
    }
    goto condexpr_end_126;
    condexpr_false_126:;
    tmp_assign_source_477 = PyDict_New();
    condexpr_end_126:;
    assert( tmp_class_creation_42__prepared == NULL );
    tmp_class_creation_42__prepared = tmp_assign_source_477;

    tmp_set_locals = tmp_class_creation_42__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_42);
    locals_dict_42 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_479 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_41_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_479 );
    outline_41_var___module__ = tmp_assign_source_479;

    tmp_assign_source_480 = const_str_digest_92ad115e7d972b3d1a9f20bd23bf875a;
    assert( outline_41_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_480 );
    outline_41_var___doc__ = tmp_assign_source_480;

    tmp_assign_source_481 = const_str_plain_Slice;
    assert( outline_41_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_481 );
    outline_41_var___qualname__ = tmp_assign_source_481;

    tmp_assign_source_482 = const_tuple_str_plain_start_str_plain_stop_str_plain_step_tuple;
    assert( outline_41_var_fields == NULL );
    Py_INCREF( tmp_assign_source_482 );
    outline_41_var_fields = tmp_assign_source_482;

    tmp_defaults_21 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_21 );
    tmp_assign_source_483 = MAKE_FUNCTION_jinja2$nodes$$$function_43_as_const( tmp_defaults_21 );
    assert( outline_41_var_as_const == NULL );
    outline_41_var_as_const = tmp_assign_source_483;

    // Tried code:
    tmp_called_name_86 = tmp_class_creation_42__metaclass;

    CHECK_OBJECT( tmp_called_name_86 );
    tmp_args_name_84 = PyTuple_New( 3 );
    tmp_tuple_element_125 = const_str_plain_Slice;
    Py_INCREF( tmp_tuple_element_125 );
    PyTuple_SET_ITEM( tmp_args_name_84, 0, tmp_tuple_element_125 );
    tmp_tuple_element_125 = tmp_class_creation_42__bases;

    CHECK_OBJECT( tmp_tuple_element_125 );
    Py_INCREF( tmp_tuple_element_125 );
    PyTuple_SET_ITEM( tmp_args_name_84, 1, tmp_tuple_element_125 );
    tmp_tuple_element_125 = locals_dict_42;
    Py_INCREF( tmp_tuple_element_125 );
    if ( outline_41_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_125,
            const_str_plain___qualname__,
            outline_41_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_125,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_125,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_84 );
        Py_DECREF( tmp_tuple_element_125 );

        exception_lineno = 740;

        goto try_except_handler_85;
    }
    if ( outline_41_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_125,
            const_str_plain___module__,
            outline_41_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_125,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_125,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_84 );
        Py_DECREF( tmp_tuple_element_125 );

        exception_lineno = 740;

        goto try_except_handler_85;
    }
    if ( outline_41_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_125,
            const_str_plain___doc__,
            outline_41_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_125,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_125,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_84 );
        Py_DECREF( tmp_tuple_element_125 );

        exception_lineno = 740;

        goto try_except_handler_85;
    }
    if ( outline_41_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_125,
            const_str_plain_fields,
            outline_41_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_125,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_125,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_84 );
        Py_DECREF( tmp_tuple_element_125 );

        exception_lineno = 740;

        goto try_except_handler_85;
    }
    if ( outline_41_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_125,
            const_str_plain_as_const,
            outline_41_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_125,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_125,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_84 );
        Py_DECREF( tmp_tuple_element_125 );

        exception_lineno = 740;

        goto try_except_handler_85;
    }
    PyTuple_SET_ITEM( tmp_args_name_84, 2, tmp_tuple_element_125 );
    tmp_kw_name_84 = tmp_class_creation_42__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_84 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 740;
    tmp_assign_source_484 = CALL_FUNCTION( tmp_called_name_86, tmp_args_name_84, tmp_kw_name_84 );
    Py_DECREF( tmp_args_name_84 );
    if ( tmp_assign_source_484 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 740;

        goto try_except_handler_85;
    }
    assert( outline_41_var___class__ == NULL );
    outline_41_var___class__ = tmp_assign_source_484;

    tmp_outline_return_value_42 = outline_41_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_42 );
    Py_INCREF( tmp_outline_return_value_42 );
    goto try_return_handler_85;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_85:;
    CHECK_OBJECT( (PyObject *)outline_41_var___class__ );
    Py_DECREF( outline_41_var___class__ );
    outline_41_var___class__ = NULL;

    Py_XDECREF( outline_41_var___qualname__ );
    outline_41_var___qualname__ = NULL;

    Py_XDECREF( outline_41_var___module__ );
    outline_41_var___module__ = NULL;

    Py_XDECREF( outline_41_var___doc__ );
    outline_41_var___doc__ = NULL;

    Py_XDECREF( outline_41_var_fields );
    outline_41_var_fields = NULL;

    Py_XDECREF( outline_41_var_as_const );
    outline_41_var_as_const = NULL;

    goto outline_result_42;
    // Exception handler code:
    try_except_handler_85:;
    exception_keeper_type_84 = exception_type;
    exception_keeper_value_84 = exception_value;
    exception_keeper_tb_84 = exception_tb;
    exception_keeper_lineno_84 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_41_var___qualname__ );
    outline_41_var___qualname__ = NULL;

    Py_XDECREF( outline_41_var___module__ );
    outline_41_var___module__ = NULL;

    Py_XDECREF( outline_41_var___doc__ );
    outline_41_var___doc__ = NULL;

    Py_XDECREF( outline_41_var_fields );
    outline_41_var_fields = NULL;

    Py_XDECREF( outline_41_var_as_const );
    outline_41_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_84;
    exception_value = exception_keeper_value_84;
    exception_tb = exception_keeper_tb_84;
    exception_lineno = exception_keeper_lineno_84;

    goto outline_exception_42;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_42:;
    exception_lineno = 740;
    goto try_except_handler_84;
    outline_result_42:;
    tmp_assign_source_478 = tmp_outline_return_value_42;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Slice, tmp_assign_source_478 );
    goto try_end_43;
    // Exception handler code:
    try_except_handler_84:;
    exception_keeper_type_85 = exception_type;
    exception_keeper_value_85 = exception_value;
    exception_keeper_tb_85 = exception_tb;
    exception_keeper_lineno_85 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_42__bases );
    tmp_class_creation_42__bases = NULL;

    Py_XDECREF( tmp_class_creation_42__class_decl_dict );
    tmp_class_creation_42__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_42__metaclass );
    tmp_class_creation_42__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_42__prepared );
    tmp_class_creation_42__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_85;
    exception_value = exception_keeper_value_85;
    exception_tb = exception_keeper_tb_85;
    exception_lineno = exception_keeper_lineno_85;

    goto frame_exception_exit_1;
    // End of try:
    try_end_43:;
    Py_XDECREF( tmp_class_creation_42__bases );
    tmp_class_creation_42__bases = NULL;

    Py_XDECREF( tmp_class_creation_42__class_decl_dict );
    tmp_class_creation_42__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_42__metaclass );
    tmp_class_creation_42__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_42__prepared );
    tmp_class_creation_42__prepared = NULL;

    // Tried code:
    tmp_assign_source_485 = PyTuple_New( 1 );
    tmp_tuple_element_126 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_126 == NULL ))
    {
        tmp_tuple_element_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_126 == NULL )
    {
        Py_DECREF( tmp_assign_source_485 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 755;

        goto try_except_handler_86;
    }

    Py_INCREF( tmp_tuple_element_126 );
    PyTuple_SET_ITEM( tmp_assign_source_485, 0, tmp_tuple_element_126 );
    assert( tmp_class_creation_43__bases == NULL );
    tmp_class_creation_43__bases = tmp_assign_source_485;

    tmp_assign_source_486 = PyDict_New();
    assert( tmp_class_creation_43__class_decl_dict == NULL );
    tmp_class_creation_43__class_decl_dict = tmp_assign_source_486;

    tmp_compare_left_85 = const_str_plain_metaclass;
    tmp_compare_right_85 = tmp_class_creation_43__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_85 );
    tmp_cmp_In_85 = PySequence_Contains( tmp_compare_right_85, tmp_compare_left_85 );
    assert( !(tmp_cmp_In_85 == -1) );
    if ( tmp_cmp_In_85 == 1 )
    {
        goto condexpr_true_127;
    }
    else
    {
        goto condexpr_false_127;
    }
    condexpr_true_127:;
    tmp_dict_name_43 = tmp_class_creation_43__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_43 );
    tmp_key_name_43 = const_str_plain_metaclass;
    tmp_metaclass_name_43 = DICT_GET_ITEM( tmp_dict_name_43, tmp_key_name_43 );
    if ( tmp_metaclass_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_86;
    }
    goto condexpr_end_127;
    condexpr_false_127:;
    tmp_cond_value_43 = tmp_class_creation_43__bases;

    CHECK_OBJECT( tmp_cond_value_43 );
    tmp_cond_truth_43 = CHECK_IF_TRUE( tmp_cond_value_43 );
    if ( tmp_cond_truth_43 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_86;
    }
    if ( tmp_cond_truth_43 == 1 )
    {
        goto condexpr_true_128;
    }
    else
    {
        goto condexpr_false_128;
    }
    condexpr_true_128:;
    tmp_subscribed_name_43 = tmp_class_creation_43__bases;

    CHECK_OBJECT( tmp_subscribed_name_43 );
    tmp_subscript_name_43 = const_int_0;
    tmp_type_arg_43 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_43, tmp_subscript_name_43 );
    if ( tmp_type_arg_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_86;
    }
    tmp_metaclass_name_43 = BUILTIN_TYPE1( tmp_type_arg_43 );
    Py_DECREF( tmp_type_arg_43 );
    if ( tmp_metaclass_name_43 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_86;
    }
    goto condexpr_end_128;
    condexpr_false_128:;
    tmp_metaclass_name_43 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_43 );
    condexpr_end_128:;
    condexpr_end_127:;
    tmp_bases_name_43 = tmp_class_creation_43__bases;

    CHECK_OBJECT( tmp_bases_name_43 );
    tmp_assign_source_487 = SELECT_METACLASS( tmp_metaclass_name_43, tmp_bases_name_43 );
    if ( tmp_assign_source_487 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_43 );

        exception_lineno = 755;

        goto try_except_handler_86;
    }
    Py_DECREF( tmp_metaclass_name_43 );
    assert( tmp_class_creation_43__metaclass == NULL );
    tmp_class_creation_43__metaclass = tmp_assign_source_487;

    tmp_compare_left_86 = const_str_plain_metaclass;
    tmp_compare_right_86 = tmp_class_creation_43__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_86 );
    tmp_cmp_In_86 = PySequence_Contains( tmp_compare_right_86, tmp_compare_left_86 );
    assert( !(tmp_cmp_In_86 == -1) );
    if ( tmp_cmp_In_86 == 1 )
    {
        goto branch_yes_43;
    }
    else
    {
        goto branch_no_43;
    }
    branch_yes_43:;
    tmp_dictdel_dict = tmp_class_creation_43__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_86;
    }
    branch_no_43:;
    tmp_hasattr_source_43 = tmp_class_creation_43__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_43 );
    tmp_hasattr_attr_43 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_43, tmp_hasattr_attr_43 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_86;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_129;
    }
    else
    {
        goto condexpr_false_129;
    }
    condexpr_true_129:;
    tmp_source_name_62 = tmp_class_creation_43__metaclass;

    CHECK_OBJECT( tmp_source_name_62 );
    tmp_called_name_87 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain___prepare__ );
    if ( tmp_called_name_87 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_86;
    }
    tmp_args_name_85 = PyTuple_New( 2 );
    tmp_tuple_element_127 = const_str_plain_Concat;
    Py_INCREF( tmp_tuple_element_127 );
    PyTuple_SET_ITEM( tmp_args_name_85, 0, tmp_tuple_element_127 );
    tmp_tuple_element_127 = tmp_class_creation_43__bases;

    CHECK_OBJECT( tmp_tuple_element_127 );
    Py_INCREF( tmp_tuple_element_127 );
    PyTuple_SET_ITEM( tmp_args_name_85, 1, tmp_tuple_element_127 );
    tmp_kw_name_85 = tmp_class_creation_43__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_85 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 755;
    tmp_assign_source_488 = CALL_FUNCTION( tmp_called_name_87, tmp_args_name_85, tmp_kw_name_85 );
    Py_DECREF( tmp_called_name_87 );
    Py_DECREF( tmp_args_name_85 );
    if ( tmp_assign_source_488 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_86;
    }
    goto condexpr_end_129;
    condexpr_false_129:;
    tmp_assign_source_488 = PyDict_New();
    condexpr_end_129:;
    assert( tmp_class_creation_43__prepared == NULL );
    tmp_class_creation_43__prepared = tmp_assign_source_488;

    tmp_set_locals = tmp_class_creation_43__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_43);
    locals_dict_43 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_490 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_42_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_490 );
    outline_42_var___module__ = tmp_assign_source_490;

    tmp_assign_source_491 = const_str_digest_5e47309bb0f9637116c5091ee5e8b4ca;
    assert( outline_42_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_491 );
    outline_42_var___doc__ = tmp_assign_source_491;

    tmp_assign_source_492 = const_str_plain_Concat;
    assert( outline_42_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_492 );
    outline_42_var___qualname__ = tmp_assign_source_492;

    tmp_assign_source_493 = const_tuple_str_plain_nodes_tuple;
    assert( outline_42_var_fields == NULL );
    Py_INCREF( tmp_assign_source_493 );
    outline_42_var_fields = tmp_assign_source_493;

    tmp_defaults_22 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_22 );
    tmp_assign_source_494 = MAKE_FUNCTION_jinja2$nodes$$$function_44_as_const( tmp_defaults_22 );
    assert( outline_42_var_as_const == NULL );
    outline_42_var_as_const = tmp_assign_source_494;

    // Tried code:
    tmp_called_name_88 = tmp_class_creation_43__metaclass;

    CHECK_OBJECT( tmp_called_name_88 );
    tmp_args_name_86 = PyTuple_New( 3 );
    tmp_tuple_element_128 = const_str_plain_Concat;
    Py_INCREF( tmp_tuple_element_128 );
    PyTuple_SET_ITEM( tmp_args_name_86, 0, tmp_tuple_element_128 );
    tmp_tuple_element_128 = tmp_class_creation_43__bases;

    CHECK_OBJECT( tmp_tuple_element_128 );
    Py_INCREF( tmp_tuple_element_128 );
    PyTuple_SET_ITEM( tmp_args_name_86, 1, tmp_tuple_element_128 );
    tmp_tuple_element_128 = locals_dict_43;
    Py_INCREF( tmp_tuple_element_128 );
    if ( outline_42_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_128,
            const_str_plain___qualname__,
            outline_42_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_128,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_128,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_86 );
        Py_DECREF( tmp_tuple_element_128 );

        exception_lineno = 755;

        goto try_except_handler_87;
    }
    if ( outline_42_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_128,
            const_str_plain___module__,
            outline_42_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_128,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_128,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_86 );
        Py_DECREF( tmp_tuple_element_128 );

        exception_lineno = 755;

        goto try_except_handler_87;
    }
    if ( outline_42_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_128,
            const_str_plain___doc__,
            outline_42_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_128,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_128,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_86 );
        Py_DECREF( tmp_tuple_element_128 );

        exception_lineno = 755;

        goto try_except_handler_87;
    }
    if ( outline_42_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_128,
            const_str_plain_fields,
            outline_42_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_128,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_128,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_86 );
        Py_DECREF( tmp_tuple_element_128 );

        exception_lineno = 755;

        goto try_except_handler_87;
    }
    if ( outline_42_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_128,
            const_str_plain_as_const,
            outline_42_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_128,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_128,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_86 );
        Py_DECREF( tmp_tuple_element_128 );

        exception_lineno = 755;

        goto try_except_handler_87;
    }
    PyTuple_SET_ITEM( tmp_args_name_86, 2, tmp_tuple_element_128 );
    tmp_kw_name_86 = tmp_class_creation_43__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_86 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 755;
    tmp_assign_source_495 = CALL_FUNCTION( tmp_called_name_88, tmp_args_name_86, tmp_kw_name_86 );
    Py_DECREF( tmp_args_name_86 );
    if ( tmp_assign_source_495 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 755;

        goto try_except_handler_87;
    }
    assert( outline_42_var___class__ == NULL );
    outline_42_var___class__ = tmp_assign_source_495;

    tmp_outline_return_value_43 = outline_42_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_43 );
    Py_INCREF( tmp_outline_return_value_43 );
    goto try_return_handler_87;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_87:;
    CHECK_OBJECT( (PyObject *)outline_42_var___class__ );
    Py_DECREF( outline_42_var___class__ );
    outline_42_var___class__ = NULL;

    Py_XDECREF( outline_42_var___qualname__ );
    outline_42_var___qualname__ = NULL;

    Py_XDECREF( outline_42_var___module__ );
    outline_42_var___module__ = NULL;

    Py_XDECREF( outline_42_var___doc__ );
    outline_42_var___doc__ = NULL;

    Py_XDECREF( outline_42_var_fields );
    outline_42_var_fields = NULL;

    Py_XDECREF( outline_42_var_as_const );
    outline_42_var_as_const = NULL;

    goto outline_result_43;
    // Exception handler code:
    try_except_handler_87:;
    exception_keeper_type_86 = exception_type;
    exception_keeper_value_86 = exception_value;
    exception_keeper_tb_86 = exception_tb;
    exception_keeper_lineno_86 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_42_var___qualname__ );
    outline_42_var___qualname__ = NULL;

    Py_XDECREF( outline_42_var___module__ );
    outline_42_var___module__ = NULL;

    Py_XDECREF( outline_42_var___doc__ );
    outline_42_var___doc__ = NULL;

    Py_XDECREF( outline_42_var_fields );
    outline_42_var_fields = NULL;

    Py_XDECREF( outline_42_var_as_const );
    outline_42_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_86;
    exception_value = exception_keeper_value_86;
    exception_tb = exception_keeper_tb_86;
    exception_lineno = exception_keeper_lineno_86;

    goto outline_exception_43;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_43:;
    exception_lineno = 755;
    goto try_except_handler_86;
    outline_result_43:;
    tmp_assign_source_489 = tmp_outline_return_value_43;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Concat, tmp_assign_source_489 );
    goto try_end_44;
    // Exception handler code:
    try_except_handler_86:;
    exception_keeper_type_87 = exception_type;
    exception_keeper_value_87 = exception_value;
    exception_keeper_tb_87 = exception_tb;
    exception_keeper_lineno_87 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_43__bases );
    tmp_class_creation_43__bases = NULL;

    Py_XDECREF( tmp_class_creation_43__class_decl_dict );
    tmp_class_creation_43__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_43__metaclass );
    tmp_class_creation_43__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_43__prepared );
    tmp_class_creation_43__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_87;
    exception_value = exception_keeper_value_87;
    exception_tb = exception_keeper_tb_87;
    exception_lineno = exception_keeper_lineno_87;

    goto frame_exception_exit_1;
    // End of try:
    try_end_44:;
    Py_XDECREF( tmp_class_creation_43__bases );
    tmp_class_creation_43__bases = NULL;

    Py_XDECREF( tmp_class_creation_43__class_decl_dict );
    tmp_class_creation_43__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_43__metaclass );
    tmp_class_creation_43__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_43__prepared );
    tmp_class_creation_43__prepared = NULL;

    // Tried code:
    tmp_assign_source_496 = PyTuple_New( 1 );
    tmp_tuple_element_129 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_129 == NULL ))
    {
        tmp_tuple_element_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_129 == NULL )
    {
        Py_DECREF( tmp_assign_source_496 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 766;

        goto try_except_handler_88;
    }

    Py_INCREF( tmp_tuple_element_129 );
    PyTuple_SET_ITEM( tmp_assign_source_496, 0, tmp_tuple_element_129 );
    assert( tmp_class_creation_44__bases == NULL );
    tmp_class_creation_44__bases = tmp_assign_source_496;

    tmp_assign_source_497 = PyDict_New();
    assert( tmp_class_creation_44__class_decl_dict == NULL );
    tmp_class_creation_44__class_decl_dict = tmp_assign_source_497;

    tmp_compare_left_87 = const_str_plain_metaclass;
    tmp_compare_right_87 = tmp_class_creation_44__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_87 );
    tmp_cmp_In_87 = PySequence_Contains( tmp_compare_right_87, tmp_compare_left_87 );
    assert( !(tmp_cmp_In_87 == -1) );
    if ( tmp_cmp_In_87 == 1 )
    {
        goto condexpr_true_130;
    }
    else
    {
        goto condexpr_false_130;
    }
    condexpr_true_130:;
    tmp_dict_name_44 = tmp_class_creation_44__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_44 );
    tmp_key_name_44 = const_str_plain_metaclass;
    tmp_metaclass_name_44 = DICT_GET_ITEM( tmp_dict_name_44, tmp_key_name_44 );
    if ( tmp_metaclass_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_88;
    }
    goto condexpr_end_130;
    condexpr_false_130:;
    tmp_cond_value_44 = tmp_class_creation_44__bases;

    CHECK_OBJECT( tmp_cond_value_44 );
    tmp_cond_truth_44 = CHECK_IF_TRUE( tmp_cond_value_44 );
    if ( tmp_cond_truth_44 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_88;
    }
    if ( tmp_cond_truth_44 == 1 )
    {
        goto condexpr_true_131;
    }
    else
    {
        goto condexpr_false_131;
    }
    condexpr_true_131:;
    tmp_subscribed_name_44 = tmp_class_creation_44__bases;

    CHECK_OBJECT( tmp_subscribed_name_44 );
    tmp_subscript_name_44 = const_int_0;
    tmp_type_arg_44 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_44, tmp_subscript_name_44 );
    if ( tmp_type_arg_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_88;
    }
    tmp_metaclass_name_44 = BUILTIN_TYPE1( tmp_type_arg_44 );
    Py_DECREF( tmp_type_arg_44 );
    if ( tmp_metaclass_name_44 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_88;
    }
    goto condexpr_end_131;
    condexpr_false_131:;
    tmp_metaclass_name_44 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_44 );
    condexpr_end_131:;
    condexpr_end_130:;
    tmp_bases_name_44 = tmp_class_creation_44__bases;

    CHECK_OBJECT( tmp_bases_name_44 );
    tmp_assign_source_498 = SELECT_METACLASS( tmp_metaclass_name_44, tmp_bases_name_44 );
    if ( tmp_assign_source_498 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_44 );

        exception_lineno = 766;

        goto try_except_handler_88;
    }
    Py_DECREF( tmp_metaclass_name_44 );
    assert( tmp_class_creation_44__metaclass == NULL );
    tmp_class_creation_44__metaclass = tmp_assign_source_498;

    tmp_compare_left_88 = const_str_plain_metaclass;
    tmp_compare_right_88 = tmp_class_creation_44__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_88 );
    tmp_cmp_In_88 = PySequence_Contains( tmp_compare_right_88, tmp_compare_left_88 );
    assert( !(tmp_cmp_In_88 == -1) );
    if ( tmp_cmp_In_88 == 1 )
    {
        goto branch_yes_44;
    }
    else
    {
        goto branch_no_44;
    }
    branch_yes_44:;
    tmp_dictdel_dict = tmp_class_creation_44__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_88;
    }
    branch_no_44:;
    tmp_hasattr_source_44 = tmp_class_creation_44__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_44 );
    tmp_hasattr_attr_44 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_44, tmp_hasattr_attr_44 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_88;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_132;
    }
    else
    {
        goto condexpr_false_132;
    }
    condexpr_true_132:;
    tmp_source_name_63 = tmp_class_creation_44__metaclass;

    CHECK_OBJECT( tmp_source_name_63 );
    tmp_called_name_89 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain___prepare__ );
    if ( tmp_called_name_89 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_88;
    }
    tmp_args_name_87 = PyTuple_New( 2 );
    tmp_tuple_element_130 = const_str_plain_Compare;
    Py_INCREF( tmp_tuple_element_130 );
    PyTuple_SET_ITEM( tmp_args_name_87, 0, tmp_tuple_element_130 );
    tmp_tuple_element_130 = tmp_class_creation_44__bases;

    CHECK_OBJECT( tmp_tuple_element_130 );
    Py_INCREF( tmp_tuple_element_130 );
    PyTuple_SET_ITEM( tmp_args_name_87, 1, tmp_tuple_element_130 );
    tmp_kw_name_87 = tmp_class_creation_44__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_87 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 766;
    tmp_assign_source_499 = CALL_FUNCTION( tmp_called_name_89, tmp_args_name_87, tmp_kw_name_87 );
    Py_DECREF( tmp_called_name_89 );
    Py_DECREF( tmp_args_name_87 );
    if ( tmp_assign_source_499 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_88;
    }
    goto condexpr_end_132;
    condexpr_false_132:;
    tmp_assign_source_499 = PyDict_New();
    condexpr_end_132:;
    assert( tmp_class_creation_44__prepared == NULL );
    tmp_class_creation_44__prepared = tmp_assign_source_499;

    tmp_set_locals = tmp_class_creation_44__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_44);
    locals_dict_44 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_501 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_43_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_501 );
    outline_43_var___module__ = tmp_assign_source_501;

    tmp_assign_source_502 = const_str_digest_35cbbaa2a2bafa645a059a9fc1ad3117;
    assert( outline_43_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_502 );
    outline_43_var___doc__ = tmp_assign_source_502;

    tmp_assign_source_503 = const_str_plain_Compare;
    assert( outline_43_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_503 );
    outline_43_var___qualname__ = tmp_assign_source_503;

    tmp_assign_source_504 = const_tuple_str_plain_expr_str_plain_ops_tuple;
    assert( outline_43_var_fields == NULL );
    Py_INCREF( tmp_assign_source_504 );
    outline_43_var_fields = tmp_assign_source_504;

    tmp_defaults_23 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_23 );
    tmp_assign_source_505 = MAKE_FUNCTION_jinja2$nodes$$$function_45_as_const( tmp_defaults_23 );
    assert( outline_43_var_as_const == NULL );
    outline_43_var_as_const = tmp_assign_source_505;

    // Tried code:
    tmp_called_name_90 = tmp_class_creation_44__metaclass;

    CHECK_OBJECT( tmp_called_name_90 );
    tmp_args_name_88 = PyTuple_New( 3 );
    tmp_tuple_element_131 = const_str_plain_Compare;
    Py_INCREF( tmp_tuple_element_131 );
    PyTuple_SET_ITEM( tmp_args_name_88, 0, tmp_tuple_element_131 );
    tmp_tuple_element_131 = tmp_class_creation_44__bases;

    CHECK_OBJECT( tmp_tuple_element_131 );
    Py_INCREF( tmp_tuple_element_131 );
    PyTuple_SET_ITEM( tmp_args_name_88, 1, tmp_tuple_element_131 );
    tmp_tuple_element_131 = locals_dict_44;
    Py_INCREF( tmp_tuple_element_131 );
    if ( outline_43_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_131,
            const_str_plain___qualname__,
            outline_43_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_131,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_131,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_88 );
        Py_DECREF( tmp_tuple_element_131 );

        exception_lineno = 766;

        goto try_except_handler_89;
    }
    if ( outline_43_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_131,
            const_str_plain___module__,
            outline_43_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_131,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_131,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_88 );
        Py_DECREF( tmp_tuple_element_131 );

        exception_lineno = 766;

        goto try_except_handler_89;
    }
    if ( outline_43_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_131,
            const_str_plain___doc__,
            outline_43_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_131,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_131,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_88 );
        Py_DECREF( tmp_tuple_element_131 );

        exception_lineno = 766;

        goto try_except_handler_89;
    }
    if ( outline_43_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_131,
            const_str_plain_fields,
            outline_43_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_131,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_131,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_88 );
        Py_DECREF( tmp_tuple_element_131 );

        exception_lineno = 766;

        goto try_except_handler_89;
    }
    if ( outline_43_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_131,
            const_str_plain_as_const,
            outline_43_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_131,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_131,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_88 );
        Py_DECREF( tmp_tuple_element_131 );

        exception_lineno = 766;

        goto try_except_handler_89;
    }
    PyTuple_SET_ITEM( tmp_args_name_88, 2, tmp_tuple_element_131 );
    tmp_kw_name_88 = tmp_class_creation_44__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_88 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 766;
    tmp_assign_source_506 = CALL_FUNCTION( tmp_called_name_90, tmp_args_name_88, tmp_kw_name_88 );
    Py_DECREF( tmp_args_name_88 );
    if ( tmp_assign_source_506 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 766;

        goto try_except_handler_89;
    }
    assert( outline_43_var___class__ == NULL );
    outline_43_var___class__ = tmp_assign_source_506;

    tmp_outline_return_value_44 = outline_43_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_44 );
    Py_INCREF( tmp_outline_return_value_44 );
    goto try_return_handler_89;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_89:;
    CHECK_OBJECT( (PyObject *)outline_43_var___class__ );
    Py_DECREF( outline_43_var___class__ );
    outline_43_var___class__ = NULL;

    Py_XDECREF( outline_43_var___qualname__ );
    outline_43_var___qualname__ = NULL;

    Py_XDECREF( outline_43_var___module__ );
    outline_43_var___module__ = NULL;

    Py_XDECREF( outline_43_var___doc__ );
    outline_43_var___doc__ = NULL;

    Py_XDECREF( outline_43_var_fields );
    outline_43_var_fields = NULL;

    Py_XDECREF( outline_43_var_as_const );
    outline_43_var_as_const = NULL;

    goto outline_result_44;
    // Exception handler code:
    try_except_handler_89:;
    exception_keeper_type_88 = exception_type;
    exception_keeper_value_88 = exception_value;
    exception_keeper_tb_88 = exception_tb;
    exception_keeper_lineno_88 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_43_var___qualname__ );
    outline_43_var___qualname__ = NULL;

    Py_XDECREF( outline_43_var___module__ );
    outline_43_var___module__ = NULL;

    Py_XDECREF( outline_43_var___doc__ );
    outline_43_var___doc__ = NULL;

    Py_XDECREF( outline_43_var_fields );
    outline_43_var_fields = NULL;

    Py_XDECREF( outline_43_var_as_const );
    outline_43_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_88;
    exception_value = exception_keeper_value_88;
    exception_tb = exception_keeper_tb_88;
    exception_lineno = exception_keeper_lineno_88;

    goto outline_exception_44;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_44:;
    exception_lineno = 766;
    goto try_except_handler_88;
    outline_result_44:;
    tmp_assign_source_500 = tmp_outline_return_value_44;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Compare, tmp_assign_source_500 );
    goto try_end_45;
    // Exception handler code:
    try_except_handler_88:;
    exception_keeper_type_89 = exception_type;
    exception_keeper_value_89 = exception_value;
    exception_keeper_tb_89 = exception_tb;
    exception_keeper_lineno_89 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_44__bases );
    tmp_class_creation_44__bases = NULL;

    Py_XDECREF( tmp_class_creation_44__class_decl_dict );
    tmp_class_creation_44__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_44__metaclass );
    tmp_class_creation_44__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_44__prepared );
    tmp_class_creation_44__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_89;
    exception_value = exception_keeper_value_89;
    exception_tb = exception_keeper_tb_89;
    exception_lineno = exception_keeper_lineno_89;

    goto frame_exception_exit_1;
    // End of try:
    try_end_45:;
    Py_XDECREF( tmp_class_creation_44__bases );
    tmp_class_creation_44__bases = NULL;

    Py_XDECREF( tmp_class_creation_44__class_decl_dict );
    tmp_class_creation_44__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_44__metaclass );
    tmp_class_creation_44__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_44__prepared );
    tmp_class_creation_44__prepared = NULL;

    // Tried code:
    tmp_assign_source_507 = PyTuple_New( 1 );
    tmp_tuple_element_132 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Helper );

    if (unlikely( tmp_tuple_element_132 == NULL ))
    {
        tmp_tuple_element_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Helper );
    }

    if ( tmp_tuple_element_132 == NULL )
    {
        Py_DECREF( tmp_assign_source_507 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Helper" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 785;

        goto try_except_handler_90;
    }

    Py_INCREF( tmp_tuple_element_132 );
    PyTuple_SET_ITEM( tmp_assign_source_507, 0, tmp_tuple_element_132 );
    assert( tmp_class_creation_45__bases == NULL );
    tmp_class_creation_45__bases = tmp_assign_source_507;

    tmp_assign_source_508 = PyDict_New();
    assert( tmp_class_creation_45__class_decl_dict == NULL );
    tmp_class_creation_45__class_decl_dict = tmp_assign_source_508;

    tmp_compare_left_89 = const_str_plain_metaclass;
    tmp_compare_right_89 = tmp_class_creation_45__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_89 );
    tmp_cmp_In_89 = PySequence_Contains( tmp_compare_right_89, tmp_compare_left_89 );
    assert( !(tmp_cmp_In_89 == -1) );
    if ( tmp_cmp_In_89 == 1 )
    {
        goto condexpr_true_133;
    }
    else
    {
        goto condexpr_false_133;
    }
    condexpr_true_133:;
    tmp_dict_name_45 = tmp_class_creation_45__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_45 );
    tmp_key_name_45 = const_str_plain_metaclass;
    tmp_metaclass_name_45 = DICT_GET_ITEM( tmp_dict_name_45, tmp_key_name_45 );
    if ( tmp_metaclass_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_90;
    }
    goto condexpr_end_133;
    condexpr_false_133:;
    tmp_cond_value_45 = tmp_class_creation_45__bases;

    CHECK_OBJECT( tmp_cond_value_45 );
    tmp_cond_truth_45 = CHECK_IF_TRUE( tmp_cond_value_45 );
    if ( tmp_cond_truth_45 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_90;
    }
    if ( tmp_cond_truth_45 == 1 )
    {
        goto condexpr_true_134;
    }
    else
    {
        goto condexpr_false_134;
    }
    condexpr_true_134:;
    tmp_subscribed_name_45 = tmp_class_creation_45__bases;

    CHECK_OBJECT( tmp_subscribed_name_45 );
    tmp_subscript_name_45 = const_int_0;
    tmp_type_arg_45 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_45, tmp_subscript_name_45 );
    if ( tmp_type_arg_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_90;
    }
    tmp_metaclass_name_45 = BUILTIN_TYPE1( tmp_type_arg_45 );
    Py_DECREF( tmp_type_arg_45 );
    if ( tmp_metaclass_name_45 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_90;
    }
    goto condexpr_end_134;
    condexpr_false_134:;
    tmp_metaclass_name_45 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_45 );
    condexpr_end_134:;
    condexpr_end_133:;
    tmp_bases_name_45 = tmp_class_creation_45__bases;

    CHECK_OBJECT( tmp_bases_name_45 );
    tmp_assign_source_509 = SELECT_METACLASS( tmp_metaclass_name_45, tmp_bases_name_45 );
    if ( tmp_assign_source_509 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_45 );

        exception_lineno = 785;

        goto try_except_handler_90;
    }
    Py_DECREF( tmp_metaclass_name_45 );
    assert( tmp_class_creation_45__metaclass == NULL );
    tmp_class_creation_45__metaclass = tmp_assign_source_509;

    tmp_compare_left_90 = const_str_plain_metaclass;
    tmp_compare_right_90 = tmp_class_creation_45__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_90 );
    tmp_cmp_In_90 = PySequence_Contains( tmp_compare_right_90, tmp_compare_left_90 );
    assert( !(tmp_cmp_In_90 == -1) );
    if ( tmp_cmp_In_90 == 1 )
    {
        goto branch_yes_45;
    }
    else
    {
        goto branch_no_45;
    }
    branch_yes_45:;
    tmp_dictdel_dict = tmp_class_creation_45__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_90;
    }
    branch_no_45:;
    tmp_hasattr_source_45 = tmp_class_creation_45__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_45 );
    tmp_hasattr_attr_45 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_45, tmp_hasattr_attr_45 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_90;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_135;
    }
    else
    {
        goto condexpr_false_135;
    }
    condexpr_true_135:;
    tmp_source_name_64 = tmp_class_creation_45__metaclass;

    CHECK_OBJECT( tmp_source_name_64 );
    tmp_called_name_91 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain___prepare__ );
    if ( tmp_called_name_91 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_90;
    }
    tmp_args_name_89 = PyTuple_New( 2 );
    tmp_tuple_element_133 = const_str_plain_Operand;
    Py_INCREF( tmp_tuple_element_133 );
    PyTuple_SET_ITEM( tmp_args_name_89, 0, tmp_tuple_element_133 );
    tmp_tuple_element_133 = tmp_class_creation_45__bases;

    CHECK_OBJECT( tmp_tuple_element_133 );
    Py_INCREF( tmp_tuple_element_133 );
    PyTuple_SET_ITEM( tmp_args_name_89, 1, tmp_tuple_element_133 );
    tmp_kw_name_89 = tmp_class_creation_45__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_89 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 785;
    tmp_assign_source_510 = CALL_FUNCTION( tmp_called_name_91, tmp_args_name_89, tmp_kw_name_89 );
    Py_DECREF( tmp_called_name_91 );
    Py_DECREF( tmp_args_name_89 );
    if ( tmp_assign_source_510 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_90;
    }
    goto condexpr_end_135;
    condexpr_false_135:;
    tmp_assign_source_510 = PyDict_New();
    condexpr_end_135:;
    assert( tmp_class_creation_45__prepared == NULL );
    tmp_class_creation_45__prepared = tmp_assign_source_510;

    tmp_set_locals = tmp_class_creation_45__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_45);
    locals_dict_45 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_512 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_44_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_512 );
    outline_44_var___module__ = tmp_assign_source_512;

    tmp_assign_source_513 = const_str_digest_93e1278a5a7c6d8f54966c2ae018b500;
    assert( outline_44_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_513 );
    outline_44_var___doc__ = tmp_assign_source_513;

    tmp_assign_source_514 = const_str_plain_Operand;
    assert( outline_44_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_514 );
    outline_44_var___qualname__ = tmp_assign_source_514;

    tmp_assign_source_515 = const_tuple_str_plain_op_str_plain_expr_tuple;
    assert( outline_44_var_fields == NULL );
    Py_INCREF( tmp_assign_source_515 );
    outline_44_var_fields = tmp_assign_source_515;

    // Tried code:
    tmp_called_name_92 = tmp_class_creation_45__metaclass;

    CHECK_OBJECT( tmp_called_name_92 );
    tmp_args_name_90 = PyTuple_New( 3 );
    tmp_tuple_element_134 = const_str_plain_Operand;
    Py_INCREF( tmp_tuple_element_134 );
    PyTuple_SET_ITEM( tmp_args_name_90, 0, tmp_tuple_element_134 );
    tmp_tuple_element_134 = tmp_class_creation_45__bases;

    CHECK_OBJECT( tmp_tuple_element_134 );
    Py_INCREF( tmp_tuple_element_134 );
    PyTuple_SET_ITEM( tmp_args_name_90, 1, tmp_tuple_element_134 );
    tmp_tuple_element_134 = locals_dict_45;
    Py_INCREF( tmp_tuple_element_134 );
    if ( outline_44_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_134,
            const_str_plain___qualname__,
            outline_44_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_134,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_134,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_90 );
        Py_DECREF( tmp_tuple_element_134 );

        exception_lineno = 785;

        goto try_except_handler_91;
    }
    if ( outline_44_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_134,
            const_str_plain___module__,
            outline_44_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_134,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_134,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_90 );
        Py_DECREF( tmp_tuple_element_134 );

        exception_lineno = 785;

        goto try_except_handler_91;
    }
    if ( outline_44_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_134,
            const_str_plain___doc__,
            outline_44_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_134,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_134,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_90 );
        Py_DECREF( tmp_tuple_element_134 );

        exception_lineno = 785;

        goto try_except_handler_91;
    }
    if ( outline_44_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_134,
            const_str_plain_fields,
            outline_44_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_134,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_134,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_90 );
        Py_DECREF( tmp_tuple_element_134 );

        exception_lineno = 785;

        goto try_except_handler_91;
    }
    PyTuple_SET_ITEM( tmp_args_name_90, 2, tmp_tuple_element_134 );
    tmp_kw_name_90 = tmp_class_creation_45__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_90 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 785;
    tmp_assign_source_516 = CALL_FUNCTION( tmp_called_name_92, tmp_args_name_90, tmp_kw_name_90 );
    Py_DECREF( tmp_args_name_90 );
    if ( tmp_assign_source_516 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 785;

        goto try_except_handler_91;
    }
    assert( outline_44_var___class__ == NULL );
    outline_44_var___class__ = tmp_assign_source_516;

    tmp_outline_return_value_45 = outline_44_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_45 );
    Py_INCREF( tmp_outline_return_value_45 );
    goto try_return_handler_91;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_91:;
    CHECK_OBJECT( (PyObject *)outline_44_var___class__ );
    Py_DECREF( outline_44_var___class__ );
    outline_44_var___class__ = NULL;

    Py_XDECREF( outline_44_var___qualname__ );
    outline_44_var___qualname__ = NULL;

    Py_XDECREF( outline_44_var___module__ );
    outline_44_var___module__ = NULL;

    Py_XDECREF( outline_44_var___doc__ );
    outline_44_var___doc__ = NULL;

    Py_XDECREF( outline_44_var_fields );
    outline_44_var_fields = NULL;

    goto outline_result_45;
    // Exception handler code:
    try_except_handler_91:;
    exception_keeper_type_90 = exception_type;
    exception_keeper_value_90 = exception_value;
    exception_keeper_tb_90 = exception_tb;
    exception_keeper_lineno_90 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_44_var___qualname__ );
    outline_44_var___qualname__ = NULL;

    Py_XDECREF( outline_44_var___module__ );
    outline_44_var___module__ = NULL;

    Py_XDECREF( outline_44_var___doc__ );
    outline_44_var___doc__ = NULL;

    Py_XDECREF( outline_44_var_fields );
    outline_44_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_90;
    exception_value = exception_keeper_value_90;
    exception_tb = exception_keeper_tb_90;
    exception_lineno = exception_keeper_lineno_90;

    goto outline_exception_45;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_45:;
    exception_lineno = 785;
    goto try_except_handler_90;
    outline_result_45:;
    tmp_assign_source_511 = tmp_outline_return_value_45;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Operand, tmp_assign_source_511 );
    goto try_end_46;
    // Exception handler code:
    try_except_handler_90:;
    exception_keeper_type_91 = exception_type;
    exception_keeper_value_91 = exception_value;
    exception_keeper_tb_91 = exception_tb;
    exception_keeper_lineno_91 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_45__bases );
    tmp_class_creation_45__bases = NULL;

    Py_XDECREF( tmp_class_creation_45__class_decl_dict );
    tmp_class_creation_45__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_45__metaclass );
    tmp_class_creation_45__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_45__prepared );
    tmp_class_creation_45__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_91;
    exception_value = exception_keeper_value_91;
    exception_tb = exception_keeper_tb_91;
    exception_lineno = exception_keeper_lineno_91;

    goto frame_exception_exit_1;
    // End of try:
    try_end_46:;
    Py_XDECREF( tmp_class_creation_45__bases );
    tmp_class_creation_45__bases = NULL;

    Py_XDECREF( tmp_class_creation_45__class_decl_dict );
    tmp_class_creation_45__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_45__metaclass );
    tmp_class_creation_45__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_45__prepared );
    tmp_class_creation_45__prepared = NULL;

    tmp_source_name_65 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Operand );

    if (unlikely( tmp_source_name_65 == NULL ))
    {
        tmp_source_name_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Operand );
    }

    if ( tmp_source_name_65 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Operand" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 790;

        goto frame_exception_exit_1;
    }

    tmp_assign_source_517 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain___doc__ );
    if ( tmp_assign_source_517 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 790;

        goto frame_exception_exit_1;
    }
    assert( tmp_inplace_assign_attr_1__start == NULL );
    tmp_inplace_assign_attr_1__start = tmp_assign_source_517;

    // Tried code:
    tmp_left_name_1 = tmp_inplace_assign_attr_1__start;

    CHECK_OBJECT( tmp_left_name_1 );
    tmp_left_name_2 = const_str_digest_e71cef5b10b09470a885f6bd4a9f3802;
    tmp_source_name_66 = const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
    tmp_called_name_93 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_join );
    assert( tmp_called_name_93 != NULL );
    tmp_called_name_94 = LOOKUP_BUILTIN( const_str_plain_sorted );
    assert( tmp_called_name_94 != NULL );
    tmp_set_arg_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__binop_to_func );

    if (unlikely( tmp_set_arg_1 == NULL ))
    {
        tmp_set_arg_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__binop_to_func );
    }

    if ( tmp_set_arg_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_binop_to_func" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 791;

        goto try_except_handler_92;
    }

    tmp_left_name_4 = PySet_New( tmp_set_arg_1 );
    if ( tmp_left_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;

        goto try_except_handler_92;
    }
    tmp_set_arg_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__uaop_to_func );

    if (unlikely( tmp_set_arg_2 == NULL ))
    {
        tmp_set_arg_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__uaop_to_func );
    }

    if ( tmp_set_arg_2 == NULL )
    {
        Py_DECREF( tmp_left_name_4 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_uaop_to_func" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 792;

        goto try_except_handler_92;
    }

    tmp_right_name_3 = PySet_New( tmp_set_arg_2 );
    if ( tmp_right_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_4 );

        exception_lineno = 792;

        goto try_except_handler_92;
    }
    tmp_left_name_3 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_4, tmp_right_name_3 );
    Py_DECREF( tmp_left_name_4 );
    Py_DECREF( tmp_right_name_3 );
    if ( tmp_left_name_3 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;

        goto try_except_handler_92;
    }
    tmp_set_arg_3 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__cmpop_to_func );

    if (unlikely( tmp_set_arg_3 == NULL ))
    {
        tmp_set_arg_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__cmpop_to_func );
    }

    if ( tmp_set_arg_3 == NULL )
    {
        Py_DECREF( tmp_left_name_3 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_cmpop_to_func" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 792;

        goto try_except_handler_92;
    }

    tmp_right_name_4 = PySet_New( tmp_set_arg_3 );
    if ( tmp_right_name_4 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_left_name_3 );

        exception_lineno = 792;

        goto try_except_handler_92;
    }
    tmp_iter_arg_1 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_3, tmp_right_name_4 );
    Py_DECREF( tmp_left_name_3 );
    Py_DECREF( tmp_right_name_4 );
    if ( tmp_iter_arg_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 792;

        goto try_except_handler_92;
    }
    tmp_assign_source_519 = MAKE_ITERATOR( tmp_iter_arg_1 );
    Py_DECREF( tmp_iter_arg_1 );
    if ( tmp_assign_source_519 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;

        goto try_except_handler_92;
    }
    assert( tmp_genexpr_1__$0 == NULL );
    tmp_genexpr_1__$0 = tmp_assign_source_519;

    // Tried code:
    tmp_outline_return_value_46 = Nuitka_Generator_New(
        jinja2$nodes$$$genexpr_1_genexpr_context,
        module_jinja2$nodes,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_angle_genexpr,
#endif
        codeobj_f95dd93b7501cf3b285dffef18fa9e57,
        1
    );

    ((struct Nuitka_GeneratorObject *)tmp_outline_return_value_46)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
    assert( Py_SIZE( tmp_outline_return_value_46 ) >= 1 ); 


    goto try_return_handler_93;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_93:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_46;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_result_46:;
    tmp_args_element_name_6 = tmp_outline_return_value_46;
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 791;
    {
        PyObject *call_args[] = { tmp_args_element_name_6 };
        tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_94, call_args );
    }

    Py_DECREF( tmp_args_element_name_6 );
    if ( tmp_args_element_name_5 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_called_name_93 );

        exception_lineno = 791;

        goto try_except_handler_92;
    }
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 791;
    {
        PyObject *call_args[] = { tmp_args_element_name_5 };
        tmp_right_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_93, call_args );
    }

    Py_DECREF( tmp_called_name_93 );
    Py_DECREF( tmp_args_element_name_5 );
    if ( tmp_right_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 791;

        goto try_except_handler_92;
    }
    tmp_right_name_1 = BINARY_OPERATION_ADD( tmp_left_name_2, tmp_right_name_2 );
    Py_DECREF( tmp_right_name_2 );
    if ( tmp_right_name_1 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 790;

        goto try_except_handler_92;
    }
    tmp_assign_source_518 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_1, tmp_right_name_1 );
    Py_DECREF( tmp_right_name_1 );
    if ( tmp_assign_source_518 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 790;

        goto try_except_handler_92;
    }
    assert( tmp_inplace_assign_attr_1__end == NULL );
    tmp_inplace_assign_attr_1__end = tmp_assign_source_518;

    // Tried code:
    tmp_compare_left_91 = tmp_inplace_assign_attr_1__start;

    CHECK_OBJECT( tmp_compare_left_91 );
    tmp_compare_right_91 = tmp_inplace_assign_attr_1__end;

    CHECK_OBJECT( tmp_compare_right_91 );
    tmp_isnot_1 = ( tmp_compare_left_91 != tmp_compare_right_91 );
    if ( tmp_isnot_1 )
    {
        goto branch_yes_46;
    }
    else
    {
        goto branch_no_46;
    }
    branch_yes_46:;
    tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;

    CHECK_OBJECT( tmp_assattr_name_1 );
    tmp_assattr_target_1 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Operand );

    if (unlikely( tmp_assattr_target_1 == NULL ))
    {
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Operand );
    }

    if ( tmp_assattr_target_1 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Operand" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 790;

        goto try_except_handler_94;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain___doc__, tmp_assattr_name_1 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 790;

        goto try_except_handler_94;
    }
    branch_no_46:;
    goto try_end_47;
    // Exception handler code:
    try_except_handler_94:;
    exception_keeper_type_92 = exception_type;
    exception_keeper_value_92 = exception_value;
    exception_keeper_tb_92 = exception_tb;
    exception_keeper_lineno_92 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_92;
    exception_value = exception_keeper_value_92;
    exception_tb = exception_keeper_tb_92;
    exception_lineno = exception_keeper_lineno_92;

    goto try_except_handler_92;
    // End of try:
    try_end_47:;
    goto try_end_48;
    // Exception handler code:
    try_except_handler_92:;
    exception_keeper_type_93 = exception_type;
    exception_keeper_value_93 = exception_value;
    exception_keeper_tb_93 = exception_tb;
    exception_keeper_lineno_93 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_93;
    exception_value = exception_keeper_value_93;
    exception_tb = exception_keeper_tb_93;
    exception_lineno = exception_keeper_lineno_93;

    goto frame_exception_exit_1;
    // End of try:
    try_end_48:;
    Py_XDECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    Py_XDECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Tried code:
    tmp_assign_source_520 = PyTuple_New( 1 );
    tmp_tuple_element_135 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_135 == NULL ))
    {
        tmp_tuple_element_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_135 == NULL )
    {
        Py_DECREF( tmp_assign_source_520 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 795;

        goto try_except_handler_95;
    }

    Py_INCREF( tmp_tuple_element_135 );
    PyTuple_SET_ITEM( tmp_assign_source_520, 0, tmp_tuple_element_135 );
    assert( tmp_class_creation_46__bases == NULL );
    tmp_class_creation_46__bases = tmp_assign_source_520;

    tmp_assign_source_521 = PyDict_New();
    assert( tmp_class_creation_46__class_decl_dict == NULL );
    tmp_class_creation_46__class_decl_dict = tmp_assign_source_521;

    tmp_compare_left_92 = const_str_plain_metaclass;
    tmp_compare_right_92 = tmp_class_creation_46__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_92 );
    tmp_cmp_In_91 = PySequence_Contains( tmp_compare_right_92, tmp_compare_left_92 );
    assert( !(tmp_cmp_In_91 == -1) );
    if ( tmp_cmp_In_91 == 1 )
    {
        goto condexpr_true_136;
    }
    else
    {
        goto condexpr_false_136;
    }
    condexpr_true_136:;
    tmp_dict_name_46 = tmp_class_creation_46__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_46 );
    tmp_key_name_46 = const_str_plain_metaclass;
    tmp_metaclass_name_46 = DICT_GET_ITEM( tmp_dict_name_46, tmp_key_name_46 );
    if ( tmp_metaclass_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_95;
    }
    goto condexpr_end_136;
    condexpr_false_136:;
    tmp_cond_value_46 = tmp_class_creation_46__bases;

    CHECK_OBJECT( tmp_cond_value_46 );
    tmp_cond_truth_46 = CHECK_IF_TRUE( tmp_cond_value_46 );
    if ( tmp_cond_truth_46 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_95;
    }
    if ( tmp_cond_truth_46 == 1 )
    {
        goto condexpr_true_137;
    }
    else
    {
        goto condexpr_false_137;
    }
    condexpr_true_137:;
    tmp_subscribed_name_46 = tmp_class_creation_46__bases;

    CHECK_OBJECT( tmp_subscribed_name_46 );
    tmp_subscript_name_46 = const_int_0;
    tmp_type_arg_46 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_46, tmp_subscript_name_46 );
    if ( tmp_type_arg_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_95;
    }
    tmp_metaclass_name_46 = BUILTIN_TYPE1( tmp_type_arg_46 );
    Py_DECREF( tmp_type_arg_46 );
    if ( tmp_metaclass_name_46 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_95;
    }
    goto condexpr_end_137;
    condexpr_false_137:;
    tmp_metaclass_name_46 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_46 );
    condexpr_end_137:;
    condexpr_end_136:;
    tmp_bases_name_46 = tmp_class_creation_46__bases;

    CHECK_OBJECT( tmp_bases_name_46 );
    tmp_assign_source_522 = SELECT_METACLASS( tmp_metaclass_name_46, tmp_bases_name_46 );
    if ( tmp_assign_source_522 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_46 );

        exception_lineno = 795;

        goto try_except_handler_95;
    }
    Py_DECREF( tmp_metaclass_name_46 );
    assert( tmp_class_creation_46__metaclass == NULL );
    tmp_class_creation_46__metaclass = tmp_assign_source_522;

    tmp_compare_left_93 = const_str_plain_metaclass;
    tmp_compare_right_93 = tmp_class_creation_46__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_93 );
    tmp_cmp_In_92 = PySequence_Contains( tmp_compare_right_93, tmp_compare_left_93 );
    assert( !(tmp_cmp_In_92 == -1) );
    if ( tmp_cmp_In_92 == 1 )
    {
        goto branch_yes_47;
    }
    else
    {
        goto branch_no_47;
    }
    branch_yes_47:;
    tmp_dictdel_dict = tmp_class_creation_46__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_95;
    }
    branch_no_47:;
    tmp_hasattr_source_46 = tmp_class_creation_46__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_46 );
    tmp_hasattr_attr_46 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_46, tmp_hasattr_attr_46 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_95;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_138;
    }
    else
    {
        goto condexpr_false_138;
    }
    condexpr_true_138:;
    tmp_source_name_67 = tmp_class_creation_46__metaclass;

    CHECK_OBJECT( tmp_source_name_67 );
    tmp_called_name_95 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain___prepare__ );
    if ( tmp_called_name_95 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_95;
    }
    tmp_args_name_91 = PyTuple_New( 2 );
    tmp_tuple_element_136 = const_str_plain_Mul;
    Py_INCREF( tmp_tuple_element_136 );
    PyTuple_SET_ITEM( tmp_args_name_91, 0, tmp_tuple_element_136 );
    tmp_tuple_element_136 = tmp_class_creation_46__bases;

    CHECK_OBJECT( tmp_tuple_element_136 );
    Py_INCREF( tmp_tuple_element_136 );
    PyTuple_SET_ITEM( tmp_args_name_91, 1, tmp_tuple_element_136 );
    tmp_kw_name_91 = tmp_class_creation_46__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_91 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 795;
    tmp_assign_source_523 = CALL_FUNCTION( tmp_called_name_95, tmp_args_name_91, tmp_kw_name_91 );
    Py_DECREF( tmp_called_name_95 );
    Py_DECREF( tmp_args_name_91 );
    if ( tmp_assign_source_523 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_95;
    }
    goto condexpr_end_138;
    condexpr_false_138:;
    tmp_assign_source_523 = PyDict_New();
    condexpr_end_138:;
    assert( tmp_class_creation_46__prepared == NULL );
    tmp_class_creation_46__prepared = tmp_assign_source_523;

    tmp_set_locals = tmp_class_creation_46__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_46);
    locals_dict_46 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_525 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_45_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_525 );
    outline_45_var___module__ = tmp_assign_source_525;

    tmp_assign_source_526 = const_str_digest_b4b9ffa6f1ca14bbe6420a108432db56;
    assert( outline_45_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_526 );
    outline_45_var___doc__ = tmp_assign_source_526;

    tmp_assign_source_527 = const_str_plain_Mul;
    assert( outline_45_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_527 );
    outline_45_var___qualname__ = tmp_assign_source_527;

    tmp_assign_source_528 = const_str_chr_42;
    assert( outline_45_var_operator == NULL );
    Py_INCREF( tmp_assign_source_528 );
    outline_45_var_operator = tmp_assign_source_528;

    // Tried code:
    tmp_called_name_96 = tmp_class_creation_46__metaclass;

    CHECK_OBJECT( tmp_called_name_96 );
    tmp_args_name_92 = PyTuple_New( 3 );
    tmp_tuple_element_137 = const_str_plain_Mul;
    Py_INCREF( tmp_tuple_element_137 );
    PyTuple_SET_ITEM( tmp_args_name_92, 0, tmp_tuple_element_137 );
    tmp_tuple_element_137 = tmp_class_creation_46__bases;

    CHECK_OBJECT( tmp_tuple_element_137 );
    Py_INCREF( tmp_tuple_element_137 );
    PyTuple_SET_ITEM( tmp_args_name_92, 1, tmp_tuple_element_137 );
    tmp_tuple_element_137 = locals_dict_46;
    Py_INCREF( tmp_tuple_element_137 );
    if ( outline_45_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_137,
            const_str_plain___qualname__,
            outline_45_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_137,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_137,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_92 );
        Py_DECREF( tmp_tuple_element_137 );

        exception_lineno = 795;

        goto try_except_handler_96;
    }
    if ( outline_45_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_137,
            const_str_plain___module__,
            outline_45_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_137,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_137,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_92 );
        Py_DECREF( tmp_tuple_element_137 );

        exception_lineno = 795;

        goto try_except_handler_96;
    }
    if ( outline_45_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_137,
            const_str_plain___doc__,
            outline_45_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_137,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_137,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_92 );
        Py_DECREF( tmp_tuple_element_137 );

        exception_lineno = 795;

        goto try_except_handler_96;
    }
    if ( outline_45_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_137,
            const_str_plain_operator,
            outline_45_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_137,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_137,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_92 );
        Py_DECREF( tmp_tuple_element_137 );

        exception_lineno = 795;

        goto try_except_handler_96;
    }
    PyTuple_SET_ITEM( tmp_args_name_92, 2, tmp_tuple_element_137 );
    tmp_kw_name_92 = tmp_class_creation_46__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_92 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 795;
    tmp_assign_source_529 = CALL_FUNCTION( tmp_called_name_96, tmp_args_name_92, tmp_kw_name_92 );
    Py_DECREF( tmp_args_name_92 );
    if ( tmp_assign_source_529 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 795;

        goto try_except_handler_96;
    }
    assert( outline_45_var___class__ == NULL );
    outline_45_var___class__ = tmp_assign_source_529;

    tmp_outline_return_value_47 = outline_45_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_47 );
    Py_INCREF( tmp_outline_return_value_47 );
    goto try_return_handler_96;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_96:;
    CHECK_OBJECT( (PyObject *)outline_45_var___class__ );
    Py_DECREF( outline_45_var___class__ );
    outline_45_var___class__ = NULL;

    Py_XDECREF( outline_45_var___qualname__ );
    outline_45_var___qualname__ = NULL;

    Py_XDECREF( outline_45_var___module__ );
    outline_45_var___module__ = NULL;

    Py_XDECREF( outline_45_var___doc__ );
    outline_45_var___doc__ = NULL;

    Py_XDECREF( outline_45_var_operator );
    outline_45_var_operator = NULL;

    goto outline_result_47;
    // Exception handler code:
    try_except_handler_96:;
    exception_keeper_type_94 = exception_type;
    exception_keeper_value_94 = exception_value;
    exception_keeper_tb_94 = exception_tb;
    exception_keeper_lineno_94 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_45_var___qualname__ );
    outline_45_var___qualname__ = NULL;

    Py_XDECREF( outline_45_var___module__ );
    outline_45_var___module__ = NULL;

    Py_XDECREF( outline_45_var___doc__ );
    outline_45_var___doc__ = NULL;

    Py_XDECREF( outline_45_var_operator );
    outline_45_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_94;
    exception_value = exception_keeper_value_94;
    exception_tb = exception_keeper_tb_94;
    exception_lineno = exception_keeper_lineno_94;

    goto outline_exception_46;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_46:;
    exception_lineno = 795;
    goto try_except_handler_95;
    outline_result_47:;
    tmp_assign_source_524 = tmp_outline_return_value_47;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Mul, tmp_assign_source_524 );
    goto try_end_49;
    // Exception handler code:
    try_except_handler_95:;
    exception_keeper_type_95 = exception_type;
    exception_keeper_value_95 = exception_value;
    exception_keeper_tb_95 = exception_tb;
    exception_keeper_lineno_95 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_46__bases );
    tmp_class_creation_46__bases = NULL;

    Py_XDECREF( tmp_class_creation_46__class_decl_dict );
    tmp_class_creation_46__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_46__metaclass );
    tmp_class_creation_46__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_46__prepared );
    tmp_class_creation_46__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_95;
    exception_value = exception_keeper_value_95;
    exception_tb = exception_keeper_tb_95;
    exception_lineno = exception_keeper_lineno_95;

    goto frame_exception_exit_1;
    // End of try:
    try_end_49:;
    Py_XDECREF( tmp_class_creation_46__bases );
    tmp_class_creation_46__bases = NULL;

    Py_XDECREF( tmp_class_creation_46__class_decl_dict );
    tmp_class_creation_46__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_46__metaclass );
    tmp_class_creation_46__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_46__prepared );
    tmp_class_creation_46__prepared = NULL;

    // Tried code:
    tmp_assign_source_530 = PyTuple_New( 1 );
    tmp_tuple_element_138 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_138 == NULL ))
    {
        tmp_tuple_element_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_138 == NULL )
    {
        Py_DECREF( tmp_assign_source_530 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 800;

        goto try_except_handler_97;
    }

    Py_INCREF( tmp_tuple_element_138 );
    PyTuple_SET_ITEM( tmp_assign_source_530, 0, tmp_tuple_element_138 );
    assert( tmp_class_creation_47__bases == NULL );
    tmp_class_creation_47__bases = tmp_assign_source_530;

    tmp_assign_source_531 = PyDict_New();
    assert( tmp_class_creation_47__class_decl_dict == NULL );
    tmp_class_creation_47__class_decl_dict = tmp_assign_source_531;

    tmp_compare_left_94 = const_str_plain_metaclass;
    tmp_compare_right_94 = tmp_class_creation_47__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_94 );
    tmp_cmp_In_93 = PySequence_Contains( tmp_compare_right_94, tmp_compare_left_94 );
    assert( !(tmp_cmp_In_93 == -1) );
    if ( tmp_cmp_In_93 == 1 )
    {
        goto condexpr_true_139;
    }
    else
    {
        goto condexpr_false_139;
    }
    condexpr_true_139:;
    tmp_dict_name_47 = tmp_class_creation_47__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_47 );
    tmp_key_name_47 = const_str_plain_metaclass;
    tmp_metaclass_name_47 = DICT_GET_ITEM( tmp_dict_name_47, tmp_key_name_47 );
    if ( tmp_metaclass_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_97;
    }
    goto condexpr_end_139;
    condexpr_false_139:;
    tmp_cond_value_47 = tmp_class_creation_47__bases;

    CHECK_OBJECT( tmp_cond_value_47 );
    tmp_cond_truth_47 = CHECK_IF_TRUE( tmp_cond_value_47 );
    if ( tmp_cond_truth_47 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_97;
    }
    if ( tmp_cond_truth_47 == 1 )
    {
        goto condexpr_true_140;
    }
    else
    {
        goto condexpr_false_140;
    }
    condexpr_true_140:;
    tmp_subscribed_name_47 = tmp_class_creation_47__bases;

    CHECK_OBJECT( tmp_subscribed_name_47 );
    tmp_subscript_name_47 = const_int_0;
    tmp_type_arg_47 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_47, tmp_subscript_name_47 );
    if ( tmp_type_arg_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_97;
    }
    tmp_metaclass_name_47 = BUILTIN_TYPE1( tmp_type_arg_47 );
    Py_DECREF( tmp_type_arg_47 );
    if ( tmp_metaclass_name_47 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_97;
    }
    goto condexpr_end_140;
    condexpr_false_140:;
    tmp_metaclass_name_47 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_47 );
    condexpr_end_140:;
    condexpr_end_139:;
    tmp_bases_name_47 = tmp_class_creation_47__bases;

    CHECK_OBJECT( tmp_bases_name_47 );
    tmp_assign_source_532 = SELECT_METACLASS( tmp_metaclass_name_47, tmp_bases_name_47 );
    if ( tmp_assign_source_532 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_47 );

        exception_lineno = 800;

        goto try_except_handler_97;
    }
    Py_DECREF( tmp_metaclass_name_47 );
    assert( tmp_class_creation_47__metaclass == NULL );
    tmp_class_creation_47__metaclass = tmp_assign_source_532;

    tmp_compare_left_95 = const_str_plain_metaclass;
    tmp_compare_right_95 = tmp_class_creation_47__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_95 );
    tmp_cmp_In_94 = PySequence_Contains( tmp_compare_right_95, tmp_compare_left_95 );
    assert( !(tmp_cmp_In_94 == -1) );
    if ( tmp_cmp_In_94 == 1 )
    {
        goto branch_yes_48;
    }
    else
    {
        goto branch_no_48;
    }
    branch_yes_48:;
    tmp_dictdel_dict = tmp_class_creation_47__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_97;
    }
    branch_no_48:;
    tmp_hasattr_source_47 = tmp_class_creation_47__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_47 );
    tmp_hasattr_attr_47 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_47, tmp_hasattr_attr_47 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_97;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_141;
    }
    else
    {
        goto condexpr_false_141;
    }
    condexpr_true_141:;
    tmp_source_name_68 = tmp_class_creation_47__metaclass;

    CHECK_OBJECT( tmp_source_name_68 );
    tmp_called_name_97 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain___prepare__ );
    if ( tmp_called_name_97 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_97;
    }
    tmp_args_name_93 = PyTuple_New( 2 );
    tmp_tuple_element_139 = const_str_plain_Div;
    Py_INCREF( tmp_tuple_element_139 );
    PyTuple_SET_ITEM( tmp_args_name_93, 0, tmp_tuple_element_139 );
    tmp_tuple_element_139 = tmp_class_creation_47__bases;

    CHECK_OBJECT( tmp_tuple_element_139 );
    Py_INCREF( tmp_tuple_element_139 );
    PyTuple_SET_ITEM( tmp_args_name_93, 1, tmp_tuple_element_139 );
    tmp_kw_name_93 = tmp_class_creation_47__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_93 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 800;
    tmp_assign_source_533 = CALL_FUNCTION( tmp_called_name_97, tmp_args_name_93, tmp_kw_name_93 );
    Py_DECREF( tmp_called_name_97 );
    Py_DECREF( tmp_args_name_93 );
    if ( tmp_assign_source_533 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_97;
    }
    goto condexpr_end_141;
    condexpr_false_141:;
    tmp_assign_source_533 = PyDict_New();
    condexpr_end_141:;
    assert( tmp_class_creation_47__prepared == NULL );
    tmp_class_creation_47__prepared = tmp_assign_source_533;

    tmp_set_locals = tmp_class_creation_47__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_47);
    locals_dict_47 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_535 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_46_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_535 );
    outline_46_var___module__ = tmp_assign_source_535;

    tmp_assign_source_536 = const_str_digest_ce1a7c91f9f5083b68e2a321a008fae9;
    assert( outline_46_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_536 );
    outline_46_var___doc__ = tmp_assign_source_536;

    tmp_assign_source_537 = const_str_plain_Div;
    assert( outline_46_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_537 );
    outline_46_var___qualname__ = tmp_assign_source_537;

    tmp_assign_source_538 = const_str_chr_47;
    assert( outline_46_var_operator == NULL );
    Py_INCREF( tmp_assign_source_538 );
    outline_46_var_operator = tmp_assign_source_538;

    // Tried code:
    tmp_called_name_98 = tmp_class_creation_47__metaclass;

    CHECK_OBJECT( tmp_called_name_98 );
    tmp_args_name_94 = PyTuple_New( 3 );
    tmp_tuple_element_140 = const_str_plain_Div;
    Py_INCREF( tmp_tuple_element_140 );
    PyTuple_SET_ITEM( tmp_args_name_94, 0, tmp_tuple_element_140 );
    tmp_tuple_element_140 = tmp_class_creation_47__bases;

    CHECK_OBJECT( tmp_tuple_element_140 );
    Py_INCREF( tmp_tuple_element_140 );
    PyTuple_SET_ITEM( tmp_args_name_94, 1, tmp_tuple_element_140 );
    tmp_tuple_element_140 = locals_dict_47;
    Py_INCREF( tmp_tuple_element_140 );
    if ( outline_46_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_140,
            const_str_plain___qualname__,
            outline_46_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_140,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_140,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_94 );
        Py_DECREF( tmp_tuple_element_140 );

        exception_lineno = 800;

        goto try_except_handler_98;
    }
    if ( outline_46_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_140,
            const_str_plain___module__,
            outline_46_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_140,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_140,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_94 );
        Py_DECREF( tmp_tuple_element_140 );

        exception_lineno = 800;

        goto try_except_handler_98;
    }
    if ( outline_46_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_140,
            const_str_plain___doc__,
            outline_46_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_140,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_140,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_94 );
        Py_DECREF( tmp_tuple_element_140 );

        exception_lineno = 800;

        goto try_except_handler_98;
    }
    if ( outline_46_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_140,
            const_str_plain_operator,
            outline_46_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_140,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_140,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_94 );
        Py_DECREF( tmp_tuple_element_140 );

        exception_lineno = 800;

        goto try_except_handler_98;
    }
    PyTuple_SET_ITEM( tmp_args_name_94, 2, tmp_tuple_element_140 );
    tmp_kw_name_94 = tmp_class_creation_47__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_94 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 800;
    tmp_assign_source_539 = CALL_FUNCTION( tmp_called_name_98, tmp_args_name_94, tmp_kw_name_94 );
    Py_DECREF( tmp_args_name_94 );
    if ( tmp_assign_source_539 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 800;

        goto try_except_handler_98;
    }
    assert( outline_46_var___class__ == NULL );
    outline_46_var___class__ = tmp_assign_source_539;

    tmp_outline_return_value_48 = outline_46_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_48 );
    Py_INCREF( tmp_outline_return_value_48 );
    goto try_return_handler_98;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_98:;
    CHECK_OBJECT( (PyObject *)outline_46_var___class__ );
    Py_DECREF( outline_46_var___class__ );
    outline_46_var___class__ = NULL;

    Py_XDECREF( outline_46_var___qualname__ );
    outline_46_var___qualname__ = NULL;

    Py_XDECREF( outline_46_var___module__ );
    outline_46_var___module__ = NULL;

    Py_XDECREF( outline_46_var___doc__ );
    outline_46_var___doc__ = NULL;

    Py_XDECREF( outline_46_var_operator );
    outline_46_var_operator = NULL;

    goto outline_result_48;
    // Exception handler code:
    try_except_handler_98:;
    exception_keeper_type_96 = exception_type;
    exception_keeper_value_96 = exception_value;
    exception_keeper_tb_96 = exception_tb;
    exception_keeper_lineno_96 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_46_var___qualname__ );
    outline_46_var___qualname__ = NULL;

    Py_XDECREF( outline_46_var___module__ );
    outline_46_var___module__ = NULL;

    Py_XDECREF( outline_46_var___doc__ );
    outline_46_var___doc__ = NULL;

    Py_XDECREF( outline_46_var_operator );
    outline_46_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_96;
    exception_value = exception_keeper_value_96;
    exception_tb = exception_keeper_tb_96;
    exception_lineno = exception_keeper_lineno_96;

    goto outline_exception_47;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_47:;
    exception_lineno = 800;
    goto try_except_handler_97;
    outline_result_48:;
    tmp_assign_source_534 = tmp_outline_return_value_48;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Div, tmp_assign_source_534 );
    goto try_end_50;
    // Exception handler code:
    try_except_handler_97:;
    exception_keeper_type_97 = exception_type;
    exception_keeper_value_97 = exception_value;
    exception_keeper_tb_97 = exception_tb;
    exception_keeper_lineno_97 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_47__bases );
    tmp_class_creation_47__bases = NULL;

    Py_XDECREF( tmp_class_creation_47__class_decl_dict );
    tmp_class_creation_47__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_47__metaclass );
    tmp_class_creation_47__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_47__prepared );
    tmp_class_creation_47__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_97;
    exception_value = exception_keeper_value_97;
    exception_tb = exception_keeper_tb_97;
    exception_lineno = exception_keeper_lineno_97;

    goto frame_exception_exit_1;
    // End of try:
    try_end_50:;
    Py_XDECREF( tmp_class_creation_47__bases );
    tmp_class_creation_47__bases = NULL;

    Py_XDECREF( tmp_class_creation_47__class_decl_dict );
    tmp_class_creation_47__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_47__metaclass );
    tmp_class_creation_47__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_47__prepared );
    tmp_class_creation_47__prepared = NULL;

    // Tried code:
    tmp_assign_source_540 = PyTuple_New( 1 );
    tmp_tuple_element_141 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_141 == NULL ))
    {
        tmp_tuple_element_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_141 == NULL )
    {
        Py_DECREF( tmp_assign_source_540 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 805;

        goto try_except_handler_99;
    }

    Py_INCREF( tmp_tuple_element_141 );
    PyTuple_SET_ITEM( tmp_assign_source_540, 0, tmp_tuple_element_141 );
    assert( tmp_class_creation_48__bases == NULL );
    tmp_class_creation_48__bases = tmp_assign_source_540;

    tmp_assign_source_541 = PyDict_New();
    assert( tmp_class_creation_48__class_decl_dict == NULL );
    tmp_class_creation_48__class_decl_dict = tmp_assign_source_541;

    tmp_compare_left_96 = const_str_plain_metaclass;
    tmp_compare_right_96 = tmp_class_creation_48__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_96 );
    tmp_cmp_In_95 = PySequence_Contains( tmp_compare_right_96, tmp_compare_left_96 );
    assert( !(tmp_cmp_In_95 == -1) );
    if ( tmp_cmp_In_95 == 1 )
    {
        goto condexpr_true_142;
    }
    else
    {
        goto condexpr_false_142;
    }
    condexpr_true_142:;
    tmp_dict_name_48 = tmp_class_creation_48__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_48 );
    tmp_key_name_48 = const_str_plain_metaclass;
    tmp_metaclass_name_48 = DICT_GET_ITEM( tmp_dict_name_48, tmp_key_name_48 );
    if ( tmp_metaclass_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_99;
    }
    goto condexpr_end_142;
    condexpr_false_142:;
    tmp_cond_value_48 = tmp_class_creation_48__bases;

    CHECK_OBJECT( tmp_cond_value_48 );
    tmp_cond_truth_48 = CHECK_IF_TRUE( tmp_cond_value_48 );
    if ( tmp_cond_truth_48 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_99;
    }
    if ( tmp_cond_truth_48 == 1 )
    {
        goto condexpr_true_143;
    }
    else
    {
        goto condexpr_false_143;
    }
    condexpr_true_143:;
    tmp_subscribed_name_48 = tmp_class_creation_48__bases;

    CHECK_OBJECT( tmp_subscribed_name_48 );
    tmp_subscript_name_48 = const_int_0;
    tmp_type_arg_48 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_48, tmp_subscript_name_48 );
    if ( tmp_type_arg_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_99;
    }
    tmp_metaclass_name_48 = BUILTIN_TYPE1( tmp_type_arg_48 );
    Py_DECREF( tmp_type_arg_48 );
    if ( tmp_metaclass_name_48 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_99;
    }
    goto condexpr_end_143;
    condexpr_false_143:;
    tmp_metaclass_name_48 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_48 );
    condexpr_end_143:;
    condexpr_end_142:;
    tmp_bases_name_48 = tmp_class_creation_48__bases;

    CHECK_OBJECT( tmp_bases_name_48 );
    tmp_assign_source_542 = SELECT_METACLASS( tmp_metaclass_name_48, tmp_bases_name_48 );
    if ( tmp_assign_source_542 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_48 );

        exception_lineno = 805;

        goto try_except_handler_99;
    }
    Py_DECREF( tmp_metaclass_name_48 );
    assert( tmp_class_creation_48__metaclass == NULL );
    tmp_class_creation_48__metaclass = tmp_assign_source_542;

    tmp_compare_left_97 = const_str_plain_metaclass;
    tmp_compare_right_97 = tmp_class_creation_48__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_97 );
    tmp_cmp_In_96 = PySequence_Contains( tmp_compare_right_97, tmp_compare_left_97 );
    assert( !(tmp_cmp_In_96 == -1) );
    if ( tmp_cmp_In_96 == 1 )
    {
        goto branch_yes_49;
    }
    else
    {
        goto branch_no_49;
    }
    branch_yes_49:;
    tmp_dictdel_dict = tmp_class_creation_48__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_99;
    }
    branch_no_49:;
    tmp_hasattr_source_48 = tmp_class_creation_48__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_48 );
    tmp_hasattr_attr_48 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_48, tmp_hasattr_attr_48 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_99;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_144;
    }
    else
    {
        goto condexpr_false_144;
    }
    condexpr_true_144:;
    tmp_source_name_69 = tmp_class_creation_48__metaclass;

    CHECK_OBJECT( tmp_source_name_69 );
    tmp_called_name_99 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain___prepare__ );
    if ( tmp_called_name_99 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_99;
    }
    tmp_args_name_95 = PyTuple_New( 2 );
    tmp_tuple_element_142 = const_str_plain_FloorDiv;
    Py_INCREF( tmp_tuple_element_142 );
    PyTuple_SET_ITEM( tmp_args_name_95, 0, tmp_tuple_element_142 );
    tmp_tuple_element_142 = tmp_class_creation_48__bases;

    CHECK_OBJECT( tmp_tuple_element_142 );
    Py_INCREF( tmp_tuple_element_142 );
    PyTuple_SET_ITEM( tmp_args_name_95, 1, tmp_tuple_element_142 );
    tmp_kw_name_95 = tmp_class_creation_48__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_95 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 805;
    tmp_assign_source_543 = CALL_FUNCTION( tmp_called_name_99, tmp_args_name_95, tmp_kw_name_95 );
    Py_DECREF( tmp_called_name_99 );
    Py_DECREF( tmp_args_name_95 );
    if ( tmp_assign_source_543 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_99;
    }
    goto condexpr_end_144;
    condexpr_false_144:;
    tmp_assign_source_543 = PyDict_New();
    condexpr_end_144:;
    assert( tmp_class_creation_48__prepared == NULL );
    tmp_class_creation_48__prepared = tmp_assign_source_543;

    tmp_set_locals = tmp_class_creation_48__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_48);
    locals_dict_48 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_545 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_47_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_545 );
    outline_47_var___module__ = tmp_assign_source_545;

    tmp_assign_source_546 = const_str_digest_606764ad10f6285ee83574a80dfe9a10;
    assert( outline_47_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_546 );
    outline_47_var___doc__ = tmp_assign_source_546;

    tmp_assign_source_547 = const_str_plain_FloorDiv;
    assert( outline_47_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_547 );
    outline_47_var___qualname__ = tmp_assign_source_547;

    tmp_assign_source_548 = const_str_digest_13971ae58b983978540cbb4bbf3b1360;
    assert( outline_47_var_operator == NULL );
    Py_INCREF( tmp_assign_source_548 );
    outline_47_var_operator = tmp_assign_source_548;

    // Tried code:
    tmp_called_name_100 = tmp_class_creation_48__metaclass;

    CHECK_OBJECT( tmp_called_name_100 );
    tmp_args_name_96 = PyTuple_New( 3 );
    tmp_tuple_element_143 = const_str_plain_FloorDiv;
    Py_INCREF( tmp_tuple_element_143 );
    PyTuple_SET_ITEM( tmp_args_name_96, 0, tmp_tuple_element_143 );
    tmp_tuple_element_143 = tmp_class_creation_48__bases;

    CHECK_OBJECT( tmp_tuple_element_143 );
    Py_INCREF( tmp_tuple_element_143 );
    PyTuple_SET_ITEM( tmp_args_name_96, 1, tmp_tuple_element_143 );
    tmp_tuple_element_143 = locals_dict_48;
    Py_INCREF( tmp_tuple_element_143 );
    if ( outline_47_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_143,
            const_str_plain___qualname__,
            outline_47_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_143,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_143,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_96 );
        Py_DECREF( tmp_tuple_element_143 );

        exception_lineno = 805;

        goto try_except_handler_100;
    }
    if ( outline_47_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_143,
            const_str_plain___module__,
            outline_47_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_143,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_143,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_96 );
        Py_DECREF( tmp_tuple_element_143 );

        exception_lineno = 805;

        goto try_except_handler_100;
    }
    if ( outline_47_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_143,
            const_str_plain___doc__,
            outline_47_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_143,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_143,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_96 );
        Py_DECREF( tmp_tuple_element_143 );

        exception_lineno = 805;

        goto try_except_handler_100;
    }
    if ( outline_47_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_143,
            const_str_plain_operator,
            outline_47_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_143,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_143,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_96 );
        Py_DECREF( tmp_tuple_element_143 );

        exception_lineno = 805;

        goto try_except_handler_100;
    }
    PyTuple_SET_ITEM( tmp_args_name_96, 2, tmp_tuple_element_143 );
    tmp_kw_name_96 = tmp_class_creation_48__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_96 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 805;
    tmp_assign_source_549 = CALL_FUNCTION( tmp_called_name_100, tmp_args_name_96, tmp_kw_name_96 );
    Py_DECREF( tmp_args_name_96 );
    if ( tmp_assign_source_549 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 805;

        goto try_except_handler_100;
    }
    assert( outline_47_var___class__ == NULL );
    outline_47_var___class__ = tmp_assign_source_549;

    tmp_outline_return_value_49 = outline_47_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_49 );
    Py_INCREF( tmp_outline_return_value_49 );
    goto try_return_handler_100;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_100:;
    CHECK_OBJECT( (PyObject *)outline_47_var___class__ );
    Py_DECREF( outline_47_var___class__ );
    outline_47_var___class__ = NULL;

    Py_XDECREF( outline_47_var___qualname__ );
    outline_47_var___qualname__ = NULL;

    Py_XDECREF( outline_47_var___module__ );
    outline_47_var___module__ = NULL;

    Py_XDECREF( outline_47_var___doc__ );
    outline_47_var___doc__ = NULL;

    Py_XDECREF( outline_47_var_operator );
    outline_47_var_operator = NULL;

    goto outline_result_49;
    // Exception handler code:
    try_except_handler_100:;
    exception_keeper_type_98 = exception_type;
    exception_keeper_value_98 = exception_value;
    exception_keeper_tb_98 = exception_tb;
    exception_keeper_lineno_98 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_47_var___qualname__ );
    outline_47_var___qualname__ = NULL;

    Py_XDECREF( outline_47_var___module__ );
    outline_47_var___module__ = NULL;

    Py_XDECREF( outline_47_var___doc__ );
    outline_47_var___doc__ = NULL;

    Py_XDECREF( outline_47_var_operator );
    outline_47_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_98;
    exception_value = exception_keeper_value_98;
    exception_tb = exception_keeper_tb_98;
    exception_lineno = exception_keeper_lineno_98;

    goto outline_exception_48;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_48:;
    exception_lineno = 805;
    goto try_except_handler_99;
    outline_result_49:;
    tmp_assign_source_544 = tmp_outline_return_value_49;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_FloorDiv, tmp_assign_source_544 );
    goto try_end_51;
    // Exception handler code:
    try_except_handler_99:;
    exception_keeper_type_99 = exception_type;
    exception_keeper_value_99 = exception_value;
    exception_keeper_tb_99 = exception_tb;
    exception_keeper_lineno_99 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_48__bases );
    tmp_class_creation_48__bases = NULL;

    Py_XDECREF( tmp_class_creation_48__class_decl_dict );
    tmp_class_creation_48__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_48__metaclass );
    tmp_class_creation_48__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_48__prepared );
    tmp_class_creation_48__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_99;
    exception_value = exception_keeper_value_99;
    exception_tb = exception_keeper_tb_99;
    exception_lineno = exception_keeper_lineno_99;

    goto frame_exception_exit_1;
    // End of try:
    try_end_51:;
    Py_XDECREF( tmp_class_creation_48__bases );
    tmp_class_creation_48__bases = NULL;

    Py_XDECREF( tmp_class_creation_48__class_decl_dict );
    tmp_class_creation_48__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_48__metaclass );
    tmp_class_creation_48__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_48__prepared );
    tmp_class_creation_48__prepared = NULL;

    // Tried code:
    tmp_assign_source_550 = PyTuple_New( 1 );
    tmp_tuple_element_144 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_144 == NULL ))
    {
        tmp_tuple_element_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_144 == NULL )
    {
        Py_DECREF( tmp_assign_source_550 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 812;

        goto try_except_handler_101;
    }

    Py_INCREF( tmp_tuple_element_144 );
    PyTuple_SET_ITEM( tmp_assign_source_550, 0, tmp_tuple_element_144 );
    assert( tmp_class_creation_49__bases == NULL );
    tmp_class_creation_49__bases = tmp_assign_source_550;

    tmp_assign_source_551 = PyDict_New();
    assert( tmp_class_creation_49__class_decl_dict == NULL );
    tmp_class_creation_49__class_decl_dict = tmp_assign_source_551;

    tmp_compare_left_98 = const_str_plain_metaclass;
    tmp_compare_right_98 = tmp_class_creation_49__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_98 );
    tmp_cmp_In_97 = PySequence_Contains( tmp_compare_right_98, tmp_compare_left_98 );
    assert( !(tmp_cmp_In_97 == -1) );
    if ( tmp_cmp_In_97 == 1 )
    {
        goto condexpr_true_145;
    }
    else
    {
        goto condexpr_false_145;
    }
    condexpr_true_145:;
    tmp_dict_name_49 = tmp_class_creation_49__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_49 );
    tmp_key_name_49 = const_str_plain_metaclass;
    tmp_metaclass_name_49 = DICT_GET_ITEM( tmp_dict_name_49, tmp_key_name_49 );
    if ( tmp_metaclass_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_101;
    }
    goto condexpr_end_145;
    condexpr_false_145:;
    tmp_cond_value_49 = tmp_class_creation_49__bases;

    CHECK_OBJECT( tmp_cond_value_49 );
    tmp_cond_truth_49 = CHECK_IF_TRUE( tmp_cond_value_49 );
    if ( tmp_cond_truth_49 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_101;
    }
    if ( tmp_cond_truth_49 == 1 )
    {
        goto condexpr_true_146;
    }
    else
    {
        goto condexpr_false_146;
    }
    condexpr_true_146:;
    tmp_subscribed_name_49 = tmp_class_creation_49__bases;

    CHECK_OBJECT( tmp_subscribed_name_49 );
    tmp_subscript_name_49 = const_int_0;
    tmp_type_arg_49 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_49, tmp_subscript_name_49 );
    if ( tmp_type_arg_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_101;
    }
    tmp_metaclass_name_49 = BUILTIN_TYPE1( tmp_type_arg_49 );
    Py_DECREF( tmp_type_arg_49 );
    if ( tmp_metaclass_name_49 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_101;
    }
    goto condexpr_end_146;
    condexpr_false_146:;
    tmp_metaclass_name_49 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_49 );
    condexpr_end_146:;
    condexpr_end_145:;
    tmp_bases_name_49 = tmp_class_creation_49__bases;

    CHECK_OBJECT( tmp_bases_name_49 );
    tmp_assign_source_552 = SELECT_METACLASS( tmp_metaclass_name_49, tmp_bases_name_49 );
    if ( tmp_assign_source_552 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_49 );

        exception_lineno = 812;

        goto try_except_handler_101;
    }
    Py_DECREF( tmp_metaclass_name_49 );
    assert( tmp_class_creation_49__metaclass == NULL );
    tmp_class_creation_49__metaclass = tmp_assign_source_552;

    tmp_compare_left_99 = const_str_plain_metaclass;
    tmp_compare_right_99 = tmp_class_creation_49__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_99 );
    tmp_cmp_In_98 = PySequence_Contains( tmp_compare_right_99, tmp_compare_left_99 );
    assert( !(tmp_cmp_In_98 == -1) );
    if ( tmp_cmp_In_98 == 1 )
    {
        goto branch_yes_50;
    }
    else
    {
        goto branch_no_50;
    }
    branch_yes_50:;
    tmp_dictdel_dict = tmp_class_creation_49__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_101;
    }
    branch_no_50:;
    tmp_hasattr_source_49 = tmp_class_creation_49__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_49 );
    tmp_hasattr_attr_49 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_49, tmp_hasattr_attr_49 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_101;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_147;
    }
    else
    {
        goto condexpr_false_147;
    }
    condexpr_true_147:;
    tmp_source_name_70 = tmp_class_creation_49__metaclass;

    CHECK_OBJECT( tmp_source_name_70 );
    tmp_called_name_101 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain___prepare__ );
    if ( tmp_called_name_101 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_101;
    }
    tmp_args_name_97 = PyTuple_New( 2 );
    tmp_tuple_element_145 = const_str_plain_Add;
    Py_INCREF( tmp_tuple_element_145 );
    PyTuple_SET_ITEM( tmp_args_name_97, 0, tmp_tuple_element_145 );
    tmp_tuple_element_145 = tmp_class_creation_49__bases;

    CHECK_OBJECT( tmp_tuple_element_145 );
    Py_INCREF( tmp_tuple_element_145 );
    PyTuple_SET_ITEM( tmp_args_name_97, 1, tmp_tuple_element_145 );
    tmp_kw_name_97 = tmp_class_creation_49__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_97 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 812;
    tmp_assign_source_553 = CALL_FUNCTION( tmp_called_name_101, tmp_args_name_97, tmp_kw_name_97 );
    Py_DECREF( tmp_called_name_101 );
    Py_DECREF( tmp_args_name_97 );
    if ( tmp_assign_source_553 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_101;
    }
    goto condexpr_end_147;
    condexpr_false_147:;
    tmp_assign_source_553 = PyDict_New();
    condexpr_end_147:;
    assert( tmp_class_creation_49__prepared == NULL );
    tmp_class_creation_49__prepared = tmp_assign_source_553;

    tmp_set_locals = tmp_class_creation_49__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_49);
    locals_dict_49 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_555 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_48_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_555 );
    outline_48_var___module__ = tmp_assign_source_555;

    tmp_assign_source_556 = const_str_digest_95b57a0cd069bd281c67fb07a21e72fd;
    assert( outline_48_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_556 );
    outline_48_var___doc__ = tmp_assign_source_556;

    tmp_assign_source_557 = const_str_plain_Add;
    assert( outline_48_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_557 );
    outline_48_var___qualname__ = tmp_assign_source_557;

    tmp_assign_source_558 = const_str_chr_43;
    assert( outline_48_var_operator == NULL );
    Py_INCREF( tmp_assign_source_558 );
    outline_48_var_operator = tmp_assign_source_558;

    // Tried code:
    tmp_called_name_102 = tmp_class_creation_49__metaclass;

    CHECK_OBJECT( tmp_called_name_102 );
    tmp_args_name_98 = PyTuple_New( 3 );
    tmp_tuple_element_146 = const_str_plain_Add;
    Py_INCREF( tmp_tuple_element_146 );
    PyTuple_SET_ITEM( tmp_args_name_98, 0, tmp_tuple_element_146 );
    tmp_tuple_element_146 = tmp_class_creation_49__bases;

    CHECK_OBJECT( tmp_tuple_element_146 );
    Py_INCREF( tmp_tuple_element_146 );
    PyTuple_SET_ITEM( tmp_args_name_98, 1, tmp_tuple_element_146 );
    tmp_tuple_element_146 = locals_dict_49;
    Py_INCREF( tmp_tuple_element_146 );
    if ( outline_48_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_146,
            const_str_plain___qualname__,
            outline_48_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_146,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_146,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_98 );
        Py_DECREF( tmp_tuple_element_146 );

        exception_lineno = 812;

        goto try_except_handler_102;
    }
    if ( outline_48_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_146,
            const_str_plain___module__,
            outline_48_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_146,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_146,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_98 );
        Py_DECREF( tmp_tuple_element_146 );

        exception_lineno = 812;

        goto try_except_handler_102;
    }
    if ( outline_48_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_146,
            const_str_plain___doc__,
            outline_48_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_146,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_146,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_98 );
        Py_DECREF( tmp_tuple_element_146 );

        exception_lineno = 812;

        goto try_except_handler_102;
    }
    if ( outline_48_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_146,
            const_str_plain_operator,
            outline_48_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_146,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_146,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_98 );
        Py_DECREF( tmp_tuple_element_146 );

        exception_lineno = 812;

        goto try_except_handler_102;
    }
    PyTuple_SET_ITEM( tmp_args_name_98, 2, tmp_tuple_element_146 );
    tmp_kw_name_98 = tmp_class_creation_49__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_98 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 812;
    tmp_assign_source_559 = CALL_FUNCTION( tmp_called_name_102, tmp_args_name_98, tmp_kw_name_98 );
    Py_DECREF( tmp_args_name_98 );
    if ( tmp_assign_source_559 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 812;

        goto try_except_handler_102;
    }
    assert( outline_48_var___class__ == NULL );
    outline_48_var___class__ = tmp_assign_source_559;

    tmp_outline_return_value_50 = outline_48_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_50 );
    Py_INCREF( tmp_outline_return_value_50 );
    goto try_return_handler_102;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_102:;
    CHECK_OBJECT( (PyObject *)outline_48_var___class__ );
    Py_DECREF( outline_48_var___class__ );
    outline_48_var___class__ = NULL;

    Py_XDECREF( outline_48_var___qualname__ );
    outline_48_var___qualname__ = NULL;

    Py_XDECREF( outline_48_var___module__ );
    outline_48_var___module__ = NULL;

    Py_XDECREF( outline_48_var___doc__ );
    outline_48_var___doc__ = NULL;

    Py_XDECREF( outline_48_var_operator );
    outline_48_var_operator = NULL;

    goto outline_result_50;
    // Exception handler code:
    try_except_handler_102:;
    exception_keeper_type_100 = exception_type;
    exception_keeper_value_100 = exception_value;
    exception_keeper_tb_100 = exception_tb;
    exception_keeper_lineno_100 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_48_var___qualname__ );
    outline_48_var___qualname__ = NULL;

    Py_XDECREF( outline_48_var___module__ );
    outline_48_var___module__ = NULL;

    Py_XDECREF( outline_48_var___doc__ );
    outline_48_var___doc__ = NULL;

    Py_XDECREF( outline_48_var_operator );
    outline_48_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_100;
    exception_value = exception_keeper_value_100;
    exception_tb = exception_keeper_tb_100;
    exception_lineno = exception_keeper_lineno_100;

    goto outline_exception_49;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_49:;
    exception_lineno = 812;
    goto try_except_handler_101;
    outline_result_50:;
    tmp_assign_source_554 = tmp_outline_return_value_50;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Add, tmp_assign_source_554 );
    goto try_end_52;
    // Exception handler code:
    try_except_handler_101:;
    exception_keeper_type_101 = exception_type;
    exception_keeper_value_101 = exception_value;
    exception_keeper_tb_101 = exception_tb;
    exception_keeper_lineno_101 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_49__bases );
    tmp_class_creation_49__bases = NULL;

    Py_XDECREF( tmp_class_creation_49__class_decl_dict );
    tmp_class_creation_49__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_49__metaclass );
    tmp_class_creation_49__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_49__prepared );
    tmp_class_creation_49__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_101;
    exception_value = exception_keeper_value_101;
    exception_tb = exception_keeper_tb_101;
    exception_lineno = exception_keeper_lineno_101;

    goto frame_exception_exit_1;
    // End of try:
    try_end_52:;
    Py_XDECREF( tmp_class_creation_49__bases );
    tmp_class_creation_49__bases = NULL;

    Py_XDECREF( tmp_class_creation_49__class_decl_dict );
    tmp_class_creation_49__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_49__metaclass );
    tmp_class_creation_49__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_49__prepared );
    tmp_class_creation_49__prepared = NULL;

    // Tried code:
    tmp_assign_source_560 = PyTuple_New( 1 );
    tmp_tuple_element_147 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_147 == NULL ))
    {
        tmp_tuple_element_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_147 == NULL )
    {
        Py_DECREF( tmp_assign_source_560 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 817;

        goto try_except_handler_103;
    }

    Py_INCREF( tmp_tuple_element_147 );
    PyTuple_SET_ITEM( tmp_assign_source_560, 0, tmp_tuple_element_147 );
    assert( tmp_class_creation_50__bases == NULL );
    tmp_class_creation_50__bases = tmp_assign_source_560;

    tmp_assign_source_561 = PyDict_New();
    assert( tmp_class_creation_50__class_decl_dict == NULL );
    tmp_class_creation_50__class_decl_dict = tmp_assign_source_561;

    tmp_compare_left_100 = const_str_plain_metaclass;
    tmp_compare_right_100 = tmp_class_creation_50__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_100 );
    tmp_cmp_In_99 = PySequence_Contains( tmp_compare_right_100, tmp_compare_left_100 );
    assert( !(tmp_cmp_In_99 == -1) );
    if ( tmp_cmp_In_99 == 1 )
    {
        goto condexpr_true_148;
    }
    else
    {
        goto condexpr_false_148;
    }
    condexpr_true_148:;
    tmp_dict_name_50 = tmp_class_creation_50__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_50 );
    tmp_key_name_50 = const_str_plain_metaclass;
    tmp_metaclass_name_50 = DICT_GET_ITEM( tmp_dict_name_50, tmp_key_name_50 );
    if ( tmp_metaclass_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_103;
    }
    goto condexpr_end_148;
    condexpr_false_148:;
    tmp_cond_value_50 = tmp_class_creation_50__bases;

    CHECK_OBJECT( tmp_cond_value_50 );
    tmp_cond_truth_50 = CHECK_IF_TRUE( tmp_cond_value_50 );
    if ( tmp_cond_truth_50 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_103;
    }
    if ( tmp_cond_truth_50 == 1 )
    {
        goto condexpr_true_149;
    }
    else
    {
        goto condexpr_false_149;
    }
    condexpr_true_149:;
    tmp_subscribed_name_50 = tmp_class_creation_50__bases;

    CHECK_OBJECT( tmp_subscribed_name_50 );
    tmp_subscript_name_50 = const_int_0;
    tmp_type_arg_50 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_50, tmp_subscript_name_50 );
    if ( tmp_type_arg_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_103;
    }
    tmp_metaclass_name_50 = BUILTIN_TYPE1( tmp_type_arg_50 );
    Py_DECREF( tmp_type_arg_50 );
    if ( tmp_metaclass_name_50 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_103;
    }
    goto condexpr_end_149;
    condexpr_false_149:;
    tmp_metaclass_name_50 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_50 );
    condexpr_end_149:;
    condexpr_end_148:;
    tmp_bases_name_50 = tmp_class_creation_50__bases;

    CHECK_OBJECT( tmp_bases_name_50 );
    tmp_assign_source_562 = SELECT_METACLASS( tmp_metaclass_name_50, tmp_bases_name_50 );
    if ( tmp_assign_source_562 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_50 );

        exception_lineno = 817;

        goto try_except_handler_103;
    }
    Py_DECREF( tmp_metaclass_name_50 );
    assert( tmp_class_creation_50__metaclass == NULL );
    tmp_class_creation_50__metaclass = tmp_assign_source_562;

    tmp_compare_left_101 = const_str_plain_metaclass;
    tmp_compare_right_101 = tmp_class_creation_50__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_101 );
    tmp_cmp_In_100 = PySequence_Contains( tmp_compare_right_101, tmp_compare_left_101 );
    assert( !(tmp_cmp_In_100 == -1) );
    if ( tmp_cmp_In_100 == 1 )
    {
        goto branch_yes_51;
    }
    else
    {
        goto branch_no_51;
    }
    branch_yes_51:;
    tmp_dictdel_dict = tmp_class_creation_50__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_103;
    }
    branch_no_51:;
    tmp_hasattr_source_50 = tmp_class_creation_50__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_50 );
    tmp_hasattr_attr_50 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_50, tmp_hasattr_attr_50 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_103;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_150;
    }
    else
    {
        goto condexpr_false_150;
    }
    condexpr_true_150:;
    tmp_source_name_71 = tmp_class_creation_50__metaclass;

    CHECK_OBJECT( tmp_source_name_71 );
    tmp_called_name_103 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain___prepare__ );
    if ( tmp_called_name_103 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_103;
    }
    tmp_args_name_99 = PyTuple_New( 2 );
    tmp_tuple_element_148 = const_str_plain_Sub;
    Py_INCREF( tmp_tuple_element_148 );
    PyTuple_SET_ITEM( tmp_args_name_99, 0, tmp_tuple_element_148 );
    tmp_tuple_element_148 = tmp_class_creation_50__bases;

    CHECK_OBJECT( tmp_tuple_element_148 );
    Py_INCREF( tmp_tuple_element_148 );
    PyTuple_SET_ITEM( tmp_args_name_99, 1, tmp_tuple_element_148 );
    tmp_kw_name_99 = tmp_class_creation_50__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_99 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 817;
    tmp_assign_source_563 = CALL_FUNCTION( tmp_called_name_103, tmp_args_name_99, tmp_kw_name_99 );
    Py_DECREF( tmp_called_name_103 );
    Py_DECREF( tmp_args_name_99 );
    if ( tmp_assign_source_563 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_103;
    }
    goto condexpr_end_150;
    condexpr_false_150:;
    tmp_assign_source_563 = PyDict_New();
    condexpr_end_150:;
    assert( tmp_class_creation_50__prepared == NULL );
    tmp_class_creation_50__prepared = tmp_assign_source_563;

    tmp_set_locals = tmp_class_creation_50__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_50);
    locals_dict_50 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_565 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_49_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_565 );
    outline_49_var___module__ = tmp_assign_source_565;

    tmp_assign_source_566 = const_str_digest_46ccee62c8ef22cb3237ef8e568829f0;
    assert( outline_49_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_566 );
    outline_49_var___doc__ = tmp_assign_source_566;

    tmp_assign_source_567 = const_str_plain_Sub;
    assert( outline_49_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_567 );
    outline_49_var___qualname__ = tmp_assign_source_567;

    tmp_assign_source_568 = const_str_chr_45;
    assert( outline_49_var_operator == NULL );
    Py_INCREF( tmp_assign_source_568 );
    outline_49_var_operator = tmp_assign_source_568;

    // Tried code:
    tmp_called_name_104 = tmp_class_creation_50__metaclass;

    CHECK_OBJECT( tmp_called_name_104 );
    tmp_args_name_100 = PyTuple_New( 3 );
    tmp_tuple_element_149 = const_str_plain_Sub;
    Py_INCREF( tmp_tuple_element_149 );
    PyTuple_SET_ITEM( tmp_args_name_100, 0, tmp_tuple_element_149 );
    tmp_tuple_element_149 = tmp_class_creation_50__bases;

    CHECK_OBJECT( tmp_tuple_element_149 );
    Py_INCREF( tmp_tuple_element_149 );
    PyTuple_SET_ITEM( tmp_args_name_100, 1, tmp_tuple_element_149 );
    tmp_tuple_element_149 = locals_dict_50;
    Py_INCREF( tmp_tuple_element_149 );
    if ( outline_49_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_149,
            const_str_plain___qualname__,
            outline_49_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_149,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_149,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_100 );
        Py_DECREF( tmp_tuple_element_149 );

        exception_lineno = 817;

        goto try_except_handler_104;
    }
    if ( outline_49_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_149,
            const_str_plain___module__,
            outline_49_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_149,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_149,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_100 );
        Py_DECREF( tmp_tuple_element_149 );

        exception_lineno = 817;

        goto try_except_handler_104;
    }
    if ( outline_49_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_149,
            const_str_plain___doc__,
            outline_49_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_149,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_149,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_100 );
        Py_DECREF( tmp_tuple_element_149 );

        exception_lineno = 817;

        goto try_except_handler_104;
    }
    if ( outline_49_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_149,
            const_str_plain_operator,
            outline_49_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_149,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_149,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_100 );
        Py_DECREF( tmp_tuple_element_149 );

        exception_lineno = 817;

        goto try_except_handler_104;
    }
    PyTuple_SET_ITEM( tmp_args_name_100, 2, tmp_tuple_element_149 );
    tmp_kw_name_100 = tmp_class_creation_50__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_100 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 817;
    tmp_assign_source_569 = CALL_FUNCTION( tmp_called_name_104, tmp_args_name_100, tmp_kw_name_100 );
    Py_DECREF( tmp_args_name_100 );
    if ( tmp_assign_source_569 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 817;

        goto try_except_handler_104;
    }
    assert( outline_49_var___class__ == NULL );
    outline_49_var___class__ = tmp_assign_source_569;

    tmp_outline_return_value_51 = outline_49_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_51 );
    Py_INCREF( tmp_outline_return_value_51 );
    goto try_return_handler_104;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_104:;
    CHECK_OBJECT( (PyObject *)outline_49_var___class__ );
    Py_DECREF( outline_49_var___class__ );
    outline_49_var___class__ = NULL;

    Py_XDECREF( outline_49_var___qualname__ );
    outline_49_var___qualname__ = NULL;

    Py_XDECREF( outline_49_var___module__ );
    outline_49_var___module__ = NULL;

    Py_XDECREF( outline_49_var___doc__ );
    outline_49_var___doc__ = NULL;

    Py_XDECREF( outline_49_var_operator );
    outline_49_var_operator = NULL;

    goto outline_result_51;
    // Exception handler code:
    try_except_handler_104:;
    exception_keeper_type_102 = exception_type;
    exception_keeper_value_102 = exception_value;
    exception_keeper_tb_102 = exception_tb;
    exception_keeper_lineno_102 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_49_var___qualname__ );
    outline_49_var___qualname__ = NULL;

    Py_XDECREF( outline_49_var___module__ );
    outline_49_var___module__ = NULL;

    Py_XDECREF( outline_49_var___doc__ );
    outline_49_var___doc__ = NULL;

    Py_XDECREF( outline_49_var_operator );
    outline_49_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_102;
    exception_value = exception_keeper_value_102;
    exception_tb = exception_keeper_tb_102;
    exception_lineno = exception_keeper_lineno_102;

    goto outline_exception_50;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_50:;
    exception_lineno = 817;
    goto try_except_handler_103;
    outline_result_51:;
    tmp_assign_source_564 = tmp_outline_return_value_51;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Sub, tmp_assign_source_564 );
    goto try_end_53;
    // Exception handler code:
    try_except_handler_103:;
    exception_keeper_type_103 = exception_type;
    exception_keeper_value_103 = exception_value;
    exception_keeper_tb_103 = exception_tb;
    exception_keeper_lineno_103 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_50__bases );
    tmp_class_creation_50__bases = NULL;

    Py_XDECREF( tmp_class_creation_50__class_decl_dict );
    tmp_class_creation_50__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_50__metaclass );
    tmp_class_creation_50__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_50__prepared );
    tmp_class_creation_50__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_103;
    exception_value = exception_keeper_value_103;
    exception_tb = exception_keeper_tb_103;
    exception_lineno = exception_keeper_lineno_103;

    goto frame_exception_exit_1;
    // End of try:
    try_end_53:;
    Py_XDECREF( tmp_class_creation_50__bases );
    tmp_class_creation_50__bases = NULL;

    Py_XDECREF( tmp_class_creation_50__class_decl_dict );
    tmp_class_creation_50__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_50__metaclass );
    tmp_class_creation_50__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_50__prepared );
    tmp_class_creation_50__prepared = NULL;

    // Tried code:
    tmp_assign_source_570 = PyTuple_New( 1 );
    tmp_tuple_element_150 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_150 == NULL ))
    {
        tmp_tuple_element_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_150 == NULL )
    {
        Py_DECREF( tmp_assign_source_570 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 822;

        goto try_except_handler_105;
    }

    Py_INCREF( tmp_tuple_element_150 );
    PyTuple_SET_ITEM( tmp_assign_source_570, 0, tmp_tuple_element_150 );
    assert( tmp_class_creation_51__bases == NULL );
    tmp_class_creation_51__bases = tmp_assign_source_570;

    tmp_assign_source_571 = PyDict_New();
    assert( tmp_class_creation_51__class_decl_dict == NULL );
    tmp_class_creation_51__class_decl_dict = tmp_assign_source_571;

    tmp_compare_left_102 = const_str_plain_metaclass;
    tmp_compare_right_102 = tmp_class_creation_51__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_102 );
    tmp_cmp_In_101 = PySequence_Contains( tmp_compare_right_102, tmp_compare_left_102 );
    assert( !(tmp_cmp_In_101 == -1) );
    if ( tmp_cmp_In_101 == 1 )
    {
        goto condexpr_true_151;
    }
    else
    {
        goto condexpr_false_151;
    }
    condexpr_true_151:;
    tmp_dict_name_51 = tmp_class_creation_51__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_51 );
    tmp_key_name_51 = const_str_plain_metaclass;
    tmp_metaclass_name_51 = DICT_GET_ITEM( tmp_dict_name_51, tmp_key_name_51 );
    if ( tmp_metaclass_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_105;
    }
    goto condexpr_end_151;
    condexpr_false_151:;
    tmp_cond_value_51 = tmp_class_creation_51__bases;

    CHECK_OBJECT( tmp_cond_value_51 );
    tmp_cond_truth_51 = CHECK_IF_TRUE( tmp_cond_value_51 );
    if ( tmp_cond_truth_51 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_105;
    }
    if ( tmp_cond_truth_51 == 1 )
    {
        goto condexpr_true_152;
    }
    else
    {
        goto condexpr_false_152;
    }
    condexpr_true_152:;
    tmp_subscribed_name_51 = tmp_class_creation_51__bases;

    CHECK_OBJECT( tmp_subscribed_name_51 );
    tmp_subscript_name_51 = const_int_0;
    tmp_type_arg_51 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_51, tmp_subscript_name_51 );
    if ( tmp_type_arg_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_105;
    }
    tmp_metaclass_name_51 = BUILTIN_TYPE1( tmp_type_arg_51 );
    Py_DECREF( tmp_type_arg_51 );
    if ( tmp_metaclass_name_51 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_105;
    }
    goto condexpr_end_152;
    condexpr_false_152:;
    tmp_metaclass_name_51 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_51 );
    condexpr_end_152:;
    condexpr_end_151:;
    tmp_bases_name_51 = tmp_class_creation_51__bases;

    CHECK_OBJECT( tmp_bases_name_51 );
    tmp_assign_source_572 = SELECT_METACLASS( tmp_metaclass_name_51, tmp_bases_name_51 );
    if ( tmp_assign_source_572 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_51 );

        exception_lineno = 822;

        goto try_except_handler_105;
    }
    Py_DECREF( tmp_metaclass_name_51 );
    assert( tmp_class_creation_51__metaclass == NULL );
    tmp_class_creation_51__metaclass = tmp_assign_source_572;

    tmp_compare_left_103 = const_str_plain_metaclass;
    tmp_compare_right_103 = tmp_class_creation_51__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_103 );
    tmp_cmp_In_102 = PySequence_Contains( tmp_compare_right_103, tmp_compare_left_103 );
    assert( !(tmp_cmp_In_102 == -1) );
    if ( tmp_cmp_In_102 == 1 )
    {
        goto branch_yes_52;
    }
    else
    {
        goto branch_no_52;
    }
    branch_yes_52:;
    tmp_dictdel_dict = tmp_class_creation_51__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_105;
    }
    branch_no_52:;
    tmp_hasattr_source_51 = tmp_class_creation_51__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_51 );
    tmp_hasattr_attr_51 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_51, tmp_hasattr_attr_51 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_105;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_153;
    }
    else
    {
        goto condexpr_false_153;
    }
    condexpr_true_153:;
    tmp_source_name_72 = tmp_class_creation_51__metaclass;

    CHECK_OBJECT( tmp_source_name_72 );
    tmp_called_name_105 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain___prepare__ );
    if ( tmp_called_name_105 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_105;
    }
    tmp_args_name_101 = PyTuple_New( 2 );
    tmp_tuple_element_151 = const_str_plain_Mod;
    Py_INCREF( tmp_tuple_element_151 );
    PyTuple_SET_ITEM( tmp_args_name_101, 0, tmp_tuple_element_151 );
    tmp_tuple_element_151 = tmp_class_creation_51__bases;

    CHECK_OBJECT( tmp_tuple_element_151 );
    Py_INCREF( tmp_tuple_element_151 );
    PyTuple_SET_ITEM( tmp_args_name_101, 1, tmp_tuple_element_151 );
    tmp_kw_name_101 = tmp_class_creation_51__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_101 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 822;
    tmp_assign_source_573 = CALL_FUNCTION( tmp_called_name_105, tmp_args_name_101, tmp_kw_name_101 );
    Py_DECREF( tmp_called_name_105 );
    Py_DECREF( tmp_args_name_101 );
    if ( tmp_assign_source_573 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_105;
    }
    goto condexpr_end_153;
    condexpr_false_153:;
    tmp_assign_source_573 = PyDict_New();
    condexpr_end_153:;
    assert( tmp_class_creation_51__prepared == NULL );
    tmp_class_creation_51__prepared = tmp_assign_source_573;

    tmp_set_locals = tmp_class_creation_51__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_51);
    locals_dict_51 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_575 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_50_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_575 );
    outline_50_var___module__ = tmp_assign_source_575;

    tmp_assign_source_576 = const_str_digest_9ecad2c396532584fe2ad71cc894a103;
    assert( outline_50_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_576 );
    outline_50_var___doc__ = tmp_assign_source_576;

    tmp_assign_source_577 = const_str_plain_Mod;
    assert( outline_50_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_577 );
    outline_50_var___qualname__ = tmp_assign_source_577;

    tmp_assign_source_578 = const_str_chr_37;
    assert( outline_50_var_operator == NULL );
    Py_INCREF( tmp_assign_source_578 );
    outline_50_var_operator = tmp_assign_source_578;

    // Tried code:
    tmp_called_name_106 = tmp_class_creation_51__metaclass;

    CHECK_OBJECT( tmp_called_name_106 );
    tmp_args_name_102 = PyTuple_New( 3 );
    tmp_tuple_element_152 = const_str_plain_Mod;
    Py_INCREF( tmp_tuple_element_152 );
    PyTuple_SET_ITEM( tmp_args_name_102, 0, tmp_tuple_element_152 );
    tmp_tuple_element_152 = tmp_class_creation_51__bases;

    CHECK_OBJECT( tmp_tuple_element_152 );
    Py_INCREF( tmp_tuple_element_152 );
    PyTuple_SET_ITEM( tmp_args_name_102, 1, tmp_tuple_element_152 );
    tmp_tuple_element_152 = locals_dict_51;
    Py_INCREF( tmp_tuple_element_152 );
    if ( outline_50_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_152,
            const_str_plain___qualname__,
            outline_50_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_152,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_152,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_102 );
        Py_DECREF( tmp_tuple_element_152 );

        exception_lineno = 822;

        goto try_except_handler_106;
    }
    if ( outline_50_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_152,
            const_str_plain___module__,
            outline_50_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_152,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_152,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_102 );
        Py_DECREF( tmp_tuple_element_152 );

        exception_lineno = 822;

        goto try_except_handler_106;
    }
    if ( outline_50_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_152,
            const_str_plain___doc__,
            outline_50_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_152,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_152,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_102 );
        Py_DECREF( tmp_tuple_element_152 );

        exception_lineno = 822;

        goto try_except_handler_106;
    }
    if ( outline_50_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_152,
            const_str_plain_operator,
            outline_50_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_152,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_152,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_102 );
        Py_DECREF( tmp_tuple_element_152 );

        exception_lineno = 822;

        goto try_except_handler_106;
    }
    PyTuple_SET_ITEM( tmp_args_name_102, 2, tmp_tuple_element_152 );
    tmp_kw_name_102 = tmp_class_creation_51__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_102 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 822;
    tmp_assign_source_579 = CALL_FUNCTION( tmp_called_name_106, tmp_args_name_102, tmp_kw_name_102 );
    Py_DECREF( tmp_args_name_102 );
    if ( tmp_assign_source_579 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 822;

        goto try_except_handler_106;
    }
    assert( outline_50_var___class__ == NULL );
    outline_50_var___class__ = tmp_assign_source_579;

    tmp_outline_return_value_52 = outline_50_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_52 );
    Py_INCREF( tmp_outline_return_value_52 );
    goto try_return_handler_106;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_106:;
    CHECK_OBJECT( (PyObject *)outline_50_var___class__ );
    Py_DECREF( outline_50_var___class__ );
    outline_50_var___class__ = NULL;

    Py_XDECREF( outline_50_var___qualname__ );
    outline_50_var___qualname__ = NULL;

    Py_XDECREF( outline_50_var___module__ );
    outline_50_var___module__ = NULL;

    Py_XDECREF( outline_50_var___doc__ );
    outline_50_var___doc__ = NULL;

    Py_XDECREF( outline_50_var_operator );
    outline_50_var_operator = NULL;

    goto outline_result_52;
    // Exception handler code:
    try_except_handler_106:;
    exception_keeper_type_104 = exception_type;
    exception_keeper_value_104 = exception_value;
    exception_keeper_tb_104 = exception_tb;
    exception_keeper_lineno_104 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_50_var___qualname__ );
    outline_50_var___qualname__ = NULL;

    Py_XDECREF( outline_50_var___module__ );
    outline_50_var___module__ = NULL;

    Py_XDECREF( outline_50_var___doc__ );
    outline_50_var___doc__ = NULL;

    Py_XDECREF( outline_50_var_operator );
    outline_50_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_104;
    exception_value = exception_keeper_value_104;
    exception_tb = exception_keeper_tb_104;
    exception_lineno = exception_keeper_lineno_104;

    goto outline_exception_51;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_51:;
    exception_lineno = 822;
    goto try_except_handler_105;
    outline_result_52:;
    tmp_assign_source_574 = tmp_outline_return_value_52;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Mod, tmp_assign_source_574 );
    goto try_end_54;
    // Exception handler code:
    try_except_handler_105:;
    exception_keeper_type_105 = exception_type;
    exception_keeper_value_105 = exception_value;
    exception_keeper_tb_105 = exception_tb;
    exception_keeper_lineno_105 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_51__bases );
    tmp_class_creation_51__bases = NULL;

    Py_XDECREF( tmp_class_creation_51__class_decl_dict );
    tmp_class_creation_51__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_51__metaclass );
    tmp_class_creation_51__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_51__prepared );
    tmp_class_creation_51__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_105;
    exception_value = exception_keeper_value_105;
    exception_tb = exception_keeper_tb_105;
    exception_lineno = exception_keeper_lineno_105;

    goto frame_exception_exit_1;
    // End of try:
    try_end_54:;
    Py_XDECREF( tmp_class_creation_51__bases );
    tmp_class_creation_51__bases = NULL;

    Py_XDECREF( tmp_class_creation_51__class_decl_dict );
    tmp_class_creation_51__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_51__metaclass );
    tmp_class_creation_51__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_51__prepared );
    tmp_class_creation_51__prepared = NULL;

    // Tried code:
    tmp_assign_source_580 = PyTuple_New( 1 );
    tmp_tuple_element_153 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_153 == NULL ))
    {
        tmp_tuple_element_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_153 == NULL )
    {
        Py_DECREF( tmp_assign_source_580 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 827;

        goto try_except_handler_107;
    }

    Py_INCREF( tmp_tuple_element_153 );
    PyTuple_SET_ITEM( tmp_assign_source_580, 0, tmp_tuple_element_153 );
    assert( tmp_class_creation_52__bases == NULL );
    tmp_class_creation_52__bases = tmp_assign_source_580;

    tmp_assign_source_581 = PyDict_New();
    assert( tmp_class_creation_52__class_decl_dict == NULL );
    tmp_class_creation_52__class_decl_dict = tmp_assign_source_581;

    tmp_compare_left_104 = const_str_plain_metaclass;
    tmp_compare_right_104 = tmp_class_creation_52__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_104 );
    tmp_cmp_In_103 = PySequence_Contains( tmp_compare_right_104, tmp_compare_left_104 );
    assert( !(tmp_cmp_In_103 == -1) );
    if ( tmp_cmp_In_103 == 1 )
    {
        goto condexpr_true_154;
    }
    else
    {
        goto condexpr_false_154;
    }
    condexpr_true_154:;
    tmp_dict_name_52 = tmp_class_creation_52__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_52 );
    tmp_key_name_52 = const_str_plain_metaclass;
    tmp_metaclass_name_52 = DICT_GET_ITEM( tmp_dict_name_52, tmp_key_name_52 );
    if ( tmp_metaclass_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_107;
    }
    goto condexpr_end_154;
    condexpr_false_154:;
    tmp_cond_value_52 = tmp_class_creation_52__bases;

    CHECK_OBJECT( tmp_cond_value_52 );
    tmp_cond_truth_52 = CHECK_IF_TRUE( tmp_cond_value_52 );
    if ( tmp_cond_truth_52 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_107;
    }
    if ( tmp_cond_truth_52 == 1 )
    {
        goto condexpr_true_155;
    }
    else
    {
        goto condexpr_false_155;
    }
    condexpr_true_155:;
    tmp_subscribed_name_52 = tmp_class_creation_52__bases;

    CHECK_OBJECT( tmp_subscribed_name_52 );
    tmp_subscript_name_52 = const_int_0;
    tmp_type_arg_52 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_52, tmp_subscript_name_52 );
    if ( tmp_type_arg_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_107;
    }
    tmp_metaclass_name_52 = BUILTIN_TYPE1( tmp_type_arg_52 );
    Py_DECREF( tmp_type_arg_52 );
    if ( tmp_metaclass_name_52 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_107;
    }
    goto condexpr_end_155;
    condexpr_false_155:;
    tmp_metaclass_name_52 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_52 );
    condexpr_end_155:;
    condexpr_end_154:;
    tmp_bases_name_52 = tmp_class_creation_52__bases;

    CHECK_OBJECT( tmp_bases_name_52 );
    tmp_assign_source_582 = SELECT_METACLASS( tmp_metaclass_name_52, tmp_bases_name_52 );
    if ( tmp_assign_source_582 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_52 );

        exception_lineno = 827;

        goto try_except_handler_107;
    }
    Py_DECREF( tmp_metaclass_name_52 );
    assert( tmp_class_creation_52__metaclass == NULL );
    tmp_class_creation_52__metaclass = tmp_assign_source_582;

    tmp_compare_left_105 = const_str_plain_metaclass;
    tmp_compare_right_105 = tmp_class_creation_52__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_105 );
    tmp_cmp_In_104 = PySequence_Contains( tmp_compare_right_105, tmp_compare_left_105 );
    assert( !(tmp_cmp_In_104 == -1) );
    if ( tmp_cmp_In_104 == 1 )
    {
        goto branch_yes_53;
    }
    else
    {
        goto branch_no_53;
    }
    branch_yes_53:;
    tmp_dictdel_dict = tmp_class_creation_52__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_107;
    }
    branch_no_53:;
    tmp_hasattr_source_52 = tmp_class_creation_52__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_52 );
    tmp_hasattr_attr_52 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_52, tmp_hasattr_attr_52 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_107;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_156;
    }
    else
    {
        goto condexpr_false_156;
    }
    condexpr_true_156:;
    tmp_source_name_73 = tmp_class_creation_52__metaclass;

    CHECK_OBJECT( tmp_source_name_73 );
    tmp_called_name_107 = LOOKUP_ATTRIBUTE( tmp_source_name_73, const_str_plain___prepare__ );
    if ( tmp_called_name_107 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_107;
    }
    tmp_args_name_103 = PyTuple_New( 2 );
    tmp_tuple_element_154 = const_str_plain_Pow;
    Py_INCREF( tmp_tuple_element_154 );
    PyTuple_SET_ITEM( tmp_args_name_103, 0, tmp_tuple_element_154 );
    tmp_tuple_element_154 = tmp_class_creation_52__bases;

    CHECK_OBJECT( tmp_tuple_element_154 );
    Py_INCREF( tmp_tuple_element_154 );
    PyTuple_SET_ITEM( tmp_args_name_103, 1, tmp_tuple_element_154 );
    tmp_kw_name_103 = tmp_class_creation_52__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_103 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 827;
    tmp_assign_source_583 = CALL_FUNCTION( tmp_called_name_107, tmp_args_name_103, tmp_kw_name_103 );
    Py_DECREF( tmp_called_name_107 );
    Py_DECREF( tmp_args_name_103 );
    if ( tmp_assign_source_583 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_107;
    }
    goto condexpr_end_156;
    condexpr_false_156:;
    tmp_assign_source_583 = PyDict_New();
    condexpr_end_156:;
    assert( tmp_class_creation_52__prepared == NULL );
    tmp_class_creation_52__prepared = tmp_assign_source_583;

    tmp_set_locals = tmp_class_creation_52__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_52);
    locals_dict_52 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_585 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_51_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_585 );
    outline_51_var___module__ = tmp_assign_source_585;

    tmp_assign_source_586 = const_str_digest_3d7284bae3fb785b579b3e8164ee90a5;
    assert( outline_51_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_586 );
    outline_51_var___doc__ = tmp_assign_source_586;

    tmp_assign_source_587 = const_str_plain_Pow;
    assert( outline_51_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_587 );
    outline_51_var___qualname__ = tmp_assign_source_587;

    tmp_assign_source_588 = const_str_digest_29bbf2a0ea668f7cb550eb66ebe90f9e;
    assert( outline_51_var_operator == NULL );
    Py_INCREF( tmp_assign_source_588 );
    outline_51_var_operator = tmp_assign_source_588;

    // Tried code:
    tmp_called_name_108 = tmp_class_creation_52__metaclass;

    CHECK_OBJECT( tmp_called_name_108 );
    tmp_args_name_104 = PyTuple_New( 3 );
    tmp_tuple_element_155 = const_str_plain_Pow;
    Py_INCREF( tmp_tuple_element_155 );
    PyTuple_SET_ITEM( tmp_args_name_104, 0, tmp_tuple_element_155 );
    tmp_tuple_element_155 = tmp_class_creation_52__bases;

    CHECK_OBJECT( tmp_tuple_element_155 );
    Py_INCREF( tmp_tuple_element_155 );
    PyTuple_SET_ITEM( tmp_args_name_104, 1, tmp_tuple_element_155 );
    tmp_tuple_element_155 = locals_dict_52;
    Py_INCREF( tmp_tuple_element_155 );
    if ( outline_51_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_155,
            const_str_plain___qualname__,
            outline_51_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_155,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_155,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_104 );
        Py_DECREF( tmp_tuple_element_155 );

        exception_lineno = 827;

        goto try_except_handler_108;
    }
    if ( outline_51_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_155,
            const_str_plain___module__,
            outline_51_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_155,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_155,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_104 );
        Py_DECREF( tmp_tuple_element_155 );

        exception_lineno = 827;

        goto try_except_handler_108;
    }
    if ( outline_51_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_155,
            const_str_plain___doc__,
            outline_51_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_155,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_155,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_104 );
        Py_DECREF( tmp_tuple_element_155 );

        exception_lineno = 827;

        goto try_except_handler_108;
    }
    if ( outline_51_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_155,
            const_str_plain_operator,
            outline_51_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_155,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_155,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_104 );
        Py_DECREF( tmp_tuple_element_155 );

        exception_lineno = 827;

        goto try_except_handler_108;
    }
    PyTuple_SET_ITEM( tmp_args_name_104, 2, tmp_tuple_element_155 );
    tmp_kw_name_104 = tmp_class_creation_52__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_104 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 827;
    tmp_assign_source_589 = CALL_FUNCTION( tmp_called_name_108, tmp_args_name_104, tmp_kw_name_104 );
    Py_DECREF( tmp_args_name_104 );
    if ( tmp_assign_source_589 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 827;

        goto try_except_handler_108;
    }
    assert( outline_51_var___class__ == NULL );
    outline_51_var___class__ = tmp_assign_source_589;

    tmp_outline_return_value_53 = outline_51_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_53 );
    Py_INCREF( tmp_outline_return_value_53 );
    goto try_return_handler_108;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_108:;
    CHECK_OBJECT( (PyObject *)outline_51_var___class__ );
    Py_DECREF( outline_51_var___class__ );
    outline_51_var___class__ = NULL;

    Py_XDECREF( outline_51_var___qualname__ );
    outline_51_var___qualname__ = NULL;

    Py_XDECREF( outline_51_var___module__ );
    outline_51_var___module__ = NULL;

    Py_XDECREF( outline_51_var___doc__ );
    outline_51_var___doc__ = NULL;

    Py_XDECREF( outline_51_var_operator );
    outline_51_var_operator = NULL;

    goto outline_result_53;
    // Exception handler code:
    try_except_handler_108:;
    exception_keeper_type_106 = exception_type;
    exception_keeper_value_106 = exception_value;
    exception_keeper_tb_106 = exception_tb;
    exception_keeper_lineno_106 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_51_var___qualname__ );
    outline_51_var___qualname__ = NULL;

    Py_XDECREF( outline_51_var___module__ );
    outline_51_var___module__ = NULL;

    Py_XDECREF( outline_51_var___doc__ );
    outline_51_var___doc__ = NULL;

    Py_XDECREF( outline_51_var_operator );
    outline_51_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_106;
    exception_value = exception_keeper_value_106;
    exception_tb = exception_keeper_tb_106;
    exception_lineno = exception_keeper_lineno_106;

    goto outline_exception_52;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_52:;
    exception_lineno = 827;
    goto try_except_handler_107;
    outline_result_53:;
    tmp_assign_source_584 = tmp_outline_return_value_53;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Pow, tmp_assign_source_584 );
    goto try_end_55;
    // Exception handler code:
    try_except_handler_107:;
    exception_keeper_type_107 = exception_type;
    exception_keeper_value_107 = exception_value;
    exception_keeper_tb_107 = exception_tb;
    exception_keeper_lineno_107 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_52__bases );
    tmp_class_creation_52__bases = NULL;

    Py_XDECREF( tmp_class_creation_52__class_decl_dict );
    tmp_class_creation_52__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_52__metaclass );
    tmp_class_creation_52__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_52__prepared );
    tmp_class_creation_52__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_107;
    exception_value = exception_keeper_value_107;
    exception_tb = exception_keeper_tb_107;
    exception_lineno = exception_keeper_lineno_107;

    goto frame_exception_exit_1;
    // End of try:
    try_end_55:;
    Py_XDECREF( tmp_class_creation_52__bases );
    tmp_class_creation_52__bases = NULL;

    Py_XDECREF( tmp_class_creation_52__class_decl_dict );
    tmp_class_creation_52__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_52__metaclass );
    tmp_class_creation_52__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_52__prepared );
    tmp_class_creation_52__prepared = NULL;

    // Tried code:
    tmp_assign_source_590 = PyTuple_New( 1 );
    tmp_tuple_element_156 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_156 == NULL ))
    {
        tmp_tuple_element_156 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_156 == NULL )
    {
        Py_DECREF( tmp_assign_source_590 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 832;

        goto try_except_handler_109;
    }

    Py_INCREF( tmp_tuple_element_156 );
    PyTuple_SET_ITEM( tmp_assign_source_590, 0, tmp_tuple_element_156 );
    assert( tmp_class_creation_53__bases == NULL );
    tmp_class_creation_53__bases = tmp_assign_source_590;

    tmp_assign_source_591 = PyDict_New();
    assert( tmp_class_creation_53__class_decl_dict == NULL );
    tmp_class_creation_53__class_decl_dict = tmp_assign_source_591;

    tmp_compare_left_106 = const_str_plain_metaclass;
    tmp_compare_right_106 = tmp_class_creation_53__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_106 );
    tmp_cmp_In_105 = PySequence_Contains( tmp_compare_right_106, tmp_compare_left_106 );
    assert( !(tmp_cmp_In_105 == -1) );
    if ( tmp_cmp_In_105 == 1 )
    {
        goto condexpr_true_157;
    }
    else
    {
        goto condexpr_false_157;
    }
    condexpr_true_157:;
    tmp_dict_name_53 = tmp_class_creation_53__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_53 );
    tmp_key_name_53 = const_str_plain_metaclass;
    tmp_metaclass_name_53 = DICT_GET_ITEM( tmp_dict_name_53, tmp_key_name_53 );
    if ( tmp_metaclass_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_109;
    }
    goto condexpr_end_157;
    condexpr_false_157:;
    tmp_cond_value_53 = tmp_class_creation_53__bases;

    CHECK_OBJECT( tmp_cond_value_53 );
    tmp_cond_truth_53 = CHECK_IF_TRUE( tmp_cond_value_53 );
    if ( tmp_cond_truth_53 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_109;
    }
    if ( tmp_cond_truth_53 == 1 )
    {
        goto condexpr_true_158;
    }
    else
    {
        goto condexpr_false_158;
    }
    condexpr_true_158:;
    tmp_subscribed_name_53 = tmp_class_creation_53__bases;

    CHECK_OBJECT( tmp_subscribed_name_53 );
    tmp_subscript_name_53 = const_int_0;
    tmp_type_arg_53 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_53, tmp_subscript_name_53 );
    if ( tmp_type_arg_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_109;
    }
    tmp_metaclass_name_53 = BUILTIN_TYPE1( tmp_type_arg_53 );
    Py_DECREF( tmp_type_arg_53 );
    if ( tmp_metaclass_name_53 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_109;
    }
    goto condexpr_end_158;
    condexpr_false_158:;
    tmp_metaclass_name_53 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_53 );
    condexpr_end_158:;
    condexpr_end_157:;
    tmp_bases_name_53 = tmp_class_creation_53__bases;

    CHECK_OBJECT( tmp_bases_name_53 );
    tmp_assign_source_592 = SELECT_METACLASS( tmp_metaclass_name_53, tmp_bases_name_53 );
    if ( tmp_assign_source_592 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_53 );

        exception_lineno = 832;

        goto try_except_handler_109;
    }
    Py_DECREF( tmp_metaclass_name_53 );
    assert( tmp_class_creation_53__metaclass == NULL );
    tmp_class_creation_53__metaclass = tmp_assign_source_592;

    tmp_compare_left_107 = const_str_plain_metaclass;
    tmp_compare_right_107 = tmp_class_creation_53__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_107 );
    tmp_cmp_In_106 = PySequence_Contains( tmp_compare_right_107, tmp_compare_left_107 );
    assert( !(tmp_cmp_In_106 == -1) );
    if ( tmp_cmp_In_106 == 1 )
    {
        goto branch_yes_54;
    }
    else
    {
        goto branch_no_54;
    }
    branch_yes_54:;
    tmp_dictdel_dict = tmp_class_creation_53__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_109;
    }
    branch_no_54:;
    tmp_hasattr_source_53 = tmp_class_creation_53__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_53 );
    tmp_hasattr_attr_53 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_53, tmp_hasattr_attr_53 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_109;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_159;
    }
    else
    {
        goto condexpr_false_159;
    }
    condexpr_true_159:;
    tmp_source_name_74 = tmp_class_creation_53__metaclass;

    CHECK_OBJECT( tmp_source_name_74 );
    tmp_called_name_109 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain___prepare__ );
    if ( tmp_called_name_109 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_109;
    }
    tmp_args_name_105 = PyTuple_New( 2 );
    tmp_tuple_element_157 = const_str_plain_And;
    Py_INCREF( tmp_tuple_element_157 );
    PyTuple_SET_ITEM( tmp_args_name_105, 0, tmp_tuple_element_157 );
    tmp_tuple_element_157 = tmp_class_creation_53__bases;

    CHECK_OBJECT( tmp_tuple_element_157 );
    Py_INCREF( tmp_tuple_element_157 );
    PyTuple_SET_ITEM( tmp_args_name_105, 1, tmp_tuple_element_157 );
    tmp_kw_name_105 = tmp_class_creation_53__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_105 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 832;
    tmp_assign_source_593 = CALL_FUNCTION( tmp_called_name_109, tmp_args_name_105, tmp_kw_name_105 );
    Py_DECREF( tmp_called_name_109 );
    Py_DECREF( tmp_args_name_105 );
    if ( tmp_assign_source_593 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_109;
    }
    goto condexpr_end_159;
    condexpr_false_159:;
    tmp_assign_source_593 = PyDict_New();
    condexpr_end_159:;
    assert( tmp_class_creation_53__prepared == NULL );
    tmp_class_creation_53__prepared = tmp_assign_source_593;

    tmp_set_locals = tmp_class_creation_53__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_53);
    locals_dict_53 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_595 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_52_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_595 );
    outline_52_var___module__ = tmp_assign_source_595;

    tmp_assign_source_596 = const_str_digest_5cdce82ded47fc54bb0da62bafae233b;
    assert( outline_52_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_596 );
    outline_52_var___doc__ = tmp_assign_source_596;

    tmp_assign_source_597 = const_str_plain_And;
    assert( outline_52_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_597 );
    outline_52_var___qualname__ = tmp_assign_source_597;

    tmp_assign_source_598 = const_str_plain_and;
    assert( outline_52_var_operator == NULL );
    Py_INCREF( tmp_assign_source_598 );
    outline_52_var_operator = tmp_assign_source_598;

    tmp_defaults_24 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_24 );
    tmp_assign_source_599 = MAKE_FUNCTION_jinja2$nodes$$$function_46_as_const( tmp_defaults_24 );
    assert( outline_52_var_as_const == NULL );
    outline_52_var_as_const = tmp_assign_source_599;

    // Tried code:
    tmp_called_name_110 = tmp_class_creation_53__metaclass;

    CHECK_OBJECT( tmp_called_name_110 );
    tmp_args_name_106 = PyTuple_New( 3 );
    tmp_tuple_element_158 = const_str_plain_And;
    Py_INCREF( tmp_tuple_element_158 );
    PyTuple_SET_ITEM( tmp_args_name_106, 0, tmp_tuple_element_158 );
    tmp_tuple_element_158 = tmp_class_creation_53__bases;

    CHECK_OBJECT( tmp_tuple_element_158 );
    Py_INCREF( tmp_tuple_element_158 );
    PyTuple_SET_ITEM( tmp_args_name_106, 1, tmp_tuple_element_158 );
    tmp_tuple_element_158 = locals_dict_53;
    Py_INCREF( tmp_tuple_element_158 );
    if ( outline_52_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_158,
            const_str_plain___qualname__,
            outline_52_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_158,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_158,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_106 );
        Py_DECREF( tmp_tuple_element_158 );

        exception_lineno = 832;

        goto try_except_handler_110;
    }
    if ( outline_52_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_158,
            const_str_plain___module__,
            outline_52_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_158,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_158,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_106 );
        Py_DECREF( tmp_tuple_element_158 );

        exception_lineno = 832;

        goto try_except_handler_110;
    }
    if ( outline_52_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_158,
            const_str_plain___doc__,
            outline_52_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_158,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_158,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_106 );
        Py_DECREF( tmp_tuple_element_158 );

        exception_lineno = 832;

        goto try_except_handler_110;
    }
    if ( outline_52_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_158,
            const_str_plain_operator,
            outline_52_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_158,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_158,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_106 );
        Py_DECREF( tmp_tuple_element_158 );

        exception_lineno = 832;

        goto try_except_handler_110;
    }
    if ( outline_52_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_158,
            const_str_plain_as_const,
            outline_52_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_158,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_158,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_106 );
        Py_DECREF( tmp_tuple_element_158 );

        exception_lineno = 832;

        goto try_except_handler_110;
    }
    PyTuple_SET_ITEM( tmp_args_name_106, 2, tmp_tuple_element_158 );
    tmp_kw_name_106 = tmp_class_creation_53__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_106 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 832;
    tmp_assign_source_600 = CALL_FUNCTION( tmp_called_name_110, tmp_args_name_106, tmp_kw_name_106 );
    Py_DECREF( tmp_args_name_106 );
    if ( tmp_assign_source_600 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 832;

        goto try_except_handler_110;
    }
    assert( outline_52_var___class__ == NULL );
    outline_52_var___class__ = tmp_assign_source_600;

    tmp_outline_return_value_54 = outline_52_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_54 );
    Py_INCREF( tmp_outline_return_value_54 );
    goto try_return_handler_110;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_110:;
    CHECK_OBJECT( (PyObject *)outline_52_var___class__ );
    Py_DECREF( outline_52_var___class__ );
    outline_52_var___class__ = NULL;

    Py_XDECREF( outline_52_var___qualname__ );
    outline_52_var___qualname__ = NULL;

    Py_XDECREF( outline_52_var___module__ );
    outline_52_var___module__ = NULL;

    Py_XDECREF( outline_52_var___doc__ );
    outline_52_var___doc__ = NULL;

    Py_XDECREF( outline_52_var_operator );
    outline_52_var_operator = NULL;

    Py_XDECREF( outline_52_var_as_const );
    outline_52_var_as_const = NULL;

    goto outline_result_54;
    // Exception handler code:
    try_except_handler_110:;
    exception_keeper_type_108 = exception_type;
    exception_keeper_value_108 = exception_value;
    exception_keeper_tb_108 = exception_tb;
    exception_keeper_lineno_108 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_52_var___qualname__ );
    outline_52_var___qualname__ = NULL;

    Py_XDECREF( outline_52_var___module__ );
    outline_52_var___module__ = NULL;

    Py_XDECREF( outline_52_var___doc__ );
    outline_52_var___doc__ = NULL;

    Py_XDECREF( outline_52_var_operator );
    outline_52_var_operator = NULL;

    Py_XDECREF( outline_52_var_as_const );
    outline_52_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_108;
    exception_value = exception_keeper_value_108;
    exception_tb = exception_keeper_tb_108;
    exception_lineno = exception_keeper_lineno_108;

    goto outline_exception_53;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_53:;
    exception_lineno = 832;
    goto try_except_handler_109;
    outline_result_54:;
    tmp_assign_source_594 = tmp_outline_return_value_54;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_And, tmp_assign_source_594 );
    goto try_end_56;
    // Exception handler code:
    try_except_handler_109:;
    exception_keeper_type_109 = exception_type;
    exception_keeper_value_109 = exception_value;
    exception_keeper_tb_109 = exception_tb;
    exception_keeper_lineno_109 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_53__bases );
    tmp_class_creation_53__bases = NULL;

    Py_XDECREF( tmp_class_creation_53__class_decl_dict );
    tmp_class_creation_53__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_53__metaclass );
    tmp_class_creation_53__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_53__prepared );
    tmp_class_creation_53__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_109;
    exception_value = exception_keeper_value_109;
    exception_tb = exception_keeper_tb_109;
    exception_lineno = exception_keeper_lineno_109;

    goto frame_exception_exit_1;
    // End of try:
    try_end_56:;
    Py_XDECREF( tmp_class_creation_53__bases );
    tmp_class_creation_53__bases = NULL;

    Py_XDECREF( tmp_class_creation_53__class_decl_dict );
    tmp_class_creation_53__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_53__metaclass );
    tmp_class_creation_53__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_53__prepared );
    tmp_class_creation_53__prepared = NULL;

    // Tried code:
    tmp_assign_source_601 = PyTuple_New( 1 );
    tmp_tuple_element_159 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_BinExpr );

    if (unlikely( tmp_tuple_element_159 == NULL ))
    {
        tmp_tuple_element_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BinExpr );
    }

    if ( tmp_tuple_element_159 == NULL )
    {
        Py_DECREF( tmp_assign_source_601 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BinExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 841;

        goto try_except_handler_111;
    }

    Py_INCREF( tmp_tuple_element_159 );
    PyTuple_SET_ITEM( tmp_assign_source_601, 0, tmp_tuple_element_159 );
    assert( tmp_class_creation_54__bases == NULL );
    tmp_class_creation_54__bases = tmp_assign_source_601;

    tmp_assign_source_602 = PyDict_New();
    assert( tmp_class_creation_54__class_decl_dict == NULL );
    tmp_class_creation_54__class_decl_dict = tmp_assign_source_602;

    tmp_compare_left_108 = const_str_plain_metaclass;
    tmp_compare_right_108 = tmp_class_creation_54__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_108 );
    tmp_cmp_In_107 = PySequence_Contains( tmp_compare_right_108, tmp_compare_left_108 );
    assert( !(tmp_cmp_In_107 == -1) );
    if ( tmp_cmp_In_107 == 1 )
    {
        goto condexpr_true_160;
    }
    else
    {
        goto condexpr_false_160;
    }
    condexpr_true_160:;
    tmp_dict_name_54 = tmp_class_creation_54__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_54 );
    tmp_key_name_54 = const_str_plain_metaclass;
    tmp_metaclass_name_54 = DICT_GET_ITEM( tmp_dict_name_54, tmp_key_name_54 );
    if ( tmp_metaclass_name_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_111;
    }
    goto condexpr_end_160;
    condexpr_false_160:;
    tmp_cond_value_54 = tmp_class_creation_54__bases;

    CHECK_OBJECT( tmp_cond_value_54 );
    tmp_cond_truth_54 = CHECK_IF_TRUE( tmp_cond_value_54 );
    if ( tmp_cond_truth_54 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_111;
    }
    if ( tmp_cond_truth_54 == 1 )
    {
        goto condexpr_true_161;
    }
    else
    {
        goto condexpr_false_161;
    }
    condexpr_true_161:;
    tmp_subscribed_name_54 = tmp_class_creation_54__bases;

    CHECK_OBJECT( tmp_subscribed_name_54 );
    tmp_subscript_name_54 = const_int_0;
    tmp_type_arg_54 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_54, tmp_subscript_name_54 );
    if ( tmp_type_arg_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_111;
    }
    tmp_metaclass_name_54 = BUILTIN_TYPE1( tmp_type_arg_54 );
    Py_DECREF( tmp_type_arg_54 );
    if ( tmp_metaclass_name_54 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_111;
    }
    goto condexpr_end_161;
    condexpr_false_161:;
    tmp_metaclass_name_54 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_54 );
    condexpr_end_161:;
    condexpr_end_160:;
    tmp_bases_name_54 = tmp_class_creation_54__bases;

    CHECK_OBJECT( tmp_bases_name_54 );
    tmp_assign_source_603 = SELECT_METACLASS( tmp_metaclass_name_54, tmp_bases_name_54 );
    if ( tmp_assign_source_603 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_54 );

        exception_lineno = 841;

        goto try_except_handler_111;
    }
    Py_DECREF( tmp_metaclass_name_54 );
    assert( tmp_class_creation_54__metaclass == NULL );
    tmp_class_creation_54__metaclass = tmp_assign_source_603;

    tmp_compare_left_109 = const_str_plain_metaclass;
    tmp_compare_right_109 = tmp_class_creation_54__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_109 );
    tmp_cmp_In_108 = PySequence_Contains( tmp_compare_right_109, tmp_compare_left_109 );
    assert( !(tmp_cmp_In_108 == -1) );
    if ( tmp_cmp_In_108 == 1 )
    {
        goto branch_yes_55;
    }
    else
    {
        goto branch_no_55;
    }
    branch_yes_55:;
    tmp_dictdel_dict = tmp_class_creation_54__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_111;
    }
    branch_no_55:;
    tmp_hasattr_source_54 = tmp_class_creation_54__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_54 );
    tmp_hasattr_attr_54 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_54, tmp_hasattr_attr_54 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_111;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_162;
    }
    else
    {
        goto condexpr_false_162;
    }
    condexpr_true_162:;
    tmp_source_name_75 = tmp_class_creation_54__metaclass;

    CHECK_OBJECT( tmp_source_name_75 );
    tmp_called_name_111 = LOOKUP_ATTRIBUTE( tmp_source_name_75, const_str_plain___prepare__ );
    if ( tmp_called_name_111 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_111;
    }
    tmp_args_name_107 = PyTuple_New( 2 );
    tmp_tuple_element_160 = const_str_plain_Or;
    Py_INCREF( tmp_tuple_element_160 );
    PyTuple_SET_ITEM( tmp_args_name_107, 0, tmp_tuple_element_160 );
    tmp_tuple_element_160 = tmp_class_creation_54__bases;

    CHECK_OBJECT( tmp_tuple_element_160 );
    Py_INCREF( tmp_tuple_element_160 );
    PyTuple_SET_ITEM( tmp_args_name_107, 1, tmp_tuple_element_160 );
    tmp_kw_name_107 = tmp_class_creation_54__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_107 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 841;
    tmp_assign_source_604 = CALL_FUNCTION( tmp_called_name_111, tmp_args_name_107, tmp_kw_name_107 );
    Py_DECREF( tmp_called_name_111 );
    Py_DECREF( tmp_args_name_107 );
    if ( tmp_assign_source_604 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_111;
    }
    goto condexpr_end_162;
    condexpr_false_162:;
    tmp_assign_source_604 = PyDict_New();
    condexpr_end_162:;
    assert( tmp_class_creation_54__prepared == NULL );
    tmp_class_creation_54__prepared = tmp_assign_source_604;

    tmp_set_locals = tmp_class_creation_54__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_54);
    locals_dict_54 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_606 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_53_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_606 );
    outline_53_var___module__ = tmp_assign_source_606;

    tmp_assign_source_607 = const_str_digest_79ea6dec54e21b3bfa6b7035b4beebe1;
    assert( outline_53_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_607 );
    outline_53_var___doc__ = tmp_assign_source_607;

    tmp_assign_source_608 = const_str_plain_Or;
    assert( outline_53_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_608 );
    outline_53_var___qualname__ = tmp_assign_source_608;

    tmp_assign_source_609 = const_str_plain_or;
    assert( outline_53_var_operator == NULL );
    Py_INCREF( tmp_assign_source_609 );
    outline_53_var_operator = tmp_assign_source_609;

    tmp_defaults_25 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_25 );
    tmp_assign_source_610 = MAKE_FUNCTION_jinja2$nodes$$$function_47_as_const( tmp_defaults_25 );
    assert( outline_53_var_as_const == NULL );
    outline_53_var_as_const = tmp_assign_source_610;

    // Tried code:
    tmp_called_name_112 = tmp_class_creation_54__metaclass;

    CHECK_OBJECT( tmp_called_name_112 );
    tmp_args_name_108 = PyTuple_New( 3 );
    tmp_tuple_element_161 = const_str_plain_Or;
    Py_INCREF( tmp_tuple_element_161 );
    PyTuple_SET_ITEM( tmp_args_name_108, 0, tmp_tuple_element_161 );
    tmp_tuple_element_161 = tmp_class_creation_54__bases;

    CHECK_OBJECT( tmp_tuple_element_161 );
    Py_INCREF( tmp_tuple_element_161 );
    PyTuple_SET_ITEM( tmp_args_name_108, 1, tmp_tuple_element_161 );
    tmp_tuple_element_161 = locals_dict_54;
    Py_INCREF( tmp_tuple_element_161 );
    if ( outline_53_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_161,
            const_str_plain___qualname__,
            outline_53_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_161,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_161,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_108 );
        Py_DECREF( tmp_tuple_element_161 );

        exception_lineno = 841;

        goto try_except_handler_112;
    }
    if ( outline_53_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_161,
            const_str_plain___module__,
            outline_53_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_161,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_161,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_108 );
        Py_DECREF( tmp_tuple_element_161 );

        exception_lineno = 841;

        goto try_except_handler_112;
    }
    if ( outline_53_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_161,
            const_str_plain___doc__,
            outline_53_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_161,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_161,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_108 );
        Py_DECREF( tmp_tuple_element_161 );

        exception_lineno = 841;

        goto try_except_handler_112;
    }
    if ( outline_53_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_161,
            const_str_plain_operator,
            outline_53_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_161,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_161,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_108 );
        Py_DECREF( tmp_tuple_element_161 );

        exception_lineno = 841;

        goto try_except_handler_112;
    }
    if ( outline_53_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_161,
            const_str_plain_as_const,
            outline_53_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_161,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_161,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_108 );
        Py_DECREF( tmp_tuple_element_161 );

        exception_lineno = 841;

        goto try_except_handler_112;
    }
    PyTuple_SET_ITEM( tmp_args_name_108, 2, tmp_tuple_element_161 );
    tmp_kw_name_108 = tmp_class_creation_54__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_108 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 841;
    tmp_assign_source_611 = CALL_FUNCTION( tmp_called_name_112, tmp_args_name_108, tmp_kw_name_108 );
    Py_DECREF( tmp_args_name_108 );
    if ( tmp_assign_source_611 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 841;

        goto try_except_handler_112;
    }
    assert( outline_53_var___class__ == NULL );
    outline_53_var___class__ = tmp_assign_source_611;

    tmp_outline_return_value_55 = outline_53_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_55 );
    Py_INCREF( tmp_outline_return_value_55 );
    goto try_return_handler_112;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_112:;
    CHECK_OBJECT( (PyObject *)outline_53_var___class__ );
    Py_DECREF( outline_53_var___class__ );
    outline_53_var___class__ = NULL;

    Py_XDECREF( outline_53_var___qualname__ );
    outline_53_var___qualname__ = NULL;

    Py_XDECREF( outline_53_var___module__ );
    outline_53_var___module__ = NULL;

    Py_XDECREF( outline_53_var___doc__ );
    outline_53_var___doc__ = NULL;

    Py_XDECREF( outline_53_var_operator );
    outline_53_var_operator = NULL;

    Py_XDECREF( outline_53_var_as_const );
    outline_53_var_as_const = NULL;

    goto outline_result_55;
    // Exception handler code:
    try_except_handler_112:;
    exception_keeper_type_110 = exception_type;
    exception_keeper_value_110 = exception_value;
    exception_keeper_tb_110 = exception_tb;
    exception_keeper_lineno_110 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_53_var___qualname__ );
    outline_53_var___qualname__ = NULL;

    Py_XDECREF( outline_53_var___module__ );
    outline_53_var___module__ = NULL;

    Py_XDECREF( outline_53_var___doc__ );
    outline_53_var___doc__ = NULL;

    Py_XDECREF( outline_53_var_operator );
    outline_53_var_operator = NULL;

    Py_XDECREF( outline_53_var_as_const );
    outline_53_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_110;
    exception_value = exception_keeper_value_110;
    exception_tb = exception_keeper_tb_110;
    exception_lineno = exception_keeper_lineno_110;

    goto outline_exception_54;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_54:;
    exception_lineno = 841;
    goto try_except_handler_111;
    outline_result_55:;
    tmp_assign_source_605 = tmp_outline_return_value_55;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Or, tmp_assign_source_605 );
    goto try_end_57;
    // Exception handler code:
    try_except_handler_111:;
    exception_keeper_type_111 = exception_type;
    exception_keeper_value_111 = exception_value;
    exception_keeper_tb_111 = exception_tb;
    exception_keeper_lineno_111 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_54__bases );
    tmp_class_creation_54__bases = NULL;

    Py_XDECREF( tmp_class_creation_54__class_decl_dict );
    tmp_class_creation_54__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_54__metaclass );
    tmp_class_creation_54__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_54__prepared );
    tmp_class_creation_54__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_111;
    exception_value = exception_keeper_value_111;
    exception_tb = exception_keeper_tb_111;
    exception_lineno = exception_keeper_lineno_111;

    goto frame_exception_exit_1;
    // End of try:
    try_end_57:;
    Py_XDECREF( tmp_class_creation_54__bases );
    tmp_class_creation_54__bases = NULL;

    Py_XDECREF( tmp_class_creation_54__class_decl_dict );
    tmp_class_creation_54__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_54__metaclass );
    tmp_class_creation_54__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_54__prepared );
    tmp_class_creation_54__prepared = NULL;

    // Tried code:
    tmp_assign_source_612 = PyTuple_New( 1 );
    tmp_tuple_element_162 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_UnaryExpr );

    if (unlikely( tmp_tuple_element_162 == NULL ))
    {
        tmp_tuple_element_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_UnaryExpr );
    }

    if ( tmp_tuple_element_162 == NULL )
    {
        Py_DECREF( tmp_assign_source_612 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "UnaryExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 850;

        goto try_except_handler_113;
    }

    Py_INCREF( tmp_tuple_element_162 );
    PyTuple_SET_ITEM( tmp_assign_source_612, 0, tmp_tuple_element_162 );
    assert( tmp_class_creation_55__bases == NULL );
    tmp_class_creation_55__bases = tmp_assign_source_612;

    tmp_assign_source_613 = PyDict_New();
    assert( tmp_class_creation_55__class_decl_dict == NULL );
    tmp_class_creation_55__class_decl_dict = tmp_assign_source_613;

    tmp_compare_left_110 = const_str_plain_metaclass;
    tmp_compare_right_110 = tmp_class_creation_55__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_110 );
    tmp_cmp_In_109 = PySequence_Contains( tmp_compare_right_110, tmp_compare_left_110 );
    assert( !(tmp_cmp_In_109 == -1) );
    if ( tmp_cmp_In_109 == 1 )
    {
        goto condexpr_true_163;
    }
    else
    {
        goto condexpr_false_163;
    }
    condexpr_true_163:;
    tmp_dict_name_55 = tmp_class_creation_55__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_55 );
    tmp_key_name_55 = const_str_plain_metaclass;
    tmp_metaclass_name_55 = DICT_GET_ITEM( tmp_dict_name_55, tmp_key_name_55 );
    if ( tmp_metaclass_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_113;
    }
    goto condexpr_end_163;
    condexpr_false_163:;
    tmp_cond_value_55 = tmp_class_creation_55__bases;

    CHECK_OBJECT( tmp_cond_value_55 );
    tmp_cond_truth_55 = CHECK_IF_TRUE( tmp_cond_value_55 );
    if ( tmp_cond_truth_55 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_113;
    }
    if ( tmp_cond_truth_55 == 1 )
    {
        goto condexpr_true_164;
    }
    else
    {
        goto condexpr_false_164;
    }
    condexpr_true_164:;
    tmp_subscribed_name_55 = tmp_class_creation_55__bases;

    CHECK_OBJECT( tmp_subscribed_name_55 );
    tmp_subscript_name_55 = const_int_0;
    tmp_type_arg_55 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_55, tmp_subscript_name_55 );
    if ( tmp_type_arg_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_113;
    }
    tmp_metaclass_name_55 = BUILTIN_TYPE1( tmp_type_arg_55 );
    Py_DECREF( tmp_type_arg_55 );
    if ( tmp_metaclass_name_55 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_113;
    }
    goto condexpr_end_164;
    condexpr_false_164:;
    tmp_metaclass_name_55 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_55 );
    condexpr_end_164:;
    condexpr_end_163:;
    tmp_bases_name_55 = tmp_class_creation_55__bases;

    CHECK_OBJECT( tmp_bases_name_55 );
    tmp_assign_source_614 = SELECT_METACLASS( tmp_metaclass_name_55, tmp_bases_name_55 );
    if ( tmp_assign_source_614 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_55 );

        exception_lineno = 850;

        goto try_except_handler_113;
    }
    Py_DECREF( tmp_metaclass_name_55 );
    assert( tmp_class_creation_55__metaclass == NULL );
    tmp_class_creation_55__metaclass = tmp_assign_source_614;

    tmp_compare_left_111 = const_str_plain_metaclass;
    tmp_compare_right_111 = tmp_class_creation_55__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_111 );
    tmp_cmp_In_110 = PySequence_Contains( tmp_compare_right_111, tmp_compare_left_111 );
    assert( !(tmp_cmp_In_110 == -1) );
    if ( tmp_cmp_In_110 == 1 )
    {
        goto branch_yes_56;
    }
    else
    {
        goto branch_no_56;
    }
    branch_yes_56:;
    tmp_dictdel_dict = tmp_class_creation_55__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_113;
    }
    branch_no_56:;
    tmp_hasattr_source_55 = tmp_class_creation_55__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_55 );
    tmp_hasattr_attr_55 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_55, tmp_hasattr_attr_55 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_113;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_165;
    }
    else
    {
        goto condexpr_false_165;
    }
    condexpr_true_165:;
    tmp_source_name_76 = tmp_class_creation_55__metaclass;

    CHECK_OBJECT( tmp_source_name_76 );
    tmp_called_name_113 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain___prepare__ );
    if ( tmp_called_name_113 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_113;
    }
    tmp_args_name_109 = PyTuple_New( 2 );
    tmp_tuple_element_163 = const_str_plain_Not;
    Py_INCREF( tmp_tuple_element_163 );
    PyTuple_SET_ITEM( tmp_args_name_109, 0, tmp_tuple_element_163 );
    tmp_tuple_element_163 = tmp_class_creation_55__bases;

    CHECK_OBJECT( tmp_tuple_element_163 );
    Py_INCREF( tmp_tuple_element_163 );
    PyTuple_SET_ITEM( tmp_args_name_109, 1, tmp_tuple_element_163 );
    tmp_kw_name_109 = tmp_class_creation_55__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_109 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 850;
    tmp_assign_source_615 = CALL_FUNCTION( tmp_called_name_113, tmp_args_name_109, tmp_kw_name_109 );
    Py_DECREF( tmp_called_name_113 );
    Py_DECREF( tmp_args_name_109 );
    if ( tmp_assign_source_615 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_113;
    }
    goto condexpr_end_165;
    condexpr_false_165:;
    tmp_assign_source_615 = PyDict_New();
    condexpr_end_165:;
    assert( tmp_class_creation_55__prepared == NULL );
    tmp_class_creation_55__prepared = tmp_assign_source_615;

    tmp_set_locals = tmp_class_creation_55__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_55);
    locals_dict_55 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_617 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_54_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_617 );
    outline_54_var___module__ = tmp_assign_source_617;

    tmp_assign_source_618 = const_str_digest_d364da1f2a98272e996ae1943cda6b6c;
    assert( outline_54_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_618 );
    outline_54_var___doc__ = tmp_assign_source_618;

    tmp_assign_source_619 = const_str_plain_Not;
    assert( outline_54_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_619 );
    outline_54_var___qualname__ = tmp_assign_source_619;

    tmp_assign_source_620 = const_str_plain_not;
    assert( outline_54_var_operator == NULL );
    Py_INCREF( tmp_assign_source_620 );
    outline_54_var_operator = tmp_assign_source_620;

    // Tried code:
    tmp_called_name_114 = tmp_class_creation_55__metaclass;

    CHECK_OBJECT( tmp_called_name_114 );
    tmp_args_name_110 = PyTuple_New( 3 );
    tmp_tuple_element_164 = const_str_plain_Not;
    Py_INCREF( tmp_tuple_element_164 );
    PyTuple_SET_ITEM( tmp_args_name_110, 0, tmp_tuple_element_164 );
    tmp_tuple_element_164 = tmp_class_creation_55__bases;

    CHECK_OBJECT( tmp_tuple_element_164 );
    Py_INCREF( tmp_tuple_element_164 );
    PyTuple_SET_ITEM( tmp_args_name_110, 1, tmp_tuple_element_164 );
    tmp_tuple_element_164 = locals_dict_55;
    Py_INCREF( tmp_tuple_element_164 );
    if ( outline_54_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_164,
            const_str_plain___qualname__,
            outline_54_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_164,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_164,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_110 );
        Py_DECREF( tmp_tuple_element_164 );

        exception_lineno = 850;

        goto try_except_handler_114;
    }
    if ( outline_54_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_164,
            const_str_plain___module__,
            outline_54_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_164,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_164,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_110 );
        Py_DECREF( tmp_tuple_element_164 );

        exception_lineno = 850;

        goto try_except_handler_114;
    }
    if ( outline_54_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_164,
            const_str_plain___doc__,
            outline_54_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_164,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_164,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_110 );
        Py_DECREF( tmp_tuple_element_164 );

        exception_lineno = 850;

        goto try_except_handler_114;
    }
    if ( outline_54_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_164,
            const_str_plain_operator,
            outline_54_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_164,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_164,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_110 );
        Py_DECREF( tmp_tuple_element_164 );

        exception_lineno = 850;

        goto try_except_handler_114;
    }
    PyTuple_SET_ITEM( tmp_args_name_110, 2, tmp_tuple_element_164 );
    tmp_kw_name_110 = tmp_class_creation_55__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_110 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 850;
    tmp_assign_source_621 = CALL_FUNCTION( tmp_called_name_114, tmp_args_name_110, tmp_kw_name_110 );
    Py_DECREF( tmp_args_name_110 );
    if ( tmp_assign_source_621 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 850;

        goto try_except_handler_114;
    }
    assert( outline_54_var___class__ == NULL );
    outline_54_var___class__ = tmp_assign_source_621;

    tmp_outline_return_value_56 = outline_54_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_56 );
    Py_INCREF( tmp_outline_return_value_56 );
    goto try_return_handler_114;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_114:;
    CHECK_OBJECT( (PyObject *)outline_54_var___class__ );
    Py_DECREF( outline_54_var___class__ );
    outline_54_var___class__ = NULL;

    Py_XDECREF( outline_54_var___qualname__ );
    outline_54_var___qualname__ = NULL;

    Py_XDECREF( outline_54_var___module__ );
    outline_54_var___module__ = NULL;

    Py_XDECREF( outline_54_var___doc__ );
    outline_54_var___doc__ = NULL;

    Py_XDECREF( outline_54_var_operator );
    outline_54_var_operator = NULL;

    goto outline_result_56;
    // Exception handler code:
    try_except_handler_114:;
    exception_keeper_type_112 = exception_type;
    exception_keeper_value_112 = exception_value;
    exception_keeper_tb_112 = exception_tb;
    exception_keeper_lineno_112 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_54_var___qualname__ );
    outline_54_var___qualname__ = NULL;

    Py_XDECREF( outline_54_var___module__ );
    outline_54_var___module__ = NULL;

    Py_XDECREF( outline_54_var___doc__ );
    outline_54_var___doc__ = NULL;

    Py_XDECREF( outline_54_var_operator );
    outline_54_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_112;
    exception_value = exception_keeper_value_112;
    exception_tb = exception_keeper_tb_112;
    exception_lineno = exception_keeper_lineno_112;

    goto outline_exception_55;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_55:;
    exception_lineno = 850;
    goto try_except_handler_113;
    outline_result_56:;
    tmp_assign_source_616 = tmp_outline_return_value_56;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Not, tmp_assign_source_616 );
    goto try_end_58;
    // Exception handler code:
    try_except_handler_113:;
    exception_keeper_type_113 = exception_type;
    exception_keeper_value_113 = exception_value;
    exception_keeper_tb_113 = exception_tb;
    exception_keeper_lineno_113 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_55__bases );
    tmp_class_creation_55__bases = NULL;

    Py_XDECREF( tmp_class_creation_55__class_decl_dict );
    tmp_class_creation_55__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_55__metaclass );
    tmp_class_creation_55__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_55__prepared );
    tmp_class_creation_55__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_113;
    exception_value = exception_keeper_value_113;
    exception_tb = exception_keeper_tb_113;
    exception_lineno = exception_keeper_lineno_113;

    goto frame_exception_exit_1;
    // End of try:
    try_end_58:;
    Py_XDECREF( tmp_class_creation_55__bases );
    tmp_class_creation_55__bases = NULL;

    Py_XDECREF( tmp_class_creation_55__class_decl_dict );
    tmp_class_creation_55__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_55__metaclass );
    tmp_class_creation_55__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_55__prepared );
    tmp_class_creation_55__prepared = NULL;

    // Tried code:
    tmp_assign_source_622 = PyTuple_New( 1 );
    tmp_tuple_element_165 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_UnaryExpr );

    if (unlikely( tmp_tuple_element_165 == NULL ))
    {
        tmp_tuple_element_165 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_UnaryExpr );
    }

    if ( tmp_tuple_element_165 == NULL )
    {
        Py_DECREF( tmp_assign_source_622 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "UnaryExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 855;

        goto try_except_handler_115;
    }

    Py_INCREF( tmp_tuple_element_165 );
    PyTuple_SET_ITEM( tmp_assign_source_622, 0, tmp_tuple_element_165 );
    assert( tmp_class_creation_56__bases == NULL );
    tmp_class_creation_56__bases = tmp_assign_source_622;

    tmp_assign_source_623 = PyDict_New();
    assert( tmp_class_creation_56__class_decl_dict == NULL );
    tmp_class_creation_56__class_decl_dict = tmp_assign_source_623;

    tmp_compare_left_112 = const_str_plain_metaclass;
    tmp_compare_right_112 = tmp_class_creation_56__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_112 );
    tmp_cmp_In_111 = PySequence_Contains( tmp_compare_right_112, tmp_compare_left_112 );
    assert( !(tmp_cmp_In_111 == -1) );
    if ( tmp_cmp_In_111 == 1 )
    {
        goto condexpr_true_166;
    }
    else
    {
        goto condexpr_false_166;
    }
    condexpr_true_166:;
    tmp_dict_name_56 = tmp_class_creation_56__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_56 );
    tmp_key_name_56 = const_str_plain_metaclass;
    tmp_metaclass_name_56 = DICT_GET_ITEM( tmp_dict_name_56, tmp_key_name_56 );
    if ( tmp_metaclass_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_115;
    }
    goto condexpr_end_166;
    condexpr_false_166:;
    tmp_cond_value_56 = tmp_class_creation_56__bases;

    CHECK_OBJECT( tmp_cond_value_56 );
    tmp_cond_truth_56 = CHECK_IF_TRUE( tmp_cond_value_56 );
    if ( tmp_cond_truth_56 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_115;
    }
    if ( tmp_cond_truth_56 == 1 )
    {
        goto condexpr_true_167;
    }
    else
    {
        goto condexpr_false_167;
    }
    condexpr_true_167:;
    tmp_subscribed_name_56 = tmp_class_creation_56__bases;

    CHECK_OBJECT( tmp_subscribed_name_56 );
    tmp_subscript_name_56 = const_int_0;
    tmp_type_arg_56 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_56, tmp_subscript_name_56 );
    if ( tmp_type_arg_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_115;
    }
    tmp_metaclass_name_56 = BUILTIN_TYPE1( tmp_type_arg_56 );
    Py_DECREF( tmp_type_arg_56 );
    if ( tmp_metaclass_name_56 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_115;
    }
    goto condexpr_end_167;
    condexpr_false_167:;
    tmp_metaclass_name_56 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_56 );
    condexpr_end_167:;
    condexpr_end_166:;
    tmp_bases_name_56 = tmp_class_creation_56__bases;

    CHECK_OBJECT( tmp_bases_name_56 );
    tmp_assign_source_624 = SELECT_METACLASS( tmp_metaclass_name_56, tmp_bases_name_56 );
    if ( tmp_assign_source_624 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_56 );

        exception_lineno = 855;

        goto try_except_handler_115;
    }
    Py_DECREF( tmp_metaclass_name_56 );
    assert( tmp_class_creation_56__metaclass == NULL );
    tmp_class_creation_56__metaclass = tmp_assign_source_624;

    tmp_compare_left_113 = const_str_plain_metaclass;
    tmp_compare_right_113 = tmp_class_creation_56__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_113 );
    tmp_cmp_In_112 = PySequence_Contains( tmp_compare_right_113, tmp_compare_left_113 );
    assert( !(tmp_cmp_In_112 == -1) );
    if ( tmp_cmp_In_112 == 1 )
    {
        goto branch_yes_57;
    }
    else
    {
        goto branch_no_57;
    }
    branch_yes_57:;
    tmp_dictdel_dict = tmp_class_creation_56__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_115;
    }
    branch_no_57:;
    tmp_hasattr_source_56 = tmp_class_creation_56__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_56 );
    tmp_hasattr_attr_56 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_56, tmp_hasattr_attr_56 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_115;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_168;
    }
    else
    {
        goto condexpr_false_168;
    }
    condexpr_true_168:;
    tmp_source_name_77 = tmp_class_creation_56__metaclass;

    CHECK_OBJECT( tmp_source_name_77 );
    tmp_called_name_115 = LOOKUP_ATTRIBUTE( tmp_source_name_77, const_str_plain___prepare__ );
    if ( tmp_called_name_115 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_115;
    }
    tmp_args_name_111 = PyTuple_New( 2 );
    tmp_tuple_element_166 = const_str_plain_Neg;
    Py_INCREF( tmp_tuple_element_166 );
    PyTuple_SET_ITEM( tmp_args_name_111, 0, tmp_tuple_element_166 );
    tmp_tuple_element_166 = tmp_class_creation_56__bases;

    CHECK_OBJECT( tmp_tuple_element_166 );
    Py_INCREF( tmp_tuple_element_166 );
    PyTuple_SET_ITEM( tmp_args_name_111, 1, tmp_tuple_element_166 );
    tmp_kw_name_111 = tmp_class_creation_56__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_111 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 855;
    tmp_assign_source_625 = CALL_FUNCTION( tmp_called_name_115, tmp_args_name_111, tmp_kw_name_111 );
    Py_DECREF( tmp_called_name_115 );
    Py_DECREF( tmp_args_name_111 );
    if ( tmp_assign_source_625 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_115;
    }
    goto condexpr_end_168;
    condexpr_false_168:;
    tmp_assign_source_625 = PyDict_New();
    condexpr_end_168:;
    assert( tmp_class_creation_56__prepared == NULL );
    tmp_class_creation_56__prepared = tmp_assign_source_625;

    tmp_set_locals = tmp_class_creation_56__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_56);
    locals_dict_56 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_627 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_55_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_627 );
    outline_55_var___module__ = tmp_assign_source_627;

    tmp_assign_source_628 = const_str_digest_20dffb12e48304fa2db99a68a5e34d1e;
    assert( outline_55_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_628 );
    outline_55_var___doc__ = tmp_assign_source_628;

    tmp_assign_source_629 = const_str_plain_Neg;
    assert( outline_55_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_629 );
    outline_55_var___qualname__ = tmp_assign_source_629;

    tmp_assign_source_630 = const_str_chr_45;
    assert( outline_55_var_operator == NULL );
    Py_INCREF( tmp_assign_source_630 );
    outline_55_var_operator = tmp_assign_source_630;

    // Tried code:
    tmp_called_name_116 = tmp_class_creation_56__metaclass;

    CHECK_OBJECT( tmp_called_name_116 );
    tmp_args_name_112 = PyTuple_New( 3 );
    tmp_tuple_element_167 = const_str_plain_Neg;
    Py_INCREF( tmp_tuple_element_167 );
    PyTuple_SET_ITEM( tmp_args_name_112, 0, tmp_tuple_element_167 );
    tmp_tuple_element_167 = tmp_class_creation_56__bases;

    CHECK_OBJECT( tmp_tuple_element_167 );
    Py_INCREF( tmp_tuple_element_167 );
    PyTuple_SET_ITEM( tmp_args_name_112, 1, tmp_tuple_element_167 );
    tmp_tuple_element_167 = locals_dict_56;
    Py_INCREF( tmp_tuple_element_167 );
    if ( outline_55_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_167,
            const_str_plain___qualname__,
            outline_55_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_167,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_167,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_112 );
        Py_DECREF( tmp_tuple_element_167 );

        exception_lineno = 855;

        goto try_except_handler_116;
    }
    if ( outline_55_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_167,
            const_str_plain___module__,
            outline_55_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_167,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_167,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_112 );
        Py_DECREF( tmp_tuple_element_167 );

        exception_lineno = 855;

        goto try_except_handler_116;
    }
    if ( outline_55_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_167,
            const_str_plain___doc__,
            outline_55_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_167,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_167,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_112 );
        Py_DECREF( tmp_tuple_element_167 );

        exception_lineno = 855;

        goto try_except_handler_116;
    }
    if ( outline_55_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_167,
            const_str_plain_operator,
            outline_55_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_167,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_167,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_112 );
        Py_DECREF( tmp_tuple_element_167 );

        exception_lineno = 855;

        goto try_except_handler_116;
    }
    PyTuple_SET_ITEM( tmp_args_name_112, 2, tmp_tuple_element_167 );
    tmp_kw_name_112 = tmp_class_creation_56__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_112 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 855;
    tmp_assign_source_631 = CALL_FUNCTION( tmp_called_name_116, tmp_args_name_112, tmp_kw_name_112 );
    Py_DECREF( tmp_args_name_112 );
    if ( tmp_assign_source_631 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 855;

        goto try_except_handler_116;
    }
    assert( outline_55_var___class__ == NULL );
    outline_55_var___class__ = tmp_assign_source_631;

    tmp_outline_return_value_57 = outline_55_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_57 );
    Py_INCREF( tmp_outline_return_value_57 );
    goto try_return_handler_116;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_116:;
    CHECK_OBJECT( (PyObject *)outline_55_var___class__ );
    Py_DECREF( outline_55_var___class__ );
    outline_55_var___class__ = NULL;

    Py_XDECREF( outline_55_var___qualname__ );
    outline_55_var___qualname__ = NULL;

    Py_XDECREF( outline_55_var___module__ );
    outline_55_var___module__ = NULL;

    Py_XDECREF( outline_55_var___doc__ );
    outline_55_var___doc__ = NULL;

    Py_XDECREF( outline_55_var_operator );
    outline_55_var_operator = NULL;

    goto outline_result_57;
    // Exception handler code:
    try_except_handler_116:;
    exception_keeper_type_114 = exception_type;
    exception_keeper_value_114 = exception_value;
    exception_keeper_tb_114 = exception_tb;
    exception_keeper_lineno_114 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_55_var___qualname__ );
    outline_55_var___qualname__ = NULL;

    Py_XDECREF( outline_55_var___module__ );
    outline_55_var___module__ = NULL;

    Py_XDECREF( outline_55_var___doc__ );
    outline_55_var___doc__ = NULL;

    Py_XDECREF( outline_55_var_operator );
    outline_55_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_114;
    exception_value = exception_keeper_value_114;
    exception_tb = exception_keeper_tb_114;
    exception_lineno = exception_keeper_lineno_114;

    goto outline_exception_56;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_56:;
    exception_lineno = 855;
    goto try_except_handler_115;
    outline_result_57:;
    tmp_assign_source_626 = tmp_outline_return_value_57;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Neg, tmp_assign_source_626 );
    goto try_end_59;
    // Exception handler code:
    try_except_handler_115:;
    exception_keeper_type_115 = exception_type;
    exception_keeper_value_115 = exception_value;
    exception_keeper_tb_115 = exception_tb;
    exception_keeper_lineno_115 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_56__bases );
    tmp_class_creation_56__bases = NULL;

    Py_XDECREF( tmp_class_creation_56__class_decl_dict );
    tmp_class_creation_56__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_56__metaclass );
    tmp_class_creation_56__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_56__prepared );
    tmp_class_creation_56__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_115;
    exception_value = exception_keeper_value_115;
    exception_tb = exception_keeper_tb_115;
    exception_lineno = exception_keeper_lineno_115;

    goto frame_exception_exit_1;
    // End of try:
    try_end_59:;
    Py_XDECREF( tmp_class_creation_56__bases );
    tmp_class_creation_56__bases = NULL;

    Py_XDECREF( tmp_class_creation_56__class_decl_dict );
    tmp_class_creation_56__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_56__metaclass );
    tmp_class_creation_56__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_56__prepared );
    tmp_class_creation_56__prepared = NULL;

    // Tried code:
    tmp_assign_source_632 = PyTuple_New( 1 );
    tmp_tuple_element_168 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_UnaryExpr );

    if (unlikely( tmp_tuple_element_168 == NULL ))
    {
        tmp_tuple_element_168 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_UnaryExpr );
    }

    if ( tmp_tuple_element_168 == NULL )
    {
        Py_DECREF( tmp_assign_source_632 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "UnaryExpr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 860;

        goto try_except_handler_117;
    }

    Py_INCREF( tmp_tuple_element_168 );
    PyTuple_SET_ITEM( tmp_assign_source_632, 0, tmp_tuple_element_168 );
    assert( tmp_class_creation_57__bases == NULL );
    tmp_class_creation_57__bases = tmp_assign_source_632;

    tmp_assign_source_633 = PyDict_New();
    assert( tmp_class_creation_57__class_decl_dict == NULL );
    tmp_class_creation_57__class_decl_dict = tmp_assign_source_633;

    tmp_compare_left_114 = const_str_plain_metaclass;
    tmp_compare_right_114 = tmp_class_creation_57__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_114 );
    tmp_cmp_In_113 = PySequence_Contains( tmp_compare_right_114, tmp_compare_left_114 );
    assert( !(tmp_cmp_In_113 == -1) );
    if ( tmp_cmp_In_113 == 1 )
    {
        goto condexpr_true_169;
    }
    else
    {
        goto condexpr_false_169;
    }
    condexpr_true_169:;
    tmp_dict_name_57 = tmp_class_creation_57__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_57 );
    tmp_key_name_57 = const_str_plain_metaclass;
    tmp_metaclass_name_57 = DICT_GET_ITEM( tmp_dict_name_57, tmp_key_name_57 );
    if ( tmp_metaclass_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_117;
    }
    goto condexpr_end_169;
    condexpr_false_169:;
    tmp_cond_value_57 = tmp_class_creation_57__bases;

    CHECK_OBJECT( tmp_cond_value_57 );
    tmp_cond_truth_57 = CHECK_IF_TRUE( tmp_cond_value_57 );
    if ( tmp_cond_truth_57 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_117;
    }
    if ( tmp_cond_truth_57 == 1 )
    {
        goto condexpr_true_170;
    }
    else
    {
        goto condexpr_false_170;
    }
    condexpr_true_170:;
    tmp_subscribed_name_57 = tmp_class_creation_57__bases;

    CHECK_OBJECT( tmp_subscribed_name_57 );
    tmp_subscript_name_57 = const_int_0;
    tmp_type_arg_57 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_57, tmp_subscript_name_57 );
    if ( tmp_type_arg_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_117;
    }
    tmp_metaclass_name_57 = BUILTIN_TYPE1( tmp_type_arg_57 );
    Py_DECREF( tmp_type_arg_57 );
    if ( tmp_metaclass_name_57 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_117;
    }
    goto condexpr_end_170;
    condexpr_false_170:;
    tmp_metaclass_name_57 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_57 );
    condexpr_end_170:;
    condexpr_end_169:;
    tmp_bases_name_57 = tmp_class_creation_57__bases;

    CHECK_OBJECT( tmp_bases_name_57 );
    tmp_assign_source_634 = SELECT_METACLASS( tmp_metaclass_name_57, tmp_bases_name_57 );
    if ( tmp_assign_source_634 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_57 );

        exception_lineno = 860;

        goto try_except_handler_117;
    }
    Py_DECREF( tmp_metaclass_name_57 );
    assert( tmp_class_creation_57__metaclass == NULL );
    tmp_class_creation_57__metaclass = tmp_assign_source_634;

    tmp_compare_left_115 = const_str_plain_metaclass;
    tmp_compare_right_115 = tmp_class_creation_57__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_115 );
    tmp_cmp_In_114 = PySequence_Contains( tmp_compare_right_115, tmp_compare_left_115 );
    assert( !(tmp_cmp_In_114 == -1) );
    if ( tmp_cmp_In_114 == 1 )
    {
        goto branch_yes_58;
    }
    else
    {
        goto branch_no_58;
    }
    branch_yes_58:;
    tmp_dictdel_dict = tmp_class_creation_57__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_117;
    }
    branch_no_58:;
    tmp_hasattr_source_57 = tmp_class_creation_57__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_57 );
    tmp_hasattr_attr_57 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_57, tmp_hasattr_attr_57 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_117;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_171;
    }
    else
    {
        goto condexpr_false_171;
    }
    condexpr_true_171:;
    tmp_source_name_78 = tmp_class_creation_57__metaclass;

    CHECK_OBJECT( tmp_source_name_78 );
    tmp_called_name_117 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain___prepare__ );
    if ( tmp_called_name_117 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_117;
    }
    tmp_args_name_113 = PyTuple_New( 2 );
    tmp_tuple_element_169 = const_str_plain_Pos;
    Py_INCREF( tmp_tuple_element_169 );
    PyTuple_SET_ITEM( tmp_args_name_113, 0, tmp_tuple_element_169 );
    tmp_tuple_element_169 = tmp_class_creation_57__bases;

    CHECK_OBJECT( tmp_tuple_element_169 );
    Py_INCREF( tmp_tuple_element_169 );
    PyTuple_SET_ITEM( tmp_args_name_113, 1, tmp_tuple_element_169 );
    tmp_kw_name_113 = tmp_class_creation_57__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_113 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 860;
    tmp_assign_source_635 = CALL_FUNCTION( tmp_called_name_117, tmp_args_name_113, tmp_kw_name_113 );
    Py_DECREF( tmp_called_name_117 );
    Py_DECREF( tmp_args_name_113 );
    if ( tmp_assign_source_635 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_117;
    }
    goto condexpr_end_171;
    condexpr_false_171:;
    tmp_assign_source_635 = PyDict_New();
    condexpr_end_171:;
    assert( tmp_class_creation_57__prepared == NULL );
    tmp_class_creation_57__prepared = tmp_assign_source_635;

    tmp_set_locals = tmp_class_creation_57__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_57);
    locals_dict_57 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_637 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_56_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_637 );
    outline_56_var___module__ = tmp_assign_source_637;

    tmp_assign_source_638 = const_str_digest_0b23597c9aa01e7b47caefef002eca86;
    assert( outline_56_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_638 );
    outline_56_var___doc__ = tmp_assign_source_638;

    tmp_assign_source_639 = const_str_plain_Pos;
    assert( outline_56_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_639 );
    outline_56_var___qualname__ = tmp_assign_source_639;

    tmp_assign_source_640 = const_str_chr_43;
    assert( outline_56_var_operator == NULL );
    Py_INCREF( tmp_assign_source_640 );
    outline_56_var_operator = tmp_assign_source_640;

    // Tried code:
    tmp_called_name_118 = tmp_class_creation_57__metaclass;

    CHECK_OBJECT( tmp_called_name_118 );
    tmp_args_name_114 = PyTuple_New( 3 );
    tmp_tuple_element_170 = const_str_plain_Pos;
    Py_INCREF( tmp_tuple_element_170 );
    PyTuple_SET_ITEM( tmp_args_name_114, 0, tmp_tuple_element_170 );
    tmp_tuple_element_170 = tmp_class_creation_57__bases;

    CHECK_OBJECT( tmp_tuple_element_170 );
    Py_INCREF( tmp_tuple_element_170 );
    PyTuple_SET_ITEM( tmp_args_name_114, 1, tmp_tuple_element_170 );
    tmp_tuple_element_170 = locals_dict_57;
    Py_INCREF( tmp_tuple_element_170 );
    if ( outline_56_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_170,
            const_str_plain___qualname__,
            outline_56_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_170,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_170,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_114 );
        Py_DECREF( tmp_tuple_element_170 );

        exception_lineno = 860;

        goto try_except_handler_118;
    }
    if ( outline_56_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_170,
            const_str_plain___module__,
            outline_56_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_170,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_170,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_114 );
        Py_DECREF( tmp_tuple_element_170 );

        exception_lineno = 860;

        goto try_except_handler_118;
    }
    if ( outline_56_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_170,
            const_str_plain___doc__,
            outline_56_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_170,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_170,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_114 );
        Py_DECREF( tmp_tuple_element_170 );

        exception_lineno = 860;

        goto try_except_handler_118;
    }
    if ( outline_56_var_operator != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_170,
            const_str_plain_operator,
            outline_56_var_operator
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_170,
            const_str_plain_operator
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_170,
                const_str_plain_operator
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_114 );
        Py_DECREF( tmp_tuple_element_170 );

        exception_lineno = 860;

        goto try_except_handler_118;
    }
    PyTuple_SET_ITEM( tmp_args_name_114, 2, tmp_tuple_element_170 );
    tmp_kw_name_114 = tmp_class_creation_57__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_114 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 860;
    tmp_assign_source_641 = CALL_FUNCTION( tmp_called_name_118, tmp_args_name_114, tmp_kw_name_114 );
    Py_DECREF( tmp_args_name_114 );
    if ( tmp_assign_source_641 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 860;

        goto try_except_handler_118;
    }
    assert( outline_56_var___class__ == NULL );
    outline_56_var___class__ = tmp_assign_source_641;

    tmp_outline_return_value_58 = outline_56_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_58 );
    Py_INCREF( tmp_outline_return_value_58 );
    goto try_return_handler_118;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_118:;
    CHECK_OBJECT( (PyObject *)outline_56_var___class__ );
    Py_DECREF( outline_56_var___class__ );
    outline_56_var___class__ = NULL;

    Py_XDECREF( outline_56_var___qualname__ );
    outline_56_var___qualname__ = NULL;

    Py_XDECREF( outline_56_var___module__ );
    outline_56_var___module__ = NULL;

    Py_XDECREF( outline_56_var___doc__ );
    outline_56_var___doc__ = NULL;

    Py_XDECREF( outline_56_var_operator );
    outline_56_var_operator = NULL;

    goto outline_result_58;
    // Exception handler code:
    try_except_handler_118:;
    exception_keeper_type_116 = exception_type;
    exception_keeper_value_116 = exception_value;
    exception_keeper_tb_116 = exception_tb;
    exception_keeper_lineno_116 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_56_var___qualname__ );
    outline_56_var___qualname__ = NULL;

    Py_XDECREF( outline_56_var___module__ );
    outline_56_var___module__ = NULL;

    Py_XDECREF( outline_56_var___doc__ );
    outline_56_var___doc__ = NULL;

    Py_XDECREF( outline_56_var_operator );
    outline_56_var_operator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_116;
    exception_value = exception_keeper_value_116;
    exception_tb = exception_keeper_tb_116;
    exception_lineno = exception_keeper_lineno_116;

    goto outline_exception_57;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_57:;
    exception_lineno = 860;
    goto try_except_handler_117;
    outline_result_58:;
    tmp_assign_source_636 = tmp_outline_return_value_58;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Pos, tmp_assign_source_636 );
    goto try_end_60;
    // Exception handler code:
    try_except_handler_117:;
    exception_keeper_type_117 = exception_type;
    exception_keeper_value_117 = exception_value;
    exception_keeper_tb_117 = exception_tb;
    exception_keeper_lineno_117 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_57__bases );
    tmp_class_creation_57__bases = NULL;

    Py_XDECREF( tmp_class_creation_57__class_decl_dict );
    tmp_class_creation_57__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_57__metaclass );
    tmp_class_creation_57__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_57__prepared );
    tmp_class_creation_57__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_117;
    exception_value = exception_keeper_value_117;
    exception_tb = exception_keeper_tb_117;
    exception_lineno = exception_keeper_lineno_117;

    goto frame_exception_exit_1;
    // End of try:
    try_end_60:;
    Py_XDECREF( tmp_class_creation_57__bases );
    tmp_class_creation_57__bases = NULL;

    Py_XDECREF( tmp_class_creation_57__class_decl_dict );
    tmp_class_creation_57__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_57__metaclass );
    tmp_class_creation_57__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_57__prepared );
    tmp_class_creation_57__prepared = NULL;

    // Tried code:
    tmp_assign_source_642 = PyTuple_New( 1 );
    tmp_tuple_element_171 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_171 == NULL ))
    {
        tmp_tuple_element_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_171 == NULL )
    {
        Py_DECREF( tmp_assign_source_642 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 868;

        goto try_except_handler_119;
    }

    Py_INCREF( tmp_tuple_element_171 );
    PyTuple_SET_ITEM( tmp_assign_source_642, 0, tmp_tuple_element_171 );
    assert( tmp_class_creation_58__bases == NULL );
    tmp_class_creation_58__bases = tmp_assign_source_642;

    tmp_assign_source_643 = PyDict_New();
    assert( tmp_class_creation_58__class_decl_dict == NULL );
    tmp_class_creation_58__class_decl_dict = tmp_assign_source_643;

    tmp_compare_left_116 = const_str_plain_metaclass;
    tmp_compare_right_116 = tmp_class_creation_58__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_116 );
    tmp_cmp_In_115 = PySequence_Contains( tmp_compare_right_116, tmp_compare_left_116 );
    assert( !(tmp_cmp_In_115 == -1) );
    if ( tmp_cmp_In_115 == 1 )
    {
        goto condexpr_true_172;
    }
    else
    {
        goto condexpr_false_172;
    }
    condexpr_true_172:;
    tmp_dict_name_58 = tmp_class_creation_58__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_58 );
    tmp_key_name_58 = const_str_plain_metaclass;
    tmp_metaclass_name_58 = DICT_GET_ITEM( tmp_dict_name_58, tmp_key_name_58 );
    if ( tmp_metaclass_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_119;
    }
    goto condexpr_end_172;
    condexpr_false_172:;
    tmp_cond_value_58 = tmp_class_creation_58__bases;

    CHECK_OBJECT( tmp_cond_value_58 );
    tmp_cond_truth_58 = CHECK_IF_TRUE( tmp_cond_value_58 );
    if ( tmp_cond_truth_58 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_119;
    }
    if ( tmp_cond_truth_58 == 1 )
    {
        goto condexpr_true_173;
    }
    else
    {
        goto condexpr_false_173;
    }
    condexpr_true_173:;
    tmp_subscribed_name_58 = tmp_class_creation_58__bases;

    CHECK_OBJECT( tmp_subscribed_name_58 );
    tmp_subscript_name_58 = const_int_0;
    tmp_type_arg_58 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_58, tmp_subscript_name_58 );
    if ( tmp_type_arg_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_119;
    }
    tmp_metaclass_name_58 = BUILTIN_TYPE1( tmp_type_arg_58 );
    Py_DECREF( tmp_type_arg_58 );
    if ( tmp_metaclass_name_58 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_119;
    }
    goto condexpr_end_173;
    condexpr_false_173:;
    tmp_metaclass_name_58 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_58 );
    condexpr_end_173:;
    condexpr_end_172:;
    tmp_bases_name_58 = tmp_class_creation_58__bases;

    CHECK_OBJECT( tmp_bases_name_58 );
    tmp_assign_source_644 = SELECT_METACLASS( tmp_metaclass_name_58, tmp_bases_name_58 );
    if ( tmp_assign_source_644 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_58 );

        exception_lineno = 868;

        goto try_except_handler_119;
    }
    Py_DECREF( tmp_metaclass_name_58 );
    assert( tmp_class_creation_58__metaclass == NULL );
    tmp_class_creation_58__metaclass = tmp_assign_source_644;

    tmp_compare_left_117 = const_str_plain_metaclass;
    tmp_compare_right_117 = tmp_class_creation_58__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_117 );
    tmp_cmp_In_116 = PySequence_Contains( tmp_compare_right_117, tmp_compare_left_117 );
    assert( !(tmp_cmp_In_116 == -1) );
    if ( tmp_cmp_In_116 == 1 )
    {
        goto branch_yes_59;
    }
    else
    {
        goto branch_no_59;
    }
    branch_yes_59:;
    tmp_dictdel_dict = tmp_class_creation_58__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_119;
    }
    branch_no_59:;
    tmp_hasattr_source_58 = tmp_class_creation_58__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_58 );
    tmp_hasattr_attr_58 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_58, tmp_hasattr_attr_58 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_119;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_174;
    }
    else
    {
        goto condexpr_false_174;
    }
    condexpr_true_174:;
    tmp_source_name_79 = tmp_class_creation_58__metaclass;

    CHECK_OBJECT( tmp_source_name_79 );
    tmp_called_name_119 = LOOKUP_ATTRIBUTE( tmp_source_name_79, const_str_plain___prepare__ );
    if ( tmp_called_name_119 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_119;
    }
    tmp_args_name_115 = PyTuple_New( 2 );
    tmp_tuple_element_172 = const_str_plain_EnvironmentAttribute;
    Py_INCREF( tmp_tuple_element_172 );
    PyTuple_SET_ITEM( tmp_args_name_115, 0, tmp_tuple_element_172 );
    tmp_tuple_element_172 = tmp_class_creation_58__bases;

    CHECK_OBJECT( tmp_tuple_element_172 );
    Py_INCREF( tmp_tuple_element_172 );
    PyTuple_SET_ITEM( tmp_args_name_115, 1, tmp_tuple_element_172 );
    tmp_kw_name_115 = tmp_class_creation_58__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_115 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 868;
    tmp_assign_source_645 = CALL_FUNCTION( tmp_called_name_119, tmp_args_name_115, tmp_kw_name_115 );
    Py_DECREF( tmp_called_name_119 );
    Py_DECREF( tmp_args_name_115 );
    if ( tmp_assign_source_645 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_119;
    }
    goto condexpr_end_174;
    condexpr_false_174:;
    tmp_assign_source_645 = PyDict_New();
    condexpr_end_174:;
    assert( tmp_class_creation_58__prepared == NULL );
    tmp_class_creation_58__prepared = tmp_assign_source_645;

    tmp_set_locals = tmp_class_creation_58__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_58);
    locals_dict_58 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_647 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_57_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_647 );
    outline_57_var___module__ = tmp_assign_source_647;

    tmp_assign_source_648 = const_str_digest_7405eb26496b03c1fc4702a7ec9a1ed8;
    assert( outline_57_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_648 );
    outline_57_var___doc__ = tmp_assign_source_648;

    tmp_assign_source_649 = const_str_plain_EnvironmentAttribute;
    assert( outline_57_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_649 );
    outline_57_var___qualname__ = tmp_assign_source_649;

    tmp_assign_source_650 = const_tuple_str_plain_name_tuple;
    assert( outline_57_var_fields == NULL );
    Py_INCREF( tmp_assign_source_650 );
    outline_57_var_fields = tmp_assign_source_650;

    // Tried code:
    tmp_called_name_120 = tmp_class_creation_58__metaclass;

    CHECK_OBJECT( tmp_called_name_120 );
    tmp_args_name_116 = PyTuple_New( 3 );
    tmp_tuple_element_173 = const_str_plain_EnvironmentAttribute;
    Py_INCREF( tmp_tuple_element_173 );
    PyTuple_SET_ITEM( tmp_args_name_116, 0, tmp_tuple_element_173 );
    tmp_tuple_element_173 = tmp_class_creation_58__bases;

    CHECK_OBJECT( tmp_tuple_element_173 );
    Py_INCREF( tmp_tuple_element_173 );
    PyTuple_SET_ITEM( tmp_args_name_116, 1, tmp_tuple_element_173 );
    tmp_tuple_element_173 = locals_dict_58;
    Py_INCREF( tmp_tuple_element_173 );
    if ( outline_57_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_173,
            const_str_plain___qualname__,
            outline_57_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_173,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_173,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_116 );
        Py_DECREF( tmp_tuple_element_173 );

        exception_lineno = 868;

        goto try_except_handler_120;
    }
    if ( outline_57_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_173,
            const_str_plain___module__,
            outline_57_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_173,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_173,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_116 );
        Py_DECREF( tmp_tuple_element_173 );

        exception_lineno = 868;

        goto try_except_handler_120;
    }
    if ( outline_57_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_173,
            const_str_plain___doc__,
            outline_57_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_173,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_173,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_116 );
        Py_DECREF( tmp_tuple_element_173 );

        exception_lineno = 868;

        goto try_except_handler_120;
    }
    if ( outline_57_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_173,
            const_str_plain_fields,
            outline_57_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_173,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_173,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_116 );
        Py_DECREF( tmp_tuple_element_173 );

        exception_lineno = 868;

        goto try_except_handler_120;
    }
    PyTuple_SET_ITEM( tmp_args_name_116, 2, tmp_tuple_element_173 );
    tmp_kw_name_116 = tmp_class_creation_58__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_116 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 868;
    tmp_assign_source_651 = CALL_FUNCTION( tmp_called_name_120, tmp_args_name_116, tmp_kw_name_116 );
    Py_DECREF( tmp_args_name_116 );
    if ( tmp_assign_source_651 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 868;

        goto try_except_handler_120;
    }
    assert( outline_57_var___class__ == NULL );
    outline_57_var___class__ = tmp_assign_source_651;

    tmp_outline_return_value_59 = outline_57_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_59 );
    Py_INCREF( tmp_outline_return_value_59 );
    goto try_return_handler_120;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_120:;
    CHECK_OBJECT( (PyObject *)outline_57_var___class__ );
    Py_DECREF( outline_57_var___class__ );
    outline_57_var___class__ = NULL;

    Py_XDECREF( outline_57_var___qualname__ );
    outline_57_var___qualname__ = NULL;

    Py_XDECREF( outline_57_var___module__ );
    outline_57_var___module__ = NULL;

    Py_XDECREF( outline_57_var___doc__ );
    outline_57_var___doc__ = NULL;

    Py_XDECREF( outline_57_var_fields );
    outline_57_var_fields = NULL;

    goto outline_result_59;
    // Exception handler code:
    try_except_handler_120:;
    exception_keeper_type_118 = exception_type;
    exception_keeper_value_118 = exception_value;
    exception_keeper_tb_118 = exception_tb;
    exception_keeper_lineno_118 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_57_var___qualname__ );
    outline_57_var___qualname__ = NULL;

    Py_XDECREF( outline_57_var___module__ );
    outline_57_var___module__ = NULL;

    Py_XDECREF( outline_57_var___doc__ );
    outline_57_var___doc__ = NULL;

    Py_XDECREF( outline_57_var_fields );
    outline_57_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_118;
    exception_value = exception_keeper_value_118;
    exception_tb = exception_keeper_tb_118;
    exception_lineno = exception_keeper_lineno_118;

    goto outline_exception_58;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_58:;
    exception_lineno = 868;
    goto try_except_handler_119;
    outline_result_59:;
    tmp_assign_source_646 = tmp_outline_return_value_59;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_EnvironmentAttribute, tmp_assign_source_646 );
    goto try_end_61;
    // Exception handler code:
    try_except_handler_119:;
    exception_keeper_type_119 = exception_type;
    exception_keeper_value_119 = exception_value;
    exception_keeper_tb_119 = exception_tb;
    exception_keeper_lineno_119 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_58__bases );
    tmp_class_creation_58__bases = NULL;

    Py_XDECREF( tmp_class_creation_58__class_decl_dict );
    tmp_class_creation_58__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_58__metaclass );
    tmp_class_creation_58__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_58__prepared );
    tmp_class_creation_58__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_119;
    exception_value = exception_keeper_value_119;
    exception_tb = exception_keeper_tb_119;
    exception_lineno = exception_keeper_lineno_119;

    goto frame_exception_exit_1;
    // End of try:
    try_end_61:;
    Py_XDECREF( tmp_class_creation_58__bases );
    tmp_class_creation_58__bases = NULL;

    Py_XDECREF( tmp_class_creation_58__class_decl_dict );
    tmp_class_creation_58__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_58__metaclass );
    tmp_class_creation_58__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_58__prepared );
    tmp_class_creation_58__prepared = NULL;

    // Tried code:
    tmp_assign_source_652 = PyTuple_New( 1 );
    tmp_tuple_element_174 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_174 == NULL ))
    {
        tmp_tuple_element_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_174 == NULL )
    {
        Py_DECREF( tmp_assign_source_652 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 875;

        goto try_except_handler_121;
    }

    Py_INCREF( tmp_tuple_element_174 );
    PyTuple_SET_ITEM( tmp_assign_source_652, 0, tmp_tuple_element_174 );
    assert( tmp_class_creation_59__bases == NULL );
    tmp_class_creation_59__bases = tmp_assign_source_652;

    tmp_assign_source_653 = PyDict_New();
    assert( tmp_class_creation_59__class_decl_dict == NULL );
    tmp_class_creation_59__class_decl_dict = tmp_assign_source_653;

    tmp_compare_left_118 = const_str_plain_metaclass;
    tmp_compare_right_118 = tmp_class_creation_59__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_118 );
    tmp_cmp_In_117 = PySequence_Contains( tmp_compare_right_118, tmp_compare_left_118 );
    assert( !(tmp_cmp_In_117 == -1) );
    if ( tmp_cmp_In_117 == 1 )
    {
        goto condexpr_true_175;
    }
    else
    {
        goto condexpr_false_175;
    }
    condexpr_true_175:;
    tmp_dict_name_59 = tmp_class_creation_59__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_59 );
    tmp_key_name_59 = const_str_plain_metaclass;
    tmp_metaclass_name_59 = DICT_GET_ITEM( tmp_dict_name_59, tmp_key_name_59 );
    if ( tmp_metaclass_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_121;
    }
    goto condexpr_end_175;
    condexpr_false_175:;
    tmp_cond_value_59 = tmp_class_creation_59__bases;

    CHECK_OBJECT( tmp_cond_value_59 );
    tmp_cond_truth_59 = CHECK_IF_TRUE( tmp_cond_value_59 );
    if ( tmp_cond_truth_59 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_121;
    }
    if ( tmp_cond_truth_59 == 1 )
    {
        goto condexpr_true_176;
    }
    else
    {
        goto condexpr_false_176;
    }
    condexpr_true_176:;
    tmp_subscribed_name_59 = tmp_class_creation_59__bases;

    CHECK_OBJECT( tmp_subscribed_name_59 );
    tmp_subscript_name_59 = const_int_0;
    tmp_type_arg_59 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_59, tmp_subscript_name_59 );
    if ( tmp_type_arg_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_121;
    }
    tmp_metaclass_name_59 = BUILTIN_TYPE1( tmp_type_arg_59 );
    Py_DECREF( tmp_type_arg_59 );
    if ( tmp_metaclass_name_59 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_121;
    }
    goto condexpr_end_176;
    condexpr_false_176:;
    tmp_metaclass_name_59 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_59 );
    condexpr_end_176:;
    condexpr_end_175:;
    tmp_bases_name_59 = tmp_class_creation_59__bases;

    CHECK_OBJECT( tmp_bases_name_59 );
    tmp_assign_source_654 = SELECT_METACLASS( tmp_metaclass_name_59, tmp_bases_name_59 );
    if ( tmp_assign_source_654 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_59 );

        exception_lineno = 875;

        goto try_except_handler_121;
    }
    Py_DECREF( tmp_metaclass_name_59 );
    assert( tmp_class_creation_59__metaclass == NULL );
    tmp_class_creation_59__metaclass = tmp_assign_source_654;

    tmp_compare_left_119 = const_str_plain_metaclass;
    tmp_compare_right_119 = tmp_class_creation_59__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_119 );
    tmp_cmp_In_118 = PySequence_Contains( tmp_compare_right_119, tmp_compare_left_119 );
    assert( !(tmp_cmp_In_118 == -1) );
    if ( tmp_cmp_In_118 == 1 )
    {
        goto branch_yes_60;
    }
    else
    {
        goto branch_no_60;
    }
    branch_yes_60:;
    tmp_dictdel_dict = tmp_class_creation_59__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_121;
    }
    branch_no_60:;
    tmp_hasattr_source_59 = tmp_class_creation_59__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_59 );
    tmp_hasattr_attr_59 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_59, tmp_hasattr_attr_59 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_121;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_177;
    }
    else
    {
        goto condexpr_false_177;
    }
    condexpr_true_177:;
    tmp_source_name_80 = tmp_class_creation_59__metaclass;

    CHECK_OBJECT( tmp_source_name_80 );
    tmp_called_name_121 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain___prepare__ );
    if ( tmp_called_name_121 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_121;
    }
    tmp_args_name_117 = PyTuple_New( 2 );
    tmp_tuple_element_175 = const_str_plain_ExtensionAttribute;
    Py_INCREF( tmp_tuple_element_175 );
    PyTuple_SET_ITEM( tmp_args_name_117, 0, tmp_tuple_element_175 );
    tmp_tuple_element_175 = tmp_class_creation_59__bases;

    CHECK_OBJECT( tmp_tuple_element_175 );
    Py_INCREF( tmp_tuple_element_175 );
    PyTuple_SET_ITEM( tmp_args_name_117, 1, tmp_tuple_element_175 );
    tmp_kw_name_117 = tmp_class_creation_59__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_117 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 875;
    tmp_assign_source_655 = CALL_FUNCTION( tmp_called_name_121, tmp_args_name_117, tmp_kw_name_117 );
    Py_DECREF( tmp_called_name_121 );
    Py_DECREF( tmp_args_name_117 );
    if ( tmp_assign_source_655 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_121;
    }
    goto condexpr_end_177;
    condexpr_false_177:;
    tmp_assign_source_655 = PyDict_New();
    condexpr_end_177:;
    assert( tmp_class_creation_59__prepared == NULL );
    tmp_class_creation_59__prepared = tmp_assign_source_655;

    tmp_set_locals = tmp_class_creation_59__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_59);
    locals_dict_59 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_657 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_58_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_657 );
    outline_58_var___module__ = tmp_assign_source_657;

    tmp_assign_source_658 = const_str_digest_ab66ad8af3983f79e381ca04dbb8f1e1;
    assert( outline_58_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_658 );
    outline_58_var___doc__ = tmp_assign_source_658;

    tmp_assign_source_659 = const_str_plain_ExtensionAttribute;
    assert( outline_58_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_659 );
    outline_58_var___qualname__ = tmp_assign_source_659;

    tmp_assign_source_660 = const_tuple_str_plain_identifier_str_plain_name_tuple;
    assert( outline_58_var_fields == NULL );
    Py_INCREF( tmp_assign_source_660 );
    outline_58_var_fields = tmp_assign_source_660;

    // Tried code:
    tmp_called_name_122 = tmp_class_creation_59__metaclass;

    CHECK_OBJECT( tmp_called_name_122 );
    tmp_args_name_118 = PyTuple_New( 3 );
    tmp_tuple_element_176 = const_str_plain_ExtensionAttribute;
    Py_INCREF( tmp_tuple_element_176 );
    PyTuple_SET_ITEM( tmp_args_name_118, 0, tmp_tuple_element_176 );
    tmp_tuple_element_176 = tmp_class_creation_59__bases;

    CHECK_OBJECT( tmp_tuple_element_176 );
    Py_INCREF( tmp_tuple_element_176 );
    PyTuple_SET_ITEM( tmp_args_name_118, 1, tmp_tuple_element_176 );
    tmp_tuple_element_176 = locals_dict_59;
    Py_INCREF( tmp_tuple_element_176 );
    if ( outline_58_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_176,
            const_str_plain___qualname__,
            outline_58_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_176,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_176,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_118 );
        Py_DECREF( tmp_tuple_element_176 );

        exception_lineno = 875;

        goto try_except_handler_122;
    }
    if ( outline_58_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_176,
            const_str_plain___module__,
            outline_58_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_176,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_176,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_118 );
        Py_DECREF( tmp_tuple_element_176 );

        exception_lineno = 875;

        goto try_except_handler_122;
    }
    if ( outline_58_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_176,
            const_str_plain___doc__,
            outline_58_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_176,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_176,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_118 );
        Py_DECREF( tmp_tuple_element_176 );

        exception_lineno = 875;

        goto try_except_handler_122;
    }
    if ( outline_58_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_176,
            const_str_plain_fields,
            outline_58_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_176,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_176,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_118 );
        Py_DECREF( tmp_tuple_element_176 );

        exception_lineno = 875;

        goto try_except_handler_122;
    }
    PyTuple_SET_ITEM( tmp_args_name_118, 2, tmp_tuple_element_176 );
    tmp_kw_name_118 = tmp_class_creation_59__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_118 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 875;
    tmp_assign_source_661 = CALL_FUNCTION( tmp_called_name_122, tmp_args_name_118, tmp_kw_name_118 );
    Py_DECREF( tmp_args_name_118 );
    if ( tmp_assign_source_661 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 875;

        goto try_except_handler_122;
    }
    assert( outline_58_var___class__ == NULL );
    outline_58_var___class__ = tmp_assign_source_661;

    tmp_outline_return_value_60 = outline_58_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_60 );
    Py_INCREF( tmp_outline_return_value_60 );
    goto try_return_handler_122;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_122:;
    CHECK_OBJECT( (PyObject *)outline_58_var___class__ );
    Py_DECREF( outline_58_var___class__ );
    outline_58_var___class__ = NULL;

    Py_XDECREF( outline_58_var___qualname__ );
    outline_58_var___qualname__ = NULL;

    Py_XDECREF( outline_58_var___module__ );
    outline_58_var___module__ = NULL;

    Py_XDECREF( outline_58_var___doc__ );
    outline_58_var___doc__ = NULL;

    Py_XDECREF( outline_58_var_fields );
    outline_58_var_fields = NULL;

    goto outline_result_60;
    // Exception handler code:
    try_except_handler_122:;
    exception_keeper_type_120 = exception_type;
    exception_keeper_value_120 = exception_value;
    exception_keeper_tb_120 = exception_tb;
    exception_keeper_lineno_120 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_58_var___qualname__ );
    outline_58_var___qualname__ = NULL;

    Py_XDECREF( outline_58_var___module__ );
    outline_58_var___module__ = NULL;

    Py_XDECREF( outline_58_var___doc__ );
    outline_58_var___doc__ = NULL;

    Py_XDECREF( outline_58_var_fields );
    outline_58_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_120;
    exception_value = exception_keeper_value_120;
    exception_tb = exception_keeper_tb_120;
    exception_lineno = exception_keeper_lineno_120;

    goto outline_exception_59;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_59:;
    exception_lineno = 875;
    goto try_except_handler_121;
    outline_result_60:;
    tmp_assign_source_656 = tmp_outline_return_value_60;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_ExtensionAttribute, tmp_assign_source_656 );
    goto try_end_62;
    // Exception handler code:
    try_except_handler_121:;
    exception_keeper_type_121 = exception_type;
    exception_keeper_value_121 = exception_value;
    exception_keeper_tb_121 = exception_tb;
    exception_keeper_lineno_121 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_59__bases );
    tmp_class_creation_59__bases = NULL;

    Py_XDECREF( tmp_class_creation_59__class_decl_dict );
    tmp_class_creation_59__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_59__metaclass );
    tmp_class_creation_59__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_59__prepared );
    tmp_class_creation_59__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_121;
    exception_value = exception_keeper_value_121;
    exception_tb = exception_keeper_tb_121;
    exception_lineno = exception_keeper_lineno_121;

    goto frame_exception_exit_1;
    // End of try:
    try_end_62:;
    Py_XDECREF( tmp_class_creation_59__bases );
    tmp_class_creation_59__bases = NULL;

    Py_XDECREF( tmp_class_creation_59__class_decl_dict );
    tmp_class_creation_59__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_59__metaclass );
    tmp_class_creation_59__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_59__prepared );
    tmp_class_creation_59__prepared = NULL;

    // Tried code:
    tmp_assign_source_662 = PyTuple_New( 1 );
    tmp_tuple_element_177 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_177 == NULL ))
    {
        tmp_tuple_element_177 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_177 == NULL )
    {
        Py_DECREF( tmp_assign_source_662 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 885;

        goto try_except_handler_123;
    }

    Py_INCREF( tmp_tuple_element_177 );
    PyTuple_SET_ITEM( tmp_assign_source_662, 0, tmp_tuple_element_177 );
    assert( tmp_class_creation_60__bases == NULL );
    tmp_class_creation_60__bases = tmp_assign_source_662;

    tmp_assign_source_663 = PyDict_New();
    assert( tmp_class_creation_60__class_decl_dict == NULL );
    tmp_class_creation_60__class_decl_dict = tmp_assign_source_663;

    tmp_compare_left_120 = const_str_plain_metaclass;
    tmp_compare_right_120 = tmp_class_creation_60__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_120 );
    tmp_cmp_In_119 = PySequence_Contains( tmp_compare_right_120, tmp_compare_left_120 );
    assert( !(tmp_cmp_In_119 == -1) );
    if ( tmp_cmp_In_119 == 1 )
    {
        goto condexpr_true_178;
    }
    else
    {
        goto condexpr_false_178;
    }
    condexpr_true_178:;
    tmp_dict_name_60 = tmp_class_creation_60__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_60 );
    tmp_key_name_60 = const_str_plain_metaclass;
    tmp_metaclass_name_60 = DICT_GET_ITEM( tmp_dict_name_60, tmp_key_name_60 );
    if ( tmp_metaclass_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_123;
    }
    goto condexpr_end_178;
    condexpr_false_178:;
    tmp_cond_value_60 = tmp_class_creation_60__bases;

    CHECK_OBJECT( tmp_cond_value_60 );
    tmp_cond_truth_60 = CHECK_IF_TRUE( tmp_cond_value_60 );
    if ( tmp_cond_truth_60 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_123;
    }
    if ( tmp_cond_truth_60 == 1 )
    {
        goto condexpr_true_179;
    }
    else
    {
        goto condexpr_false_179;
    }
    condexpr_true_179:;
    tmp_subscribed_name_60 = tmp_class_creation_60__bases;

    CHECK_OBJECT( tmp_subscribed_name_60 );
    tmp_subscript_name_60 = const_int_0;
    tmp_type_arg_60 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_60, tmp_subscript_name_60 );
    if ( tmp_type_arg_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_123;
    }
    tmp_metaclass_name_60 = BUILTIN_TYPE1( tmp_type_arg_60 );
    Py_DECREF( tmp_type_arg_60 );
    if ( tmp_metaclass_name_60 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_123;
    }
    goto condexpr_end_179;
    condexpr_false_179:;
    tmp_metaclass_name_60 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_60 );
    condexpr_end_179:;
    condexpr_end_178:;
    tmp_bases_name_60 = tmp_class_creation_60__bases;

    CHECK_OBJECT( tmp_bases_name_60 );
    tmp_assign_source_664 = SELECT_METACLASS( tmp_metaclass_name_60, tmp_bases_name_60 );
    if ( tmp_assign_source_664 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_60 );

        exception_lineno = 885;

        goto try_except_handler_123;
    }
    Py_DECREF( tmp_metaclass_name_60 );
    assert( tmp_class_creation_60__metaclass == NULL );
    tmp_class_creation_60__metaclass = tmp_assign_source_664;

    tmp_compare_left_121 = const_str_plain_metaclass;
    tmp_compare_right_121 = tmp_class_creation_60__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_121 );
    tmp_cmp_In_120 = PySequence_Contains( tmp_compare_right_121, tmp_compare_left_121 );
    assert( !(tmp_cmp_In_120 == -1) );
    if ( tmp_cmp_In_120 == 1 )
    {
        goto branch_yes_61;
    }
    else
    {
        goto branch_no_61;
    }
    branch_yes_61:;
    tmp_dictdel_dict = tmp_class_creation_60__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_123;
    }
    branch_no_61:;
    tmp_hasattr_source_60 = tmp_class_creation_60__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_60 );
    tmp_hasattr_attr_60 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_60, tmp_hasattr_attr_60 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_123;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_180;
    }
    else
    {
        goto condexpr_false_180;
    }
    condexpr_true_180:;
    tmp_source_name_81 = tmp_class_creation_60__metaclass;

    CHECK_OBJECT( tmp_source_name_81 );
    tmp_called_name_123 = LOOKUP_ATTRIBUTE( tmp_source_name_81, const_str_plain___prepare__ );
    if ( tmp_called_name_123 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_123;
    }
    tmp_args_name_119 = PyTuple_New( 2 );
    tmp_tuple_element_178 = const_str_plain_ImportedName;
    Py_INCREF( tmp_tuple_element_178 );
    PyTuple_SET_ITEM( tmp_args_name_119, 0, tmp_tuple_element_178 );
    tmp_tuple_element_178 = tmp_class_creation_60__bases;

    CHECK_OBJECT( tmp_tuple_element_178 );
    Py_INCREF( tmp_tuple_element_178 );
    PyTuple_SET_ITEM( tmp_args_name_119, 1, tmp_tuple_element_178 );
    tmp_kw_name_119 = tmp_class_creation_60__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_119 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 885;
    tmp_assign_source_665 = CALL_FUNCTION( tmp_called_name_123, tmp_args_name_119, tmp_kw_name_119 );
    Py_DECREF( tmp_called_name_123 );
    Py_DECREF( tmp_args_name_119 );
    if ( tmp_assign_source_665 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_123;
    }
    goto condexpr_end_180;
    condexpr_false_180:;
    tmp_assign_source_665 = PyDict_New();
    condexpr_end_180:;
    assert( tmp_class_creation_60__prepared == NULL );
    tmp_class_creation_60__prepared = tmp_assign_source_665;

    tmp_set_locals = tmp_class_creation_60__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_60);
    locals_dict_60 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_667 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_59_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_667 );
    outline_59_var___module__ = tmp_assign_source_667;

    tmp_assign_source_668 = const_str_digest_6e0c4529c205a3b336c0107d0bc630b7;
    assert( outline_59_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_668 );
    outline_59_var___doc__ = tmp_assign_source_668;

    tmp_assign_source_669 = const_str_plain_ImportedName;
    assert( outline_59_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_669 );
    outline_59_var___qualname__ = tmp_assign_source_669;

    tmp_assign_source_670 = const_tuple_str_plain_importname_tuple;
    assert( outline_59_var_fields == NULL );
    Py_INCREF( tmp_assign_source_670 );
    outline_59_var_fields = tmp_assign_source_670;

    // Tried code:
    tmp_called_name_124 = tmp_class_creation_60__metaclass;

    CHECK_OBJECT( tmp_called_name_124 );
    tmp_args_name_120 = PyTuple_New( 3 );
    tmp_tuple_element_179 = const_str_plain_ImportedName;
    Py_INCREF( tmp_tuple_element_179 );
    PyTuple_SET_ITEM( tmp_args_name_120, 0, tmp_tuple_element_179 );
    tmp_tuple_element_179 = tmp_class_creation_60__bases;

    CHECK_OBJECT( tmp_tuple_element_179 );
    Py_INCREF( tmp_tuple_element_179 );
    PyTuple_SET_ITEM( tmp_args_name_120, 1, tmp_tuple_element_179 );
    tmp_tuple_element_179 = locals_dict_60;
    Py_INCREF( tmp_tuple_element_179 );
    if ( outline_59_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_179,
            const_str_plain___qualname__,
            outline_59_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_179,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_179,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_120 );
        Py_DECREF( tmp_tuple_element_179 );

        exception_lineno = 885;

        goto try_except_handler_124;
    }
    if ( outline_59_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_179,
            const_str_plain___module__,
            outline_59_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_179,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_179,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_120 );
        Py_DECREF( tmp_tuple_element_179 );

        exception_lineno = 885;

        goto try_except_handler_124;
    }
    if ( outline_59_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_179,
            const_str_plain___doc__,
            outline_59_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_179,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_179,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_120 );
        Py_DECREF( tmp_tuple_element_179 );

        exception_lineno = 885;

        goto try_except_handler_124;
    }
    if ( outline_59_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_179,
            const_str_plain_fields,
            outline_59_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_179,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_179,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_120 );
        Py_DECREF( tmp_tuple_element_179 );

        exception_lineno = 885;

        goto try_except_handler_124;
    }
    PyTuple_SET_ITEM( tmp_args_name_120, 2, tmp_tuple_element_179 );
    tmp_kw_name_120 = tmp_class_creation_60__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_120 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 885;
    tmp_assign_source_671 = CALL_FUNCTION( tmp_called_name_124, tmp_args_name_120, tmp_kw_name_120 );
    Py_DECREF( tmp_args_name_120 );
    if ( tmp_assign_source_671 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 885;

        goto try_except_handler_124;
    }
    assert( outline_59_var___class__ == NULL );
    outline_59_var___class__ = tmp_assign_source_671;

    tmp_outline_return_value_61 = outline_59_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_61 );
    Py_INCREF( tmp_outline_return_value_61 );
    goto try_return_handler_124;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_124:;
    CHECK_OBJECT( (PyObject *)outline_59_var___class__ );
    Py_DECREF( outline_59_var___class__ );
    outline_59_var___class__ = NULL;

    Py_XDECREF( outline_59_var___qualname__ );
    outline_59_var___qualname__ = NULL;

    Py_XDECREF( outline_59_var___module__ );
    outline_59_var___module__ = NULL;

    Py_XDECREF( outline_59_var___doc__ );
    outline_59_var___doc__ = NULL;

    Py_XDECREF( outline_59_var_fields );
    outline_59_var_fields = NULL;

    goto outline_result_61;
    // Exception handler code:
    try_except_handler_124:;
    exception_keeper_type_122 = exception_type;
    exception_keeper_value_122 = exception_value;
    exception_keeper_tb_122 = exception_tb;
    exception_keeper_lineno_122 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_59_var___qualname__ );
    outline_59_var___qualname__ = NULL;

    Py_XDECREF( outline_59_var___module__ );
    outline_59_var___module__ = NULL;

    Py_XDECREF( outline_59_var___doc__ );
    outline_59_var___doc__ = NULL;

    Py_XDECREF( outline_59_var_fields );
    outline_59_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_122;
    exception_value = exception_keeper_value_122;
    exception_tb = exception_keeper_tb_122;
    exception_lineno = exception_keeper_lineno_122;

    goto outline_exception_60;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_60:;
    exception_lineno = 885;
    goto try_except_handler_123;
    outline_result_61:;
    tmp_assign_source_666 = tmp_outline_return_value_61;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_ImportedName, tmp_assign_source_666 );
    goto try_end_63;
    // Exception handler code:
    try_except_handler_123:;
    exception_keeper_type_123 = exception_type;
    exception_keeper_value_123 = exception_value;
    exception_keeper_tb_123 = exception_tb;
    exception_keeper_lineno_123 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_60__bases );
    tmp_class_creation_60__bases = NULL;

    Py_XDECREF( tmp_class_creation_60__class_decl_dict );
    tmp_class_creation_60__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_60__metaclass );
    tmp_class_creation_60__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_60__prepared );
    tmp_class_creation_60__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_123;
    exception_value = exception_keeper_value_123;
    exception_tb = exception_keeper_tb_123;
    exception_lineno = exception_keeper_lineno_123;

    goto frame_exception_exit_1;
    // End of try:
    try_end_63:;
    Py_XDECREF( tmp_class_creation_60__bases );
    tmp_class_creation_60__bases = NULL;

    Py_XDECREF( tmp_class_creation_60__class_decl_dict );
    tmp_class_creation_60__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_60__metaclass );
    tmp_class_creation_60__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_60__prepared );
    tmp_class_creation_60__prepared = NULL;

    // Tried code:
    tmp_assign_source_672 = PyTuple_New( 1 );
    tmp_tuple_element_180 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_180 == NULL ))
    {
        tmp_tuple_element_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_180 == NULL )
    {
        Py_DECREF( tmp_assign_source_672 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 894;

        goto try_except_handler_125;
    }

    Py_INCREF( tmp_tuple_element_180 );
    PyTuple_SET_ITEM( tmp_assign_source_672, 0, tmp_tuple_element_180 );
    assert( tmp_class_creation_61__bases == NULL );
    tmp_class_creation_61__bases = tmp_assign_source_672;

    tmp_assign_source_673 = PyDict_New();
    assert( tmp_class_creation_61__class_decl_dict == NULL );
    tmp_class_creation_61__class_decl_dict = tmp_assign_source_673;

    tmp_compare_left_122 = const_str_plain_metaclass;
    tmp_compare_right_122 = tmp_class_creation_61__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_122 );
    tmp_cmp_In_121 = PySequence_Contains( tmp_compare_right_122, tmp_compare_left_122 );
    assert( !(tmp_cmp_In_121 == -1) );
    if ( tmp_cmp_In_121 == 1 )
    {
        goto condexpr_true_181;
    }
    else
    {
        goto condexpr_false_181;
    }
    condexpr_true_181:;
    tmp_dict_name_61 = tmp_class_creation_61__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_61 );
    tmp_key_name_61 = const_str_plain_metaclass;
    tmp_metaclass_name_61 = DICT_GET_ITEM( tmp_dict_name_61, tmp_key_name_61 );
    if ( tmp_metaclass_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_125;
    }
    goto condexpr_end_181;
    condexpr_false_181:;
    tmp_cond_value_61 = tmp_class_creation_61__bases;

    CHECK_OBJECT( tmp_cond_value_61 );
    tmp_cond_truth_61 = CHECK_IF_TRUE( tmp_cond_value_61 );
    if ( tmp_cond_truth_61 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_125;
    }
    if ( tmp_cond_truth_61 == 1 )
    {
        goto condexpr_true_182;
    }
    else
    {
        goto condexpr_false_182;
    }
    condexpr_true_182:;
    tmp_subscribed_name_61 = tmp_class_creation_61__bases;

    CHECK_OBJECT( tmp_subscribed_name_61 );
    tmp_subscript_name_61 = const_int_0;
    tmp_type_arg_61 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_61, tmp_subscript_name_61 );
    if ( tmp_type_arg_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_125;
    }
    tmp_metaclass_name_61 = BUILTIN_TYPE1( tmp_type_arg_61 );
    Py_DECREF( tmp_type_arg_61 );
    if ( tmp_metaclass_name_61 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_125;
    }
    goto condexpr_end_182;
    condexpr_false_182:;
    tmp_metaclass_name_61 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_61 );
    condexpr_end_182:;
    condexpr_end_181:;
    tmp_bases_name_61 = tmp_class_creation_61__bases;

    CHECK_OBJECT( tmp_bases_name_61 );
    tmp_assign_source_674 = SELECT_METACLASS( tmp_metaclass_name_61, tmp_bases_name_61 );
    if ( tmp_assign_source_674 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_61 );

        exception_lineno = 894;

        goto try_except_handler_125;
    }
    Py_DECREF( tmp_metaclass_name_61 );
    assert( tmp_class_creation_61__metaclass == NULL );
    tmp_class_creation_61__metaclass = tmp_assign_source_674;

    tmp_compare_left_123 = const_str_plain_metaclass;
    tmp_compare_right_123 = tmp_class_creation_61__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_123 );
    tmp_cmp_In_122 = PySequence_Contains( tmp_compare_right_123, tmp_compare_left_123 );
    assert( !(tmp_cmp_In_122 == -1) );
    if ( tmp_cmp_In_122 == 1 )
    {
        goto branch_yes_62;
    }
    else
    {
        goto branch_no_62;
    }
    branch_yes_62:;
    tmp_dictdel_dict = tmp_class_creation_61__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_125;
    }
    branch_no_62:;
    tmp_hasattr_source_61 = tmp_class_creation_61__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_61 );
    tmp_hasattr_attr_61 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_61, tmp_hasattr_attr_61 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_125;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_183;
    }
    else
    {
        goto condexpr_false_183;
    }
    condexpr_true_183:;
    tmp_source_name_82 = tmp_class_creation_61__metaclass;

    CHECK_OBJECT( tmp_source_name_82 );
    tmp_called_name_125 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain___prepare__ );
    if ( tmp_called_name_125 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_125;
    }
    tmp_args_name_121 = PyTuple_New( 2 );
    tmp_tuple_element_181 = const_str_plain_InternalName;
    Py_INCREF( tmp_tuple_element_181 );
    PyTuple_SET_ITEM( tmp_args_name_121, 0, tmp_tuple_element_181 );
    tmp_tuple_element_181 = tmp_class_creation_61__bases;

    CHECK_OBJECT( tmp_tuple_element_181 );
    Py_INCREF( tmp_tuple_element_181 );
    PyTuple_SET_ITEM( tmp_args_name_121, 1, tmp_tuple_element_181 );
    tmp_kw_name_121 = tmp_class_creation_61__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_121 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 894;
    tmp_assign_source_675 = CALL_FUNCTION( tmp_called_name_125, tmp_args_name_121, tmp_kw_name_121 );
    Py_DECREF( tmp_called_name_125 );
    Py_DECREF( tmp_args_name_121 );
    if ( tmp_assign_source_675 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_125;
    }
    goto condexpr_end_183;
    condexpr_false_183:;
    tmp_assign_source_675 = PyDict_New();
    condexpr_end_183:;
    assert( tmp_class_creation_61__prepared == NULL );
    tmp_class_creation_61__prepared = tmp_assign_source_675;

    tmp_set_locals = tmp_class_creation_61__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_61);
    locals_dict_61 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_677 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_60_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_677 );
    outline_60_var___module__ = tmp_assign_source_677;

    tmp_assign_source_678 = const_str_digest_1807c5d7a12375951f2078407128987a;
    assert( outline_60_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_678 );
    outline_60_var___doc__ = tmp_assign_source_678;

    tmp_assign_source_679 = const_str_plain_InternalName;
    assert( outline_60_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_679 );
    outline_60_var___qualname__ = tmp_assign_source_679;

    tmp_assign_source_680 = const_tuple_str_plain_name_tuple;
    assert( outline_60_var_fields == NULL );
    Py_INCREF( tmp_assign_source_680 );
    outline_60_var_fields = tmp_assign_source_680;

    tmp_assign_source_681 = MAKE_FUNCTION_jinja2$nodes$$$function_48___init__(  );
    assert( outline_60_var___init__ == NULL );
    outline_60_var___init__ = tmp_assign_source_681;

    // Tried code:
    tmp_called_name_126 = tmp_class_creation_61__metaclass;

    CHECK_OBJECT( tmp_called_name_126 );
    tmp_args_name_122 = PyTuple_New( 3 );
    tmp_tuple_element_182 = const_str_plain_InternalName;
    Py_INCREF( tmp_tuple_element_182 );
    PyTuple_SET_ITEM( tmp_args_name_122, 0, tmp_tuple_element_182 );
    tmp_tuple_element_182 = tmp_class_creation_61__bases;

    CHECK_OBJECT( tmp_tuple_element_182 );
    Py_INCREF( tmp_tuple_element_182 );
    PyTuple_SET_ITEM( tmp_args_name_122, 1, tmp_tuple_element_182 );
    tmp_tuple_element_182 = locals_dict_61;
    Py_INCREF( tmp_tuple_element_182 );
    if ( outline_60_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_182,
            const_str_plain___qualname__,
            outline_60_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_182,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_182,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_122 );
        Py_DECREF( tmp_tuple_element_182 );

        exception_lineno = 894;

        goto try_except_handler_126;
    }
    if ( outline_60_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_182,
            const_str_plain___module__,
            outline_60_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_182,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_182,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_122 );
        Py_DECREF( tmp_tuple_element_182 );

        exception_lineno = 894;

        goto try_except_handler_126;
    }
    if ( outline_60_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_182,
            const_str_plain___doc__,
            outline_60_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_182,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_182,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_122 );
        Py_DECREF( tmp_tuple_element_182 );

        exception_lineno = 894;

        goto try_except_handler_126;
    }
    if ( outline_60_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_182,
            const_str_plain_fields,
            outline_60_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_182,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_182,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_122 );
        Py_DECREF( tmp_tuple_element_182 );

        exception_lineno = 894;

        goto try_except_handler_126;
    }
    if ( outline_60_var___init__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_182,
            const_str_plain___init__,
            outline_60_var___init__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_182,
            const_str_plain___init__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_182,
                const_str_plain___init__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_122 );
        Py_DECREF( tmp_tuple_element_182 );

        exception_lineno = 894;

        goto try_except_handler_126;
    }
    PyTuple_SET_ITEM( tmp_args_name_122, 2, tmp_tuple_element_182 );
    tmp_kw_name_122 = tmp_class_creation_61__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_122 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 894;
    tmp_assign_source_682 = CALL_FUNCTION( tmp_called_name_126, tmp_args_name_122, tmp_kw_name_122 );
    Py_DECREF( tmp_args_name_122 );
    if ( tmp_assign_source_682 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 894;

        goto try_except_handler_126;
    }
    assert( outline_60_var___class__ == NULL );
    outline_60_var___class__ = tmp_assign_source_682;

    tmp_outline_return_value_62 = outline_60_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_62 );
    Py_INCREF( tmp_outline_return_value_62 );
    goto try_return_handler_126;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_126:;
    CHECK_OBJECT( (PyObject *)outline_60_var___class__ );
    Py_DECREF( outline_60_var___class__ );
    outline_60_var___class__ = NULL;

    Py_XDECREF( outline_60_var___qualname__ );
    outline_60_var___qualname__ = NULL;

    Py_XDECREF( outline_60_var___module__ );
    outline_60_var___module__ = NULL;

    Py_XDECREF( outline_60_var___doc__ );
    outline_60_var___doc__ = NULL;

    Py_XDECREF( outline_60_var_fields );
    outline_60_var_fields = NULL;

    Py_XDECREF( outline_60_var___init__ );
    outline_60_var___init__ = NULL;

    goto outline_result_62;
    // Exception handler code:
    try_except_handler_126:;
    exception_keeper_type_124 = exception_type;
    exception_keeper_value_124 = exception_value;
    exception_keeper_tb_124 = exception_tb;
    exception_keeper_lineno_124 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_60_var___qualname__ );
    outline_60_var___qualname__ = NULL;

    Py_XDECREF( outline_60_var___module__ );
    outline_60_var___module__ = NULL;

    Py_XDECREF( outline_60_var___doc__ );
    outline_60_var___doc__ = NULL;

    Py_XDECREF( outline_60_var_fields );
    outline_60_var_fields = NULL;

    Py_XDECREF( outline_60_var___init__ );
    outline_60_var___init__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_124;
    exception_value = exception_keeper_value_124;
    exception_tb = exception_keeper_tb_124;
    exception_lineno = exception_keeper_lineno_124;

    goto outline_exception_61;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_61:;
    exception_lineno = 894;
    goto try_except_handler_125;
    outline_result_62:;
    tmp_assign_source_676 = tmp_outline_return_value_62;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_InternalName, tmp_assign_source_676 );
    goto try_end_64;
    // Exception handler code:
    try_except_handler_125:;
    exception_keeper_type_125 = exception_type;
    exception_keeper_value_125 = exception_value;
    exception_keeper_tb_125 = exception_tb;
    exception_keeper_lineno_125 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_61__bases );
    tmp_class_creation_61__bases = NULL;

    Py_XDECREF( tmp_class_creation_61__class_decl_dict );
    tmp_class_creation_61__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_61__metaclass );
    tmp_class_creation_61__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_61__prepared );
    tmp_class_creation_61__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_125;
    exception_value = exception_keeper_value_125;
    exception_tb = exception_keeper_tb_125;
    exception_lineno = exception_keeper_lineno_125;

    goto frame_exception_exit_1;
    // End of try:
    try_end_64:;
    Py_XDECREF( tmp_class_creation_61__bases );
    tmp_class_creation_61__bases = NULL;

    Py_XDECREF( tmp_class_creation_61__class_decl_dict );
    tmp_class_creation_61__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_61__metaclass );
    tmp_class_creation_61__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_61__prepared );
    tmp_class_creation_61__prepared = NULL;

    // Tried code:
    tmp_assign_source_683 = PyTuple_New( 1 );
    tmp_tuple_element_183 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_183 == NULL ))
    {
        tmp_tuple_element_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_183 == NULL )
    {
        Py_DECREF( tmp_assign_source_683 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 908;

        goto try_except_handler_127;
    }

    Py_INCREF( tmp_tuple_element_183 );
    PyTuple_SET_ITEM( tmp_assign_source_683, 0, tmp_tuple_element_183 );
    assert( tmp_class_creation_62__bases == NULL );
    tmp_class_creation_62__bases = tmp_assign_source_683;

    tmp_assign_source_684 = PyDict_New();
    assert( tmp_class_creation_62__class_decl_dict == NULL );
    tmp_class_creation_62__class_decl_dict = tmp_assign_source_684;

    tmp_compare_left_124 = const_str_plain_metaclass;
    tmp_compare_right_124 = tmp_class_creation_62__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_124 );
    tmp_cmp_In_123 = PySequence_Contains( tmp_compare_right_124, tmp_compare_left_124 );
    assert( !(tmp_cmp_In_123 == -1) );
    if ( tmp_cmp_In_123 == 1 )
    {
        goto condexpr_true_184;
    }
    else
    {
        goto condexpr_false_184;
    }
    condexpr_true_184:;
    tmp_dict_name_62 = tmp_class_creation_62__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_62 );
    tmp_key_name_62 = const_str_plain_metaclass;
    tmp_metaclass_name_62 = DICT_GET_ITEM( tmp_dict_name_62, tmp_key_name_62 );
    if ( tmp_metaclass_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_127;
    }
    goto condexpr_end_184;
    condexpr_false_184:;
    tmp_cond_value_62 = tmp_class_creation_62__bases;

    CHECK_OBJECT( tmp_cond_value_62 );
    tmp_cond_truth_62 = CHECK_IF_TRUE( tmp_cond_value_62 );
    if ( tmp_cond_truth_62 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_127;
    }
    if ( tmp_cond_truth_62 == 1 )
    {
        goto condexpr_true_185;
    }
    else
    {
        goto condexpr_false_185;
    }
    condexpr_true_185:;
    tmp_subscribed_name_62 = tmp_class_creation_62__bases;

    CHECK_OBJECT( tmp_subscribed_name_62 );
    tmp_subscript_name_62 = const_int_0;
    tmp_type_arg_62 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_62, tmp_subscript_name_62 );
    if ( tmp_type_arg_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_127;
    }
    tmp_metaclass_name_62 = BUILTIN_TYPE1( tmp_type_arg_62 );
    Py_DECREF( tmp_type_arg_62 );
    if ( tmp_metaclass_name_62 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_127;
    }
    goto condexpr_end_185;
    condexpr_false_185:;
    tmp_metaclass_name_62 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_62 );
    condexpr_end_185:;
    condexpr_end_184:;
    tmp_bases_name_62 = tmp_class_creation_62__bases;

    CHECK_OBJECT( tmp_bases_name_62 );
    tmp_assign_source_685 = SELECT_METACLASS( tmp_metaclass_name_62, tmp_bases_name_62 );
    if ( tmp_assign_source_685 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_62 );

        exception_lineno = 908;

        goto try_except_handler_127;
    }
    Py_DECREF( tmp_metaclass_name_62 );
    assert( tmp_class_creation_62__metaclass == NULL );
    tmp_class_creation_62__metaclass = tmp_assign_source_685;

    tmp_compare_left_125 = const_str_plain_metaclass;
    tmp_compare_right_125 = tmp_class_creation_62__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_125 );
    tmp_cmp_In_124 = PySequence_Contains( tmp_compare_right_125, tmp_compare_left_125 );
    assert( !(tmp_cmp_In_124 == -1) );
    if ( tmp_cmp_In_124 == 1 )
    {
        goto branch_yes_63;
    }
    else
    {
        goto branch_no_63;
    }
    branch_yes_63:;
    tmp_dictdel_dict = tmp_class_creation_62__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_127;
    }
    branch_no_63:;
    tmp_hasattr_source_62 = tmp_class_creation_62__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_62 );
    tmp_hasattr_attr_62 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_62, tmp_hasattr_attr_62 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_127;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_186;
    }
    else
    {
        goto condexpr_false_186;
    }
    condexpr_true_186:;
    tmp_source_name_83 = tmp_class_creation_62__metaclass;

    CHECK_OBJECT( tmp_source_name_83 );
    tmp_called_name_127 = LOOKUP_ATTRIBUTE( tmp_source_name_83, const_str_plain___prepare__ );
    if ( tmp_called_name_127 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_127;
    }
    tmp_args_name_123 = PyTuple_New( 2 );
    tmp_tuple_element_184 = const_str_plain_MarkSafe;
    Py_INCREF( tmp_tuple_element_184 );
    PyTuple_SET_ITEM( tmp_args_name_123, 0, tmp_tuple_element_184 );
    tmp_tuple_element_184 = tmp_class_creation_62__bases;

    CHECK_OBJECT( tmp_tuple_element_184 );
    Py_INCREF( tmp_tuple_element_184 );
    PyTuple_SET_ITEM( tmp_args_name_123, 1, tmp_tuple_element_184 );
    tmp_kw_name_123 = tmp_class_creation_62__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_123 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 908;
    tmp_assign_source_686 = CALL_FUNCTION( tmp_called_name_127, tmp_args_name_123, tmp_kw_name_123 );
    Py_DECREF( tmp_called_name_127 );
    Py_DECREF( tmp_args_name_123 );
    if ( tmp_assign_source_686 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_127;
    }
    goto condexpr_end_186;
    condexpr_false_186:;
    tmp_assign_source_686 = PyDict_New();
    condexpr_end_186:;
    assert( tmp_class_creation_62__prepared == NULL );
    tmp_class_creation_62__prepared = tmp_assign_source_686;

    tmp_set_locals = tmp_class_creation_62__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_62);
    locals_dict_62 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_688 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_61_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_688 );
    outline_61_var___module__ = tmp_assign_source_688;

    tmp_assign_source_689 = const_str_digest_a88490ebb1db53c83dfe84f0dc94fbb0;
    assert( outline_61_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_689 );
    outline_61_var___doc__ = tmp_assign_source_689;

    tmp_assign_source_690 = const_str_plain_MarkSafe;
    assert( outline_61_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_690 );
    outline_61_var___qualname__ = tmp_assign_source_690;

    tmp_assign_source_691 = const_tuple_str_plain_expr_tuple;
    assert( outline_61_var_fields == NULL );
    Py_INCREF( tmp_assign_source_691 );
    outline_61_var_fields = tmp_assign_source_691;

    tmp_defaults_26 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_26 );
    tmp_assign_source_692 = MAKE_FUNCTION_jinja2$nodes$$$function_49_as_const( tmp_defaults_26 );
    assert( outline_61_var_as_const == NULL );
    outline_61_var_as_const = tmp_assign_source_692;

    // Tried code:
    tmp_called_name_128 = tmp_class_creation_62__metaclass;

    CHECK_OBJECT( tmp_called_name_128 );
    tmp_args_name_124 = PyTuple_New( 3 );
    tmp_tuple_element_185 = const_str_plain_MarkSafe;
    Py_INCREF( tmp_tuple_element_185 );
    PyTuple_SET_ITEM( tmp_args_name_124, 0, tmp_tuple_element_185 );
    tmp_tuple_element_185 = tmp_class_creation_62__bases;

    CHECK_OBJECT( tmp_tuple_element_185 );
    Py_INCREF( tmp_tuple_element_185 );
    PyTuple_SET_ITEM( tmp_args_name_124, 1, tmp_tuple_element_185 );
    tmp_tuple_element_185 = locals_dict_62;
    Py_INCREF( tmp_tuple_element_185 );
    if ( outline_61_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_185,
            const_str_plain___qualname__,
            outline_61_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_185,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_185,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_124 );
        Py_DECREF( tmp_tuple_element_185 );

        exception_lineno = 908;

        goto try_except_handler_128;
    }
    if ( outline_61_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_185,
            const_str_plain___module__,
            outline_61_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_185,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_185,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_124 );
        Py_DECREF( tmp_tuple_element_185 );

        exception_lineno = 908;

        goto try_except_handler_128;
    }
    if ( outline_61_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_185,
            const_str_plain___doc__,
            outline_61_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_185,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_185,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_124 );
        Py_DECREF( tmp_tuple_element_185 );

        exception_lineno = 908;

        goto try_except_handler_128;
    }
    if ( outline_61_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_185,
            const_str_plain_fields,
            outline_61_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_185,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_185,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_124 );
        Py_DECREF( tmp_tuple_element_185 );

        exception_lineno = 908;

        goto try_except_handler_128;
    }
    if ( outline_61_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_185,
            const_str_plain_as_const,
            outline_61_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_185,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_185,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_124 );
        Py_DECREF( tmp_tuple_element_185 );

        exception_lineno = 908;

        goto try_except_handler_128;
    }
    PyTuple_SET_ITEM( tmp_args_name_124, 2, tmp_tuple_element_185 );
    tmp_kw_name_124 = tmp_class_creation_62__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_124 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 908;
    tmp_assign_source_693 = CALL_FUNCTION( tmp_called_name_128, tmp_args_name_124, tmp_kw_name_124 );
    Py_DECREF( tmp_args_name_124 );
    if ( tmp_assign_source_693 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 908;

        goto try_except_handler_128;
    }
    assert( outline_61_var___class__ == NULL );
    outline_61_var___class__ = tmp_assign_source_693;

    tmp_outline_return_value_63 = outline_61_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_63 );
    Py_INCREF( tmp_outline_return_value_63 );
    goto try_return_handler_128;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_128:;
    CHECK_OBJECT( (PyObject *)outline_61_var___class__ );
    Py_DECREF( outline_61_var___class__ );
    outline_61_var___class__ = NULL;

    Py_XDECREF( outline_61_var___qualname__ );
    outline_61_var___qualname__ = NULL;

    Py_XDECREF( outline_61_var___module__ );
    outline_61_var___module__ = NULL;

    Py_XDECREF( outline_61_var___doc__ );
    outline_61_var___doc__ = NULL;

    Py_XDECREF( outline_61_var_fields );
    outline_61_var_fields = NULL;

    Py_XDECREF( outline_61_var_as_const );
    outline_61_var_as_const = NULL;

    goto outline_result_63;
    // Exception handler code:
    try_except_handler_128:;
    exception_keeper_type_126 = exception_type;
    exception_keeper_value_126 = exception_value;
    exception_keeper_tb_126 = exception_tb;
    exception_keeper_lineno_126 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_61_var___qualname__ );
    outline_61_var___qualname__ = NULL;

    Py_XDECREF( outline_61_var___module__ );
    outline_61_var___module__ = NULL;

    Py_XDECREF( outline_61_var___doc__ );
    outline_61_var___doc__ = NULL;

    Py_XDECREF( outline_61_var_fields );
    outline_61_var_fields = NULL;

    Py_XDECREF( outline_61_var_as_const );
    outline_61_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_126;
    exception_value = exception_keeper_value_126;
    exception_tb = exception_keeper_tb_126;
    exception_lineno = exception_keeper_lineno_126;

    goto outline_exception_62;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_62:;
    exception_lineno = 908;
    goto try_except_handler_127;
    outline_result_63:;
    tmp_assign_source_687 = tmp_outline_return_value_63;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_MarkSafe, tmp_assign_source_687 );
    goto try_end_65;
    // Exception handler code:
    try_except_handler_127:;
    exception_keeper_type_127 = exception_type;
    exception_keeper_value_127 = exception_value;
    exception_keeper_tb_127 = exception_tb;
    exception_keeper_lineno_127 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_62__bases );
    tmp_class_creation_62__bases = NULL;

    Py_XDECREF( tmp_class_creation_62__class_decl_dict );
    tmp_class_creation_62__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_62__metaclass );
    tmp_class_creation_62__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_62__prepared );
    tmp_class_creation_62__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_127;
    exception_value = exception_keeper_value_127;
    exception_tb = exception_keeper_tb_127;
    exception_lineno = exception_keeper_lineno_127;

    goto frame_exception_exit_1;
    // End of try:
    try_end_65:;
    Py_XDECREF( tmp_class_creation_62__bases );
    tmp_class_creation_62__bases = NULL;

    Py_XDECREF( tmp_class_creation_62__class_decl_dict );
    tmp_class_creation_62__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_62__metaclass );
    tmp_class_creation_62__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_62__prepared );
    tmp_class_creation_62__prepared = NULL;

    // Tried code:
    tmp_assign_source_694 = PyTuple_New( 1 );
    tmp_tuple_element_186 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_186 == NULL ))
    {
        tmp_tuple_element_186 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_186 == NULL )
    {
        Py_DECREF( tmp_assign_source_694 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 917;

        goto try_except_handler_129;
    }

    Py_INCREF( tmp_tuple_element_186 );
    PyTuple_SET_ITEM( tmp_assign_source_694, 0, tmp_tuple_element_186 );
    assert( tmp_class_creation_63__bases == NULL );
    tmp_class_creation_63__bases = tmp_assign_source_694;

    tmp_assign_source_695 = PyDict_New();
    assert( tmp_class_creation_63__class_decl_dict == NULL );
    tmp_class_creation_63__class_decl_dict = tmp_assign_source_695;

    tmp_compare_left_126 = const_str_plain_metaclass;
    tmp_compare_right_126 = tmp_class_creation_63__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_126 );
    tmp_cmp_In_125 = PySequence_Contains( tmp_compare_right_126, tmp_compare_left_126 );
    assert( !(tmp_cmp_In_125 == -1) );
    if ( tmp_cmp_In_125 == 1 )
    {
        goto condexpr_true_187;
    }
    else
    {
        goto condexpr_false_187;
    }
    condexpr_true_187:;
    tmp_dict_name_63 = tmp_class_creation_63__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_63 );
    tmp_key_name_63 = const_str_plain_metaclass;
    tmp_metaclass_name_63 = DICT_GET_ITEM( tmp_dict_name_63, tmp_key_name_63 );
    if ( tmp_metaclass_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_129;
    }
    goto condexpr_end_187;
    condexpr_false_187:;
    tmp_cond_value_63 = tmp_class_creation_63__bases;

    CHECK_OBJECT( tmp_cond_value_63 );
    tmp_cond_truth_63 = CHECK_IF_TRUE( tmp_cond_value_63 );
    if ( tmp_cond_truth_63 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_129;
    }
    if ( tmp_cond_truth_63 == 1 )
    {
        goto condexpr_true_188;
    }
    else
    {
        goto condexpr_false_188;
    }
    condexpr_true_188:;
    tmp_subscribed_name_63 = tmp_class_creation_63__bases;

    CHECK_OBJECT( tmp_subscribed_name_63 );
    tmp_subscript_name_63 = const_int_0;
    tmp_type_arg_63 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_63, tmp_subscript_name_63 );
    if ( tmp_type_arg_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_129;
    }
    tmp_metaclass_name_63 = BUILTIN_TYPE1( tmp_type_arg_63 );
    Py_DECREF( tmp_type_arg_63 );
    if ( tmp_metaclass_name_63 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_129;
    }
    goto condexpr_end_188;
    condexpr_false_188:;
    tmp_metaclass_name_63 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_63 );
    condexpr_end_188:;
    condexpr_end_187:;
    tmp_bases_name_63 = tmp_class_creation_63__bases;

    CHECK_OBJECT( tmp_bases_name_63 );
    tmp_assign_source_696 = SELECT_METACLASS( tmp_metaclass_name_63, tmp_bases_name_63 );
    if ( tmp_assign_source_696 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_63 );

        exception_lineno = 917;

        goto try_except_handler_129;
    }
    Py_DECREF( tmp_metaclass_name_63 );
    assert( tmp_class_creation_63__metaclass == NULL );
    tmp_class_creation_63__metaclass = tmp_assign_source_696;

    tmp_compare_left_127 = const_str_plain_metaclass;
    tmp_compare_right_127 = tmp_class_creation_63__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_127 );
    tmp_cmp_In_126 = PySequence_Contains( tmp_compare_right_127, tmp_compare_left_127 );
    assert( !(tmp_cmp_In_126 == -1) );
    if ( tmp_cmp_In_126 == 1 )
    {
        goto branch_yes_64;
    }
    else
    {
        goto branch_no_64;
    }
    branch_yes_64:;
    tmp_dictdel_dict = tmp_class_creation_63__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_129;
    }
    branch_no_64:;
    tmp_hasattr_source_63 = tmp_class_creation_63__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_63 );
    tmp_hasattr_attr_63 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_63, tmp_hasattr_attr_63 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_129;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_189;
    }
    else
    {
        goto condexpr_false_189;
    }
    condexpr_true_189:;
    tmp_source_name_84 = tmp_class_creation_63__metaclass;

    CHECK_OBJECT( tmp_source_name_84 );
    tmp_called_name_129 = LOOKUP_ATTRIBUTE( tmp_source_name_84, const_str_plain___prepare__ );
    if ( tmp_called_name_129 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_129;
    }
    tmp_args_name_125 = PyTuple_New( 2 );
    tmp_tuple_element_187 = const_str_plain_MarkSafeIfAutoescape;
    Py_INCREF( tmp_tuple_element_187 );
    PyTuple_SET_ITEM( tmp_args_name_125, 0, tmp_tuple_element_187 );
    tmp_tuple_element_187 = tmp_class_creation_63__bases;

    CHECK_OBJECT( tmp_tuple_element_187 );
    Py_INCREF( tmp_tuple_element_187 );
    PyTuple_SET_ITEM( tmp_args_name_125, 1, tmp_tuple_element_187 );
    tmp_kw_name_125 = tmp_class_creation_63__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_125 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 917;
    tmp_assign_source_697 = CALL_FUNCTION( tmp_called_name_129, tmp_args_name_125, tmp_kw_name_125 );
    Py_DECREF( tmp_called_name_129 );
    Py_DECREF( tmp_args_name_125 );
    if ( tmp_assign_source_697 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_129;
    }
    goto condexpr_end_189;
    condexpr_false_189:;
    tmp_assign_source_697 = PyDict_New();
    condexpr_end_189:;
    assert( tmp_class_creation_63__prepared == NULL );
    tmp_class_creation_63__prepared = tmp_assign_source_697;

    tmp_set_locals = tmp_class_creation_63__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_63);
    locals_dict_63 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_699 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_62_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_699 );
    outline_62_var___module__ = tmp_assign_source_699;

    tmp_assign_source_700 = const_str_digest_e54b1298a4b28d18c201d20b74e5663f;
    assert( outline_62_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_700 );
    outline_62_var___doc__ = tmp_assign_source_700;

    tmp_assign_source_701 = const_str_plain_MarkSafeIfAutoescape;
    assert( outline_62_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_701 );
    outline_62_var___qualname__ = tmp_assign_source_701;

    tmp_assign_source_702 = const_tuple_str_plain_expr_tuple;
    assert( outline_62_var_fields == NULL );
    Py_INCREF( tmp_assign_source_702 );
    outline_62_var_fields = tmp_assign_source_702;

    tmp_defaults_27 = const_tuple_none_tuple;
    Py_INCREF( tmp_defaults_27 );
    tmp_assign_source_703 = MAKE_FUNCTION_jinja2$nodes$$$function_50_as_const( tmp_defaults_27 );
    assert( outline_62_var_as_const == NULL );
    outline_62_var_as_const = tmp_assign_source_703;

    // Tried code:
    tmp_called_name_130 = tmp_class_creation_63__metaclass;

    CHECK_OBJECT( tmp_called_name_130 );
    tmp_args_name_126 = PyTuple_New( 3 );
    tmp_tuple_element_188 = const_str_plain_MarkSafeIfAutoescape;
    Py_INCREF( tmp_tuple_element_188 );
    PyTuple_SET_ITEM( tmp_args_name_126, 0, tmp_tuple_element_188 );
    tmp_tuple_element_188 = tmp_class_creation_63__bases;

    CHECK_OBJECT( tmp_tuple_element_188 );
    Py_INCREF( tmp_tuple_element_188 );
    PyTuple_SET_ITEM( tmp_args_name_126, 1, tmp_tuple_element_188 );
    tmp_tuple_element_188 = locals_dict_63;
    Py_INCREF( tmp_tuple_element_188 );
    if ( outline_62_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_188,
            const_str_plain___qualname__,
            outline_62_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_188,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_188,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_126 );
        Py_DECREF( tmp_tuple_element_188 );

        exception_lineno = 917;

        goto try_except_handler_130;
    }
    if ( outline_62_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_188,
            const_str_plain___module__,
            outline_62_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_188,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_188,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_126 );
        Py_DECREF( tmp_tuple_element_188 );

        exception_lineno = 917;

        goto try_except_handler_130;
    }
    if ( outline_62_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_188,
            const_str_plain___doc__,
            outline_62_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_188,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_188,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_126 );
        Py_DECREF( tmp_tuple_element_188 );

        exception_lineno = 917;

        goto try_except_handler_130;
    }
    if ( outline_62_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_188,
            const_str_plain_fields,
            outline_62_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_188,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_188,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_126 );
        Py_DECREF( tmp_tuple_element_188 );

        exception_lineno = 917;

        goto try_except_handler_130;
    }
    if ( outline_62_var_as_const != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_188,
            const_str_plain_as_const,
            outline_62_var_as_const
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_188,
            const_str_plain_as_const
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_188,
                const_str_plain_as_const
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_126 );
        Py_DECREF( tmp_tuple_element_188 );

        exception_lineno = 917;

        goto try_except_handler_130;
    }
    PyTuple_SET_ITEM( tmp_args_name_126, 2, tmp_tuple_element_188 );
    tmp_kw_name_126 = tmp_class_creation_63__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_126 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 917;
    tmp_assign_source_704 = CALL_FUNCTION( tmp_called_name_130, tmp_args_name_126, tmp_kw_name_126 );
    Py_DECREF( tmp_args_name_126 );
    if ( tmp_assign_source_704 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 917;

        goto try_except_handler_130;
    }
    assert( outline_62_var___class__ == NULL );
    outline_62_var___class__ = tmp_assign_source_704;

    tmp_outline_return_value_64 = outline_62_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_64 );
    Py_INCREF( tmp_outline_return_value_64 );
    goto try_return_handler_130;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_130:;
    CHECK_OBJECT( (PyObject *)outline_62_var___class__ );
    Py_DECREF( outline_62_var___class__ );
    outline_62_var___class__ = NULL;

    Py_XDECREF( outline_62_var___qualname__ );
    outline_62_var___qualname__ = NULL;

    Py_XDECREF( outline_62_var___module__ );
    outline_62_var___module__ = NULL;

    Py_XDECREF( outline_62_var___doc__ );
    outline_62_var___doc__ = NULL;

    Py_XDECREF( outline_62_var_fields );
    outline_62_var_fields = NULL;

    Py_XDECREF( outline_62_var_as_const );
    outline_62_var_as_const = NULL;

    goto outline_result_64;
    // Exception handler code:
    try_except_handler_130:;
    exception_keeper_type_128 = exception_type;
    exception_keeper_value_128 = exception_value;
    exception_keeper_tb_128 = exception_tb;
    exception_keeper_lineno_128 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_62_var___qualname__ );
    outline_62_var___qualname__ = NULL;

    Py_XDECREF( outline_62_var___module__ );
    outline_62_var___module__ = NULL;

    Py_XDECREF( outline_62_var___doc__ );
    outline_62_var___doc__ = NULL;

    Py_XDECREF( outline_62_var_fields );
    outline_62_var_fields = NULL;

    Py_XDECREF( outline_62_var_as_const );
    outline_62_var_as_const = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_128;
    exception_value = exception_keeper_value_128;
    exception_tb = exception_keeper_tb_128;
    exception_lineno = exception_keeper_lineno_128;

    goto outline_exception_63;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_63:;
    exception_lineno = 917;
    goto try_except_handler_129;
    outline_result_64:;
    tmp_assign_source_698 = tmp_outline_return_value_64;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_MarkSafeIfAutoescape, tmp_assign_source_698 );
    goto try_end_66;
    // Exception handler code:
    try_except_handler_129:;
    exception_keeper_type_129 = exception_type;
    exception_keeper_value_129 = exception_value;
    exception_keeper_tb_129 = exception_tb;
    exception_keeper_lineno_129 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_63__bases );
    tmp_class_creation_63__bases = NULL;

    Py_XDECREF( tmp_class_creation_63__class_decl_dict );
    tmp_class_creation_63__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_63__metaclass );
    tmp_class_creation_63__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_63__prepared );
    tmp_class_creation_63__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_129;
    exception_value = exception_keeper_value_129;
    exception_tb = exception_keeper_tb_129;
    exception_lineno = exception_keeper_lineno_129;

    goto frame_exception_exit_1;
    // End of try:
    try_end_66:;
    Py_XDECREF( tmp_class_creation_63__bases );
    tmp_class_creation_63__bases = NULL;

    Py_XDECREF( tmp_class_creation_63__class_decl_dict );
    tmp_class_creation_63__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_63__metaclass );
    tmp_class_creation_63__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_63__prepared );
    tmp_class_creation_63__prepared = NULL;

    // Tried code:
    tmp_assign_source_705 = PyTuple_New( 1 );
    tmp_tuple_element_189 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Expr );

    if (unlikely( tmp_tuple_element_189 == NULL ))
    {
        tmp_tuple_element_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Expr );
    }

    if ( tmp_tuple_element_189 == NULL )
    {
        Py_DECREF( tmp_assign_source_705 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Expr" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 935;

        goto try_except_handler_131;
    }

    Py_INCREF( tmp_tuple_element_189 );
    PyTuple_SET_ITEM( tmp_assign_source_705, 0, tmp_tuple_element_189 );
    assert( tmp_class_creation_64__bases == NULL );
    tmp_class_creation_64__bases = tmp_assign_source_705;

    tmp_assign_source_706 = PyDict_New();
    assert( tmp_class_creation_64__class_decl_dict == NULL );
    tmp_class_creation_64__class_decl_dict = tmp_assign_source_706;

    tmp_compare_left_128 = const_str_plain_metaclass;
    tmp_compare_right_128 = tmp_class_creation_64__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_128 );
    tmp_cmp_In_127 = PySequence_Contains( tmp_compare_right_128, tmp_compare_left_128 );
    assert( !(tmp_cmp_In_127 == -1) );
    if ( tmp_cmp_In_127 == 1 )
    {
        goto condexpr_true_190;
    }
    else
    {
        goto condexpr_false_190;
    }
    condexpr_true_190:;
    tmp_dict_name_64 = tmp_class_creation_64__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_64 );
    tmp_key_name_64 = const_str_plain_metaclass;
    tmp_metaclass_name_64 = DICT_GET_ITEM( tmp_dict_name_64, tmp_key_name_64 );
    if ( tmp_metaclass_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_131;
    }
    goto condexpr_end_190;
    condexpr_false_190:;
    tmp_cond_value_64 = tmp_class_creation_64__bases;

    CHECK_OBJECT( tmp_cond_value_64 );
    tmp_cond_truth_64 = CHECK_IF_TRUE( tmp_cond_value_64 );
    if ( tmp_cond_truth_64 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_131;
    }
    if ( tmp_cond_truth_64 == 1 )
    {
        goto condexpr_true_191;
    }
    else
    {
        goto condexpr_false_191;
    }
    condexpr_true_191:;
    tmp_subscribed_name_64 = tmp_class_creation_64__bases;

    CHECK_OBJECT( tmp_subscribed_name_64 );
    tmp_subscript_name_64 = const_int_0;
    tmp_type_arg_64 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_64, tmp_subscript_name_64 );
    if ( tmp_type_arg_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_131;
    }
    tmp_metaclass_name_64 = BUILTIN_TYPE1( tmp_type_arg_64 );
    Py_DECREF( tmp_type_arg_64 );
    if ( tmp_metaclass_name_64 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_131;
    }
    goto condexpr_end_191;
    condexpr_false_191:;
    tmp_metaclass_name_64 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_64 );
    condexpr_end_191:;
    condexpr_end_190:;
    tmp_bases_name_64 = tmp_class_creation_64__bases;

    CHECK_OBJECT( tmp_bases_name_64 );
    tmp_assign_source_707 = SELECT_METACLASS( tmp_metaclass_name_64, tmp_bases_name_64 );
    if ( tmp_assign_source_707 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_64 );

        exception_lineno = 935;

        goto try_except_handler_131;
    }
    Py_DECREF( tmp_metaclass_name_64 );
    assert( tmp_class_creation_64__metaclass == NULL );
    tmp_class_creation_64__metaclass = tmp_assign_source_707;

    tmp_compare_left_129 = const_str_plain_metaclass;
    tmp_compare_right_129 = tmp_class_creation_64__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_129 );
    tmp_cmp_In_128 = PySequence_Contains( tmp_compare_right_129, tmp_compare_left_129 );
    assert( !(tmp_cmp_In_128 == -1) );
    if ( tmp_cmp_In_128 == 1 )
    {
        goto branch_yes_65;
    }
    else
    {
        goto branch_no_65;
    }
    branch_yes_65:;
    tmp_dictdel_dict = tmp_class_creation_64__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_131;
    }
    branch_no_65:;
    tmp_hasattr_source_64 = tmp_class_creation_64__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_64 );
    tmp_hasattr_attr_64 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_64, tmp_hasattr_attr_64 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_131;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_192;
    }
    else
    {
        goto condexpr_false_192;
    }
    condexpr_true_192:;
    tmp_source_name_85 = tmp_class_creation_64__metaclass;

    CHECK_OBJECT( tmp_source_name_85 );
    tmp_called_name_131 = LOOKUP_ATTRIBUTE( tmp_source_name_85, const_str_plain___prepare__ );
    if ( tmp_called_name_131 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_131;
    }
    tmp_args_name_127 = PyTuple_New( 2 );
    tmp_tuple_element_190 = const_str_plain_ContextReference;
    Py_INCREF( tmp_tuple_element_190 );
    PyTuple_SET_ITEM( tmp_args_name_127, 0, tmp_tuple_element_190 );
    tmp_tuple_element_190 = tmp_class_creation_64__bases;

    CHECK_OBJECT( tmp_tuple_element_190 );
    Py_INCREF( tmp_tuple_element_190 );
    PyTuple_SET_ITEM( tmp_args_name_127, 1, tmp_tuple_element_190 );
    tmp_kw_name_127 = tmp_class_creation_64__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_127 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 935;
    tmp_assign_source_708 = CALL_FUNCTION( tmp_called_name_131, tmp_args_name_127, tmp_kw_name_127 );
    Py_DECREF( tmp_called_name_131 );
    Py_DECREF( tmp_args_name_127 );
    if ( tmp_assign_source_708 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_131;
    }
    goto condexpr_end_192;
    condexpr_false_192:;
    tmp_assign_source_708 = PyDict_New();
    condexpr_end_192:;
    assert( tmp_class_creation_64__prepared == NULL );
    tmp_class_creation_64__prepared = tmp_assign_source_708;

    tmp_set_locals = tmp_class_creation_64__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_64);
    locals_dict_64 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_710 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_63_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_710 );
    outline_63_var___module__ = tmp_assign_source_710;

    tmp_assign_source_711 = const_str_digest_c58c3c9ae2033318f0348053e325e7e1;
    assert( outline_63_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_711 );
    outline_63_var___doc__ = tmp_assign_source_711;

    tmp_assign_source_712 = const_str_plain_ContextReference;
    assert( outline_63_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_712 );
    outline_63_var___qualname__ = tmp_assign_source_712;

    // Tried code:
    tmp_called_name_132 = tmp_class_creation_64__metaclass;

    CHECK_OBJECT( tmp_called_name_132 );
    tmp_args_name_128 = PyTuple_New( 3 );
    tmp_tuple_element_191 = const_str_plain_ContextReference;
    Py_INCREF( tmp_tuple_element_191 );
    PyTuple_SET_ITEM( tmp_args_name_128, 0, tmp_tuple_element_191 );
    tmp_tuple_element_191 = tmp_class_creation_64__bases;

    CHECK_OBJECT( tmp_tuple_element_191 );
    Py_INCREF( tmp_tuple_element_191 );
    PyTuple_SET_ITEM( tmp_args_name_128, 1, tmp_tuple_element_191 );
    tmp_tuple_element_191 = locals_dict_64;
    Py_INCREF( tmp_tuple_element_191 );
    if ( outline_63_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_191,
            const_str_plain___qualname__,
            outline_63_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_191,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_191,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_128 );
        Py_DECREF( tmp_tuple_element_191 );

        exception_lineno = 935;

        goto try_except_handler_132;
    }
    if ( outline_63_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_191,
            const_str_plain___module__,
            outline_63_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_191,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_191,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_128 );
        Py_DECREF( tmp_tuple_element_191 );

        exception_lineno = 935;

        goto try_except_handler_132;
    }
    if ( outline_63_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_191,
            const_str_plain___doc__,
            outline_63_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_191,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_191,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_128 );
        Py_DECREF( tmp_tuple_element_191 );

        exception_lineno = 935;

        goto try_except_handler_132;
    }
    PyTuple_SET_ITEM( tmp_args_name_128, 2, tmp_tuple_element_191 );
    tmp_kw_name_128 = tmp_class_creation_64__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_128 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 935;
    tmp_assign_source_713 = CALL_FUNCTION( tmp_called_name_132, tmp_args_name_128, tmp_kw_name_128 );
    Py_DECREF( tmp_args_name_128 );
    if ( tmp_assign_source_713 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 935;

        goto try_except_handler_132;
    }
    assert( outline_63_var___class__ == NULL );
    outline_63_var___class__ = tmp_assign_source_713;

    tmp_outline_return_value_65 = outline_63_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_65 );
    Py_INCREF( tmp_outline_return_value_65 );
    goto try_return_handler_132;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_132:;
    CHECK_OBJECT( (PyObject *)outline_63_var___class__ );
    Py_DECREF( outline_63_var___class__ );
    outline_63_var___class__ = NULL;

    Py_XDECREF( outline_63_var___qualname__ );
    outline_63_var___qualname__ = NULL;

    Py_XDECREF( outline_63_var___module__ );
    outline_63_var___module__ = NULL;

    Py_XDECREF( outline_63_var___doc__ );
    outline_63_var___doc__ = NULL;

    goto outline_result_65;
    // Exception handler code:
    try_except_handler_132:;
    exception_keeper_type_130 = exception_type;
    exception_keeper_value_130 = exception_value;
    exception_keeper_tb_130 = exception_tb;
    exception_keeper_lineno_130 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_63_var___qualname__ );
    outline_63_var___qualname__ = NULL;

    Py_XDECREF( outline_63_var___module__ );
    outline_63_var___module__ = NULL;

    Py_XDECREF( outline_63_var___doc__ );
    outline_63_var___doc__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_130;
    exception_value = exception_keeper_value_130;
    exception_tb = exception_keeper_tb_130;
    exception_lineno = exception_keeper_lineno_130;

    goto outline_exception_64;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_64:;
    exception_lineno = 935;
    goto try_except_handler_131;
    outline_result_65:;
    tmp_assign_source_709 = tmp_outline_return_value_65;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_ContextReference, tmp_assign_source_709 );
    goto try_end_67;
    // Exception handler code:
    try_except_handler_131:;
    exception_keeper_type_131 = exception_type;
    exception_keeper_value_131 = exception_value;
    exception_keeper_tb_131 = exception_tb;
    exception_keeper_lineno_131 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_64__bases );
    tmp_class_creation_64__bases = NULL;

    Py_XDECREF( tmp_class_creation_64__class_decl_dict );
    tmp_class_creation_64__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_64__metaclass );
    tmp_class_creation_64__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_64__prepared );
    tmp_class_creation_64__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_131;
    exception_value = exception_keeper_value_131;
    exception_tb = exception_keeper_tb_131;
    exception_lineno = exception_keeper_lineno_131;

    goto frame_exception_exit_1;
    // End of try:
    try_end_67:;
    Py_XDECREF( tmp_class_creation_64__bases );
    tmp_class_creation_64__bases = NULL;

    Py_XDECREF( tmp_class_creation_64__class_decl_dict );
    tmp_class_creation_64__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_64__metaclass );
    tmp_class_creation_64__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_64__prepared );
    tmp_class_creation_64__prepared = NULL;

    // Tried code:
    tmp_assign_source_714 = PyTuple_New( 1 );
    tmp_tuple_element_192 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_192 == NULL ))
    {
        tmp_tuple_element_192 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_192 == NULL )
    {
        Py_DECREF( tmp_assign_source_714 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 948;

        goto try_except_handler_133;
    }

    Py_INCREF( tmp_tuple_element_192 );
    PyTuple_SET_ITEM( tmp_assign_source_714, 0, tmp_tuple_element_192 );
    assert( tmp_class_creation_65__bases == NULL );
    tmp_class_creation_65__bases = tmp_assign_source_714;

    tmp_assign_source_715 = PyDict_New();
    assert( tmp_class_creation_65__class_decl_dict == NULL );
    tmp_class_creation_65__class_decl_dict = tmp_assign_source_715;

    tmp_compare_left_130 = const_str_plain_metaclass;
    tmp_compare_right_130 = tmp_class_creation_65__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_130 );
    tmp_cmp_In_129 = PySequence_Contains( tmp_compare_right_130, tmp_compare_left_130 );
    assert( !(tmp_cmp_In_129 == -1) );
    if ( tmp_cmp_In_129 == 1 )
    {
        goto condexpr_true_193;
    }
    else
    {
        goto condexpr_false_193;
    }
    condexpr_true_193:;
    tmp_dict_name_65 = tmp_class_creation_65__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_65 );
    tmp_key_name_65 = const_str_plain_metaclass;
    tmp_metaclass_name_65 = DICT_GET_ITEM( tmp_dict_name_65, tmp_key_name_65 );
    if ( tmp_metaclass_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_133;
    }
    goto condexpr_end_193;
    condexpr_false_193:;
    tmp_cond_value_65 = tmp_class_creation_65__bases;

    CHECK_OBJECT( tmp_cond_value_65 );
    tmp_cond_truth_65 = CHECK_IF_TRUE( tmp_cond_value_65 );
    if ( tmp_cond_truth_65 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_133;
    }
    if ( tmp_cond_truth_65 == 1 )
    {
        goto condexpr_true_194;
    }
    else
    {
        goto condexpr_false_194;
    }
    condexpr_true_194:;
    tmp_subscribed_name_65 = tmp_class_creation_65__bases;

    CHECK_OBJECT( tmp_subscribed_name_65 );
    tmp_subscript_name_65 = const_int_0;
    tmp_type_arg_65 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_65, tmp_subscript_name_65 );
    if ( tmp_type_arg_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_133;
    }
    tmp_metaclass_name_65 = BUILTIN_TYPE1( tmp_type_arg_65 );
    Py_DECREF( tmp_type_arg_65 );
    if ( tmp_metaclass_name_65 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_133;
    }
    goto condexpr_end_194;
    condexpr_false_194:;
    tmp_metaclass_name_65 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_65 );
    condexpr_end_194:;
    condexpr_end_193:;
    tmp_bases_name_65 = tmp_class_creation_65__bases;

    CHECK_OBJECT( tmp_bases_name_65 );
    tmp_assign_source_716 = SELECT_METACLASS( tmp_metaclass_name_65, tmp_bases_name_65 );
    if ( tmp_assign_source_716 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_65 );

        exception_lineno = 948;

        goto try_except_handler_133;
    }
    Py_DECREF( tmp_metaclass_name_65 );
    assert( tmp_class_creation_65__metaclass == NULL );
    tmp_class_creation_65__metaclass = tmp_assign_source_716;

    tmp_compare_left_131 = const_str_plain_metaclass;
    tmp_compare_right_131 = tmp_class_creation_65__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_131 );
    tmp_cmp_In_130 = PySequence_Contains( tmp_compare_right_131, tmp_compare_left_131 );
    assert( !(tmp_cmp_In_130 == -1) );
    if ( tmp_cmp_In_130 == 1 )
    {
        goto branch_yes_66;
    }
    else
    {
        goto branch_no_66;
    }
    branch_yes_66:;
    tmp_dictdel_dict = tmp_class_creation_65__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_133;
    }
    branch_no_66:;
    tmp_hasattr_source_65 = tmp_class_creation_65__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_65 );
    tmp_hasattr_attr_65 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_65, tmp_hasattr_attr_65 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_133;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_195;
    }
    else
    {
        goto condexpr_false_195;
    }
    condexpr_true_195:;
    tmp_source_name_86 = tmp_class_creation_65__metaclass;

    CHECK_OBJECT( tmp_source_name_86 );
    tmp_called_name_133 = LOOKUP_ATTRIBUTE( tmp_source_name_86, const_str_plain___prepare__ );
    if ( tmp_called_name_133 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_133;
    }
    tmp_args_name_129 = PyTuple_New( 2 );
    tmp_tuple_element_193 = const_str_plain_Continue;
    Py_INCREF( tmp_tuple_element_193 );
    PyTuple_SET_ITEM( tmp_args_name_129, 0, tmp_tuple_element_193 );
    tmp_tuple_element_193 = tmp_class_creation_65__bases;

    CHECK_OBJECT( tmp_tuple_element_193 );
    Py_INCREF( tmp_tuple_element_193 );
    PyTuple_SET_ITEM( tmp_args_name_129, 1, tmp_tuple_element_193 );
    tmp_kw_name_129 = tmp_class_creation_65__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_129 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 948;
    tmp_assign_source_717 = CALL_FUNCTION( tmp_called_name_133, tmp_args_name_129, tmp_kw_name_129 );
    Py_DECREF( tmp_called_name_133 );
    Py_DECREF( tmp_args_name_129 );
    if ( tmp_assign_source_717 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_133;
    }
    goto condexpr_end_195;
    condexpr_false_195:;
    tmp_assign_source_717 = PyDict_New();
    condexpr_end_195:;
    assert( tmp_class_creation_65__prepared == NULL );
    tmp_class_creation_65__prepared = tmp_assign_source_717;

    tmp_set_locals = tmp_class_creation_65__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_65);
    locals_dict_65 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_719 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_64_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_719 );
    outline_64_var___module__ = tmp_assign_source_719;

    tmp_assign_source_720 = const_str_digest_bfd820e9092fffa14429396739129d6a;
    assert( outline_64_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_720 );
    outline_64_var___doc__ = tmp_assign_source_720;

    tmp_assign_source_721 = const_str_plain_Continue;
    assert( outline_64_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_721 );
    outline_64_var___qualname__ = tmp_assign_source_721;

    // Tried code:
    tmp_called_name_134 = tmp_class_creation_65__metaclass;

    CHECK_OBJECT( tmp_called_name_134 );
    tmp_args_name_130 = PyTuple_New( 3 );
    tmp_tuple_element_194 = const_str_plain_Continue;
    Py_INCREF( tmp_tuple_element_194 );
    PyTuple_SET_ITEM( tmp_args_name_130, 0, tmp_tuple_element_194 );
    tmp_tuple_element_194 = tmp_class_creation_65__bases;

    CHECK_OBJECT( tmp_tuple_element_194 );
    Py_INCREF( tmp_tuple_element_194 );
    PyTuple_SET_ITEM( tmp_args_name_130, 1, tmp_tuple_element_194 );
    tmp_tuple_element_194 = locals_dict_65;
    Py_INCREF( tmp_tuple_element_194 );
    if ( outline_64_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_194,
            const_str_plain___qualname__,
            outline_64_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_194,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_194,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_130 );
        Py_DECREF( tmp_tuple_element_194 );

        exception_lineno = 948;

        goto try_except_handler_134;
    }
    if ( outline_64_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_194,
            const_str_plain___module__,
            outline_64_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_194,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_194,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_130 );
        Py_DECREF( tmp_tuple_element_194 );

        exception_lineno = 948;

        goto try_except_handler_134;
    }
    if ( outline_64_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_194,
            const_str_plain___doc__,
            outline_64_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_194,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_194,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_130 );
        Py_DECREF( tmp_tuple_element_194 );

        exception_lineno = 948;

        goto try_except_handler_134;
    }
    PyTuple_SET_ITEM( tmp_args_name_130, 2, tmp_tuple_element_194 );
    tmp_kw_name_130 = tmp_class_creation_65__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_130 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 948;
    tmp_assign_source_722 = CALL_FUNCTION( tmp_called_name_134, tmp_args_name_130, tmp_kw_name_130 );
    Py_DECREF( tmp_args_name_130 );
    if ( tmp_assign_source_722 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 948;

        goto try_except_handler_134;
    }
    assert( outline_64_var___class__ == NULL );
    outline_64_var___class__ = tmp_assign_source_722;

    tmp_outline_return_value_66 = outline_64_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_66 );
    Py_INCREF( tmp_outline_return_value_66 );
    goto try_return_handler_134;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_134:;
    CHECK_OBJECT( (PyObject *)outline_64_var___class__ );
    Py_DECREF( outline_64_var___class__ );
    outline_64_var___class__ = NULL;

    Py_XDECREF( outline_64_var___qualname__ );
    outline_64_var___qualname__ = NULL;

    Py_XDECREF( outline_64_var___module__ );
    outline_64_var___module__ = NULL;

    Py_XDECREF( outline_64_var___doc__ );
    outline_64_var___doc__ = NULL;

    goto outline_result_66;
    // Exception handler code:
    try_except_handler_134:;
    exception_keeper_type_132 = exception_type;
    exception_keeper_value_132 = exception_value;
    exception_keeper_tb_132 = exception_tb;
    exception_keeper_lineno_132 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_64_var___qualname__ );
    outline_64_var___qualname__ = NULL;

    Py_XDECREF( outline_64_var___module__ );
    outline_64_var___module__ = NULL;

    Py_XDECREF( outline_64_var___doc__ );
    outline_64_var___doc__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_132;
    exception_value = exception_keeper_value_132;
    exception_tb = exception_keeper_tb_132;
    exception_lineno = exception_keeper_lineno_132;

    goto outline_exception_65;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_65:;
    exception_lineno = 948;
    goto try_except_handler_133;
    outline_result_66:;
    tmp_assign_source_718 = tmp_outline_return_value_66;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Continue, tmp_assign_source_718 );
    goto try_end_68;
    // Exception handler code:
    try_except_handler_133:;
    exception_keeper_type_133 = exception_type;
    exception_keeper_value_133 = exception_value;
    exception_keeper_tb_133 = exception_tb;
    exception_keeper_lineno_133 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_65__bases );
    tmp_class_creation_65__bases = NULL;

    Py_XDECREF( tmp_class_creation_65__class_decl_dict );
    tmp_class_creation_65__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_65__metaclass );
    tmp_class_creation_65__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_65__prepared );
    tmp_class_creation_65__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_133;
    exception_value = exception_keeper_value_133;
    exception_tb = exception_keeper_tb_133;
    exception_lineno = exception_keeper_lineno_133;

    goto frame_exception_exit_1;
    // End of try:
    try_end_68:;
    Py_XDECREF( tmp_class_creation_65__bases );
    tmp_class_creation_65__bases = NULL;

    Py_XDECREF( tmp_class_creation_65__class_decl_dict );
    tmp_class_creation_65__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_65__metaclass );
    tmp_class_creation_65__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_65__prepared );
    tmp_class_creation_65__prepared = NULL;

    // Tried code:
    tmp_assign_source_723 = PyTuple_New( 1 );
    tmp_tuple_element_195 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_195 == NULL ))
    {
        tmp_tuple_element_195 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_195 == NULL )
    {
        Py_DECREF( tmp_assign_source_723 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 952;

        goto try_except_handler_135;
    }

    Py_INCREF( tmp_tuple_element_195 );
    PyTuple_SET_ITEM( tmp_assign_source_723, 0, tmp_tuple_element_195 );
    assert( tmp_class_creation_66__bases == NULL );
    tmp_class_creation_66__bases = tmp_assign_source_723;

    tmp_assign_source_724 = PyDict_New();
    assert( tmp_class_creation_66__class_decl_dict == NULL );
    tmp_class_creation_66__class_decl_dict = tmp_assign_source_724;

    tmp_compare_left_132 = const_str_plain_metaclass;
    tmp_compare_right_132 = tmp_class_creation_66__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_132 );
    tmp_cmp_In_131 = PySequence_Contains( tmp_compare_right_132, tmp_compare_left_132 );
    assert( !(tmp_cmp_In_131 == -1) );
    if ( tmp_cmp_In_131 == 1 )
    {
        goto condexpr_true_196;
    }
    else
    {
        goto condexpr_false_196;
    }
    condexpr_true_196:;
    tmp_dict_name_66 = tmp_class_creation_66__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_66 );
    tmp_key_name_66 = const_str_plain_metaclass;
    tmp_metaclass_name_66 = DICT_GET_ITEM( tmp_dict_name_66, tmp_key_name_66 );
    if ( tmp_metaclass_name_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_135;
    }
    goto condexpr_end_196;
    condexpr_false_196:;
    tmp_cond_value_66 = tmp_class_creation_66__bases;

    CHECK_OBJECT( tmp_cond_value_66 );
    tmp_cond_truth_66 = CHECK_IF_TRUE( tmp_cond_value_66 );
    if ( tmp_cond_truth_66 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_135;
    }
    if ( tmp_cond_truth_66 == 1 )
    {
        goto condexpr_true_197;
    }
    else
    {
        goto condexpr_false_197;
    }
    condexpr_true_197:;
    tmp_subscribed_name_66 = tmp_class_creation_66__bases;

    CHECK_OBJECT( tmp_subscribed_name_66 );
    tmp_subscript_name_66 = const_int_0;
    tmp_type_arg_66 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_66, tmp_subscript_name_66 );
    if ( tmp_type_arg_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_135;
    }
    tmp_metaclass_name_66 = BUILTIN_TYPE1( tmp_type_arg_66 );
    Py_DECREF( tmp_type_arg_66 );
    if ( tmp_metaclass_name_66 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_135;
    }
    goto condexpr_end_197;
    condexpr_false_197:;
    tmp_metaclass_name_66 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_66 );
    condexpr_end_197:;
    condexpr_end_196:;
    tmp_bases_name_66 = tmp_class_creation_66__bases;

    CHECK_OBJECT( tmp_bases_name_66 );
    tmp_assign_source_725 = SELECT_METACLASS( tmp_metaclass_name_66, tmp_bases_name_66 );
    if ( tmp_assign_source_725 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_66 );

        exception_lineno = 952;

        goto try_except_handler_135;
    }
    Py_DECREF( tmp_metaclass_name_66 );
    assert( tmp_class_creation_66__metaclass == NULL );
    tmp_class_creation_66__metaclass = tmp_assign_source_725;

    tmp_compare_left_133 = const_str_plain_metaclass;
    tmp_compare_right_133 = tmp_class_creation_66__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_133 );
    tmp_cmp_In_132 = PySequence_Contains( tmp_compare_right_133, tmp_compare_left_133 );
    assert( !(tmp_cmp_In_132 == -1) );
    if ( tmp_cmp_In_132 == 1 )
    {
        goto branch_yes_67;
    }
    else
    {
        goto branch_no_67;
    }
    branch_yes_67:;
    tmp_dictdel_dict = tmp_class_creation_66__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_135;
    }
    branch_no_67:;
    tmp_hasattr_source_66 = tmp_class_creation_66__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_66 );
    tmp_hasattr_attr_66 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_66, tmp_hasattr_attr_66 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_135;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_198;
    }
    else
    {
        goto condexpr_false_198;
    }
    condexpr_true_198:;
    tmp_source_name_87 = tmp_class_creation_66__metaclass;

    CHECK_OBJECT( tmp_source_name_87 );
    tmp_called_name_135 = LOOKUP_ATTRIBUTE( tmp_source_name_87, const_str_plain___prepare__ );
    if ( tmp_called_name_135 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_135;
    }
    tmp_args_name_131 = PyTuple_New( 2 );
    tmp_tuple_element_196 = const_str_plain_Break;
    Py_INCREF( tmp_tuple_element_196 );
    PyTuple_SET_ITEM( tmp_args_name_131, 0, tmp_tuple_element_196 );
    tmp_tuple_element_196 = tmp_class_creation_66__bases;

    CHECK_OBJECT( tmp_tuple_element_196 );
    Py_INCREF( tmp_tuple_element_196 );
    PyTuple_SET_ITEM( tmp_args_name_131, 1, tmp_tuple_element_196 );
    tmp_kw_name_131 = tmp_class_creation_66__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_131 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 952;
    tmp_assign_source_726 = CALL_FUNCTION( tmp_called_name_135, tmp_args_name_131, tmp_kw_name_131 );
    Py_DECREF( tmp_called_name_135 );
    Py_DECREF( tmp_args_name_131 );
    if ( tmp_assign_source_726 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_135;
    }
    goto condexpr_end_198;
    condexpr_false_198:;
    tmp_assign_source_726 = PyDict_New();
    condexpr_end_198:;
    assert( tmp_class_creation_66__prepared == NULL );
    tmp_class_creation_66__prepared = tmp_assign_source_726;

    tmp_set_locals = tmp_class_creation_66__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_66);
    locals_dict_66 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_728 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_65_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_728 );
    outline_65_var___module__ = tmp_assign_source_728;

    tmp_assign_source_729 = const_str_digest_121b76e75f90f7452a3893653c098859;
    assert( outline_65_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_729 );
    outline_65_var___doc__ = tmp_assign_source_729;

    tmp_assign_source_730 = const_str_plain_Break;
    assert( outline_65_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_730 );
    outline_65_var___qualname__ = tmp_assign_source_730;

    // Tried code:
    tmp_called_name_136 = tmp_class_creation_66__metaclass;

    CHECK_OBJECT( tmp_called_name_136 );
    tmp_args_name_132 = PyTuple_New( 3 );
    tmp_tuple_element_197 = const_str_plain_Break;
    Py_INCREF( tmp_tuple_element_197 );
    PyTuple_SET_ITEM( tmp_args_name_132, 0, tmp_tuple_element_197 );
    tmp_tuple_element_197 = tmp_class_creation_66__bases;

    CHECK_OBJECT( tmp_tuple_element_197 );
    Py_INCREF( tmp_tuple_element_197 );
    PyTuple_SET_ITEM( tmp_args_name_132, 1, tmp_tuple_element_197 );
    tmp_tuple_element_197 = locals_dict_66;
    Py_INCREF( tmp_tuple_element_197 );
    if ( outline_65_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_197,
            const_str_plain___qualname__,
            outline_65_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_197,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_197,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_132 );
        Py_DECREF( tmp_tuple_element_197 );

        exception_lineno = 952;

        goto try_except_handler_136;
    }
    if ( outline_65_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_197,
            const_str_plain___module__,
            outline_65_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_197,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_197,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_132 );
        Py_DECREF( tmp_tuple_element_197 );

        exception_lineno = 952;

        goto try_except_handler_136;
    }
    if ( outline_65_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_197,
            const_str_plain___doc__,
            outline_65_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_197,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_197,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_132 );
        Py_DECREF( tmp_tuple_element_197 );

        exception_lineno = 952;

        goto try_except_handler_136;
    }
    PyTuple_SET_ITEM( tmp_args_name_132, 2, tmp_tuple_element_197 );
    tmp_kw_name_132 = tmp_class_creation_66__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_132 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 952;
    tmp_assign_source_731 = CALL_FUNCTION( tmp_called_name_136, tmp_args_name_132, tmp_kw_name_132 );
    Py_DECREF( tmp_args_name_132 );
    if ( tmp_assign_source_731 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 952;

        goto try_except_handler_136;
    }
    assert( outline_65_var___class__ == NULL );
    outline_65_var___class__ = tmp_assign_source_731;

    tmp_outline_return_value_67 = outline_65_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_67 );
    Py_INCREF( tmp_outline_return_value_67 );
    goto try_return_handler_136;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_136:;
    CHECK_OBJECT( (PyObject *)outline_65_var___class__ );
    Py_DECREF( outline_65_var___class__ );
    outline_65_var___class__ = NULL;

    Py_XDECREF( outline_65_var___qualname__ );
    outline_65_var___qualname__ = NULL;

    Py_XDECREF( outline_65_var___module__ );
    outline_65_var___module__ = NULL;

    Py_XDECREF( outline_65_var___doc__ );
    outline_65_var___doc__ = NULL;

    goto outline_result_67;
    // Exception handler code:
    try_except_handler_136:;
    exception_keeper_type_134 = exception_type;
    exception_keeper_value_134 = exception_value;
    exception_keeper_tb_134 = exception_tb;
    exception_keeper_lineno_134 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_65_var___qualname__ );
    outline_65_var___qualname__ = NULL;

    Py_XDECREF( outline_65_var___module__ );
    outline_65_var___module__ = NULL;

    Py_XDECREF( outline_65_var___doc__ );
    outline_65_var___doc__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_134;
    exception_value = exception_keeper_value_134;
    exception_tb = exception_keeper_tb_134;
    exception_lineno = exception_keeper_lineno_134;

    goto outline_exception_66;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_66:;
    exception_lineno = 952;
    goto try_except_handler_135;
    outline_result_67:;
    tmp_assign_source_727 = tmp_outline_return_value_67;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Break, tmp_assign_source_727 );
    goto try_end_69;
    // Exception handler code:
    try_except_handler_135:;
    exception_keeper_type_135 = exception_type;
    exception_keeper_value_135 = exception_value;
    exception_keeper_tb_135 = exception_tb;
    exception_keeper_lineno_135 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_66__bases );
    tmp_class_creation_66__bases = NULL;

    Py_XDECREF( tmp_class_creation_66__class_decl_dict );
    tmp_class_creation_66__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_66__metaclass );
    tmp_class_creation_66__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_66__prepared );
    tmp_class_creation_66__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_135;
    exception_value = exception_keeper_value_135;
    exception_tb = exception_keeper_tb_135;
    exception_lineno = exception_keeper_lineno_135;

    goto frame_exception_exit_1;
    // End of try:
    try_end_69:;
    Py_XDECREF( tmp_class_creation_66__bases );
    tmp_class_creation_66__bases = NULL;

    Py_XDECREF( tmp_class_creation_66__class_decl_dict );
    tmp_class_creation_66__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_66__metaclass );
    tmp_class_creation_66__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_66__prepared );
    tmp_class_creation_66__prepared = NULL;

    // Tried code:
    tmp_assign_source_732 = PyTuple_New( 1 );
    tmp_tuple_element_198 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_198 == NULL ))
    {
        tmp_tuple_element_198 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_198 == NULL )
    {
        Py_DECREF( tmp_assign_source_732 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 956;

        goto try_except_handler_137;
    }

    Py_INCREF( tmp_tuple_element_198 );
    PyTuple_SET_ITEM( tmp_assign_source_732, 0, tmp_tuple_element_198 );
    assert( tmp_class_creation_67__bases == NULL );
    tmp_class_creation_67__bases = tmp_assign_source_732;

    tmp_assign_source_733 = PyDict_New();
    assert( tmp_class_creation_67__class_decl_dict == NULL );
    tmp_class_creation_67__class_decl_dict = tmp_assign_source_733;

    tmp_compare_left_134 = const_str_plain_metaclass;
    tmp_compare_right_134 = tmp_class_creation_67__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_134 );
    tmp_cmp_In_133 = PySequence_Contains( tmp_compare_right_134, tmp_compare_left_134 );
    assert( !(tmp_cmp_In_133 == -1) );
    if ( tmp_cmp_In_133 == 1 )
    {
        goto condexpr_true_199;
    }
    else
    {
        goto condexpr_false_199;
    }
    condexpr_true_199:;
    tmp_dict_name_67 = tmp_class_creation_67__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_67 );
    tmp_key_name_67 = const_str_plain_metaclass;
    tmp_metaclass_name_67 = DICT_GET_ITEM( tmp_dict_name_67, tmp_key_name_67 );
    if ( tmp_metaclass_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_137;
    }
    goto condexpr_end_199;
    condexpr_false_199:;
    tmp_cond_value_67 = tmp_class_creation_67__bases;

    CHECK_OBJECT( tmp_cond_value_67 );
    tmp_cond_truth_67 = CHECK_IF_TRUE( tmp_cond_value_67 );
    if ( tmp_cond_truth_67 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_137;
    }
    if ( tmp_cond_truth_67 == 1 )
    {
        goto condexpr_true_200;
    }
    else
    {
        goto condexpr_false_200;
    }
    condexpr_true_200:;
    tmp_subscribed_name_67 = tmp_class_creation_67__bases;

    CHECK_OBJECT( tmp_subscribed_name_67 );
    tmp_subscript_name_67 = const_int_0;
    tmp_type_arg_67 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_67, tmp_subscript_name_67 );
    if ( tmp_type_arg_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_137;
    }
    tmp_metaclass_name_67 = BUILTIN_TYPE1( tmp_type_arg_67 );
    Py_DECREF( tmp_type_arg_67 );
    if ( tmp_metaclass_name_67 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_137;
    }
    goto condexpr_end_200;
    condexpr_false_200:;
    tmp_metaclass_name_67 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_67 );
    condexpr_end_200:;
    condexpr_end_199:;
    tmp_bases_name_67 = tmp_class_creation_67__bases;

    CHECK_OBJECT( tmp_bases_name_67 );
    tmp_assign_source_734 = SELECT_METACLASS( tmp_metaclass_name_67, tmp_bases_name_67 );
    if ( tmp_assign_source_734 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_67 );

        exception_lineno = 956;

        goto try_except_handler_137;
    }
    Py_DECREF( tmp_metaclass_name_67 );
    assert( tmp_class_creation_67__metaclass == NULL );
    tmp_class_creation_67__metaclass = tmp_assign_source_734;

    tmp_compare_left_135 = const_str_plain_metaclass;
    tmp_compare_right_135 = tmp_class_creation_67__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_135 );
    tmp_cmp_In_134 = PySequence_Contains( tmp_compare_right_135, tmp_compare_left_135 );
    assert( !(tmp_cmp_In_134 == -1) );
    if ( tmp_cmp_In_134 == 1 )
    {
        goto branch_yes_68;
    }
    else
    {
        goto branch_no_68;
    }
    branch_yes_68:;
    tmp_dictdel_dict = tmp_class_creation_67__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_137;
    }
    branch_no_68:;
    tmp_hasattr_source_67 = tmp_class_creation_67__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_67 );
    tmp_hasattr_attr_67 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_67, tmp_hasattr_attr_67 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_137;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_201;
    }
    else
    {
        goto condexpr_false_201;
    }
    condexpr_true_201:;
    tmp_source_name_88 = tmp_class_creation_67__metaclass;

    CHECK_OBJECT( tmp_source_name_88 );
    tmp_called_name_137 = LOOKUP_ATTRIBUTE( tmp_source_name_88, const_str_plain___prepare__ );
    if ( tmp_called_name_137 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_137;
    }
    tmp_args_name_133 = PyTuple_New( 2 );
    tmp_tuple_element_199 = const_str_plain_Scope;
    Py_INCREF( tmp_tuple_element_199 );
    PyTuple_SET_ITEM( tmp_args_name_133, 0, tmp_tuple_element_199 );
    tmp_tuple_element_199 = tmp_class_creation_67__bases;

    CHECK_OBJECT( tmp_tuple_element_199 );
    Py_INCREF( tmp_tuple_element_199 );
    PyTuple_SET_ITEM( tmp_args_name_133, 1, tmp_tuple_element_199 );
    tmp_kw_name_133 = tmp_class_creation_67__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_133 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 956;
    tmp_assign_source_735 = CALL_FUNCTION( tmp_called_name_137, tmp_args_name_133, tmp_kw_name_133 );
    Py_DECREF( tmp_called_name_137 );
    Py_DECREF( tmp_args_name_133 );
    if ( tmp_assign_source_735 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_137;
    }
    goto condexpr_end_201;
    condexpr_false_201:;
    tmp_assign_source_735 = PyDict_New();
    condexpr_end_201:;
    assert( tmp_class_creation_67__prepared == NULL );
    tmp_class_creation_67__prepared = tmp_assign_source_735;

    tmp_set_locals = tmp_class_creation_67__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_67);
    locals_dict_67 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_737 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_66_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_737 );
    outline_66_var___module__ = tmp_assign_source_737;

    tmp_assign_source_738 = const_str_digest_0670adee5187015bcb491127cf260b75;
    assert( outline_66_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_738 );
    outline_66_var___doc__ = tmp_assign_source_738;

    tmp_assign_source_739 = const_str_plain_Scope;
    assert( outline_66_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_739 );
    outline_66_var___qualname__ = tmp_assign_source_739;

    tmp_assign_source_740 = const_tuple_str_plain_body_tuple;
    assert( outline_66_var_fields == NULL );
    Py_INCREF( tmp_assign_source_740 );
    outline_66_var_fields = tmp_assign_source_740;

    // Tried code:
    tmp_called_name_138 = tmp_class_creation_67__metaclass;

    CHECK_OBJECT( tmp_called_name_138 );
    tmp_args_name_134 = PyTuple_New( 3 );
    tmp_tuple_element_200 = const_str_plain_Scope;
    Py_INCREF( tmp_tuple_element_200 );
    PyTuple_SET_ITEM( tmp_args_name_134, 0, tmp_tuple_element_200 );
    tmp_tuple_element_200 = tmp_class_creation_67__bases;

    CHECK_OBJECT( tmp_tuple_element_200 );
    Py_INCREF( tmp_tuple_element_200 );
    PyTuple_SET_ITEM( tmp_args_name_134, 1, tmp_tuple_element_200 );
    tmp_tuple_element_200 = locals_dict_67;
    Py_INCREF( tmp_tuple_element_200 );
    if ( outline_66_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_200,
            const_str_plain___qualname__,
            outline_66_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_200,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_200,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_134 );
        Py_DECREF( tmp_tuple_element_200 );

        exception_lineno = 956;

        goto try_except_handler_138;
    }
    if ( outline_66_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_200,
            const_str_plain___module__,
            outline_66_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_200,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_200,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_134 );
        Py_DECREF( tmp_tuple_element_200 );

        exception_lineno = 956;

        goto try_except_handler_138;
    }
    if ( outline_66_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_200,
            const_str_plain___doc__,
            outline_66_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_200,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_200,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_134 );
        Py_DECREF( tmp_tuple_element_200 );

        exception_lineno = 956;

        goto try_except_handler_138;
    }
    if ( outline_66_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_200,
            const_str_plain_fields,
            outline_66_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_200,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_200,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_134 );
        Py_DECREF( tmp_tuple_element_200 );

        exception_lineno = 956;

        goto try_except_handler_138;
    }
    PyTuple_SET_ITEM( tmp_args_name_134, 2, tmp_tuple_element_200 );
    tmp_kw_name_134 = tmp_class_creation_67__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_134 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 956;
    tmp_assign_source_741 = CALL_FUNCTION( tmp_called_name_138, tmp_args_name_134, tmp_kw_name_134 );
    Py_DECREF( tmp_args_name_134 );
    if ( tmp_assign_source_741 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 956;

        goto try_except_handler_138;
    }
    assert( outline_66_var___class__ == NULL );
    outline_66_var___class__ = tmp_assign_source_741;

    tmp_outline_return_value_68 = outline_66_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_68 );
    Py_INCREF( tmp_outline_return_value_68 );
    goto try_return_handler_138;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_138:;
    CHECK_OBJECT( (PyObject *)outline_66_var___class__ );
    Py_DECREF( outline_66_var___class__ );
    outline_66_var___class__ = NULL;

    Py_XDECREF( outline_66_var___qualname__ );
    outline_66_var___qualname__ = NULL;

    Py_XDECREF( outline_66_var___module__ );
    outline_66_var___module__ = NULL;

    Py_XDECREF( outline_66_var___doc__ );
    outline_66_var___doc__ = NULL;

    Py_XDECREF( outline_66_var_fields );
    outline_66_var_fields = NULL;

    goto outline_result_68;
    // Exception handler code:
    try_except_handler_138:;
    exception_keeper_type_136 = exception_type;
    exception_keeper_value_136 = exception_value;
    exception_keeper_tb_136 = exception_tb;
    exception_keeper_lineno_136 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_66_var___qualname__ );
    outline_66_var___qualname__ = NULL;

    Py_XDECREF( outline_66_var___module__ );
    outline_66_var___module__ = NULL;

    Py_XDECREF( outline_66_var___doc__ );
    outline_66_var___doc__ = NULL;

    Py_XDECREF( outline_66_var_fields );
    outline_66_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_136;
    exception_value = exception_keeper_value_136;
    exception_tb = exception_keeper_tb_136;
    exception_lineno = exception_keeper_lineno_136;

    goto outline_exception_67;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_67:;
    exception_lineno = 956;
    goto try_except_handler_137;
    outline_result_68:;
    tmp_assign_source_736 = tmp_outline_return_value_68;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Scope, tmp_assign_source_736 );
    goto try_end_70;
    // Exception handler code:
    try_except_handler_137:;
    exception_keeper_type_137 = exception_type;
    exception_keeper_value_137 = exception_value;
    exception_keeper_tb_137 = exception_tb;
    exception_keeper_lineno_137 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_67__bases );
    tmp_class_creation_67__bases = NULL;

    Py_XDECREF( tmp_class_creation_67__class_decl_dict );
    tmp_class_creation_67__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_67__metaclass );
    tmp_class_creation_67__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_67__prepared );
    tmp_class_creation_67__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_137;
    exception_value = exception_keeper_value_137;
    exception_tb = exception_keeper_tb_137;
    exception_lineno = exception_keeper_lineno_137;

    goto frame_exception_exit_1;
    // End of try:
    try_end_70:;
    Py_XDECREF( tmp_class_creation_67__bases );
    tmp_class_creation_67__bases = NULL;

    Py_XDECREF( tmp_class_creation_67__class_decl_dict );
    tmp_class_creation_67__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_67__metaclass );
    tmp_class_creation_67__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_67__prepared );
    tmp_class_creation_67__prepared = NULL;

    // Tried code:
    tmp_assign_source_742 = PyTuple_New( 1 );
    tmp_tuple_element_201 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_201 == NULL ))
    {
        tmp_tuple_element_201 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_201 == NULL )
    {
        Py_DECREF( tmp_assign_source_742 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 961;

        goto try_except_handler_139;
    }

    Py_INCREF( tmp_tuple_element_201 );
    PyTuple_SET_ITEM( tmp_assign_source_742, 0, tmp_tuple_element_201 );
    assert( tmp_class_creation_68__bases == NULL );
    tmp_class_creation_68__bases = tmp_assign_source_742;

    tmp_assign_source_743 = PyDict_New();
    assert( tmp_class_creation_68__class_decl_dict == NULL );
    tmp_class_creation_68__class_decl_dict = tmp_assign_source_743;

    tmp_compare_left_136 = const_str_plain_metaclass;
    tmp_compare_right_136 = tmp_class_creation_68__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_136 );
    tmp_cmp_In_135 = PySequence_Contains( tmp_compare_right_136, tmp_compare_left_136 );
    assert( !(tmp_cmp_In_135 == -1) );
    if ( tmp_cmp_In_135 == 1 )
    {
        goto condexpr_true_202;
    }
    else
    {
        goto condexpr_false_202;
    }
    condexpr_true_202:;
    tmp_dict_name_68 = tmp_class_creation_68__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_68 );
    tmp_key_name_68 = const_str_plain_metaclass;
    tmp_metaclass_name_68 = DICT_GET_ITEM( tmp_dict_name_68, tmp_key_name_68 );
    if ( tmp_metaclass_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_139;
    }
    goto condexpr_end_202;
    condexpr_false_202:;
    tmp_cond_value_68 = tmp_class_creation_68__bases;

    CHECK_OBJECT( tmp_cond_value_68 );
    tmp_cond_truth_68 = CHECK_IF_TRUE( tmp_cond_value_68 );
    if ( tmp_cond_truth_68 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_139;
    }
    if ( tmp_cond_truth_68 == 1 )
    {
        goto condexpr_true_203;
    }
    else
    {
        goto condexpr_false_203;
    }
    condexpr_true_203:;
    tmp_subscribed_name_68 = tmp_class_creation_68__bases;

    CHECK_OBJECT( tmp_subscribed_name_68 );
    tmp_subscript_name_68 = const_int_0;
    tmp_type_arg_68 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_68, tmp_subscript_name_68 );
    if ( tmp_type_arg_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_139;
    }
    tmp_metaclass_name_68 = BUILTIN_TYPE1( tmp_type_arg_68 );
    Py_DECREF( tmp_type_arg_68 );
    if ( tmp_metaclass_name_68 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_139;
    }
    goto condexpr_end_203;
    condexpr_false_203:;
    tmp_metaclass_name_68 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_68 );
    condexpr_end_203:;
    condexpr_end_202:;
    tmp_bases_name_68 = tmp_class_creation_68__bases;

    CHECK_OBJECT( tmp_bases_name_68 );
    tmp_assign_source_744 = SELECT_METACLASS( tmp_metaclass_name_68, tmp_bases_name_68 );
    if ( tmp_assign_source_744 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_68 );

        exception_lineno = 961;

        goto try_except_handler_139;
    }
    Py_DECREF( tmp_metaclass_name_68 );
    assert( tmp_class_creation_68__metaclass == NULL );
    tmp_class_creation_68__metaclass = tmp_assign_source_744;

    tmp_compare_left_137 = const_str_plain_metaclass;
    tmp_compare_right_137 = tmp_class_creation_68__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_137 );
    tmp_cmp_In_136 = PySequence_Contains( tmp_compare_right_137, tmp_compare_left_137 );
    assert( !(tmp_cmp_In_136 == -1) );
    if ( tmp_cmp_In_136 == 1 )
    {
        goto branch_yes_69;
    }
    else
    {
        goto branch_no_69;
    }
    branch_yes_69:;
    tmp_dictdel_dict = tmp_class_creation_68__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_139;
    }
    branch_no_69:;
    tmp_hasattr_source_68 = tmp_class_creation_68__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_68 );
    tmp_hasattr_attr_68 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_68, tmp_hasattr_attr_68 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_139;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_204;
    }
    else
    {
        goto condexpr_false_204;
    }
    condexpr_true_204:;
    tmp_source_name_89 = tmp_class_creation_68__metaclass;

    CHECK_OBJECT( tmp_source_name_89 );
    tmp_called_name_139 = LOOKUP_ATTRIBUTE( tmp_source_name_89, const_str_plain___prepare__ );
    if ( tmp_called_name_139 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_139;
    }
    tmp_args_name_135 = PyTuple_New( 2 );
    tmp_tuple_element_202 = const_str_plain_OverlayScope;
    Py_INCREF( tmp_tuple_element_202 );
    PyTuple_SET_ITEM( tmp_args_name_135, 0, tmp_tuple_element_202 );
    tmp_tuple_element_202 = tmp_class_creation_68__bases;

    CHECK_OBJECT( tmp_tuple_element_202 );
    Py_INCREF( tmp_tuple_element_202 );
    PyTuple_SET_ITEM( tmp_args_name_135, 1, tmp_tuple_element_202 );
    tmp_kw_name_135 = tmp_class_creation_68__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_135 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 961;
    tmp_assign_source_745 = CALL_FUNCTION( tmp_called_name_139, tmp_args_name_135, tmp_kw_name_135 );
    Py_DECREF( tmp_called_name_139 );
    Py_DECREF( tmp_args_name_135 );
    if ( tmp_assign_source_745 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_139;
    }
    goto condexpr_end_204;
    condexpr_false_204:;
    tmp_assign_source_745 = PyDict_New();
    condexpr_end_204:;
    assert( tmp_class_creation_68__prepared == NULL );
    tmp_class_creation_68__prepared = tmp_assign_source_745;

    tmp_set_locals = tmp_class_creation_68__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_68);
    locals_dict_68 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_747 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_67_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_747 );
    outline_67_var___module__ = tmp_assign_source_747;

    tmp_assign_source_748 = const_str_digest_23b07bf9c2508cc2c03f2b524e053e48;
    assert( outline_67_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_748 );
    outline_67_var___doc__ = tmp_assign_source_748;

    tmp_assign_source_749 = const_str_plain_OverlayScope;
    assert( outline_67_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_749 );
    outline_67_var___qualname__ = tmp_assign_source_749;

    tmp_assign_source_750 = const_tuple_str_plain_context_str_plain_body_tuple;
    assert( outline_67_var_fields == NULL );
    Py_INCREF( tmp_assign_source_750 );
    outline_67_var_fields = tmp_assign_source_750;

    // Tried code:
    tmp_called_name_140 = tmp_class_creation_68__metaclass;

    CHECK_OBJECT( tmp_called_name_140 );
    tmp_args_name_136 = PyTuple_New( 3 );
    tmp_tuple_element_203 = const_str_plain_OverlayScope;
    Py_INCREF( tmp_tuple_element_203 );
    PyTuple_SET_ITEM( tmp_args_name_136, 0, tmp_tuple_element_203 );
    tmp_tuple_element_203 = tmp_class_creation_68__bases;

    CHECK_OBJECT( tmp_tuple_element_203 );
    Py_INCREF( tmp_tuple_element_203 );
    PyTuple_SET_ITEM( tmp_args_name_136, 1, tmp_tuple_element_203 );
    tmp_tuple_element_203 = locals_dict_68;
    Py_INCREF( tmp_tuple_element_203 );
    if ( outline_67_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_203,
            const_str_plain___qualname__,
            outline_67_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_203,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_203,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_136 );
        Py_DECREF( tmp_tuple_element_203 );

        exception_lineno = 961;

        goto try_except_handler_140;
    }
    if ( outline_67_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_203,
            const_str_plain___module__,
            outline_67_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_203,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_203,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_136 );
        Py_DECREF( tmp_tuple_element_203 );

        exception_lineno = 961;

        goto try_except_handler_140;
    }
    if ( outline_67_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_203,
            const_str_plain___doc__,
            outline_67_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_203,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_203,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_136 );
        Py_DECREF( tmp_tuple_element_203 );

        exception_lineno = 961;

        goto try_except_handler_140;
    }
    if ( outline_67_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_203,
            const_str_plain_fields,
            outline_67_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_203,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_203,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_136 );
        Py_DECREF( tmp_tuple_element_203 );

        exception_lineno = 961;

        goto try_except_handler_140;
    }
    PyTuple_SET_ITEM( tmp_args_name_136, 2, tmp_tuple_element_203 );
    tmp_kw_name_136 = tmp_class_creation_68__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_136 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 961;
    tmp_assign_source_751 = CALL_FUNCTION( tmp_called_name_140, tmp_args_name_136, tmp_kw_name_136 );
    Py_DECREF( tmp_args_name_136 );
    if ( tmp_assign_source_751 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 961;

        goto try_except_handler_140;
    }
    assert( outline_67_var___class__ == NULL );
    outline_67_var___class__ = tmp_assign_source_751;

    tmp_outline_return_value_69 = outline_67_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_69 );
    Py_INCREF( tmp_outline_return_value_69 );
    goto try_return_handler_140;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_140:;
    CHECK_OBJECT( (PyObject *)outline_67_var___class__ );
    Py_DECREF( outline_67_var___class__ );
    outline_67_var___class__ = NULL;

    Py_XDECREF( outline_67_var___qualname__ );
    outline_67_var___qualname__ = NULL;

    Py_XDECREF( outline_67_var___module__ );
    outline_67_var___module__ = NULL;

    Py_XDECREF( outline_67_var___doc__ );
    outline_67_var___doc__ = NULL;

    Py_XDECREF( outline_67_var_fields );
    outline_67_var_fields = NULL;

    goto outline_result_69;
    // Exception handler code:
    try_except_handler_140:;
    exception_keeper_type_138 = exception_type;
    exception_keeper_value_138 = exception_value;
    exception_keeper_tb_138 = exception_tb;
    exception_keeper_lineno_138 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_67_var___qualname__ );
    outline_67_var___qualname__ = NULL;

    Py_XDECREF( outline_67_var___module__ );
    outline_67_var___module__ = NULL;

    Py_XDECREF( outline_67_var___doc__ );
    outline_67_var___doc__ = NULL;

    Py_XDECREF( outline_67_var_fields );
    outline_67_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_138;
    exception_value = exception_keeper_value_138;
    exception_tb = exception_keeper_tb_138;
    exception_lineno = exception_keeper_lineno_138;

    goto outline_exception_68;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_68:;
    exception_lineno = 961;
    goto try_except_handler_139;
    outline_result_69:;
    tmp_assign_source_746 = tmp_outline_return_value_69;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_OverlayScope, tmp_assign_source_746 );
    goto try_end_71;
    // Exception handler code:
    try_except_handler_139:;
    exception_keeper_type_139 = exception_type;
    exception_keeper_value_139 = exception_value;
    exception_keeper_tb_139 = exception_tb;
    exception_keeper_lineno_139 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_68__bases );
    tmp_class_creation_68__bases = NULL;

    Py_XDECREF( tmp_class_creation_68__class_decl_dict );
    tmp_class_creation_68__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_68__metaclass );
    tmp_class_creation_68__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_68__prepared );
    tmp_class_creation_68__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_139;
    exception_value = exception_keeper_value_139;
    exception_tb = exception_keeper_tb_139;
    exception_lineno = exception_keeper_lineno_139;

    goto frame_exception_exit_1;
    // End of try:
    try_end_71:;
    Py_XDECREF( tmp_class_creation_68__bases );
    tmp_class_creation_68__bases = NULL;

    Py_XDECREF( tmp_class_creation_68__class_decl_dict );
    tmp_class_creation_68__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_68__metaclass );
    tmp_class_creation_68__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_68__prepared );
    tmp_class_creation_68__prepared = NULL;

    // Tried code:
    tmp_assign_source_752 = PyTuple_New( 1 );
    tmp_tuple_element_204 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_Stmt );

    if (unlikely( tmp_tuple_element_204 == NULL ))
    {
        tmp_tuple_element_204 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Stmt );
    }

    if ( tmp_tuple_element_204 == NULL )
    {
        Py_DECREF( tmp_assign_source_752 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Stmt" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 977;

        goto try_except_handler_141;
    }

    Py_INCREF( tmp_tuple_element_204 );
    PyTuple_SET_ITEM( tmp_assign_source_752, 0, tmp_tuple_element_204 );
    assert( tmp_class_creation_69__bases == NULL );
    tmp_class_creation_69__bases = tmp_assign_source_752;

    tmp_assign_source_753 = PyDict_New();
    assert( tmp_class_creation_69__class_decl_dict == NULL );
    tmp_class_creation_69__class_decl_dict = tmp_assign_source_753;

    tmp_compare_left_138 = const_str_plain_metaclass;
    tmp_compare_right_138 = tmp_class_creation_69__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_138 );
    tmp_cmp_In_137 = PySequence_Contains( tmp_compare_right_138, tmp_compare_left_138 );
    assert( !(tmp_cmp_In_137 == -1) );
    if ( tmp_cmp_In_137 == 1 )
    {
        goto condexpr_true_205;
    }
    else
    {
        goto condexpr_false_205;
    }
    condexpr_true_205:;
    tmp_dict_name_69 = tmp_class_creation_69__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_69 );
    tmp_key_name_69 = const_str_plain_metaclass;
    tmp_metaclass_name_69 = DICT_GET_ITEM( tmp_dict_name_69, tmp_key_name_69 );
    if ( tmp_metaclass_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_141;
    }
    goto condexpr_end_205;
    condexpr_false_205:;
    tmp_cond_value_69 = tmp_class_creation_69__bases;

    CHECK_OBJECT( tmp_cond_value_69 );
    tmp_cond_truth_69 = CHECK_IF_TRUE( tmp_cond_value_69 );
    if ( tmp_cond_truth_69 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_141;
    }
    if ( tmp_cond_truth_69 == 1 )
    {
        goto condexpr_true_206;
    }
    else
    {
        goto condexpr_false_206;
    }
    condexpr_true_206:;
    tmp_subscribed_name_69 = tmp_class_creation_69__bases;

    CHECK_OBJECT( tmp_subscribed_name_69 );
    tmp_subscript_name_69 = const_int_0;
    tmp_type_arg_69 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_69, tmp_subscript_name_69 );
    if ( tmp_type_arg_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_141;
    }
    tmp_metaclass_name_69 = BUILTIN_TYPE1( tmp_type_arg_69 );
    Py_DECREF( tmp_type_arg_69 );
    if ( tmp_metaclass_name_69 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_141;
    }
    goto condexpr_end_206;
    condexpr_false_206:;
    tmp_metaclass_name_69 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_69 );
    condexpr_end_206:;
    condexpr_end_205:;
    tmp_bases_name_69 = tmp_class_creation_69__bases;

    CHECK_OBJECT( tmp_bases_name_69 );
    tmp_assign_source_754 = SELECT_METACLASS( tmp_metaclass_name_69, tmp_bases_name_69 );
    if ( tmp_assign_source_754 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_69 );

        exception_lineno = 977;

        goto try_except_handler_141;
    }
    Py_DECREF( tmp_metaclass_name_69 );
    assert( tmp_class_creation_69__metaclass == NULL );
    tmp_class_creation_69__metaclass = tmp_assign_source_754;

    tmp_compare_left_139 = const_str_plain_metaclass;
    tmp_compare_right_139 = tmp_class_creation_69__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_139 );
    tmp_cmp_In_138 = PySequence_Contains( tmp_compare_right_139, tmp_compare_left_139 );
    assert( !(tmp_cmp_In_138 == -1) );
    if ( tmp_cmp_In_138 == 1 )
    {
        goto branch_yes_70;
    }
    else
    {
        goto branch_no_70;
    }
    branch_yes_70:;
    tmp_dictdel_dict = tmp_class_creation_69__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_141;
    }
    branch_no_70:;
    tmp_hasattr_source_69 = tmp_class_creation_69__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_69 );
    tmp_hasattr_attr_69 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_69, tmp_hasattr_attr_69 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_141;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_207;
    }
    else
    {
        goto condexpr_false_207;
    }
    condexpr_true_207:;
    tmp_source_name_90 = tmp_class_creation_69__metaclass;

    CHECK_OBJECT( tmp_source_name_90 );
    tmp_called_name_141 = LOOKUP_ATTRIBUTE( tmp_source_name_90, const_str_plain___prepare__ );
    if ( tmp_called_name_141 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_141;
    }
    tmp_args_name_137 = PyTuple_New( 2 );
    tmp_tuple_element_205 = const_str_plain_EvalContextModifier;
    Py_INCREF( tmp_tuple_element_205 );
    PyTuple_SET_ITEM( tmp_args_name_137, 0, tmp_tuple_element_205 );
    tmp_tuple_element_205 = tmp_class_creation_69__bases;

    CHECK_OBJECT( tmp_tuple_element_205 );
    Py_INCREF( tmp_tuple_element_205 );
    PyTuple_SET_ITEM( tmp_args_name_137, 1, tmp_tuple_element_205 );
    tmp_kw_name_137 = tmp_class_creation_69__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_137 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 977;
    tmp_assign_source_755 = CALL_FUNCTION( tmp_called_name_141, tmp_args_name_137, tmp_kw_name_137 );
    Py_DECREF( tmp_called_name_141 );
    Py_DECREF( tmp_args_name_137 );
    if ( tmp_assign_source_755 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_141;
    }
    goto condexpr_end_207;
    condexpr_false_207:;
    tmp_assign_source_755 = PyDict_New();
    condexpr_end_207:;
    assert( tmp_class_creation_69__prepared == NULL );
    tmp_class_creation_69__prepared = tmp_assign_source_755;

    tmp_set_locals = tmp_class_creation_69__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_69);
    locals_dict_69 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_757 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_68_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_757 );
    outline_68_var___module__ = tmp_assign_source_757;

    tmp_assign_source_758 = const_str_digest_1807f11488188858b85bbff1207951d9;
    assert( outline_68_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_758 );
    outline_68_var___doc__ = tmp_assign_source_758;

    tmp_assign_source_759 = const_str_plain_EvalContextModifier;
    assert( outline_68_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_759 );
    outline_68_var___qualname__ = tmp_assign_source_759;

    tmp_assign_source_760 = const_tuple_str_plain_options_tuple;
    assert( outline_68_var_fields == NULL );
    Py_INCREF( tmp_assign_source_760 );
    outline_68_var_fields = tmp_assign_source_760;

    // Tried code:
    tmp_called_name_142 = tmp_class_creation_69__metaclass;

    CHECK_OBJECT( tmp_called_name_142 );
    tmp_args_name_138 = PyTuple_New( 3 );
    tmp_tuple_element_206 = const_str_plain_EvalContextModifier;
    Py_INCREF( tmp_tuple_element_206 );
    PyTuple_SET_ITEM( tmp_args_name_138, 0, tmp_tuple_element_206 );
    tmp_tuple_element_206 = tmp_class_creation_69__bases;

    CHECK_OBJECT( tmp_tuple_element_206 );
    Py_INCREF( tmp_tuple_element_206 );
    PyTuple_SET_ITEM( tmp_args_name_138, 1, tmp_tuple_element_206 );
    tmp_tuple_element_206 = locals_dict_69;
    Py_INCREF( tmp_tuple_element_206 );
    if ( outline_68_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_206,
            const_str_plain___qualname__,
            outline_68_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_206,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_206,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_138 );
        Py_DECREF( tmp_tuple_element_206 );

        exception_lineno = 977;

        goto try_except_handler_142;
    }
    if ( outline_68_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_206,
            const_str_plain___module__,
            outline_68_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_206,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_206,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_138 );
        Py_DECREF( tmp_tuple_element_206 );

        exception_lineno = 977;

        goto try_except_handler_142;
    }
    if ( outline_68_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_206,
            const_str_plain___doc__,
            outline_68_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_206,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_206,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_138 );
        Py_DECREF( tmp_tuple_element_206 );

        exception_lineno = 977;

        goto try_except_handler_142;
    }
    if ( outline_68_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_206,
            const_str_plain_fields,
            outline_68_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_206,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_206,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_138 );
        Py_DECREF( tmp_tuple_element_206 );

        exception_lineno = 977;

        goto try_except_handler_142;
    }
    PyTuple_SET_ITEM( tmp_args_name_138, 2, tmp_tuple_element_206 );
    tmp_kw_name_138 = tmp_class_creation_69__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_138 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 977;
    tmp_assign_source_761 = CALL_FUNCTION( tmp_called_name_142, tmp_args_name_138, tmp_kw_name_138 );
    Py_DECREF( tmp_args_name_138 );
    if ( tmp_assign_source_761 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 977;

        goto try_except_handler_142;
    }
    assert( outline_68_var___class__ == NULL );
    outline_68_var___class__ = tmp_assign_source_761;

    tmp_outline_return_value_70 = outline_68_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_70 );
    Py_INCREF( tmp_outline_return_value_70 );
    goto try_return_handler_142;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_142:;
    CHECK_OBJECT( (PyObject *)outline_68_var___class__ );
    Py_DECREF( outline_68_var___class__ );
    outline_68_var___class__ = NULL;

    Py_XDECREF( outline_68_var___qualname__ );
    outline_68_var___qualname__ = NULL;

    Py_XDECREF( outline_68_var___module__ );
    outline_68_var___module__ = NULL;

    Py_XDECREF( outline_68_var___doc__ );
    outline_68_var___doc__ = NULL;

    Py_XDECREF( outline_68_var_fields );
    outline_68_var_fields = NULL;

    goto outline_result_70;
    // Exception handler code:
    try_except_handler_142:;
    exception_keeper_type_140 = exception_type;
    exception_keeper_value_140 = exception_value;
    exception_keeper_tb_140 = exception_tb;
    exception_keeper_lineno_140 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_68_var___qualname__ );
    outline_68_var___qualname__ = NULL;

    Py_XDECREF( outline_68_var___module__ );
    outline_68_var___module__ = NULL;

    Py_XDECREF( outline_68_var___doc__ );
    outline_68_var___doc__ = NULL;

    Py_XDECREF( outline_68_var_fields );
    outline_68_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_140;
    exception_value = exception_keeper_value_140;
    exception_tb = exception_keeper_tb_140;
    exception_lineno = exception_keeper_lineno_140;

    goto outline_exception_69;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_69:;
    exception_lineno = 977;
    goto try_except_handler_141;
    outline_result_70:;
    tmp_assign_source_756 = tmp_outline_return_value_70;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_EvalContextModifier, tmp_assign_source_756 );
    goto try_end_72;
    // Exception handler code:
    try_except_handler_141:;
    exception_keeper_type_141 = exception_type;
    exception_keeper_value_141 = exception_value;
    exception_keeper_tb_141 = exception_tb;
    exception_keeper_lineno_141 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_69__bases );
    tmp_class_creation_69__bases = NULL;

    Py_XDECREF( tmp_class_creation_69__class_decl_dict );
    tmp_class_creation_69__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_69__metaclass );
    tmp_class_creation_69__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_69__prepared );
    tmp_class_creation_69__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_141;
    exception_value = exception_keeper_value_141;
    exception_tb = exception_keeper_tb_141;
    exception_lineno = exception_keeper_lineno_141;

    goto frame_exception_exit_1;
    // End of try:
    try_end_72:;
    Py_XDECREF( tmp_class_creation_69__bases );
    tmp_class_creation_69__bases = NULL;

    Py_XDECREF( tmp_class_creation_69__class_decl_dict );
    tmp_class_creation_69__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_69__metaclass );
    tmp_class_creation_69__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_69__prepared );
    tmp_class_creation_69__prepared = NULL;

    // Tried code:
    tmp_assign_source_762 = PyTuple_New( 1 );
    tmp_tuple_element_207 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_EvalContextModifier );

    if (unlikely( tmp_tuple_element_207 == NULL ))
    {
        tmp_tuple_element_207 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_EvalContextModifier );
    }

    if ( tmp_tuple_element_207 == NULL )
    {
        Py_DECREF( tmp_assign_source_762 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "EvalContextModifier" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 988;

        goto try_except_handler_143;
    }

    Py_INCREF( tmp_tuple_element_207 );
    PyTuple_SET_ITEM( tmp_assign_source_762, 0, tmp_tuple_element_207 );
    assert( tmp_class_creation_70__bases == NULL );
    tmp_class_creation_70__bases = tmp_assign_source_762;

    tmp_assign_source_763 = PyDict_New();
    assert( tmp_class_creation_70__class_decl_dict == NULL );
    tmp_class_creation_70__class_decl_dict = tmp_assign_source_763;

    tmp_compare_left_140 = const_str_plain_metaclass;
    tmp_compare_right_140 = tmp_class_creation_70__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_140 );
    tmp_cmp_In_139 = PySequence_Contains( tmp_compare_right_140, tmp_compare_left_140 );
    assert( !(tmp_cmp_In_139 == -1) );
    if ( tmp_cmp_In_139 == 1 )
    {
        goto condexpr_true_208;
    }
    else
    {
        goto condexpr_false_208;
    }
    condexpr_true_208:;
    tmp_dict_name_70 = tmp_class_creation_70__class_decl_dict;

    CHECK_OBJECT( tmp_dict_name_70 );
    tmp_key_name_70 = const_str_plain_metaclass;
    tmp_metaclass_name_70 = DICT_GET_ITEM( tmp_dict_name_70, tmp_key_name_70 );
    if ( tmp_metaclass_name_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_143;
    }
    goto condexpr_end_208;
    condexpr_false_208:;
    tmp_cond_value_70 = tmp_class_creation_70__bases;

    CHECK_OBJECT( tmp_cond_value_70 );
    tmp_cond_truth_70 = CHECK_IF_TRUE( tmp_cond_value_70 );
    if ( tmp_cond_truth_70 == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_143;
    }
    if ( tmp_cond_truth_70 == 1 )
    {
        goto condexpr_true_209;
    }
    else
    {
        goto condexpr_false_209;
    }
    condexpr_true_209:;
    tmp_subscribed_name_70 = tmp_class_creation_70__bases;

    CHECK_OBJECT( tmp_subscribed_name_70 );
    tmp_subscript_name_70 = const_int_0;
    tmp_type_arg_70 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_70, tmp_subscript_name_70 );
    if ( tmp_type_arg_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_143;
    }
    tmp_metaclass_name_70 = BUILTIN_TYPE1( tmp_type_arg_70 );
    Py_DECREF( tmp_type_arg_70 );
    if ( tmp_metaclass_name_70 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_143;
    }
    goto condexpr_end_209;
    condexpr_false_209:;
    tmp_metaclass_name_70 = (PyObject *)&PyType_Type;
    Py_INCREF( tmp_metaclass_name_70 );
    condexpr_end_209:;
    condexpr_end_208:;
    tmp_bases_name_70 = tmp_class_creation_70__bases;

    CHECK_OBJECT( tmp_bases_name_70 );
    tmp_assign_source_764 = SELECT_METACLASS( tmp_metaclass_name_70, tmp_bases_name_70 );
    if ( tmp_assign_source_764 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_metaclass_name_70 );

        exception_lineno = 988;

        goto try_except_handler_143;
    }
    Py_DECREF( tmp_metaclass_name_70 );
    assert( tmp_class_creation_70__metaclass == NULL );
    tmp_class_creation_70__metaclass = tmp_assign_source_764;

    tmp_compare_left_141 = const_str_plain_metaclass;
    tmp_compare_right_141 = tmp_class_creation_70__class_decl_dict;

    CHECK_OBJECT( tmp_compare_right_141 );
    tmp_cmp_In_140 = PySequence_Contains( tmp_compare_right_141, tmp_compare_left_141 );
    assert( !(tmp_cmp_In_140 == -1) );
    if ( tmp_cmp_In_140 == 1 )
    {
        goto branch_yes_71;
    }
    else
    {
        goto branch_no_71;
    }
    branch_yes_71:;
    tmp_dictdel_dict = tmp_class_creation_70__class_decl_dict;

    CHECK_OBJECT( tmp_dictdel_dict );
    tmp_dictdel_key = const_str_plain_metaclass;
    tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_143;
    }
    branch_no_71:;
    tmp_hasattr_source_70 = tmp_class_creation_70__metaclass;

    CHECK_OBJECT( tmp_hasattr_source_70 );
    tmp_hasattr_attr_70 = const_str_plain___prepare__;
    tmp_res = PyObject_HasAttr( tmp_hasattr_source_70, tmp_hasattr_attr_70 );
    if ( tmp_res == -1 )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_143;
    }
    if ( tmp_res == 1 )
    {
        goto condexpr_true_210;
    }
    else
    {
        goto condexpr_false_210;
    }
    condexpr_true_210:;
    tmp_source_name_91 = tmp_class_creation_70__metaclass;

    CHECK_OBJECT( tmp_source_name_91 );
    tmp_called_name_143 = LOOKUP_ATTRIBUTE( tmp_source_name_91, const_str_plain___prepare__ );
    if ( tmp_called_name_143 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_143;
    }
    tmp_args_name_139 = PyTuple_New( 2 );
    tmp_tuple_element_208 = const_str_plain_ScopedEvalContextModifier;
    Py_INCREF( tmp_tuple_element_208 );
    PyTuple_SET_ITEM( tmp_args_name_139, 0, tmp_tuple_element_208 );
    tmp_tuple_element_208 = tmp_class_creation_70__bases;

    CHECK_OBJECT( tmp_tuple_element_208 );
    Py_INCREF( tmp_tuple_element_208 );
    PyTuple_SET_ITEM( tmp_args_name_139, 1, tmp_tuple_element_208 );
    tmp_kw_name_139 = tmp_class_creation_70__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_139 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 988;
    tmp_assign_source_765 = CALL_FUNCTION( tmp_called_name_143, tmp_args_name_139, tmp_kw_name_139 );
    Py_DECREF( tmp_called_name_143 );
    Py_DECREF( tmp_args_name_139 );
    if ( tmp_assign_source_765 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_143;
    }
    goto condexpr_end_210;
    condexpr_false_210:;
    tmp_assign_source_765 = PyDict_New();
    condexpr_end_210:;
    assert( tmp_class_creation_70__prepared == NULL );
    tmp_class_creation_70__prepared = tmp_assign_source_765;

    tmp_set_locals = tmp_class_creation_70__prepared;

    CHECK_OBJECT( tmp_set_locals );
    Py_DECREF(locals_dict_70);
    locals_dict_70 = tmp_set_locals;
    Py_INCREF( tmp_set_locals );
    tmp_assign_source_767 = const_str_digest_005141ca847cd8ae4dc5440e26e0c367;
    assert( outline_69_var___module__ == NULL );
    Py_INCREF( tmp_assign_source_767 );
    outline_69_var___module__ = tmp_assign_source_767;

    tmp_assign_source_768 = const_str_digest_bf5875428d198777337f11f950de50d2;
    assert( outline_69_var___doc__ == NULL );
    Py_INCREF( tmp_assign_source_768 );
    outline_69_var___doc__ = tmp_assign_source_768;

    tmp_assign_source_769 = const_str_plain_ScopedEvalContextModifier;
    assert( outline_69_var___qualname__ == NULL );
    Py_INCREF( tmp_assign_source_769 );
    outline_69_var___qualname__ = tmp_assign_source_769;

    tmp_assign_source_770 = const_tuple_str_plain_body_tuple;
    assert( outline_69_var_fields == NULL );
    Py_INCREF( tmp_assign_source_770 );
    outline_69_var_fields = tmp_assign_source_770;

    // Tried code:
    tmp_called_name_144 = tmp_class_creation_70__metaclass;

    CHECK_OBJECT( tmp_called_name_144 );
    tmp_args_name_140 = PyTuple_New( 3 );
    tmp_tuple_element_209 = const_str_plain_ScopedEvalContextModifier;
    Py_INCREF( tmp_tuple_element_209 );
    PyTuple_SET_ITEM( tmp_args_name_140, 0, tmp_tuple_element_209 );
    tmp_tuple_element_209 = tmp_class_creation_70__bases;

    CHECK_OBJECT( tmp_tuple_element_209 );
    Py_INCREF( tmp_tuple_element_209 );
    PyTuple_SET_ITEM( tmp_args_name_140, 1, tmp_tuple_element_209 );
    tmp_tuple_element_209 = locals_dict_70;
    Py_INCREF( tmp_tuple_element_209 );
    if ( outline_69_var___qualname__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_209,
            const_str_plain___qualname__,
            outline_69_var___qualname__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_209,
            const_str_plain___qualname__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_209,
                const_str_plain___qualname__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_140 );
        Py_DECREF( tmp_tuple_element_209 );

        exception_lineno = 988;

        goto try_except_handler_144;
    }
    if ( outline_69_var___module__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_209,
            const_str_plain___module__,
            outline_69_var___module__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_209,
            const_str_plain___module__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_209,
                const_str_plain___module__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_140 );
        Py_DECREF( tmp_tuple_element_209 );

        exception_lineno = 988;

        goto try_except_handler_144;
    }
    if ( outline_69_var___doc__ != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_209,
            const_str_plain___doc__,
            outline_69_var___doc__
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_209,
            const_str_plain___doc__
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_209,
                const_str_plain___doc__
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_140 );
        Py_DECREF( tmp_tuple_element_209 );

        exception_lineno = 988;

        goto try_except_handler_144;
    }
    if ( outline_69_var_fields != NULL )
    {
        int res = PyObject_SetItem(
            tmp_tuple_element_209,
            const_str_plain_fields,
            outline_69_var_fields
        );

        tmp_result = res == 0;
    }
    else
    {
        PyObject *test_value = PyObject_GetItem(
            tmp_tuple_element_209,
            const_str_plain_fields
        );

        if ( test_value )
        {
            Py_DECREF( test_value );

            int res = PyObject_DelItem(
                tmp_tuple_element_209,
                const_str_plain_fields
            );

            tmp_result = res == 0;
        }
        else
        {
            CLEAR_ERROR_OCCURRED();
            tmp_result = true;
        }
    }

    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_args_name_140 );
        Py_DECREF( tmp_tuple_element_209 );

        exception_lineno = 988;

        goto try_except_handler_144;
    }
    PyTuple_SET_ITEM( tmp_args_name_140, 2, tmp_tuple_element_209 );
    tmp_kw_name_140 = tmp_class_creation_70__class_decl_dict;

    CHECK_OBJECT( tmp_kw_name_140 );
    frame_fb7531f558ad846443a9ac117976cb24->m_frame.f_lineno = 988;
    tmp_assign_source_771 = CALL_FUNCTION( tmp_called_name_144, tmp_args_name_140, tmp_kw_name_140 );
    Py_DECREF( tmp_args_name_140 );
    if ( tmp_assign_source_771 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 988;

        goto try_except_handler_144;
    }
    assert( outline_69_var___class__ == NULL );
    outline_69_var___class__ = tmp_assign_source_771;

    tmp_outline_return_value_71 = outline_69_var___class__;

    CHECK_OBJECT( tmp_outline_return_value_71 );
    Py_INCREF( tmp_outline_return_value_71 );
    goto try_return_handler_144;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    // Return handler code:
    try_return_handler_144:;
    CHECK_OBJECT( (PyObject *)outline_69_var___class__ );
    Py_DECREF( outline_69_var___class__ );
    outline_69_var___class__ = NULL;

    Py_XDECREF( outline_69_var___qualname__ );
    outline_69_var___qualname__ = NULL;

    Py_XDECREF( outline_69_var___module__ );
    outline_69_var___module__ = NULL;

    Py_XDECREF( outline_69_var___doc__ );
    outline_69_var___doc__ = NULL;

    Py_XDECREF( outline_69_var_fields );
    outline_69_var_fields = NULL;

    goto outline_result_71;
    // Exception handler code:
    try_except_handler_144:;
    exception_keeper_type_142 = exception_type;
    exception_keeper_value_142 = exception_value;
    exception_keeper_tb_142 = exception_tb;
    exception_keeper_lineno_142 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( outline_69_var___qualname__ );
    outline_69_var___qualname__ = NULL;

    Py_XDECREF( outline_69_var___module__ );
    outline_69_var___module__ = NULL;

    Py_XDECREF( outline_69_var___doc__ );
    outline_69_var___doc__ = NULL;

    Py_XDECREF( outline_69_var_fields );
    outline_69_var_fields = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_142;
    exception_value = exception_keeper_value_142;
    exception_tb = exception_keeper_tb_142;
    exception_lineno = exception_keeper_lineno_142;

    goto outline_exception_70;
    // End of try:
    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( jinja2$nodes );
    return MOD_RETURN_VALUE( NULL );
    outline_exception_70:;
    exception_lineno = 988;
    goto try_except_handler_143;
    outline_result_71:;
    tmp_assign_source_766 = tmp_outline_return_value_71;
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_ScopedEvalContextModifier, tmp_assign_source_766 );
    goto try_end_73;
    // Exception handler code:
    try_except_handler_143:;
    exception_keeper_type_143 = exception_type;
    exception_keeper_value_143 = exception_value;
    exception_keeper_tb_143 = exception_tb;
    exception_keeper_lineno_143 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_70__bases );
    tmp_class_creation_70__bases = NULL;

    Py_XDECREF( tmp_class_creation_70__class_decl_dict );
    tmp_class_creation_70__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_70__metaclass );
    tmp_class_creation_70__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_70__prepared );
    tmp_class_creation_70__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_143;
    exception_value = exception_keeper_value_143;
    exception_tb = exception_keeper_tb_143;
    exception_lineno = exception_keeper_lineno_143;

    goto frame_exception_exit_1;
    // End of try:
    try_end_73:;
    Py_XDECREF( tmp_class_creation_70__bases );
    tmp_class_creation_70__bases = NULL;

    Py_XDECREF( tmp_class_creation_70__class_decl_dict );
    tmp_class_creation_70__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_70__metaclass );
    tmp_class_creation_70__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_70__prepared );
    tmp_class_creation_70__prepared = NULL;

    tmp_assign_source_772 = MAKE_FUNCTION_jinja2$nodes$$$function_51__failing_new(  );
    UPDATE_STRING_DICT1( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__failing_new, tmp_assign_source_772 );
    tmp_staticmethod_arg_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain__failing_new );

    if (unlikely( tmp_staticmethod_arg_2 == NULL ))
    {
        tmp_staticmethod_arg_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__failing_new );
    }

    if ( tmp_staticmethod_arg_2 == NULL )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_failing_new" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 999;

        goto frame_exception_exit_1;
    }

    tmp_assattr_name_2 = BUILTIN_STATICMETHOD( tmp_staticmethod_arg_2 );
    if ( tmp_assattr_name_2 == NULL )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 999;

        goto frame_exception_exit_1;
    }
    tmp_assattr_target_2 = GET_STRING_DICT_VALUE( moduledict_jinja2$nodes, (Nuitka_StringObject *)const_str_plain_NodeType );

    if (unlikely( tmp_assattr_target_2 == NULL ))
    {
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_NodeType );
    }

    if ( tmp_assattr_target_2 == NULL )
    {
        Py_DECREF( tmp_assattr_name_2 );
        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "NodeType" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 999;

        goto frame_exception_exit_1;
    }

    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain___new__, tmp_assattr_name_2 );
    if ( tmp_result == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
        Py_DECREF( tmp_assattr_name_2 );

        exception_lineno = 999;

        goto frame_exception_exit_1;
    }
    Py_DECREF( tmp_assattr_name_2 );
    tmp_res = PyDict_DelItem( (PyObject *)moduledict_jinja2$nodes, const_str_plain__failing_new );
    if ( tmp_res == -1 ) CLEAR_ERROR_OCCURRED();

    if ( tmp_res == -1 )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_failing_new" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 999;

        goto frame_exception_exit_1;
    }


    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fb7531f558ad846443a9ac117976cb24 );
#endif
    popFrameStack();

    assertFrameObject( frame_fb7531f558ad846443a9ac117976cb24 );

    goto frame_no_exception_3;
    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fb7531f558ad846443a9ac117976cb24 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fb7531f558ad846443a9ac117976cb24, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fb7531f558ad846443a9ac117976cb24->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fb7531f558ad846443a9ac117976cb24, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;
    frame_no_exception_3:;

    return MOD_RETURN_VALUE( module_jinja2$nodes );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
